
STM32WB55_BLE_Custom_Humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afb4  0800afb4  0001afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800afc0  0800afc0  0001afc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000008  0800afc4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000034  0800aff0  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000006c  0800b025  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000080  0800b036  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200004cc  0800b036  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800b036  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   00033a39  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006628  00000000  00000000  00054513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002f88  00000000  00000000  0005ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002499  00000000  00000000  0005dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e088  00000000  00000000  0005ff61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00033d85  00000000  00000000  0008dfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010fec3  00000000  00000000  000c1d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000cb30  00000000  00000000  001d1c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000a5  00000000  00000000  001de764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ace0 	.word	0x0800ace0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800ace0 	.word	0x0800ace0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2uiz>:
 800092c:	004a      	lsls	r2, r1, #1
 800092e:	d211      	bcs.n	8000954 <__aeabi_d2uiz+0x28>
 8000930:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000934:	d211      	bcs.n	800095a <__aeabi_d2uiz+0x2e>
 8000936:	d50d      	bpl.n	8000954 <__aeabi_d2uiz+0x28>
 8000938:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800093c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000940:	d40e      	bmi.n	8000960 <__aeabi_d2uiz+0x34>
 8000942:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800094a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800094e:	fa23 f002 	lsr.w	r0, r3, r2
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800095e:	d102      	bne.n	8000966 <__aeabi_d2uiz+0x3a>
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	4770      	bx	lr
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	4770      	bx	lr

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b970 	b.w	8000c64 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	460d      	mov	r5, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	460f      	mov	r7, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14a      	bne.n	8000a42 <__udivmoddi4+0xa6>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4694      	mov	ip, r2
 80009b0:	d965      	bls.n	8000a7e <__udivmoddi4+0xe2>
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	b143      	cbz	r3, 80009ca <__udivmoddi4+0x2e>
 80009b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009bc:	f1c3 0220 	rsb	r2, r3, #32
 80009c0:	409f      	lsls	r7, r3
 80009c2:	fa20 f202 	lsr.w	r2, r0, r2
 80009c6:	4317      	orrs	r7, r2
 80009c8:	409c      	lsls	r4, r3
 80009ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ce:	fa1f f58c 	uxth.w	r5, ip
 80009d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009d6:	0c22      	lsrs	r2, r4, #16
 80009d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009e0:	fb01 f005 	mul.w	r0, r1, r5
 80009e4:	4290      	cmp	r0, r2
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x62>
 80009e8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ec:	f101 37ff 	add.w	r7, r1, #4294967295
 80009f0:	f080 811c 	bcs.w	8000c2c <__udivmoddi4+0x290>
 80009f4:	4290      	cmp	r0, r2
 80009f6:	f240 8119 	bls.w	8000c2c <__udivmoddi4+0x290>
 80009fa:	3902      	subs	r1, #2
 80009fc:	4462      	add	r2, ip
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	b2a4      	uxth	r4, r4
 8000a02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a0e:	fb00 f505 	mul.w	r5, r0, r5
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	d90a      	bls.n	8000a2c <__udivmoddi4+0x90>
 8000a16:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a1e:	f080 8107 	bcs.w	8000c30 <__udivmoddi4+0x294>
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	f240 8104 	bls.w	8000c30 <__udivmoddi4+0x294>
 8000a28:	4464      	add	r4, ip
 8000a2a:	3802      	subs	r0, #2
 8000a2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11e      	cbz	r6, 8000a3e <__udivmoddi4+0xa2>
 8000a36:	40dc      	lsrs	r4, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0xbc>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	f000 80ed 	beq.w	8000c26 <__udivmoddi4+0x28a>
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a52:	4608      	mov	r0, r1
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a58:	fab3 f183 	clz	r1, r3
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d149      	bne.n	8000af4 <__udivmoddi4+0x158>
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	d302      	bcc.n	8000a6a <__udivmoddi4+0xce>
 8000a64:	4282      	cmp	r2, r0
 8000a66:	f200 80f8 	bhi.w	8000c5a <__udivmoddi4+0x2be>
 8000a6a:	1a84      	subs	r4, r0, r2
 8000a6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	4617      	mov	r7, r2
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d0e2      	beq.n	8000a3e <__udivmoddi4+0xa2>
 8000a78:	e9c6 4700 	strd	r4, r7, [r6]
 8000a7c:	e7df      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a7e:	b902      	cbnz	r2, 8000a82 <__udivmoddi4+0xe6>
 8000a80:	deff      	udf	#255	; 0xff
 8000a82:	fab2 f382 	clz	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8090 	bne.w	8000bac <__udivmoddi4+0x210>
 8000a8c:	1a8a      	subs	r2, r1, r2
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2101      	movs	r1, #1
 8000a98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000aa0:	0c22      	lsrs	r2, r4, #16
 8000aa2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aa6:	fb0e f005 	mul.w	r0, lr, r5
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x124>
 8000aae:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x122>
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2b8>
 8000abe:	4645      	mov	r5, r8
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ac8:	fb07 2210 	mls	r2, r7, r0, r2
 8000acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x14e>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x14c>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2c2>
 8000ae8:	4610      	mov	r0, r2
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000af2:	e79f      	b.n	8000a34 <__udivmoddi4+0x98>
 8000af4:	f1c1 0720 	rsb	r7, r1, #32
 8000af8:	408b      	lsls	r3, r1
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa05 f401 	lsl.w	r4, r5, r1
 8000b06:	fa20 f307 	lsr.w	r3, r0, r7
 8000b0a:	40fd      	lsrs	r5, r7
 8000b0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b10:	4323      	orrs	r3, r4
 8000b12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b16:	fa1f fe8c 	uxth.w	lr, ip
 8000b1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b1e:	0c1c      	lsrs	r4, r3, #16
 8000b20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b24:	fb08 f50e 	mul.w	r5, r8, lr
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b0>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2b4>
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2b4>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4464      	add	r4, ip
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	b29d      	uxth	r5, r3
 8000b50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b54:	fb09 4413 	mls	r4, r9, r3, r4
 8000b58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1da>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2ac>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2ac>
 8000b72:	3b02      	subs	r3, #2
 8000b74:	4464      	add	r4, ip
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	42ac      	cmp	r4, r5
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46ae      	mov	lr, r5
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x29c>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x298>
 8000b8c:	b156      	cbz	r6, 8000ba4 <__udivmoddi4+0x208>
 8000b8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b92:	eb64 040e 	sbc.w	r4, r4, lr
 8000b96:	fa04 f707 	lsl.w	r7, r4, r7
 8000b9a:	40ca      	lsrs	r2, r1
 8000b9c:	40cc      	lsrs	r4, r1
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	f1c3 0120 	rsb	r1, r3, #32
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000bb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bbc:	409d      	lsls	r5, r3
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x258>
 8000be2:	eb1c 0101 	adds.w	r1, ip, r1
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1b49      	subs	r1, r1, r5
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000c00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c04:	fb05 f10e 	mul.w	r1, r5, lr
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x282>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2a8>
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2a8>
 8000c1a:	3d02      	subs	r5, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a52      	subs	r2, r2, r1
 8000c20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0xfc>
 8000c26:	4631      	mov	r1, r6
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e708      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e6e6      	b.n	80009fe <__udivmoddi4+0x62>
 8000c30:	4610      	mov	r0, r2
 8000c32:	e6fb      	b.n	8000a2c <__udivmoddi4+0x90>
 8000c34:	4548      	cmp	r0, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f0>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c40:	3b01      	subs	r3, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f0>
 8000c44:	4645      	mov	r5, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x282>
 8000c48:	462b      	mov	r3, r5
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1da>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x258>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b0>
 8000c54:	3d02      	subs	r5, #2
 8000c56:	4462      	add	r2, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x124>
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e70a      	b.n	8000a74 <__udivmoddi4+0xd8>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x14e>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <APPD_EnableCPU2+0x34>)
 8000c70:	1d3c      	adds	r4, r7, #4
 8000c72:	461d      	mov	r5, r3
 8000c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7c:	c403      	stmia	r4!, {r0, r1}
 8000c7e:	8022      	strh	r2, [r4, #0]
 8000c80:	3402      	adds	r4, #2
 8000c82:	0c13      	lsrs	r3, r2, #16
 8000c84:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000c86:	f008 fdbd 	bl	8009804 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f008 f84e 	bl	8008d2e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000c92:	bf00      	nop
}
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bdb0      	pop	{r4, r5, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	0800acf8 	.word	0x0800acf8

08000ca0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cae:	f023 0207 	bic.w	r2, r3, #7
 8000cb2:	4905      	ldr	r1, [pc, #20]	; (8000cc8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	58000400 	.word	0x58000400

08000ccc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000cd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000cda:	4905      	ldr	r1, [pc, #20]	; (8000cf0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	58000800 	.word	0x58000800

08000cf4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000d02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d0e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	cafecafe 	.word	0xcafecafe

08000d30 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	608b      	str	r3, [r1, #8]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000db0:	d101      	bne.n	8000db6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dd6:	d101      	bne.n	8000ddc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <LL_DBGMCU_GetDeviceID+0x18>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e0042000 	.word	0xe0042000

08000e38 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	b29b      	uxth	r3, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e0042000 	.word	0xe0042000

08000e54 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	605a      	str	r2, [r3, #4]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	615a      	str	r2, [r3, #20]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695a      	ldr	r2, [r3, #20]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	615a      	str	r2, [r3, #20]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	609a      	str	r2, [r3, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	619a      	str	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	22ff      	movs	r2, #255	; 0xff
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	22ca      	movs	r2, #202	; 0xca
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2253      	movs	r2, #83	; 0x53
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f023 0207 	bic.w	r2, r3, #7
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <MX_APPE_Config+0x18>)
 8000f7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f82:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000f84:	f000 f824 	bl	8000fd0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000f88:	f000 f864 	bl	8001054 <Config_HSE>

  return;
 8000f8c:	bf00      	nop
}
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58004000 	.word	0x58004000

08000f94 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000f98:	f000 f870 	bl	800107c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000f9c:	f000 f888 	bl	80010b0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000fa0:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <MX_APPE_Init+0x1c>)
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fed8 	bl	8001d58 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000fa8:	f000 f890 	bl	80010cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000fac:	bf00      	nop
}
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000204 	.word	0x20000204

08000fb4 <Init_Smps>:

void Init_Smps(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000fb8:	bf00      	nop
}
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <Init_Exti>:

void Init_Exti(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000fc6:	2050      	movs	r0, #80	; 0x50
 8000fc8:	f7ff fe80 	bl	8000ccc <LL_EXTI_EnableIT_32_63>

  return;
 8000fcc:	bf00      	nop
}
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000fd4:	f000 f804 	bl	8000fe0 <Reset_BackupDomain>

  Reset_IPCC();
 8000fd8:	f000 f81a 	bl	8001010 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000fdc:	bf00      	nop
}
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000fe4:	f7ff feda 	bl	8000d9c <LL_RCC_IsActiveFlag_PINRST>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00d      	beq.n	800100a <Reset_BackupDomain+0x2a>
 8000fee:	f7ff fee8 	bl	8000dc2 <LL_RCC_IsActiveFlag_SFTRST>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d108      	bne.n	800100a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000ff8:	f003 fc8e 	bl	8004918 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ffc:	f003 fc8c 	bl	8004918 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001000:	f7ff feaa 	bl	8000d58 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001004:	f7ff feb9 	bl	8000d7a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001008:	bf00      	nop
 800100a:	bf00      	nop
}
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001014:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001018:	f7ff fee6 	bl	8000de8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800101c:	213f      	movs	r1, #63	; 0x3f
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <Reset_IPCC+0x40>)
 8001020:	f7ff ff5e 	bl	8000ee0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001024:	213f      	movs	r1, #63	; 0x3f
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <Reset_IPCC+0x40>)
 8001028:	f7ff ff68 	bl	8000efc <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800102c:	213f      	movs	r1, #63	; 0x3f
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <Reset_IPCC+0x40>)
 8001030:	f7ff ff10 	bl	8000e54 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001034:	213f      	movs	r1, #63	; 0x3f
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <Reset_IPCC+0x40>)
 8001038:	f7ff ff2f 	bl	8000e9a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800103c:	213f      	movs	r1, #63	; 0x3f
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <Reset_IPCC+0x40>)
 8001040:	f7ff ff1a 	bl	8000e78 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001044:	213f      	movs	r1, #63	; 0x3f
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <Reset_IPCC+0x40>)
 8001048:	f7ff ff39 	bl	8000ebe <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800104c:	bf00      	nop
}
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58000c00 	.word	0x58000c00

08001054 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800105a:	2000      	movs	r0, #0
 800105c:	f008 fc5e 	bl	800991c <OTP_Read>
 8001060:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	799b      	ldrb	r3, [r3, #6]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe41 	bl	8000cf4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001072:	bf00      	nop
 8001074:	bf00      	nop
}
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <System_Init>:

static void System_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001080:	f7ff ff98 	bl	8000fb4 <Init_Smps>

  Init_Exti();
 8001084:	f7ff ff9d 	bl	8000fc2 <Init_Exti>

  Init_Rtc();
 8001088:	f000 f802 	bl	8001090 <Init_Rtc>

  return;
 800108c:	bf00      	nop
}
 800108e:	bd80      	pop	{r7, pc}

08001090 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <Init_Rtc+0x1c>)
 8001096:	f7ff ff4c 	bl	8000f32 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800109a:	2100      	movs	r1, #0
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <Init_Rtc+0x1c>)
 800109e:	f7ff ff58 	bl	8000f52 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <Init_Rtc+0x1c>)
 80010a4:	f7ff ff38 	bl	8000f18 <LL_RTC_EnableWriteProtection>

  return;
 80010a8:	bf00      	nop
}
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40002800 	.word	0x40002800

080010b0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80010b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010b8:	f7ff fe3a 	bl	8000d30 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80010bc:	f009 fb56 	bl	800a76c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80010c0:	2004      	movs	r0, #4
 80010c2:	f7ff fded 	bl	8000ca0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80010c6:	bf00      	nop
}
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80010d2:	f008 f9e1 	bl	8009498 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <appe_Tl_Init+0x50>)
 80010d8:	2100      	movs	r1, #0
 80010da:	2008      	movs	r0, #8
 80010dc:	f009 fc84 	bl	800a9e8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <appe_Tl_Init+0x54>)
 80010e2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <appe_Tl_Init+0x58>)
 80010e6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <appe_Tl_Init+0x5c>)
 80010ee:	f008 f895 	bl	800921c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <appe_Tl_Init+0x60>)
 80010f4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <appe_Tl_Init+0x64>)
 80010f8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <appe_Tl_Init+0x68>)
 80010fc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80010fe:	f240 533c 	movw	r3, #1340	; 0x53c
 8001102:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f008 fb07 	bl	800971c <TL_MM_Init>

  TL_Enable();
 800110e:	f008 f9bd 	bl	800948c <TL_Enable>

  return;
 8001112:	bf00      	nop
}
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	08009255 	.word	0x08009255
 8001120:	20030734 	.word	0x20030734
 8001124:	08001139 	.word	0x08001139
 8001128:	08001151 	.word	0x08001151
 800112c:	2003094c 	.word	0x2003094c
 8001130:	20030840 	.word	0x20030840
 8001134:	200301f8 	.word	0x200301f8

08001138 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001142:	bf00      	nop
}
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	330b      	adds	r3, #11
 800115e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800116a:	2b07      	cmp	r3, #7
 800116c:	d81f      	bhi.n	80011ae <APPE_SysUserEvtRx+0x5e>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <APPE_SysUserEvtRx+0x24>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001195 	.word	0x08001195
 8001178:	080011a7 	.word	0x080011a7
 800117c:	080011af 	.word	0x080011af
 8001180:	080011af 	.word	0x080011af
 8001184:	080011af 	.word	0x080011af
 8001188:	080011af 	.word	0x080011af
 800118c:	080011af 	.word	0x080011af
 8001190:	080011af 	.word	0x080011af
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4618      	mov	r0, r3
 800119a:	f007 fdf5 	bl	8008d88 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f81b 	bl	80011da <APPE_SysEvtReadyProcessing>
    break;
 80011a4:	e004      	b.n	80011b0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f806 	bl	80011b8 <APPE_SysEvtError>
    break;
 80011ac:	e000      	b.n	80011b0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80011ae:	bf00      	nop
  }

  return;
 80011b0:	bf00      	nop
}
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	330b      	adds	r3, #11
 80011c6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3302      	adds	r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80011ce:	bf00      	nop
}
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b08a      	sub	sp, #40	; 0x28
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	330b      	adds	r3, #11
 80011fe:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	3302      	adds	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d11d      	bne.n	800124a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800120e:	f7ff fd2b 	bl	8000c68 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001212:	230f      	movs	r3, #15
 8001214:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001216:	237f      	movs	r3, #127	; 0x7f
 8001218:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800121a:	f7ff fe0d 	bl	8000e38 <LL_DBGMCU_GetRevisionID>
 800121e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	b29b      	uxth	r3, r3
 8001224:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001226:	f7ff fdf9 	bl	8000e1c <LL_DBGMCU_GetDeviceID>
 800122a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	b29b      	uxth	r3, r3
 8001230:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f007 fd90 	bl	8008d5c <SHCI_C2_Config>

    APP_BLE_Init();
 800123c:	f008 fc78 	bl	8009b30 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001240:	2100      	movs	r1, #0
 8001242:	2001      	movs	r0, #1
 8001244:	f009 faa4 	bl	800a790 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001248:	e007      	b.n	800125a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d103      	bne.n	800125a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
  return;
 8001258:	bf00      	nop
 800125a:	bf00      	nop
}
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	f009 fac1 	bl	800a7f0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}

08001272 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001276:	bf00      	nop
}
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	f009 faaf 	bl	800a7f0 <UTIL_SEQ_Run>
  return;
 8001292:	bf00      	nop
}
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2008      	movs	r0, #8
 80012a6:	f009 fbc1 	bl	800aa2c <UTIL_SEQ_SetTask>
  return;
 80012aa:	bf00      	nop
}
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f009 fc22 	bl	800ab04 <UTIL_SEQ_SetEvt>
  return;
 80012c0:	bf00      	nop
}
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f009 fc37 	bl	800ab44 <UTIL_SEQ_WaitEvt>
  return;
 80012d6:	bf00      	nop
}
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <averageMeasurement>:


/*function definitions */

/* Calculate rolling average based on sRingBuffer myBuffer*/
uint16_t averageMeasurement(){
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0

	uint16_t filteredMeasurement = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	80fb      	strh	r3, [r7, #6]
	uint8_t n = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]
	uint32_t sumOfMeasurements = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	//sum up measurements for average calculation
    for (n = 0; n < myBuffer.numberOfValidElements; ++n){
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e00b      	b.n	8001310 <averageMeasurement+0x30>
		sumOfMeasurements += myBuffer.buf[n];
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <averageMeasurement+0x60>)
 80012fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001300:	b29b      	uxth	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4413      	add	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
    for (n = 0; n < myBuffer.numberOfValidElements; ++n){
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <averageMeasurement+0x60>)
 8001312:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001316:	b2db      	uxtb	r3, r3
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	429a      	cmp	r2, r3
 800131c:	d3ec      	bcc.n	80012f8 <averageMeasurement+0x18>
	}

	//calculate moving average to filter measurement. Decimals are cut off
	filteredMeasurement = sumOfMeasurements / myBuffer.numberOfValidElements;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <averageMeasurement+0x60>)
 8001320:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	fbb3 f3f2 	udiv	r3, r3, r2
 800132e:	80fb      	strh	r3, [r7, #6]

	return filteredMeasurement;
 8001330:	88fb      	ldrh	r3, [r7, #6]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200000a0 	.word	0x200000a0
 8001344:	00000000 	.word	0x00000000

08001348 <normalizeHumidity>:

/*Conversion of absolute humidity values to percentage*/
uint8_t normalizeHumidity(uint16_t measurement){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	double relativeHumidity = 0.0;
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// calculate relateiveHumidity based on sensor calibration values for water
	// (SENSOR_MIN) and air (SENSOR_MAX) environment. Decimals are cut off

	relativeHumidity = (((double)(SENSOR_MAX - measurement) / (SENSOR_MAX - SENSOR_MIN)))*100;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001364:	330f      	adds	r3, #15
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f854 	bl	8000414 <__aeabi_ui2d>
 800136c:	a30f      	add	r3, pc, #60	; (adr r3, 80013ac <normalizeHumidity+0x64>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f9f3 	bl	800075c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <normalizeHumidity+0x60>)
 8001384:	f7ff f8c0 	bl	8000508 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return relativeHumidity;
 8001390:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001394:	f7ff faca 	bl	800092c <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	b2db      	uxtb	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	40590000 	.word	0x40590000
 80013ac:	00000000 	.word	0x00000000
 80013b0:	409c0c00 	.word	0x409c0c00

080013b4 <getHumidity>:

/* provide humidity as percentage based on n=BUFFERSIZE last measurements.
 * 0% equals air, 100% equals water.
 * Rolling arithmetic mean is calculated and outlier measurement values are
 * limited via floor/ceiling function. */
uint8_t getHumidity(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

	filterHumidity();
 80013b8:	f000 f836 	bl	8001428 <filterHumidity>

	filteredNormalizedHumidity = normalizeHumidity(averageMeasurement());
 80013bc:	f7ff ff90 	bl	80012e0 <averageMeasurement>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffc0 	bl	8001348 <normalizeHumidity>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <getHumidity+0x24>)
 80013ce:	701a      	strb	r2, [r3, #0]
	return filteredNormalizedHumidity;
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <getHumidity+0x24>)
 80013d2:	781b      	ldrb	r3, [r3, #0]

}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000009c 	.word	0x2000009c

080013dc <initBuffer>:
/*Initialization of ringbuffer to store adc measurements*/
void initBuffer(void){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0

	for (uint8_t n = 0; n<BUFFERSIZE;++n){
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e007      	b.n	80013f8 <initBuffer+0x1c>
		myBuffer.buf[n] = 0;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <initBuffer+0x48>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t n = 0; n<BUFFERSIZE;++n){
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	3301      	adds	r3, #1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	d9f4      	bls.n	80013e8 <initBuffer+0xc>
	}

	myBuffer.size = BUFFERSIZE;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <initBuffer+0x48>)
 8001400:	2210      	movs	r2, #16
 8001402:	f883 2020 	strb.w	r2, [r3, #32]
	myBuffer.write = 0;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <initBuffer+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	myBuffer.numberOfValidElements = 0;
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <initBuffer+0x48>)
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200000a0 	.word	0x200000a0

08001428 <filterHumidity>:

/*Limiting ADC values to SENSOR_MAX and SENSOR_MIN boundaries*/
void filterHumidity(void){
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0

	for(uint8_t n = 0; n < BUFFERSIZE;++n){
 800142e:	2300      	movs	r3, #0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e02b      	b.n	800148c <filterHumidity+0x64>
		myBuffer.buf[n] = MAX(SENSOR_MIN,myBuffer.buf[n]);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <filterHumidity+0x78>)
 8001438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800143c:	b29b      	uxth	r3, r3
 800143e:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001442:	4293      	cmp	r3, r2
 8001444:	d905      	bls.n	8001452 <filterHumidity+0x2a>
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <filterHumidity+0x78>)
 800144a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144e:	b29a      	uxth	r2, r3
 8001450:	e001      	b.n	8001456 <filterHumidity+0x2e>
 8001452:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4911      	ldr	r1, [pc, #68]	; (80014a0 <filterHumidity+0x78>)
 800145a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		myBuffer.buf[n] = MIN(SENSOR_MAX,myBuffer.buf[n]);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <filterHumidity+0x78>)
 8001462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001466:	b29b      	uxth	r3, r3
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d205      	bcs.n	800147a <filterHumidity+0x52>
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <filterHumidity+0x78>)
 8001472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001476:	b29a      	uxth	r2, r3
 8001478:	e001      	b.n	800147e <filterHumidity+0x56>
 800147a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <filterHumidity+0x78>)
 8001482:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t n = 0; n < BUFFERSIZE;++n){
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3301      	adds	r3, #1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	d9d0      	bls.n	8001434 <filterHumidity+0xc>
	}

}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	200000a0 	.word	0x200000a0

080014a4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC conversion data */

	myBuffer.buf[myBuffer.write] = HAL_ADC_GetValue(hadc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 f804 	bl	80034ba <HAL_ADC_GetValue>
 80014b2:	4601      	mov	r1, r0
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	b289      	uxth	r1, r1
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//check if myBuffer.wirte is within valid array boundaries
	if (myBuffer.write < myBuffer.size - 1){
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3b01      	subs	r3, #1
 80014da:	429a      	cmp	r2, r3
 80014dc:	da1e      	bge.n	800151c <HAL_ADC_ConvCpltCallback+0x78>
		++myBuffer.write;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		//increase myBuffer.numberOfValidElements only if BUFFERSIZE has not been reached
		myBuffer.numberOfValidElements = myBuffer.numberOfValidElements >= BUFFERSIZE ? BUFFERSIZE : ++myBuffer.numberOfValidElements;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_ADC_ConvCpltCallback+0x6e>
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 80014fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 800150a:	4619      	mov	r1, r3
 800150c:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 8001510:	e000      	b.n	8001514 <HAL_ADC_ConvCpltCallback+0x70>
 8001512:	2310      	movs	r3, #16
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 8001516:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	}
	else{
		myBuffer.write = 0;
	}

}
 800151a:	e003      	b.n	8001524 <HAL_ADC_ConvCpltCallback+0x80>
		myBuffer.write = 0;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_ADC_ConvCpltCallback+0x88>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000a0 	.word	0x200000a0

08001530 <LL_EXTI_EnableIT_0_31>:
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LL_EXTI_EnableIT_0_31+0x24>)
 800153a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <LL_EXTI_EnableIT_0_31+0x24>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	58000800 	.word	0x58000800

08001558 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4904      	ldr	r1, [pc, #16]	; (8001578 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]

}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	58000800 	.word	0x58000800

0800157c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <ReadRtcSsrValue+0x3c>)
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	b29b      	uxth	r3, r3
 8001588:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <ReadRtcSsrValue+0x3c>)
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	b29b      	uxth	r3, r3
 8001590:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001592:	e005      	b.n	80015a0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <ReadRtcSsrValue+0x3c>)
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	b29b      	uxth	r3, r3
 800159e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d1f5      	bne.n	8001594 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80015a8:	683b      	ldr	r3, [r7, #0]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40002800 	.word	0x40002800

080015bc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80015cc:	79ba      	ldrb	r2, [r7, #6]
 80015ce:	491d      	ldr	r1, [pc, #116]	; (8001644 <LinkTimerAfter+0x88>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3315      	adds	r3, #21
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d009      	beq.n	80015fa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	4916      	ldr	r1, [pc, #88]	; (8001644 <LinkTimerAfter+0x88>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	3314      	adds	r3, #20
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	4911      	ldr	r1, [pc, #68]	; (8001644 <LinkTimerAfter+0x88>)
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	3315      	adds	r3, #21
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800160e:	79fa      	ldrb	r2, [r7, #7]
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <LinkTimerAfter+0x88>)
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	3314      	adds	r3, #20
 800161e:	79ba      	ldrb	r2, [r7, #6]
 8001620:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001622:	79ba      	ldrb	r2, [r7, #6]
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <LinkTimerAfter+0x88>)
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3315      	adds	r3, #21
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	701a      	strb	r2, [r3, #0]

  return;
 8001636:	bf00      	nop
}
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	200000c4 	.word	0x200000c4

08001648 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <LinkTimerBefore+0xb8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	79ba      	ldrb	r2, [r7, #6]
 8001660:	429a      	cmp	r2, r3
 8001662:	d032      	beq.n	80016ca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001664:	79ba      	ldrb	r2, [r7, #6]
 8001666:	4927      	ldr	r1, [pc, #156]	; (8001704 <LinkTimerBefore+0xbc>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3314      	adds	r3, #20
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	4922      	ldr	r1, [pc, #136]	; (8001704 <LinkTimerBefore+0xbc>)
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	3315      	adds	r3, #21
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	491d      	ldr	r1, [pc, #116]	; (8001704 <LinkTimerBefore+0xbc>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3315      	adds	r3, #21
 800169c:	79ba      	ldrb	r2, [r7, #6]
 800169e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	4918      	ldr	r1, [pc, #96]	; (8001704 <LinkTimerBefore+0xbc>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3314      	adds	r3, #20
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016b4:	79ba      	ldrb	r2, [r7, #6]
 80016b6:	4913      	ldr	r1, [pc, #76]	; (8001704 <LinkTimerBefore+0xbc>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3314      	adds	r3, #20
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80016c8:	e014      	b.n	80016f4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	490d      	ldr	r1, [pc, #52]	; (8001704 <LinkTimerBefore+0xbc>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3315      	adds	r3, #21
 80016da:	79ba      	ldrb	r2, [r7, #6]
 80016dc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016de:	79ba      	ldrb	r2, [r7, #6]
 80016e0:	4908      	ldr	r1, [pc, #32]	; (8001704 <LinkTimerBefore+0xbc>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	3314      	adds	r3, #20
 80016ee:	79fa      	ldrb	r2, [r7, #7]
 80016f0:	701a      	strb	r2, [r3, #0]
  return;
 80016f2:	bf00      	nop
}
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000154 	.word	0x20000154
 8001704:	200000c4 	.word	0x200000c4

08001708 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <linkTimer+0x144>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b06      	cmp	r3, #6
 800171a:	d118      	bne.n	800174e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <linkTimer+0x144>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <linkTimer+0x148>)
 8001724:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001726:	4a49      	ldr	r2, [pc, #292]	; (800184c <linkTimer+0x144>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	4949      	ldr	r1, [pc, #292]	; (8001854 <linkTimer+0x14c>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3315      	adds	r3, #21
 800173c:	2206      	movs	r2, #6
 800173e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <linkTimer+0x150>)
 8001742:	f04f 32ff 	mov.w	r2, #4294967295
 8001746:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	81fb      	strh	r3, [r7, #14]
 800174c:	e078      	b.n	8001840 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800174e:	f000 f909 	bl	8001964 <ReturnTimeElapsed>
 8001752:	4603      	mov	r3, r0
 8001754:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001756:	79fa      	ldrb	r2, [r7, #7]
 8001758:	493e      	ldr	r1, [pc, #248]	; (8001854 <linkTimer+0x14c>)
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	3308      	adds	r3, #8
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	4419      	add	r1, r3
 800176e:	4839      	ldr	r0, [pc, #228]	; (8001854 <linkTimer+0x14c>)
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4403      	add	r3, r0
 800177a:	3308      	adds	r3, #8
 800177c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4934      	ldr	r1, [pc, #208]	; (8001854 <linkTimer+0x14c>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3308      	adds	r3, #8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <linkTimer+0x144>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	4a2e      	ldr	r2, [pc, #184]	; (8001854 <linkTimer+0x14c>)
 800179c:	460b      	mov	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	440b      	add	r3, r1
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	3308      	adds	r3, #8
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d337      	bcc.n	8001820 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <linkTimer+0x144>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80017b6:	7b7a      	ldrb	r2, [r7, #13]
 80017b8:	4926      	ldr	r1, [pc, #152]	; (8001854 <linkTimer+0x14c>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3315      	adds	r3, #21
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017ca:	e013      	b.n	80017f4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80017cc:	7b7a      	ldrb	r2, [r7, #13]
 80017ce:	4921      	ldr	r1, [pc, #132]	; (8001854 <linkTimer+0x14c>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3315      	adds	r3, #21
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80017e0:	7b7a      	ldrb	r2, [r7, #13]
 80017e2:	491c      	ldr	r1, [pc, #112]	; (8001854 <linkTimer+0x14c>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3315      	adds	r3, #21
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d00b      	beq.n	8001812 <linkTimer+0x10a>
 80017fa:	7b3a      	ldrb	r2, [r7, #12]
 80017fc:	4915      	ldr	r1, [pc, #84]	; (8001854 <linkTimer+0x14c>)
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3308      	adds	r3, #8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	d2dc      	bcs.n	80017cc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001812:	7b7a      	ldrb	r2, [r7, #13]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fecf 	bl	80015bc <LinkTimerAfter>
 800181e:	e00f      	b.n	8001840 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <linkTimer+0x144>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff0c 	bl	8001648 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <linkTimer+0x144>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <linkTimer+0x148>)
 8001838:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <linkTimer+0x144>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001840:	89fb      	ldrh	r3, [r7, #14]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000154 	.word	0x20000154
 8001850:	20000155 	.word	0x20000155
 8001854:	200000c4 	.word	0x200000c4
 8001858:	20000158 	.word	0x20000158

0800185c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	4613      	mov	r3, r2
 800186a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800186c:	4b39      	ldr	r3, [pc, #228]	; (8001954 <UnlinkTimer+0xf8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	429a      	cmp	r2, r3
 8001876:	d111      	bne.n	800189c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <UnlinkTimer+0xf8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <UnlinkTimer+0xfc>)
 8001880:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4935      	ldr	r1, [pc, #212]	; (800195c <UnlinkTimer+0x100>)
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3315      	adds	r3, #21
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <UnlinkTimer+0xf8>)
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e03e      	b.n	800191a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	492f      	ldr	r1, [pc, #188]	; (800195c <UnlinkTimer+0x100>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3314      	adds	r3, #20
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	492a      	ldr	r1, [pc, #168]	; (800195c <UnlinkTimer+0x100>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	3315      	adds	r3, #21
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80018c4:	79f9      	ldrb	r1, [r7, #7]
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	4824      	ldr	r0, [pc, #144]	; (800195c <UnlinkTimer+0x100>)
 80018ca:	460b      	mov	r3, r1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	440b      	add	r3, r1
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4403      	add	r3, r0
 80018d4:	3315      	adds	r3, #21
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2d8      	uxtb	r0, r3
 80018da:	4920      	ldr	r1, [pc, #128]	; (800195c <UnlinkTimer+0x100>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3315      	adds	r3, #21
 80018e8:	4602      	mov	r2, r0
 80018ea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d013      	beq.n	800191a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80018f2:	79f9      	ldrb	r1, [r7, #7]
 80018f4:	7bba      	ldrb	r2, [r7, #14]
 80018f6:	4819      	ldr	r0, [pc, #100]	; (800195c <UnlinkTimer+0x100>)
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4403      	add	r3, r0
 8001902:	3314      	adds	r3, #20
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2d8      	uxtb	r0, r3
 8001908:	4914      	ldr	r1, [pc, #80]	; (800195c <UnlinkTimer+0x100>)
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	3314      	adds	r3, #20
 8001916:	4602      	mov	r2, r0
 8001918:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	490f      	ldr	r1, [pc, #60]	; (800195c <UnlinkTimer+0x100>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	330c      	adds	r3, #12
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <UnlinkTimer+0xf8>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b06      	cmp	r3, #6
 8001936:	d107      	bne.n	8001948 <UnlinkTimer+0xec>
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d104      	bne.n	8001948 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <UnlinkTimer+0x104>)
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	601a      	str	r2, [r3, #0]
  }

  return;
 8001946:	bf00      	nop
 8001948:	bf00      	nop
}
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20000154 	.word	0x20000154
 8001958:	20000155 	.word	0x20000155
 800195c:	200000c4 	.word	0x200000c4
 8001960:	20000158 	.word	0x20000158

08001964 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <ReturnTimeElapsed+0x70>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001972:	d026      	beq.n	80019c2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001974:	f7ff fe02 	bl	800157c <ReadRtcSsrValue>
 8001978:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <ReturnTimeElapsed+0x70>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	d805      	bhi.n	8001990 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <ReturnTimeElapsed+0x70>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	e00a      	b.n	80019a6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <ReturnTimeElapsed+0x74>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <ReturnTimeElapsed+0x70>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <ReturnTimeElapsed+0x78>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <ReturnTimeElapsed+0x7c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	40d3      	lsrs	r3, r2
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b29b      	uxth	r3, r3
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000158 	.word	0x20000158
 80019d8:	20000160 	.word	0x20000160
 80019dc:	2000015e 	.word	0x2000015e
 80019e0:	2000015d 	.word	0x2000015d

080019e4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d108      	bne.n	8001a06 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019f4:	f7ff fdc2 	bl	800157c <ReadRtcSsrValue>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <RestartWakeupCounter+0x9c>)
 80019fc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80019fe:	2003      	movs	r0, #3
 8001a00:	f002 fd21 	bl	8004446 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a04:	e039      	b.n	8001a7a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d803      	bhi.n	8001a14 <RestartWakeupCounter+0x30>
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <RestartWakeupCounter+0xa0>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d002      	beq.n	8001a1a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a1a:	bf00      	nop
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <RestartWakeupCounter+0xa4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f8      	beq.n	8001a1c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <RestartWakeupCounter+0xa4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <RestartWakeupCounter+0xa4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a3a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <RestartWakeupCounter+0xa8>)
 8001a3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a42:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a44:	2003      	movs	r0, #3
 8001a46:	f002 fd0c 	bl	8004462 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <RestartWakeupCounter+0xac>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	88fa      	ldrh	r2, [r7, #6]
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <RestartWakeupCounter+0xac>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a5a:	f7ff fd8f 	bl	800157c <ReadRtcSsrValue>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <RestartWakeupCounter+0x9c>)
 8001a62:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <RestartWakeupCounter+0xa4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <RestartWakeupCounter+0xa4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a72:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001a74:	f3af 8000 	nop.w
  return ;
 8001a78:	bf00      	nop
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000158 	.word	0x20000158
 8001a84:	2000015d 	.word	0x2000015d
 8001a88:	20000204 	.word	0x20000204
 8001a8c:	58000800 	.word	0x58000800
 8001a90:	40002800 	.word	0x40002800

08001a94 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a9a:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <RescheduleTimerList+0x11c>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d107      	bne.n	8001ab8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001aa8:	bf00      	nop
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <RescheduleTimerList+0x120>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f8      	bne.n	8001aaa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <RescheduleTimerList+0x120>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <RescheduleTimerList+0x120>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <RescheduleTimerList+0x124>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	493a      	ldr	r1, [pc, #232]	; (8001bbc <RescheduleTimerList+0x128>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3308      	adds	r3, #8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001ae2:	f7ff ff3f 	bl	8001964 <ReturnTimeElapsed>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d205      	bcs.n	8001afe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001af6:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <RescheduleTimerList+0x12c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e04d      	b.n	8001b9a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <RescheduleTimerList+0x130>)
 8001b02:	8812      	ldrh	r2, [r2, #0]
 8001b04:	b292      	uxth	r2, r2
 8001b06:	4413      	add	r3, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d906      	bls.n	8001b1e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b10:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <RescheduleTimerList+0x130>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <RescheduleTimerList+0x12c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e03d      	b.n	8001b9a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <RescheduleTimerList+0x12c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b2e:	e034      	b.n	8001b9a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <RescheduleTimerList+0x128>)
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3308      	adds	r3, #8
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d20a      	bcs.n	8001b5e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	491c      	ldr	r1, [pc, #112]	; (8001bbc <RescheduleTimerList+0x128>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3308      	adds	r3, #8
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e013      	b.n	8001b86 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	4916      	ldr	r1, [pc, #88]	; (8001bbc <RescheduleTimerList+0x128>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	6819      	ldr	r1, [r3, #0]
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	1ac9      	subs	r1, r1, r3
 8001b76:	4811      	ldr	r0, [pc, #68]	; (8001bbc <RescheduleTimerList+0x128>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4403      	add	r3, r0
 8001b82:	3308      	adds	r3, #8
 8001b84:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <RescheduleTimerList+0x128>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3315      	adds	r3, #21
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d1c7      	bne.n	8001b30 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001ba0:	89bb      	ldrh	r3, [r7, #12]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff1e 	bl	80019e4 <RestartWakeupCounter>

  return ;
 8001ba8:	bf00      	nop
}
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40002800 	.word	0x40002800
 8001bb4:	20000204 	.word	0x20000204
 8001bb8:	20000154 	.word	0x20000154
 8001bbc:	200000c4 	.word	0x200000c4
 8001bc0:	2000015c 	.word	0x2000015c
 8001bc4:	20000162 	.word	0x20000162

08001bc8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bce:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd2:	617b      	str	r3, [r7, #20]
  return(result);
 8001bd4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	22ca      	movs	r2, #202	; 0xca
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2253      	movs	r2, #83	; 0x53
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b54      	ldr	r3, [pc, #336]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001bfc:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c04:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c08:	4950      	ldr	r1, [pc, #320]	; (8001d4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	330c      	adds	r3, #12
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d16e      	bne.n	8001cfc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c1e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c22:	494a      	ldr	r1, [pc, #296]	; (8001d4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c36:	4945      	ldr	r1, [pc, #276]	; (8001d4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3310      	adds	r3, #16
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d04c      	beq.n	8001cec <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001c52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c56:	493d      	ldr	r1, [pc, #244]	; (8001d4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	330d      	adds	r3, #13
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d124      	bne.n	8001cb6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c70:	2101      	movs	r1, #1
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fdf2 	bl	800185c <UnlinkTimer>
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f383 8810 	msr	PRIMASK, r3
}
 8001c82:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001c84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c88:	4930      	ldr	r1, [pc, #192]	; (8001d4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	3304      	adds	r3, #4
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fa32 	bl	8002108 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	22ca      	movs	r2, #202	; 0xca
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2253      	movs	r2, #83	; 0x53
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001cb4:	e012      	b.n	8001cdc <HW_TS_RTC_Wakeup_Handler+0x114>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f383 8810 	msr	PRIMASK, r3
}
 8001cc0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f99a 	bl	8002000 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	22ca      	movs	r2, #202	; 0xca
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2253      	movs	r2, #83	; 0x53
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	69b8      	ldr	r0, [r7, #24]
 8001ce6:	f000 fa95 	bl	8002214 <HW_TS_RTC_Int_AppNot>
 8001cea:	e022      	b.n	8001d32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001cec:	f7ff fed2 	bl	8001a94 <RescheduleTimerList>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f383 8810 	msr	PRIMASK, r3
}
 8001cfa:	e01a      	b.n	8001d32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cfc:	bf00      	nop
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f8      	beq.n	8001cfe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d1c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f383 8810 	msr	PRIMASK, r3
}
 8001d30:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d3a:	bf00      	nop
}
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000204 	.word	0x20000204
 8001d48:	20000154 	.word	0x20000154
 8001d4c:	200000c4 	.word	0x200000c4
 8001d50:	2000015c 	.word	0x2000015c
 8001d54:	58000800 	.word	0x58000800

08001d58 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d64:	4b5e      	ldr	r3, [pc, #376]	; (8001ee0 <HW_TS_Init+0x188>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	22ca      	movs	r2, #202	; 0xca
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d6c:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <HW_TS_Init+0x188>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2253      	movs	r2, #83	; 0x53
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d74:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HW_TS_Init+0x18c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a5a      	ldr	r2, [pc, #360]	; (8001ee4 <HW_TS_Init+0x18c>)
 8001d7a:	f043 0320 	orr.w	r3, r3, #32
 8001d7e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001d80:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HW_TS_Init+0x18c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f1c3 0304 	rsb	r3, r3, #4
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HW_TS_Init+0x190>)
 8001d94:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HW_TS_Init+0x18c>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d9e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001da2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	d101      	bne.n	8001dba <HW_TS_Init+0x62>
  {
    return 32U;
 8001db6:	2220      	movs	r2, #32
 8001db8:	e003      	b.n	8001dc2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	40d3      	lsrs	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b48      	ldr	r3, [pc, #288]	; (8001eec <HW_TS_Init+0x194>)
 8001dcc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HW_TS_Init+0x18c>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <HW_TS_Init+0x198>)
 8001de0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HW_TS_Init+0x198>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HW_TS_Init+0x194>)
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001df4:	4a3c      	ldr	r2, [pc, #240]	; (8001ee8 <HW_TS_Init+0x190>)
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	40d3      	lsrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d904      	bls.n	8001e10 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HW_TS_Init+0x19c>)
 8001e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	e003      	b.n	8001e18 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HW_TS_Init+0x19c>)
 8001e16:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e1c:	f7ff fb9c 	bl	8001558 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e24:	f7ff fb84 	bl	8001530 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d13d      	bne.n	8001eaa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <HW_TS_Init+0x1a0>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HW_TS_Init+0x1a4>)
 8001e36:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	77fb      	strb	r3, [r7, #31]
 8001e40:	e00c      	b.n	8001e5c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e42:	7ffa      	ldrb	r2, [r7, #31]
 8001e44:	492e      	ldr	r1, [pc, #184]	; (8001f00 <HW_TS_Init+0x1a8>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	330c      	adds	r3, #12
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	77fb      	strb	r3, [r7, #31]
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d9ef      	bls.n	8001e42 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HW_TS_Init+0x1ac>)
 8001e64:	2206      	movs	r2, #6
 8001e66:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HW_TS_Init+0x188>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <HW_TS_Init+0x188>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e76:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HW_TS_Init+0x188>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HW_TS_Init+0x188>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HW_TS_Init+0x1b0>)
 8001e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e90:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e92:	2003      	movs	r0, #3
 8001e94:	f002 fae5 	bl	8004462 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HW_TS_Init+0x188>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HW_TS_Init+0x188>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e009      	b.n	8001ebe <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HW_TS_Init+0x188>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f002 fac4 	bl	8004446 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HW_TS_Init+0x188>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	22ff      	movs	r2, #255	; 0xff
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2103      	movs	r1, #3
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f002 fa79 	bl	80043c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f002 fa90 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  return;
 8001ed6:	bf00      	nop
}
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000204 	.word	0x20000204
 8001ee4:	40002800 	.word	0x40002800
 8001ee8:	2000015d 	.word	0x2000015d
 8001eec:	2000015e 	.word	0x2000015e
 8001ef0:	20000160 	.word	0x20000160
 8001ef4:	20000162 	.word	0x20000162
 8001ef8:	2000015c 	.word	0x2000015c
 8001efc:	20000158 	.word	0x20000158
 8001f00:	200000c4 	.word	0x200000c4
 8001f04:	20000154 	.word	0x20000154
 8001f08:	58000800 	.word	0x58000800

08001f0c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f22:	f3ef 8310 	mrs	r3, PRIMASK
 8001f26:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f28:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f30:	e004      	b.n	8001f3c <HW_TS_Create+0x30>
  {
    loop++;
 8001f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d80c      	bhi.n	8001f5e <HW_TS_Create+0x52>
 8001f44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f48:	492c      	ldr	r1, [pc, #176]	; (8001ffc <HW_TS_Create+0xf0>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	330c      	adds	r3, #12
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e9      	bne.n	8001f32 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d038      	beq.n	8001fd8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001f66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f6a:	4924      	ldr	r1, [pc, #144]	; (8001ffc <HW_TS_Create+0xf0>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	330c      	adds	r3, #12
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f383 8810 	msr	PRIMASK, r3
}
 8001f86:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001f88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f8c:	491b      	ldr	r1, [pc, #108]	; (8001ffc <HW_TS_Create+0xf0>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3310      	adds	r3, #16
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001f9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fa2:	4916      	ldr	r1, [pc, #88]	; (8001ffc <HW_TS_Create+0xf0>)
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	330d      	adds	r3, #13
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001fb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fb8:	4910      	ldr	r1, [pc, #64]	; (8001ffc <HW_TS_Create+0xf0>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fce:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fd6:	e008      	b.n	8001fea <HW_TS_Create+0xde>
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f383 8810 	msr	PRIMASK, r3
}
 8001fe2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	372c      	adds	r7, #44	; 0x2c
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200000c4 	.word	0x200000c4

08002000 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200a:	f3ef 8310 	mrs	r3, PRIMASK
 800200e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002010:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002012:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002018:	2003      	movs	r0, #3
 800201a:	f002 f9fa 	bl	8004412 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HW_TS_Stop+0xf0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	22ca      	movs	r2, #202	; 0xca
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HW_TS_Stop+0xf0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2253      	movs	r2, #83	; 0x53
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	4930      	ldr	r1, [pc, #192]	; (80020f4 <HW_TS_Stop+0xf4>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	330c      	adds	r3, #12
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d142      	bne.n	80020cc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fc06 	bl	800185c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HW_TS_Stop+0xf8>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	2b06      	cmp	r3, #6
 800205a:	d12f      	bne.n	80020bc <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HW_TS_Stop+0xfc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002068:	d107      	bne.n	800207a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800206a:	bf00      	nop
 800206c:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HW_TS_Stop+0xf0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f8      	bne.n	800206c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HW_TS_Stop+0xf0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HW_TS_Stop+0xf0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002088:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800208a:	bf00      	nop
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HW_TS_Stop+0xf0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f8      	beq.n	800208c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HW_TS_Stop+0xf0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HW_TS_Stop+0xf0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020aa:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HW_TS_Stop+0x100>)
 80020ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020b2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80020b4:	2003      	movs	r0, #3
 80020b6:	f002 f9d4 	bl	8004462 <HAL_NVIC_ClearPendingIRQ>
 80020ba:	e007      	b.n	80020cc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HW_TS_Stop+0x104>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	7cfa      	ldrb	r2, [r7, #19]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80020c8:	f7ff fce4 	bl	8001a94 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HW_TS_Stop+0xf0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	22ff      	movs	r2, #255	; 0xff
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020d4:	2003      	movs	r0, #3
 80020d6:	f002 f98e 	bl	80043f6 <HAL_NVIC_EnableIRQ>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f383 8810 	msr	PRIMASK, r3
}
 80020e4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80020e6:	bf00      	nop
}
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000204 	.word	0x20000204
 80020f4:	200000c4 	.word	0x200000c4
 80020f8:	20000154 	.word	0x20000154
 80020fc:	40002800 	.word	0x40002800
 8002100:	58000800 	.word	0x58000800
 8002104:	20000155 	.word	0x20000155

08002108 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	493b      	ldr	r1, [pc, #236]	; (8002204 <HW_TS_Start+0xfc>)
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	330c      	adds	r3, #12
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d103      	bne.n	8002134 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff66 	bl	8002000 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002134:	f3ef 8310 	mrs	r3, PRIMASK
 8002138:	60fb      	str	r3, [r7, #12]
  return(result);
 800213a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800213c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800213e:	b672      	cpsid	i
}
 8002140:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002142:	2003      	movs	r0, #3
 8002144:	f002 f965 	bl	8004412 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HW_TS_Start+0x100>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	22ca      	movs	r2, #202	; 0xca
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HW_TS_Start+0x100>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2253      	movs	r2, #83	; 0x53
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002158:	79fa      	ldrb	r2, [r7, #7]
 800215a:	492a      	ldr	r1, [pc, #168]	; (8002204 <HW_TS_Start+0xfc>)
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	330c      	adds	r3, #12
 8002168:	2202      	movs	r2, #2
 800216a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	4925      	ldr	r1, [pc, #148]	; (8002204 <HW_TS_Start+0xfc>)
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3308      	adds	r3, #8
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	4920      	ldr	r1, [pc, #128]	; (8002204 <HW_TS_Start+0xfc>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3304      	adds	r3, #4
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fab6 	bl	8001708 <linkTimer>
 800219c:	4603      	mov	r3, r0
 800219e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HW_TS_Start+0x104>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HW_TS_Start+0x108>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	7c7a      	ldrb	r2, [r7, #17]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d002      	beq.n	80021b8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80021b2:	f7ff fc6f 	bl	8001a94 <RescheduleTimerList>
 80021b6:	e013      	b.n	80021e0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	4912      	ldr	r1, [pc, #72]	; (8002204 <HW_TS_Start+0xfc>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3308      	adds	r3, #8
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	8a7b      	ldrh	r3, [r7, #18]
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	1ac9      	subs	r1, r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <HW_TS_Start+0xfc>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4403      	add	r3, r0
 80021dc:	3308      	adds	r3, #8
 80021de:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HW_TS_Start+0x100>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021e8:	2003      	movs	r0, #3
 80021ea:	f002 f904 	bl	80043f6 <HAL_NVIC_EnableIRQ>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f383 8810 	msr	PRIMASK, r3
}
 80021f8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80021fa:	bf00      	nop
}
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200000c4 	.word	0x200000c4
 8002208:	20000204 	.word	0x20000204
 800220c:	20000154 	.word	0x20000154
 8002210:	20000155 	.word	0x20000155

08002214 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	460b      	mov	r3, r1
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4798      	blx	r3

  return;
 8002226:	bf00      	nop
}
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <LL_RCC_LSE_SetDriveCapability>:
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	f023 0218 	bic.w	r2, r3, #24
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_AHB2_GRP1_EnableClock>:
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4313      	orrs	r3, r2
 8002270:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002290:	f000 fcdc 	bl	8002c4c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002294:	f7fe fe70 	bl	8000f78 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002298:	f000 f81e 	bl	80022d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800229c:	f000 f892 	bl	80023c4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80022a0:	f000 f914 	bl	80024cc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a4:	f000 f9de 	bl	8002664 <MX_GPIO_Init>
  MX_RTC_Init();
 80022a8:	f000 f932 	bl	8002510 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80022ac:	f000 f98c 	bl	80025c8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80022b0:	f000 f8a8 	bl	8002404 <MX_ADC1_Init>
  MX_MEMORYMAP_Init();
 80022b4:	f000 f91e 	bl	80024f4 <MX_MEMORYMAP_Init>
  MX_TIM16_Init();
 80022b8:	f000 f95e 	bl	8002578 <MX_TIM16_Init>
  MX_RF_Init();
 80022bc:	f000 f921 	bl	8002502 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  initBuffer();
 80022c0:	f7ff f88c 	bl	80013dc <initBuffer>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80022c4:	f7fe fe66 	bl	8000f94 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim16);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <main+0x48>)
 80022ca:	f004 fb05 	bl	80068d8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80022ce:	f7fe ffc8 	bl	8001262 <MX_APPE_Process>
 80022d2:	e7fc      	b.n	80022ce <main+0x42>
 80022d4:	20000228 	.word	0x20000228

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b09a      	sub	sp, #104	; 0x68
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	2248      	movs	r2, #72	; 0x48
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f008 fcc0 	bl	800ac6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f023 0303 	bic.w	r3, r3, #3
 8002318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002322:	f002 faf9 	bl	8004918 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff ff81 	bl	800222e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <SystemClock_Config+0xe8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002334:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <SystemClock_Config+0xe8>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <SystemClock_Config+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002348:	232f      	movs	r3, #47	; 0x2f
 800234a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002352:	2301      	movs	r3, #1
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800235c:	2301      	movs	r3, #1
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002364:	2300      	movs	r3, #0
 8002366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002368:	2360      	movs	r3, #96	; 0x60
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800236c:	2305      	movs	r3, #5
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002370:	2300      	movs	r3, #0
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fe61 	bl	8005040 <HAL_RCC_OscConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002384:	f000 f9e2 	bl	800274c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002388:	236f      	movs	r3, #111	; 0x6f
 800238a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800238c:	2302      	movs	r3, #2
 800238e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 f9bd 	bl	8005728 <HAL_RCC_ClockConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80023b4:	f000 f9ca 	bl	800274c <Error_Handler>
  }
}
 80023b8:	bf00      	nop
 80023ba:	3768      	adds	r7, #104	; 0x68
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	58000400 	.word	0x58000400

080023c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b094      	sub	sp, #80	; 0x50
 80023c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ca:	463b      	mov	r3, r7
 80023cc:	2250      	movs	r2, #80	; 0x50
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f008 fc4b 	bl	800ac6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80023d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80023dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80023e2:	2302      	movs	r3, #2
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80023e6:	2310      	movs	r3, #16
 80023e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ea:	463b      	mov	r3, r7
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fdd8 	bl	8005fa2 <HAL_RCCEx_PeriphCLKConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80023f8:	f000 f9a8 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80023fc:	bf00      	nop
 80023fe:	3750      	adds	r7, #80	; 0x50
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800240a:	463b      	mov	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
 8002418:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800241c:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <MX_ADC1_Init+0xc0>)
 800241e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800243a:	2204      	movs	r2, #4
 800243c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002440:	2200      	movs	r2, #0
 8002442:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002446:	2200      	movs	r2, #0
 8002448:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800244c:	2201      	movs	r2, #1
 800244e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002460:	2200      	movs	r2, #0
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800246e:	2200      	movs	r2, #0
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <MX_ADC1_Init+0xbc>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800247a:	4811      	ldr	r0, [pc, #68]	; (80024c0 <MX_ADC1_Init+0xbc>)
 800247c:	f000 fe54 	bl	8003128 <HAL_ADC_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002486:	f000 f961 	bl	800274c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_ADC1_Init+0xc4>)
 800248c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800248e:	2306      	movs	r3, #6
 8002490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002496:	237f      	movs	r3, #127	; 0x7f
 8002498:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800249a:	2304      	movs	r3, #4
 800249c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a2:	463b      	mov	r3, r7
 80024a4:	4619      	mov	r1, r3
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <MX_ADC1_Init+0xbc>)
 80024a8:	f001 f9de 	bl	8003868 <HAL_ADC_ConfigChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80024b2:	f000 f94b 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000164 	.word	0x20000164
 80024c4:	50040000 	.word	0x50040000
 80024c8:	04300002 	.word	0x04300002

080024cc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_IPCC_Init+0x20>)
 80024d2:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <MX_IPCC_Init+0x24>)
 80024d4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_IPCC_Init+0x20>)
 80024d8:	f002 f998 	bl	800480c <HAL_IPCC_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80024e2:	f000 f933 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200001c8 	.word	0x200001c8
 80024f0:	58000c00 	.word	0x58000c00

080024f4 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MX_RTC_Init+0x60>)
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <MX_RTC_Init+0x64>)
 8002518:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_RTC_Init+0x60>)
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <MX_RTC_Init+0x60>)
 8002522:	220f      	movs	r2, #15
 8002524:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <MX_RTC_Init+0x60>)
 8002528:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800252c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_RTC_Init+0x60>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_RTC_Init+0x60>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <MX_RTC_Init+0x60>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_RTC_Init+0x60>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <MX_RTC_Init+0x60>)
 8002548:	f003 ffb2 	bl	80064b0 <HAL_RTC_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002552:	f000 f8fb 	bl	800274c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_RTC_Init+0x60>)
 800255c:	f004 f8a8 	bl	80066b0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002566:	f000 f8f1 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000204 	.word	0x20000204
 8002574:	40002800 	.word	0x40002800

08002578 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <MX_TIM16_Init+0x48>)
 800257e:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <MX_TIM16_Init+0x4c>)
 8002580:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32000 - 1;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_TIM16_Init+0x48>)
 8002584:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002588:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <MX_TIM16_Init+0x48>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000 - 1;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <MX_TIM16_Init+0x48>)
 8002592:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002596:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_TIM16_Init+0x48>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <MX_TIM16_Init+0x48>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <MX_TIM16_Init+0x48>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_TIM16_Init+0x48>)
 80025ac:	f004 f93c 	bl	8006828 <HAL_TIM_Base_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80025b6:	f000 f8c9 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000228 	.word	0x20000228
 80025c4:	40014400 	.word	0x40014400

080025c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <MX_USART1_UART_Init+0x98>)
 80025d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025f0:	220c      	movs	r2, #12
 80025f2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <MX_USART1_UART_Init+0x94>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <MX_USART1_UART_Init+0x94>)
 8002602:	2200      	movs	r2, #0
 8002604:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <MX_USART1_UART_Init+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <MX_USART1_UART_Init+0x94>)
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <MX_USART1_UART_Init+0x94>)
 8002614:	f004 fb7a 	bl	8006d0c <HAL_UART_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800261e:	f000 f895 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002622:	2100      	movs	r1, #0
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_USART1_UART_Init+0x94>)
 8002626:	f005 f83b 	bl	80076a0 <HAL_UARTEx_SetTxFifoThreshold>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002630:	f000 f88c 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002634:	2100      	movs	r1, #0
 8002636:	4809      	ldr	r0, [pc, #36]	; (800265c <MX_USART1_UART_Init+0x94>)
 8002638:	f005 f870 	bl	800771c <HAL_UARTEx_SetRxFifoThreshold>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002642:	f000 f883 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_USART1_UART_Init+0x94>)
 8002648:	f004 fff1 	bl	800762e <HAL_UARTEx_DisableFifoMode>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002652:	f000 f87b 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000274 	.word	0x20000274
 8002660:	40013800 	.word	0x40013800

08002664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002678:	2004      	movs	r0, #4
 800267a:	f7ff fdee 	bl	800225a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	2002      	movs	r0, #2
 8002680:	f7ff fdeb 	bl	800225a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff fde8 	bl	800225a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	2008      	movs	r0, #8
 800268c:	f7ff fde5 	bl	800225a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2123      	movs	r1, #35	; 0x23
 8002694:	481d      	ldr	r0, [pc, #116]	; (800270c <MX_GPIO_Init+0xa8>)
 8002696:	f002 f863 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800269a:	2310      	movs	r3, #16
 800269c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4819      	ldr	r0, [pc, #100]	; (8002710 <MX_GPIO_Init+0xac>)
 80026ac:	f001 fee8 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80026b0:	2323      	movs	r3, #35	; 0x23
 80026b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4811      	ldr	r0, [pc, #68]	; (800270c <MX_GPIO_Init+0xa8>)
 80026c6:	f001 fedb 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80026dc:	230a      	movs	r3, #10
 80026de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e8:	f001 feca 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80026ec:	2303      	movs	r3, #3
 80026ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	; (8002714 <MX_GPIO_Init+0xb0>)
 80026fe:	f001 febf 	bl	8004480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	48000400 	.word	0x48000400
 8002710:	48000800 	.word	0x48000800
 8002714:	48000c00 	.word	0x48000c00

08002718 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d106      	bne.n	8002736 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002728:	2102      	movs	r1, #2
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800272c:	f002 f830 	bl	8004790 <HAL_GPIO_TogglePin>
    // Start ADC Conversion
    HAL_ADC_Start_IT(&hadc1);
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002732:	f000 fe45 	bl	80033c0 <HAL_ADC_Start_IT>

  }
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000228 	.word	0x20000228
 8002744:	48000400 	.word	0x48000400
 8002748:	20000164 	.word	0x20000164

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>

08002756 <LL_RCC_EnableRTC>:
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_AHB2_GRP1_EnableClock>:
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279c:	68fb      	ldr	r3, [r7, #12]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_AHB3_GRP1_EnableClock>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4313      	orrs	r3, r2
 80027c0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4013      	ands	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002800:	68fb      	ldr	r3, [r7, #12]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800281c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4313      	orrs	r3, r2
 8002824:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002844:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002848:	f7ff ffaf 	bl	80027aa <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	202e      	movs	r0, #46	; 0x2e
 8002852:	f001 fdb6 	bl	80043c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002856:	202e      	movs	r0, #46	; 0x2e
 8002858:	f001 fdcd 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b09c      	sub	sp, #112	; 0x70
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2250      	movs	r2, #80	; 0x50
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f008 f9f3 	bl	800ac6c <memset>
  if(hadc->Instance==ADC1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a20      	ldr	r2, [pc, #128]	; (800290c <HAL_ADC_MspInit+0xac>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d138      	bne.n	8002902 <HAL_ADC_MspInit+0xa2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002894:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002896:	2318      	movs	r3, #24
 8002898:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800289a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80028a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80028a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80028ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028b6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fb70 	bl	8005fa2 <HAL_RCCEx_PeriphCLKConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80028c8:	f7ff ff40 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028d0:	f7ff ff52 	bl	8002778 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d4:	2004      	movs	r0, #4
 80028d6:	f7ff ff4f 	bl	8002778 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028da:	2301      	movs	r3, #1
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028de:	2303      	movs	r3, #3
 80028e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028ea:	4619      	mov	r1, r3
 80028ec:	4808      	ldr	r0, [pc, #32]	; (8002910 <HAL_ADC_MspInit+0xb0>)
 80028ee:	f001 fdc7 	bl	8004480 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	2012      	movs	r0, #18
 80028f8:	f001 fd63 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80028fc:	2012      	movs	r0, #18
 80028fe:	f001 fd7a 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002902:	bf00      	nop
 8002904:	3770      	adds	r7, #112	; 0x70
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	50040000 	.word	0x50040000
 8002910:	48000800 	.word	0x48000800

08002914 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <HAL_IPCC_MspInit+0x44>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d113      	bne.n	800294e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800292a:	f7ff ff3e 	bl	80027aa <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	202c      	movs	r0, #44	; 0x2c
 8002934:	f001 fd45 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002938:	202c      	movs	r0, #44	; 0x2c
 800293a:	f001 fd5c 	bl	80043f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	202d      	movs	r0, #45	; 0x2d
 8002944:	f001 fd3d 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002948:	202d      	movs	r0, #45	; 0x2d
 800294a:	f001 fd54 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	58000c00 	.word	0x58000c00

0800295c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b096      	sub	sp, #88	; 0x58
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	2250      	movs	r2, #80	; 0x50
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f008 f97d 	bl	800ac6c <memset>
  if(hrtc->Instance==RTC)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <HAL_RTC_MspInit+0x64>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d11d      	bne.n	80029b8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800297c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002980:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002988:	f107 0308 	add.w	r3, r7, #8
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fb08 	bl	8005fa2 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002998:	f7ff fed8 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800299c:	f7ff fedb 	bl	8002756 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80029a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029a4:	f7ff ff1a 	bl	80027dc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	2003      	movs	r0, #3
 80029ae:	f001 fd08 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f001 fd1f 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3758      	adds	r7, #88	; 0x58
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40002800 	.word	0x40002800

080029c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_TIM_Base_MspInit+0x34>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10b      	bne.n	80029ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029da:	f7ff ff18 	bl	800280e <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	2019      	movs	r0, #25
 80029e4:	f001 fced 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029e8:	2019      	movs	r0, #25
 80029ea:	f001 fd04 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40014400 	.word	0x40014400

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b09c      	sub	sp, #112	; 0x70
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2250      	movs	r2, #80	; 0x50
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f008 f925 	bl	800ac6c <memset>
  if(huart->Instance==USART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_UART_MspInit+0x84>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d124      	bne.n	8002a76 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fab2 	bl	8005fa2 <HAL_RCCEx_PeriphCLKConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a44:	f7ff fe82 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a4c:	f7ff fedf 	bl	800280e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7ff fe91 	bl	8002778 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a56:	23c0      	movs	r3, #192	; 0xc0
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a66:	2307      	movs	r3, #7
 8002a68:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <HAL_UART_MspInit+0x88>)
 8002a72:	f001 fd05 	bl	8004480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3770      	adds	r7, #112	; 0x70
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40013800 	.word	0x40013800
 8002a84:	48000400 	.word	0x48000400

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <NMI_Handler+0x4>

08002a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <HardFault_Handler+0x4>

08002a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <MemManage_Handler+0x4>

08002a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <BusFault_Handler+0x4>

08002aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <UsageFault_Handler+0x4>

08002aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f000 f914 	bl	8002d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002ae0:	f7ff f872 	bl	8001bc8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <ADC1_IRQHandler+0x10>)
 8002aee:	f000 fcf1 	bl	80034d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000164 	.word	0x20000164

08002afc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b02:	f003 ff37 	bl	8006974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000228 	.word	0x20000228

08002b10 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002b14:	f007 fcec 	bl	800a4f0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002b20:	f007 fd1c 	bl	800a55c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002b2c:	f001 fe4a 	bl	80047c4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002b38:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <SystemInit+0x98>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	4a23      	ldr	r2, [pc, #140]	; (8002bcc <SystemInit+0x98>)
 8002b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002b60:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <SystemInit+0x9c>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f023 0305 	bic.w	r3, r3, #5
 8002b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9e:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <SystemInit+0xa0>)
 8002ba0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <SystemInit+0xa0>)
 8002ba8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00
 8002bd0:	faf6fefb 	.word	0xfaf6fefb
 8002bd4:	22041000 	.word	0x22041000

08002bd8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002bd8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bda:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bdc:	3304      	adds	r3, #4

08002bde <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bde:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002be2:	d3f9      	bcc.n	8002bd8 <CopyDataInit>
  bx lr
 8002be4:	4770      	bx	lr

08002be6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002be6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002be8:	3004      	adds	r0, #4

08002bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002bea:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002bec:	d3fb      	bcc.n	8002be6 <FillZerobss>
  bx lr
 8002bee:	4770      	bx	lr

08002bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bf4:	f7ff ff9e 	bl	8002b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002bf8:	480b      	ldr	r0, [pc, #44]	; (8002c28 <LoopForever+0x6>)
 8002bfa:	490c      	ldr	r1, [pc, #48]	; (8002c2c <LoopForever+0xa>)
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <LoopForever+0xe>)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f7ff ffed 	bl	8002bde <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <LoopForever+0x12>)
 8002c06:	490c      	ldr	r1, [pc, #48]	; (8002c38 <LoopForever+0x16>)
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <LoopForever+0x1a>)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f7ff ffe7 	bl	8002bde <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <LoopForever+0x1e>)
 8002c12:	490c      	ldr	r1, [pc, #48]	; (8002c44 <LoopForever+0x22>)
 8002c14:	2300      	movs	r3, #0
 8002c16:	f7ff ffe8 	bl	8002bea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c1a:	f008 f82f 	bl	800ac7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c1e:	f7ff fb35 	bl	800228c <main>

08002c22 <LoopForever>:

LoopForever:
  b LoopForever
 8002c22:	e7fe      	b.n	8002c22 <LoopForever>
  ldr   r0, =_estack
 8002c24:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002c28:	20000008 	.word	0x20000008
 8002c2c:	20000034 	.word	0x20000034
 8002c30:	0800afc4 	.word	0x0800afc4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002c34:	200301e4 	.word	0x200301e4
 8002c38:	20030a67 	.word	0x20030a67
 8002c3c:	0800b036 	.word	0x0800b036
  INIT_BSS _sbss, _ebss
 8002c40:	20000080 	.word	0x20000080
 8002c44:	200004cc 	.word	0x200004cc

08002c48 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <AES1_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_Init+0x3c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_Init+0x3c>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c62:	2003      	movs	r0, #3
 8002c64:	f001 fba2 	bl	80043ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f000 f80f 	bl	8002c8c <HAL_InitTick>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	e001      	b.n	8002c7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c7a:	f7ff fde1 	bl	8002840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	58004000 	.word	0x58004000

08002c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_InitTick+0x6c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d024      	beq.n	8002cea <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ca0:	f002 feee 	bl	8005a80 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_InitTick+0x6c>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fbb8 	bl	800442e <HAL_SYSTICK_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	d809      	bhi.n	8002cde <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd2:	f001 fb76 	bl	80043c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_InitTick+0x70>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e007      	b.n	8002cee <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e004      	b.n	8002cee <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e001      	b.n	8002cee <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000010 	.word	0x20000010
 8002cfc:	2000000c 	.word	0x2000000c

08002d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_IncTick+0x20>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x24>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_IncTick+0x24>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000010 	.word	0x20000010
 8002d24:	20000308 	.word	0x20000308

08002d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_GetTick+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000308 	.word	0x20000308

08002d40 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_GetTickPrio+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	2000000c 	.word	0x2000000c

08002d58 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <LL_ADC_SetOffset+0x44>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	03fff000 	.word	0x03fff000

08002e08 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3360      	adds	r3, #96	; 0x60
 8002e16:	461a      	mov	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3360      	adds	r3, #96	; 0x60
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e82:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3330      	adds	r3, #48	; 0x30
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	4413      	add	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	211f      	movs	r1, #31
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 011f 	and.w	r1, r3, #31
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0e5b      	lsrs	r3, r3, #25
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0d1b      	lsrs	r3, r3, #20
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2107      	movs	r1, #7
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0d1b      	lsrs	r3, r3, #20
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002f74:	bf00      	nop
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0318 	and.w	r3, r3, #24
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fa4:	40d9      	lsrs	r1, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	400b      	ands	r3, r1
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	0007ffff 	.word	0x0007ffff

08002fc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6093      	str	r3, [r2, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003000:	d101      	bne.n	8003006 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003050:	d101      	bne.n	8003056 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <LL_ADC_IsEnabled+0x18>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <LL_ADC_IsEnabled+0x1a>
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c6:	f043 0204 	orr.w	r2, r3, #4
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b08      	cmp	r3, #8
 8003112:	d101      	bne.n	8003118 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e12e      	b.n	80033a4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fb83 	bl	8002860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff3d 	bl	8002fec <LL_ADC_IsDeepPowerDownEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff23 	bl	8002fc8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff58 	bl	800303c <LL_ADC_IsInternalRegulatorEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff3c 	bl	8003014 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800319c:	4b83      	ldr	r3, [pc, #524]	; (80033ac <HAL_ADC_Init+0x284>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <HAL_ADC_Init+0x288>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031b0:	e002      	b.n	80031b8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f9      	bne.n	80031b2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff3a 	bl	800303c <LL_ADC_IsInternalRegulatorEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ff73 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 80031f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 80c7 	bne.w	8003392 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 80c3 	bne.w	8003392 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff33 	bl	800308c <LL_ADC_IsEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800322c:	4861      	ldr	r0, [pc, #388]	; (80033b4 <HAL_ADC_Init+0x28c>)
 800322e:	f7ff ff2d 	bl	800308c <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4619      	mov	r1, r3
 800323e:	485e      	ldr	r0, [pc, #376]	; (80033b8 <HAL_ADC_Init+0x290>)
 8003240:	f7ff fd8a 	bl	8002d58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e5b      	ldrb	r3, [r3, #25]
 8003248:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800324e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003254:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800325a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003262:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003264:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d106      	bne.n	8003284 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	3b01      	subs	r3, #1
 800327c:	045b      	lsls	r3, r3, #17
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	4b45      	ldr	r3, [pc, #276]	; (80033bc <HAL_ADC_Init+0x294>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff0e 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 80032be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff1b 	bl	8003100 <LL_ADC_INJ_IsConversionOngoing>
 80032ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d13d      	bne.n	800334e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d13a      	bne.n	800334e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f4:	f023 0302 	bic.w	r3, r3, #2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	430b      	orrs	r3, r1
 8003300:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003308:	2b01      	cmp	r3, #1
 800330a:	d118      	bne.n	800333e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003316:	f023 0304 	bic.w	r3, r3, #4
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003322:	4311      	orrs	r1, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800332e:	430a      	orrs	r2, r1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	611a      	str	r2, [r3, #16]
 800333c:	e007      	b.n	800334e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f023 010f 	bic.w	r1, r3, #15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
 800336e:	e007      	b.n	8003380 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020f 	bic.w	r2, r2, #15
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
 8003390:	e007      	b.n	80033a2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000008 	.word	0x20000008
 80033b0:	053e2d63 	.word	0x053e2d63
 80033b4:	50040000 	.word	0x50040000
 80033b8:	50040300 	.word	0x50040300
 80033bc:	fff0c007 	.word	0xfff0c007

080033c0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fe84 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d169      	bne.n	80034ac <HAL_ADC_Start_IT+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Start_IT+0x26>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e065      	b.n	80034b2 <HAL_ADC_Start_IT+0xf2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fe00 	bl	8003ff4 <ADC_Enable>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d151      	bne.n	80034a2 <HAL_ADC_Start_IT+0xe2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_ADC_Start_IT+0x6c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	f023 0206 	bic.w	r2, r3, #6
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	; 0x58
 800342a:	e002      	b.n	8003432 <HAL_ADC_Start_IT+0x72>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	221c      	movs	r2, #28
 8003438:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 021c 	bic.w	r2, r2, #28
 8003450:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b08      	cmp	r3, #8
 8003458:	d108      	bne.n	800346c <HAL_ADC_Start_IT+0xac>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0208 	orr.w	r2, r2, #8
 8003468:	605a      	str	r2, [r3, #4]
          break;
 800346a:	e008      	b.n	800347e <HAL_ADC_Start_IT+0xbe>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0204 	orr.w	r2, r2, #4
 800347a:	605a      	str	r2, [r3, #4]
          break;
 800347c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <HAL_ADC_Start_IT+0xd6>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0210 	orr.w	r2, r2, #16
 8003494:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fe09 	bl	80030b2 <LL_ADC_REG_StartConversion>
 80034a0:	e006      	b.n	80034b0 <HAL_ADC_Start_IT+0xf0>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034aa:	e001      	b.n	80034b0 <HAL_ADC_Start_IT+0xf0>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
 80034ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d017      	beq.n	800352a <HAL_ADC_IRQHandler+0x56>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fe0b 	bl	8004138 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2202      	movs	r2, #2
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_ADC_IRQHandler+0x6a>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05d      	beq.n	8003604 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d058      	beq.n	8003604 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fc7b 	bl	8002e6a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03d      	beq.n	80035f6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d035      	beq.n	80035f6 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d12e      	bne.n	80035f6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd9c 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11a      	bne.n	80035de <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 020c 	bic.w	r2, r2, #12
 80035b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d112      	bne.n	80035f6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
 80035dc:	e00b      	b.n	80035f6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd ff54 	bl	80014a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	220c      	movs	r2, #12
 8003602:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_ADC_IRQHandler+0x144>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800361e:	2b00      	cmp	r3, #0
 8003620:	d074      	beq.n	800370c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d06f      	beq.n	800370c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fc5b 	bl	8002f04 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800364e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fc08 	bl	8002e6a <LL_ADC_REG_IsTriggerSourceSWStart>
 800365a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d049      	beq.n	80036fe <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_ADC_IRQHandler+0x1b0>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d041      	beq.n	80036fe <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	d13c      	bne.n	80036fe <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d135      	bne.n	80036fe <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d12e      	bne.n	80036fe <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fd2b 	bl	8003100 <LL_ADC_INJ_IsConversionOngoing>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11a      	bne.n	80036e6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036be:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d112      	bne.n	80036fe <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
 80036e4:	e00b      	b.n	80036fe <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fcf2 	bl	80040e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2260      	movs	r2, #96	; 0x60
 800370a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d011      	beq.n	800373a <HAL_ADC_IRQHandler+0x266>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f887 	bl	8003840 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d012      	beq.n	800376a <HAL_ADC_IRQHandler+0x296>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fcd8 	bl	8004110 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d012      	beq.n	800379a <HAL_ADC_IRQHandler+0x2c6>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fcca 	bl	8004124 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02b      	beq.n	80037fc <HAL_ADC_IRQHandler+0x328>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d026      	beq.n	80037fc <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e009      	b.n	80037d0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fb91 	bl	8002ee8 <LL_ADC_REG_GetDMATransfer>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80037cc:	2301      	movs	r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10e      	bne.n	80037f4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f830 	bl	8003854 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2210      	movs	r2, #16
 80037fa:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <HAL_ADC_IRQHandler+0x364>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f043 0208 	orr.w	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fc62 	bl	80040fc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0b6      	sub	sp, #216	; 0xd8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x22>
 8003886:	2302      	movs	r3, #2
 8003888:	e39f      	b.n	8003fca <HAL_ADC_ConfigChannel+0x762>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fc1f 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 8384 	bne.w	8003fac <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f7ff faed 	bl	8002e90 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fc0d 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 80038c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fc19 	bl	8003100 <LL_ADC_INJ_IsConversionOngoing>
 80038ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 81a6 	bne.w	8003c28 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 81a1 	bne.w	8003c28 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7ff fb19 	bl	8002f2a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	08db      	lsrs	r3, r3, #3
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00a      	beq.n	8003930 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6919      	ldr	r1, [r3, #16]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800392a:	f7ff fa49 	bl	8002dc0 <LL_ADC_SetOffset>
 800392e:	e17b      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fa66 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 800393c:	4603      	mov	r3, r0
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <HAL_ADC_ConfigChannel+0xf4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fa5b 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003952:	4603      	mov	r3, r0
 8003954:	0e9b      	lsrs	r3, r3, #26
 8003956:	f003 021f 	and.w	r2, r3, #31
 800395a:	e01e      	b.n	800399a <HAL_ADC_ConfigChannel+0x132>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fa50 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003968:	4603      	mov	r3, r0
 800396a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800397a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800397e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800398a:	2320      	movs	r3, #32
 800398c:	e004      	b.n	8003998 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800398e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x14a>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	0e9b      	lsrs	r3, r3, #26
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	e018      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x17c>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80039c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80039ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e004      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80039da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d106      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fa1f 	bl	8002e34 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fa03 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x1ba>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f9f8 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	0e9b      	lsrs	r3, r3, #26
 8003a1c:	f003 021f 	and.w	r2, r3, #31
 8003a20:	e01e      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x1f8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2101      	movs	r1, #1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f9ed 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003a40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003a50:	2320      	movs	r3, #32
 8003a52:	e004      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x210>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	e018      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x242>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e004      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d106      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f9bc 	bl	8002e34 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f9a0 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x280>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff f995 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	f003 021f 	and.w	r2, r3, #31
 8003ae6:	e01e      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x2be>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f98a 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003b16:	2320      	movs	r3, #32
 8003b18:	e004      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x2d6>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	e016      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x304>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e004      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f95b 	bl	8002e34 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2103      	movs	r1, #3
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f93f 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x342>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2103      	movs	r1, #3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f934 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	e017      	b.n	8003bda <HAL_ADC_ConfigChannel+0x372>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2103      	movs	r1, #3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f929 	bl	8002e08 <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e003      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x38a>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	e011      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x3ae>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d106      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2103      	movs	r1, #3
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f906 	bl	8002e34 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fa2d 	bl	800308c <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 81c2 	bne.w	8003fbe <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7ff f99a 	bl	8002f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a8e      	ldr	r2, [pc, #568]	; (8003e8c <HAL_ADC_ConfigChannel+0x624>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	f040 8130 	bne.w	8003eb8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x418>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0e9b      	lsrs	r3, r3, #26
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2b09      	cmp	r3, #9
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e019      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x44c>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c90:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003c98:	2320      	movs	r3, #32
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2b09      	cmp	r3, #9
 8003cac:	bf94      	ite	ls
 8003cae:	2301      	movls	r3, #1
 8003cb0:	2300      	movhi	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d079      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x46c>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	3301      	adds	r3, #1
 8003ccc:	069b      	lsls	r3, r3, #26
 8003cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd2:	e015      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x498>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	069b      	lsls	r3, r3, #26
 8003cfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x4b8>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	e017      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x4e8>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e003      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	ea42 0103 	orr.w	r1, r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x50e>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	3301      	adds	r3, #1
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	051b      	lsls	r3, r3, #20
 8003d74:	e018      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x540>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003d8e:	2320      	movs	r3, #32
 8003d90:	e003      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da8:	430b      	orrs	r3, r1
 8003daa:	e080      	b.n	8003eae <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x560>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0e9b      	lsrs	r3, r3, #26
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	069b      	lsls	r3, r3, #26
 8003dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dc6:	e015      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x58c>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e003      	b.n	8003dec <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	069b      	lsls	r3, r3, #26
 8003df0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x5ac>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	3301      	adds	r3, #1
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	e017      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x5dc>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	61fb      	str	r3, [r7, #28]
  return result;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	e003      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	ea42 0103 	orr.w	r1, r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x608>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	0e9b      	lsrs	r3, r3, #26
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	3b1e      	subs	r3, #30
 8003e68:	051b      	lsls	r3, r3, #20
 8003e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	e01d      	b.n	8003eac <HAL_ADC_ConfigChannel+0x644>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	613b      	str	r3, [r7, #16]
  return result;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e005      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x630>
 8003e8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f003 021f 	and.w	r2, r3, #31
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3b1e      	subs	r3, #30
 8003ea6:	051b      	lsls	r3, r3, #20
 8003ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eac:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7ff f839 	bl	8002f2a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b45      	ldr	r3, [pc, #276]	; (8003fd4 <HAL_ADC_ConfigChannel+0x76c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d07c      	beq.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ec4:	4844      	ldr	r0, [pc, #272]	; (8003fd8 <HAL_ADC_ConfigChannel+0x770>)
 8003ec6:	f7fe ff6d 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 8003eca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ece:	4843      	ldr	r0, [pc, #268]	; (8003fdc <HAL_ADC_ConfigChannel+0x774>)
 8003ed0:	f7ff f8dc 	bl	800308c <LL_ADC_IsEnabled>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d15e      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a40      	ldr	r2, [pc, #256]	; (8003fe0 <HAL_ADC_ConfigChannel+0x778>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d127      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x6cc>
 8003ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d121      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a39      	ldr	r2, [pc, #228]	; (8003fdc <HAL_ADC_ConfigChannel+0x774>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d161      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f02:	4619      	mov	r1, r3
 8003f04:	4834      	ldr	r0, [pc, #208]	; (8003fd8 <HAL_ADC_ConfigChannel+0x770>)
 8003f06:	f7fe ff3a 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_ADC_ConfigChannel+0x77c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	4a35      	ldr	r2, [pc, #212]	; (8003fe8 <HAL_ADC_ConfigChannel+0x780>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003f24:	e002      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f9      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f32:	e044      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_ADC_ConfigChannel+0x784>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d113      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x6fe>
 8003f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <HAL_ADC_ConfigChannel+0x774>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d134      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	481e      	ldr	r0, [pc, #120]	; (8003fd8 <HAL_ADC_ConfigChannel+0x770>)
 8003f60:	f7fe ff0d 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f64:	e02b      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <HAL_ADC_ConfigChannel+0x788>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d126      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
 8003f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d120      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_ADC_ConfigChannel+0x774>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d11b      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <HAL_ADC_ConfigChannel+0x770>)
 8003f92:	f7fe fef4 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
 8003f96:	e012      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003faa:	e008      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	37d8      	adds	r7, #216	; 0xd8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	80080000 	.word	0x80080000
 8003fd8:	50040300 	.word	0x50040300
 8003fdc:	50040000 	.word	0x50040000
 8003fe0:	c7520000 	.word	0xc7520000
 8003fe4:	20000008 	.word	0x20000008
 8003fe8:	053e2d63 	.word	0x053e2d63
 8003fec:	cb840000 	.word	0xcb840000
 8003ff0:	80000001 	.word	0x80000001

08003ff4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff f841 	bl	800308c <LL_ADC_IsEnabled>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d15e      	bne.n	80040ce <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <ADC_Enable+0xe4>)
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f043 0210 	orr.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e04a      	b.n	80040d0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff f810 	bl	8003064 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004044:	4825      	ldr	r0, [pc, #148]	; (80040dc <ADC_Enable+0xe8>)
 8004046:	f7fe fead 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 800404a:	4603      	mov	r3, r0
 800404c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00f      	beq.n	8004074 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <ADC_Enable+0xec>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <ADC_Enable+0xf0>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	3301      	adds	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004066:	e002      	b.n	800406e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3b01      	subs	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f9      	bne.n	8004068 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004074:	f7fe fe58 	bl	8002d28 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800407a:	e021      	b.n	80040c0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f803 	bl	800308c <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ffe7 	bl	8003064 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004096:	f7fe fe47 	bl	8002d28 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d90d      	bls.n	80040c0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f043 0210 	orr.w	r2, r3, #16
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e007      	b.n	80040d0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d1d6      	bne.n	800407c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	8000003f 	.word	0x8000003f
 80040dc:	50040300 	.word	0x50040300
 80040e0:	20000008 	.word	0x20000008
 80040e4:	053e2d63 	.word	0x053e2d63

080040e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	; (80041e8 <__NVIC_EnableIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db12      	blt.n	8004224 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	490a      	ldr	r1, [pc, #40]	; (8004230 <__NVIC_DisableIRQ+0x44>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	3320      	adds	r3, #32
 8004214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004218:	f3bf 8f4f 	dsb	sy
}
 800421c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800421e:	f3bf 8f6f 	isb	sy
}
 8004222:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100

08004234 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db0c      	blt.n	8004260 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4907      	ldr	r1, [pc, #28]	; (800426c <__NVIC_SetPendingIRQ+0x38>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2001      	movs	r0, #1
 8004256:	fa00 f202 	lsl.w	r2, r0, r2
 800425a:	3340      	adds	r3, #64	; 0x40
 800425c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000e100 	.word	0xe000e100

08004270 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	2b00      	cmp	r3, #0
 8004280:	db0c      	blt.n	800429c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	4907      	ldr	r1, [pc, #28]	; (80042a8 <__NVIC_ClearPendingIRQ+0x38>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2001      	movs	r0, #1
 8004292:	fa00 f202 	lsl.w	r2, r0, r2
 8004296:	3360      	adds	r3, #96	; 0x60
 8004298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000e100 	.word	0xe000e100

080042ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	db0a      	blt.n	80042d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	490c      	ldr	r1, [pc, #48]	; (80042f8 <__NVIC_SetPriority+0x4c>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	0112      	lsls	r2, r2, #4
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	440b      	add	r3, r1
 80042d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d4:	e00a      	b.n	80042ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <__NVIC_SetPriority+0x50>)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	3b04      	subs	r3, #4
 80042e4:	0112      	lsls	r2, r2, #4
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	440b      	add	r3, r1
 80042ea:	761a      	strb	r2, [r3, #24]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000e100 	.word	0xe000e100
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f1c3 0307 	rsb	r3, r3, #7
 800431a:	2b04      	cmp	r3, #4
 800431c:	bf28      	it	cs
 800431e:	2304      	movcs	r3, #4
 8004320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3304      	adds	r3, #4
 8004326:	2b06      	cmp	r3, #6
 8004328:	d902      	bls.n	8004330 <NVIC_EncodePriority+0x30>
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3b03      	subs	r3, #3
 800432e:	e000      	b.n	8004332 <NVIC_EncodePriority+0x32>
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004334:	f04f 32ff 	mov.w	r2, #4294967295
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	401a      	ands	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004348:	f04f 31ff 	mov.w	r1, #4294967295
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	43d9      	mvns	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	4313      	orrs	r3, r2
         );
}
 800435a:	4618      	mov	r0, r3
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004378:	d301      	bcc.n	800437e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800437a:	2301      	movs	r3, #1
 800437c:	e00f      	b.n	800439e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <SysTick_Config+0x40>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004386:	210f      	movs	r1, #15
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	f7ff ff8e 	bl	80042ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <SysTick_Config+0x40>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <SysTick_Config+0x40>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	e000e010 	.word	0xe000e010

080043ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fec9 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	4603      	mov	r3, r0
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043d0:	f7ff fee0 	bl	8004194 <__NVIC_GetPriorityGrouping>
 80043d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff ff90 	bl	8004300 <NVIC_EncodePriority>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff5f 	bl	80042ac <__NVIC_SetPriority>
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fed3 	bl	80041b0 <__NVIC_EnableIRQ>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fee3 	bl	80041ec <__NVIC_DisableIRQ>
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff96 	bl	8004368 <SysTick_Config>
 800443c:	4603      	mov	r3, r0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff feed 	bl	8004234 <__NVIC_SetPendingIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fefd 	bl	8004270 <__NVIC_ClearPendingIRQ>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800448e:	e14c      	b.n	800472a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 813e 	beq.w	8004724 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d005      	beq.n	80044c0 <HAL_GPIO_Init+0x40>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d130      	bne.n	8004522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f6:	2201      	movs	r2, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0201 	and.w	r2, r3, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b03      	cmp	r3, #3
 800452c:	d017      	beq.n	800455e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	2203      	movs	r2, #3
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d123      	bne.n	80045b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	08da      	lsrs	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3208      	adds	r2, #8
 8004572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	08da      	lsrs	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3208      	adds	r2, #8
 80045ac:	6939      	ldr	r1, [r7, #16]
 80045ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	2203      	movs	r2, #3
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0203 	and.w	r2, r3, #3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8098 	beq.w	8004724 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80045f4:	4a54      	ldr	r2, [pc, #336]	; (8004748 <HAL_GPIO_Init+0x2c8>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	3302      	adds	r3, #2
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	220f      	movs	r2, #15
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800461e:	d019      	beq.n	8004654 <HAL_GPIO_Init+0x1d4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a4a      	ldr	r2, [pc, #296]	; (800474c <HAL_GPIO_Init+0x2cc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_GPIO_Init+0x1d0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a49      	ldr	r2, [pc, #292]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00d      	beq.n	800464c <HAL_GPIO_Init+0x1cc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a48      	ldr	r2, [pc, #288]	; (8004754 <HAL_GPIO_Init+0x2d4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <HAL_GPIO_Init+0x1c8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a47      	ldr	r2, [pc, #284]	; (8004758 <HAL_GPIO_Init+0x2d8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_GPIO_Init+0x1c4>
 8004640:	2304      	movs	r3, #4
 8004642:	e008      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 8004644:	2307      	movs	r3, #7
 8004646:	e006      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 8004648:	2303      	movs	r3, #3
 800464a:	e004      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 800464c:	2302      	movs	r3, #2
 800464e:	e002      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 8004654:	2300      	movs	r3, #0
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	f002 0203 	and.w	r2, r2, #3
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	4093      	lsls	r3, r2
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004666:	4938      	ldr	r1, [pc, #224]	; (8004748 <HAL_GPIO_Init+0x2c8>)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004674:	4b39      	ldr	r3, [pc, #228]	; (800475c <HAL_GPIO_Init+0x2dc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43db      	mvns	r3, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004698:	4a30      	ldr	r2, [pc, #192]	; (800475c <HAL_GPIO_Init+0x2dc>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800469e:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_GPIO_Init+0x2dc>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <HAL_GPIO_Init+0x2dc>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_GPIO_Init+0x2dc>)
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046ee:	4a1b      	ldr	r2, [pc, #108]	; (800475c <HAL_GPIO_Init+0x2dc>)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_GPIO_Init+0x2dc>)
 80046f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800471c:	4a0f      	ldr	r2, [pc, #60]	; (800475c <HAL_GPIO_Init+0x2dc>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3301      	adds	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	f47f aeab 	bne.w	8004490 <HAL_GPIO_Init+0x10>
  }
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40010000 	.word	0x40010000
 800474c:	48000400 	.word	0x48000400
 8004750:	48000800 	.word	0x48000800
 8004754:	48000c00 	.word	0x48000c00
 8004758:	48001000 	.word	0x48001000
 800475c:	58000800 	.word	0x58000800

08004760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004770:	787b      	ldrb	r3, [r7, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800477c:	e002      	b.n	8004784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800477e:	887a      	ldrh	r2, [r7, #2]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4013      	ands	r3, r2
 80047a8:	041a      	lsls	r2, r3, #16
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43d9      	mvns	r1, r3
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	400b      	ands	r3, r1
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_HSEM_IRQHandler+0x30>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_HSEM_IRQHandler+0x30>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	4906      	ldr	r1, [pc, #24]	; (80047f4 <HAL_HSEM_IRQHandler+0x30>)
 80047da:	4013      	ands	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <HAL_HSEM_IRQHandler+0x30>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f807 	bl	80047f8 <HAL_HSEM_FreeCallback>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	58001500 	.word	0x58001500

080047f8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01e      	beq.n	800485c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <HAL_IPCC_Init+0x60>)
 8004820:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fe f870 	bl	8002914 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004834:	68b8      	ldr	r0, [r7, #8]
 8004836:	f000 f85b 	bl	80048f0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f82c 	bl	80048a4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800485a:	e001      	b.n	8004860 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	58000c00 	.word	0x58000c00

08004870 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	4613      	mov	r3, r2
 8004896:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e00f      	b.n	80048d2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	4a0b      	ldr	r2, [pc, #44]	; (80048e8 <IPCC_SetDefaultCallbacks+0x44>)
 80048bc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3306      	adds	r3, #6
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <IPCC_SetDefaultCallbacks+0x48>)
 80048ca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d9ec      	bls.n	80048b2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	08004871 	.word	0x08004871
 80048ec:	0800488b 	.word	0x0800488b

080048f0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004904:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	223f      	movs	r2, #63	; 0x3f
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	58000400 	.word	0x58000400

08004938 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <HAL_PWREx_GetVoltageRange+0x18>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	58000400 	.word	0x58000400

08004954 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004966:	d101      	bne.n	800496c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_RCC_HSE_Enable>:
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_HSE_Disable>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <LL_RCC_HSE_IsReady>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049c6:	d101      	bne.n	80049cc <LL_RCC_HSE_IsReady+0x18>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <LL_RCC_HSE_IsReady+0x1a>
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_RCC_HSI_Enable>:
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_HSI_Disable>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a08:	6013      	str	r3, [r2, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_RCC_HSI_IsReady>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d101      	bne.n	8004a2c <LL_RCC_HSI_IsReady+0x18>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <LL_RCC_HSI_IsReady+0x1a>
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_RCC_HSI48_Enable>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_RCC_HSI48_Disable>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_HSI48_IsReady>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d101      	bne.n	8004abe <LL_RCC_HSI48_IsReady+0x18>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <LL_RCC_HSI48_IsReady+0x1a>
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RCC_LSE_Enable>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ae2:	bf00      	nop
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_RCC_LSE_Disable>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_RCC_LSE_EnableBypass>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1e:	f043 0304 	orr.w	r3, r3, #4
 8004b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b26:	bf00      	nop
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_RCC_LSE_DisableBypass>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_LSE_IsReady>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d101      	bne.n	8004b6a <LL_RCC_LSE_IsReady+0x18>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <LL_RCC_LSE_IsReady+0x1a>
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <LL_RCC_LSI1_Enable>:
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_RCC_LSI1_Disable>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <LL_RCC_LSI1_IsReady>:
{
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d101      	bne.n	8004bd2 <LL_RCC_LSI1_IsReady+0x18>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_RCC_LSI1_IsReady+0x1a>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <LL_RCC_LSI2_Enable>:
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_RCC_LSI2_Disable>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_RCC_LSI2_IsReady>:
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d101      	bne.n	8004c3a <LL_RCC_LSI2_IsReady+0x18>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <LL_RCC_LSI2_IsReady+0x1a>
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_LSI2_SetTrimming>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_RCC_MSI_Enable>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_RCC_MSI_Disable>:
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6013      	str	r3, [r2, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LL_RCC_MSI_IsReady>:
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d101      	bne.n	8004cc6 <LL_RCC_MSI_IsReady+0x16>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <LL_RCC_MSI_IsReady+0x18>
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_MSI_SetRange>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <LL_RCC_MSI_GetRange>:
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2bb0      	cmp	r3, #176	; 0xb0
 8004d10:	d901      	bls.n	8004d16 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d12:	23b0      	movs	r3, #176	; 0xb0
 8004d14:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d16:	687b      	ldr	r3, [r7, #4]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <LL_RCC_SetSysClkSource>:
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 0203 	bic.w	r2, r3, #3
 8004d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_RCC_GetSysClkSource>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_SetAHBPrescaler>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_RCC_SetAHB4Prescaler>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004df2:	f023 020f 	bic.w	r2, r3, #15
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_SetAPB1Prescaler>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_RCC_SetAPB2Prescaler>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	608b      	str	r3, [r1, #8]
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_RCC_GetAHBPrescaler>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_GetAHB4Prescaler>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <LL_RCC_GetAPB1Prescaler>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_RCC_GetAPB2Prescaler>:
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_PLL_Enable>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_RCC_PLL_Disable>:
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_PLL_IsReady>:
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f12:	d101      	bne.n	8004f18 <LL_RCC_PLL_IsReady+0x18>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <LL_RCC_PLL_IsReady+0x1a>
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_RCC_PLL_GetN>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <LL_RCC_PLL_GetR>:
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <LL_RCC_PLL_GetDivider>:
{
 8004f56:	b480      	push	{r7}
 8004f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_RCC_PLL_GetMainSource>:
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0303 	and.w	r3, r3, #3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d101      	bne.n	8004f9e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004faa:	b480      	push	{r7}
 8004fac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fbe:	d101      	bne.n	8004fc4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d101      	bne.n	8004fea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005008:	d101      	bne.n	800500e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800502c:	d101      	bne.n	8005032 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b08d      	sub	sp, #52	; 0x34
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e363      	b.n	800571a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 808d 	beq.w	800517a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005060:	f7ff fe89 	bl	8004d76 <LL_RCC_GetSysClkSource>
 8005064:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005066:	f7ff ff82 	bl	8004f6e <LL_RCC_PLL_GetMainSource>
 800506a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x3e>
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d147      	bne.n	8005108 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	2b01      	cmp	r3, #1
 800507c:	d144      	bne.n	8005108 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e347      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800508e:	f7ff fe34 	bl	8004cfa <LL_RCC_MSI_GetRange>
 8005092:	4603      	mov	r3, r0
 8005094:	429c      	cmp	r4, r3
 8005096:	d914      	bls.n	80050c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd2f 	bl	8005b00 <RCC_SetFlashLatencyFromMSIRange>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e336      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fe0e 	bl	8004cd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fe32 	bl	8004d24 <LL_RCC_MSI_SetCalibTrimming>
 80050c0:	e013      	b.n	80050ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fe03 	bl	8004cd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fe27 	bl	8004d24 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fd10 	bl	8005b00 <RCC_SetFlashLatencyFromMSIRange>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e317      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050ea:	f000 fcc9 	bl	8005a80 <HAL_RCC_GetHCLKFreq>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4aa4      	ldr	r2, [pc, #656]	; (8005384 <HAL_RCC_OscConfig+0x344>)
 80050f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050f4:	4ba4      	ldr	r3, [pc, #656]	; (8005388 <HAL_RCC_OscConfig+0x348>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fd fdc7 	bl	8002c8c <HAL_InitTick>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d039      	beq.n	8005178 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e308      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01e      	beq.n	800514e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005110:	f7ff fdb0 	bl	8004c74 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005114:	f7fd fe08 	bl	8002d28 <HAL_GetTick>
 8005118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800511c:	f7fd fe04 	bl	8002d28 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e2f5      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800512e:	f7ff fdbf 	bl	8004cb0 <LL_RCC_MSI_IsReady>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f1      	beq.n	800511c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fdc8 	bl	8004cd2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fdec 	bl	8004d24 <LL_RCC_MSI_SetCalibTrimming>
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800514e:	f7ff fda0 	bl	8004c92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005152:	f7fd fde9 	bl	8002d28 <HAL_GetTick>
 8005156:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515a:	f7fd fde5 	bl	8002d28 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e2d6      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800516c:	f7ff fda0 	bl	8004cb0 <LL_RCC_MSI_IsReady>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f1      	bne.n	800515a <HAL_RCC_OscConfig+0x11a>
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005178:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d047      	beq.n	8005216 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005186:	f7ff fdf6 	bl	8004d76 <LL_RCC_GetSysClkSource>
 800518a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800518c:	f7ff feef 	bl	8004f6e <LL_RCC_PLL_GetMainSource>
 8005190:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_OscConfig+0x164>
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d108      	bne.n	80051b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d105      	bne.n	80051b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d134      	bne.n	8005216 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e2b4      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_OscConfig+0x180>
 80051ba:	f7ff fbdd 	bl	8004978 <LL_RCC_HSE_Enable>
 80051be:	e001      	b.n	80051c4 <HAL_RCC_OscConfig+0x184>
 80051c0:	f7ff fbe9 	bl	8004996 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d012      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd fdac 	bl	8002d28 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fd fda8 	bl	8002d28 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e299      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80051e6:	f7ff fbe5 	bl	80049b4 <LL_RCC_HSE_IsReady>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f1      	beq.n	80051d4 <HAL_RCC_OscConfig+0x194>
 80051f0:	e011      	b.n	8005216 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fd fd99 	bl	8002d28 <HAL_GetTick>
 80051f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fa:	f7fd fd95 	bl	8002d28 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b64      	cmp	r3, #100	; 0x64
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e286      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800520c:	f7ff fbd2 	bl	80049b4 <LL_RCC_HSE_IsReady>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f1      	bne.n	80051fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d04c      	beq.n	80052bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005222:	f7ff fda8 	bl	8004d76 <LL_RCC_GetSysClkSource>
 8005226:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005228:	f7ff fea1 	bl	8004f6e <LL_RCC_PLL_GetMainSource>
 800522c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b04      	cmp	r3, #4
 8005232:	d005      	beq.n	8005240 <HAL_RCC_OscConfig+0x200>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d10e      	bne.n	8005258 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d10b      	bne.n	8005258 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e266      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fbf1 	bl	8004a38 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005256:	e031      	b.n	80052bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d019      	beq.n	8005294 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005260:	f7ff fbba 	bl	80049d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd fd60 	bl	8002d28 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526c:	f7fd fd5c 	bl	8002d28 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e24d      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800527e:	f7ff fbc9 	bl	8004a14 <LL_RCC_HSI_IsReady>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f1      	beq.n	800526c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fbd3 	bl	8004a38 <LL_RCC_HSI_SetCalibTrimming>
 8005292:	e013      	b.n	80052bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005294:	f7ff fbaf 	bl	80049f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd fd46 	bl	8002d28 <HAL_GetTick>
 800529c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fd fd42 	bl	8002d28 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e233      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052b2:	f7ff fbaf 	bl	8004a14 <LL_RCC_HSI_IsReady>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f1      	bne.n	80052a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80a3 	beq.w	800541c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d076      	beq.n	80053cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d046      	beq.n	8005378 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80052ea:	f7ff fc66 	bl	8004bba <LL_RCC_LSI1_IsReady>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d113      	bne.n	800531c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80052f4:	f7ff fc3f 	bl	8004b76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052f8:	f7fd fd16 	bl	8002d28 <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005300:	f7fd fd12 	bl	8002d28 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e203      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005312:	f7ff fc52 	bl	8004bba <LL_RCC_LSI1_IsReady>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f1      	beq.n	8005300 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800531c:	f7ff fc5f 	bl	8004bde <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd fd02 	bl	8002d28 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005328:	f7fd fcfe 	bl	8002d28 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e1ef      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800533a:	f7ff fc72 	bl	8004c22 <LL_RCC_LSI2_IsReady>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f1      	beq.n	8005328 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fc7c 	bl	8004c46 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800534e:	f7ff fc23 	bl	8004b98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fd fce9 	bl	8002d28 <HAL_GetTick>
 8005356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800535a:	f7fd fce5 	bl	8002d28 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e1d6      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800536c:	f7ff fc25 	bl	8004bba <LL_RCC_LSI1_IsReady>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f1      	bne.n	800535a <HAL_RCC_OscConfig+0x31a>
 8005376:	e051      	b.n	800541c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005378:	f7ff fbfd 	bl	8004b76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd fcd4 	bl	8002d28 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005382:	e00c      	b.n	800539e <HAL_RCC_OscConfig+0x35e>
 8005384:	20000008 	.word	0x20000008
 8005388:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800538c:	f7fd fccc 	bl	8002d28 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e1bd      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800539e:	f7ff fc0c 	bl	8004bba <LL_RCC_LSI1_IsReady>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f1      	beq.n	800538c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053a8:	f7ff fc2a 	bl	8004c00 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053ae:	f7fd fcbb 	bl	8002d28 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1ac      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053c0:	f7ff fc2f 	bl	8004c22 <LL_RCC_LSI2_IsReady>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f1      	bne.n	80053ae <HAL_RCC_OscConfig+0x36e>
 80053ca:	e027      	b.n	800541c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80053cc:	f7ff fc18 	bl	8004c00 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fd fcaa 	bl	8002d28 <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053d8:	f7fd fca6 	bl	8002d28 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e197      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053ea:	f7ff fc1a 	bl	8004c22 <LL_RCC_LSI2_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f1      	bne.n	80053d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80053f4:	f7ff fbd0 	bl	8004b98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fd fc96 	bl	8002d28 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005400:	f7fd fc92 	bl	8002d28 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e183      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005412:	f7ff fbd2 	bl	8004bba <LL_RCC_LSI1_IsReady>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f1      	bne.n	8005400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d05b      	beq.n	80054e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005428:	4ba7      	ldr	r3, [pc, #668]	; (80056c8 <HAL_RCC_OscConfig+0x688>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d114      	bne.n	800545e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005434:	f7ff fa70 	bl	8004918 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005438:	f7fd fc76 	bl	8002d28 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005440:	f7fd fc72 	bl	8002d28 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e163      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005452:	4b9d      	ldr	r3, [pc, #628]	; (80056c8 <HAL_RCC_OscConfig+0x688>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d102      	bne.n	800546c <HAL_RCC_OscConfig+0x42c>
 8005466:	f7ff fb30 	bl	8004aca <LL_RCC_LSE_Enable>
 800546a:	e00c      	b.n	8005486 <HAL_RCC_OscConfig+0x446>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b05      	cmp	r3, #5
 8005472:	d104      	bne.n	800547e <HAL_RCC_OscConfig+0x43e>
 8005474:	f7ff fb4b 	bl	8004b0e <LL_RCC_LSE_EnableBypass>
 8005478:	f7ff fb27 	bl	8004aca <LL_RCC_LSE_Enable>
 800547c:	e003      	b.n	8005486 <HAL_RCC_OscConfig+0x446>
 800547e:	f7ff fb35 	bl	8004aec <LL_RCC_LSE_Disable>
 8005482:	f7ff fb55 	bl	8004b30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d014      	beq.n	80054b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548e:	f7fd fc4b 	bl	8002d28 <HAL_GetTick>
 8005492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005494:	e00a      	b.n	80054ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fd fc47 	bl	8002d28 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e136      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80054ac:	f7ff fb51 	bl	8004b52 <LL_RCC_LSE_IsReady>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ef      	beq.n	8005496 <HAL_RCC_OscConfig+0x456>
 80054b6:	e013      	b.n	80054e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fd fc36 	bl	8002d28 <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c0:	f7fd fc32 	bl	8002d28 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e121      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80054d6:	f7ff fb3c 	bl	8004b52 <LL_RCC_LSE_IsReady>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ef      	bne.n	80054c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02c      	beq.n	8005546 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d014      	beq.n	800551e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f4:	f7ff fab5 	bl	8004a62 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7fd fc16 	bl	8002d28 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005500:	f7fd fc12 	bl	8002d28 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e103      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005512:	f7ff fac8 	bl	8004aa6 <LL_RCC_HSI48_IsReady>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f1      	beq.n	8005500 <HAL_RCC_OscConfig+0x4c0>
 800551c:	e013      	b.n	8005546 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800551e:	f7ff fab1 	bl	8004a84 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fd fc01 	bl	8002d28 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800552a:	f7fd fbfd 	bl	8002d28 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0ee      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800553c:	f7ff fab3 	bl	8004aa6 <LL_RCC_HSI48_IsReady>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f1      	bne.n	800552a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80e4 	beq.w	8005718 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005550:	f7ff fc11 	bl	8004d76 <LL_RCC_GetSysClkSource>
 8005554:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	2b02      	cmp	r3, #2
 8005564:	f040 80b4 	bne.w	80056d0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0203 	and.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	429a      	cmp	r2, r3
 8005574:	d123      	bne.n	80055be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d11c      	bne.n	80055be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	0a1b      	lsrs	r3, r3, #8
 8005588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d114      	bne.n	80055be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d10d      	bne.n	80055be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d05d      	beq.n	800567a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d058      	beq.n	8005676 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e0a1      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055d6:	f7ff fc84 	bl	8004ee2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055da:	f7fd fba5 	bl	8002d28 <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fd fba1 	bl	8002d28 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e092      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ef      	bne.n	80055e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	4b30      	ldr	r3, [pc, #192]	; (80056cc <HAL_RCC_OscConfig+0x68c>)
 800560a:	4013      	ands	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005614:	4311      	orrs	r1, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800561a:	0212      	lsls	r2, r2, #8
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005622:	4311      	orrs	r1, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005628:	4311      	orrs	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800562e:	430a      	orrs	r2, r1
 8005630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005634:	4313      	orrs	r3, r2
 8005636:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005638:	f7ff fc44 	bl	8004ec4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800564c:	f7fd fb6c 	bl	8002d28 <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fd fb68 	bl	8002d28 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e059      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ef      	beq.n	8005654 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005674:	e050      	b.n	8005718 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e04f      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d147      	bne.n	8005718 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005688:	f7ff fc1c 	bl	8004ec4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800569c:	f7fd fb44 	bl	8002d28 <HAL_GetTick>
 80056a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a4:	f7fd fb40 	bl	8002d28 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e031      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ef      	beq.n	80056a4 <HAL_RCC_OscConfig+0x664>
 80056c4:	e028      	b.n	8005718 <HAL_RCC_OscConfig+0x6d8>
 80056c6:	bf00      	nop
 80056c8:	58000400 	.word	0x58000400
 80056cc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d01e      	beq.n	8005714 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d6:	f7ff fc04 	bl	8004ee2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fd fb25 	bl	8002d28 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fd fb21 	bl	8002d28 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e012      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ef      	bne.n	80056e2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_OscConfig+0x6e4>)
 800570e:	4013      	ands	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]
 8005712:	e001      	b.n	8005718 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3734      	adds	r7, #52	; 0x34
 800571e:	46bd      	mov	sp, r7
 8005720:	bd90      	pop	{r4, r7, pc}
 8005722:	bf00      	nop
 8005724:	eefefffc 	.word	0xeefefffc

08005728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e12d      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800573c:	4b98      	ldr	r3, [pc, #608]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d91b      	bls.n	8005782 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b95      	ldr	r3, [pc, #596]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 0207 	bic.w	r2, r3, #7
 8005752:	4993      	ldr	r1, [pc, #588]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575a:	f7fd fae5 	bl	8002d28 <HAL_GetTick>
 800575e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005760:	e008      	b.n	8005774 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005762:	f7fd fae1 	bl	8002d28 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e111      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005774:	4b8a      	ldr	r3, [pc, #552]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d1ef      	bne.n	8005762 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d016      	beq.n	80057bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fafb 	bl	8004d8e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005798:	f7fd fac6 	bl	8002d28 <HAL_GetTick>
 800579c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057a0:	f7fd fac2 	bl	8002d28 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0f2      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057b2:	f7ff fbe8 	bl	8004f86 <LL_RCC_IsActiveFlag_HPRE>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f1      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d016      	beq.n	80057f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff faf2 	bl	8004db6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057d2:	f7fd faa9 	bl	8002d28 <HAL_GetTick>
 80057d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057da:	f7fd faa5 	bl	8002d28 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0d5      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057ec:	f7ff fbdd 	bl	8004faa <LL_RCC_IsActiveFlag_C2HPRE>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f1      	beq.n	80057da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff faeb 	bl	8004de2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800580c:	f7fd fa8c 	bl	8002d28 <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005814:	f7fd fa88 	bl	8002d28 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e0b8      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005826:	f7ff fbd3 	bl	8004fd0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f1      	beq.n	8005814 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d016      	beq.n	800586a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fae5 	bl	8004e10 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005846:	f7fd fa6f 	bl	8002d28 <HAL_GetTick>
 800584a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800584e:	f7fd fa6b 	bl	8002d28 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e09b      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005860:	f7ff fbc9 	bl	8004ff6 <LL_RCC_IsActiveFlag_PPRE1>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f1      	beq.n	800584e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fadb 	bl	8004e38 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005882:	f7fd fa51 	bl	8002d28 <HAL_GetTick>
 8005886:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800588a:	f7fd fa4d 	bl	8002d28 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e07d      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800589c:	f7ff fbbd 	bl	800501a <LL_RCC_IsActiveFlag_PPRE2>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f1      	beq.n	800588a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d043      	beq.n	800593a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d106      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80058ba:	f7ff f87b 	bl	80049b4 <LL_RCC_HSE_IsReady>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11e      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e067      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d106      	bne.n	80058de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80058d0:	f7ff fb16 	bl	8004f00 <LL_RCC_PLL_IsReady>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d113      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e05c      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80058e6:	f7ff f9e3 	bl	8004cb0 <LL_RCC_MSI_IsReady>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d108      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e051      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80058f4:	f7ff f88e 	bl	8004a14 <LL_RCC_HSI_IsReady>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e04a      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fa21 	bl	8004d4e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590c:	f7fd fa0c 	bl	8002d28 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	e00a      	b.n	800592a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005914:	f7fd fa08 	bl	8002d28 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e036      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	f7ff fa24 	bl	8004d76 <LL_RCC_GetSysClkSource>
 800592e:	4602      	mov	r2, r0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	429a      	cmp	r2, r3
 8005938:	d1ec      	bne.n	8005914 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800593a:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d21b      	bcs.n	8005980 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 0207 	bic.w	r2, r3, #7
 8005950:	4913      	ldr	r1, [pc, #76]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005958:	f7fd f9e6 	bl	8002d28 <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	e008      	b.n	8005972 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005960:	f7fd f9e2 	bl	8002d28 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e012      	b.n	8005998 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_RCC_ClockConfig+0x278>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d1ef      	bne.n	8005960 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005980:	f000 f87e 	bl	8005a80 <HAL_RCC_GetHCLKFreq>
 8005984:	4603      	mov	r3, r0
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <HAL_RCC_ClockConfig+0x27c>)
 8005988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800598a:	f7fd f9d9 	bl	8002d40 <HAL_GetTickPrio>
 800598e:	4603      	mov	r3, r0
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd f97b 	bl	8002c8c <HAL_InitTick>
 8005996:	4603      	mov	r3, r0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	58004000 	.word	0x58004000
 80059a4:	20000008 	.word	0x20000008

080059a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ae:	f7ff f9e2 	bl	8004d76 <LL_RCC_GetSysClkSource>
 80059b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80059ba:	f7ff f99e 	bl	8004cfa <LL_RCC_MSI_GetRange>
 80059be:	4603      	mov	r3, r0
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <HAL_RCC_GetSysClockFreq+0xcc>)
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e04b      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d102      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059d6:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e045      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d10a      	bne.n	80059f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059e2:	f7fe ffb7 	bl	8004954 <LL_RCC_HSE_IsEnabledDiv2>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e03a      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xd4>)
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e037      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80059f8:	f7ff fab9 	bl	8004f6e <LL_RCC_PLL_GetMainSource>
 80059fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d003      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x64>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x6a>
 8005a0a:	e00d      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a0e:	60bb      	str	r3, [r7, #8]
        break;
 8005a10:	e015      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a12:	f7fe ff9f 	bl	8004954 <LL_RCC_HSE_IsEnabledDiv2>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a20:	e00d      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a24:	60bb      	str	r3, [r7, #8]
        break;
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a28:	f7ff f967 	bl	8004cfa <LL_RCC_MSI_GetRange>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3a:	60bb      	str	r3, [r7, #8]
        break;
 8005a3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005a3e:	f7ff fa71 	bl	8004f24 <LL_RCC_PLL_GetN>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	fb03 f402 	mul.w	r4, r3, r2
 8005a4a:	f7ff fa84 	bl	8004f56 <LL_RCC_PLL_GetDivider>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	3301      	adds	r3, #1
 8005a54:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a58:	f7ff fa71 	bl	8004f3e <LL_RCC_PLL_GetR>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	0f5b      	lsrs	r3, r3, #29
 8005a60:	3301      	adds	r3, #1
 8005a62:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a66:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd90      	pop	{r4, r7, pc}
 8005a72:	bf00      	nop
 8005a74:	0800af14 	.word	0x0800af14
 8005a78:	00f42400 	.word	0x00f42400
 8005a7c:	01e84800 	.word	0x01e84800

08005a80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a80:	b598      	push	{r3, r4, r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a84:	f7ff ff90 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005a88:	4604      	mov	r4, r0
 8005a8a:	f7ff f9e9 	bl	8004e60 <LL_RCC_GetAHBPrescaler>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	4a03      	ldr	r2, [pc, #12]	; (8005aa4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	bd98      	pop	{r3, r4, r7, pc}
 8005aa4:	0800aeb4 	.word	0x0800aeb4

08005aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa8:	b598      	push	{r3, r4, r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005aac:	f7ff ffe8 	bl	8005a80 <HAL_RCC_GetHCLKFreq>
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	f7ff f9ef 	bl	8004e94 <LL_RCC_GetAPB1Prescaler>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	0a1b      	lsrs	r3, r3, #8
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd98      	pop	{r3, r4, r7, pc}
 8005ad0:	0800aef4 	.word	0x0800aef4

08005ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad4:	b598      	push	{r3, r4, r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ad8:	f7ff ffd2 	bl	8005a80 <HAL_RCC_GetHCLKFreq>
 8005adc:	4604      	mov	r4, r0
 8005ade:	f7ff f9e5 	bl	8004eac <LL_RCC_GetAPB2Prescaler>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	0adb      	lsrs	r3, r3, #11
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd98      	pop	{r3, r4, r7, pc}
 8005afc:	0800aef4 	.word	0x0800aef4

08005b00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2bb0      	cmp	r3, #176	; 0xb0
 8005b0c:	d903      	bls.n	8005b16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b0e:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e007      	b.n	8005b26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b26:	f7ff f9a7 	bl	8004e78 <LL_RCC_GetAHB4Prescaler>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	0c9c      	lsrs	r4, r3, #18
 8005b4a:	f7fe fef5 	bl	8004938 <HAL_PWREx_GetVoltageRange>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4619      	mov	r1, r3
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 f80c 	bl	8005b70 <RCC_SetFlashLatency>
 8005b58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd90      	pop	{r4, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	0800af14 	.word	0x0800af14
 8005b68:	0800aeb4 	.word	0x0800aeb4
 8005b6c:	431bde83 	.word	0x431bde83

08005b70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b093      	sub	sp, #76	; 0x4c
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b7a:	4b37      	ldr	r3, [pc, #220]	; (8005c58 <RCC_SetFlashLatency+0xe8>)
 8005b7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005b86:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <RCC_SetFlashLatency+0xec>)
 8005b88:	f107 031c 	add.w	r3, r7, #28
 8005b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b92:	4b33      	ldr	r3, [pc, #204]	; (8005c60 <RCC_SetFlashLatency+0xf0>)
 8005b94:	f107 040c 	add.w	r4, r7, #12
 8005b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba8:	d11a      	bne.n	8005be0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005baa:	2300      	movs	r3, #0
 8005bac:	643b      	str	r3, [r7, #64]	; 0x40
 8005bae:	e013      	b.n	8005bd8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	3348      	adds	r3, #72	; 0x48
 8005bb6:	443b      	add	r3, r7
 8005bb8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d807      	bhi.n	8005bd2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	3348      	adds	r3, #72	; 0x48
 8005bc8:	443b      	add	r3, r7
 8005bca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005bce:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005bd0:	e020      	b.n	8005c14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d9e8      	bls.n	8005bb0 <RCC_SetFlashLatency+0x40>
 8005bde:	e019      	b.n	8005c14 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005be0:	2300      	movs	r3, #0
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be4:	e013      	b.n	8005c0e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	3348      	adds	r3, #72	; 0x48
 8005bec:	443b      	add	r3, r7
 8005bee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d807      	bhi.n	8005c08 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3348      	adds	r3, #72	; 0x48
 8005bfe:	443b      	add	r3, r7
 8005c00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c04:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c06:	e005      	b.n	8005c14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d9e8      	bls.n	8005be6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <RCC_SetFlashLatency+0xf4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 0207 	bic.w	r2, r3, #7
 8005c1c:	4911      	ldr	r1, [pc, #68]	; (8005c64 <RCC_SetFlashLatency+0xf4>)
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c24:	f7fd f880 	bl	8002d28 <HAL_GetTick>
 8005c28:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c2a:	e008      	b.n	8005c3e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c2c:	f7fd f87c 	bl	8002d28 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e007      	b.n	8005c4e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <RCC_SetFlashLatency+0xf4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1ef      	bne.n	8005c2c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	374c      	adds	r7, #76	; 0x4c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd90      	pop	{r4, r7, pc}
 8005c56:	bf00      	nop
 8005c58:	0800ad14 	.word	0x0800ad14
 8005c5c:	0800ad24 	.word	0x0800ad24
 8005c60:	0800ad30 	.word	0x0800ad30
 8005c64:	58004000 	.word	0x58004000

08005c68 <LL_RCC_LSE_IsEnabled>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <LL_RCC_LSE_IsEnabled+0x18>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <LL_RCC_LSE_IsEnabled+0x1a>
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_LSE_IsReady>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d101      	bne.n	8005ca4 <LL_RCC_LSE_IsReady+0x18>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <LL_RCC_LSE_IsReady+0x1a>
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_SetRFWKPClockSource>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <LL_RCC_SetSMPSClockSource>:
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	f023 0203 	bic.w	r2, r3, #3
 8005cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_SetSMPSPrescaler>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <LL_RCC_SetUSARTClockSource>:
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f023 0203 	bic.w	r2, r3, #3
 8005d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_RCC_SetLPUARTClockSource>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <LL_RCC_SetI2CClockSource>:
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	401a      	ands	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_RCC_SetLPTIMClockSource>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0c1b      	lsrs	r3, r3, #16
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <LL_RCC_SetSAIClockSource>:
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <LL_RCC_SetRNGClockSource>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <LL_RCC_SetCLK48ClockSource>:
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <LL_RCC_SetUSBClockSource>:
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff ffe3 	bl	8005e4a <LL_RCC_SetCLK48ClockSource>
}
 8005e84:	bf00      	nop
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <LL_RCC_SetADCClockSource>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LL_RCC_SetRTCClockSource>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_RCC_GetRTCClockSource>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <LL_RCC_ForceBackupDomainReset>:
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f38:	bf00      	nop
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_RCC_PLLSAI1_Enable>:
{
 8005f42:	b480      	push	{r7}
 8005f44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f54:	6013      	str	r3, [r2, #0]
}
 8005f56:	bf00      	nop
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <LL_RCC_PLLSAI1_Disable>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <LL_RCC_PLLSAI1_IsReady>:
{
 8005f7e:	b480      	push	{r7}
 8005f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f90:	d101      	bne.n	8005f96 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005faa:	2300      	movs	r3, #0
 8005fac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d034      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fc6:	d021      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fcc:	d81b      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fd2:	d01d      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fd8:	d815      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe2:	d110      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ff4:	e00d      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f947 	bl	800628e <RCCEx_PLLSAI1_ConfigNP>
 8006000:	4603      	mov	r3, r0
 8006002:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006004:	e005      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	77fb      	strb	r3, [r7, #31]
        break;
 800600a:	e002      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006012:	7ffb      	ldrb	r3, [r7, #31]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fee8 	bl	8005df2 <LL_RCC_SetSAIClockSource>
 8006022:	e001      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	7ffb      	ldrb	r3, [r7, #31]
 8006026:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	2b00      	cmp	r3, #0
 8006032:	d046      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006034:	f7ff ff56 	bl	8005ee4 <LL_RCC_GetRTCClockSource>
 8006038:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	429a      	cmp	r2, r3
 8006042:	d03c      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006044:	f7fe fc68 	bl	8004918 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff ff30 	bl	8005eb8 <LL_RCC_SetRTCClockSource>
 8006058:	e02e      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006064:	f7ff ff4b 	bl	8005efe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006068:	f7ff ff5a 	bl	8005f20 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800607a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006084:	f7ff fdf0 	bl	8005c68 <LL_RCC_LSE_IsEnabled>
 8006088:	4603      	mov	r3, r0
 800608a:	2b01      	cmp	r3, #1
 800608c:	d114      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800608e:	f7fc fe4b 	bl	8002d28 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006094:	e00b      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006096:	f7fc fe47 	bl	8002d28 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d902      	bls.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	77fb      	strb	r3, [r7, #31]
              break;
 80060ac:	e004      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80060ae:	f7ff fded 	bl	8005c8c <LL_RCC_LSE_IsReady>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d1ee      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80060b8:	7ffb      	ldrb	r3, [r7, #31]
 80060ba:	77bb      	strb	r3, [r7, #30]
 80060bc:	e001      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	7ffb      	ldrb	r3, [r7, #31]
 80060c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fe2a 	bl	8005d2c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff fe35 	bl	8005d58 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fe5d 	bl	8005dbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fe52 	bl	8005dbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fe2a 	bl	8005d84 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fe1f 	bl	8005d84 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d022      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fe8d 	bl	8005e76 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006164:	d107      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006174:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800617e:	d10b      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f8dd 	bl	8006344 <RCCEx_PLLSAI1_ConfigNQ>
 800618a:	4603      	mov	r3, r0
 800618c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006194:	7ffb      	ldrb	r3, [r7, #31]
 8006196:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02b      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ac:	d008      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b6:	d003      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fe2a 	bl	8005e1e <LL_RCC_SetRNGClockSource>
 80061ca:	e00a      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	2000      	movs	r0, #0
 80061d8:	f7ff fe21 	bl	8005e1e <LL_RCC_SetRNGClockSource>
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff fe34 	bl	8005e4a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80061ea:	d107      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006204:	2b00      	cmp	r3, #0
 8006206:	d022      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fe3d 	bl	8005e8c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621a:	d107      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006234:	d10b      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f8dd 	bl	80063fa <RCCEx_PLLSAI1_ConfigNR>
 8006240:	4603      	mov	r3, r0
 8006242:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800624a:	7ffb      	ldrb	r3, [r7, #31]
 800624c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff fd26 	bl	8005cb0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fd45 	bl	8005d04 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fd2c 	bl	8005cdc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006284:	7fbb      	ldrb	r3, [r7, #30]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800629a:	f7ff fe61 	bl	8005f60 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800629e:	f7fc fd43 	bl	8002d28 <HAL_GetTick>
 80062a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062a4:	e009      	b.n	80062ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062a6:	f7fc fd3f 	bl	8002d28 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d902      	bls.n	80062ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	73fb      	strb	r3, [r7, #15]
      break;
 80062b8:	e004      	b.n	80062c4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062ba:	f7ff fe60 	bl	8005f7e <LL_RCC_PLLSAI1_IsReady>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d137      	bne.n	800633a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062de:	4313      	orrs	r3, r2
 80062e0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f4:	4313      	orrs	r3, r2
 80062f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062f8:	f7ff fe23 	bl	8005f42 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fc:	f7fc fd14 	bl	8002d28 <HAL_GetTick>
 8006300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006302:	e009      	b.n	8006318 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006304:	f7fc fd10 	bl	8002d28 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d902      	bls.n	8006318 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	73fb      	strb	r3, [r7, #15]
        break;
 8006316:	e004      	b.n	8006322 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006318:	f7ff fe31 	bl	8005f7e <LL_RCC_PLLSAI1_IsReady>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d1f0      	bne.n	8006304 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006336:	4313      	orrs	r3, r2
 8006338:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006350:	f7ff fe06 	bl	8005f60 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006354:	f7fc fce8 	bl	8002d28 <HAL_GetTick>
 8006358:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800635a:	e009      	b.n	8006370 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800635c:	f7fc fce4 	bl	8002d28 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d902      	bls.n	8006370 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	73fb      	strb	r3, [r7, #15]
      break;
 800636e:	e004      	b.n	800637a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006370:	f7ff fe05 	bl	8005f7e <LL_RCC_PLLSAI1_IsReady>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d137      	bne.n	80063f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006394:	4313      	orrs	r3, r2
 8006396:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063aa:	4313      	orrs	r3, r2
 80063ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063ae:	f7ff fdc8 	bl	8005f42 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fc fcb9 	bl	8002d28 <HAL_GetTick>
 80063b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063b8:	e009      	b.n	80063ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063ba:	f7fc fcb5 	bl	8002d28 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d902      	bls.n	80063ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	73fb      	strb	r3, [r7, #15]
        break;
 80063cc:	e004      	b.n	80063d8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063ce:	f7ff fdd6 	bl	8005f7e <LL_RCC_PLLSAI1_IsReady>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d1f0      	bne.n	80063ba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d108      	bne.n	80063f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ec:	4313      	orrs	r3, r2
 80063ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006406:	f7ff fdab 	bl	8005f60 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800640a:	f7fc fc8d 	bl	8002d28 <HAL_GetTick>
 800640e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006410:	e009      	b.n	8006426 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006412:	f7fc fc89 	bl	8002d28 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d902      	bls.n	8006426 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	73fb      	strb	r3, [r7, #15]
      break;
 8006424:	e004      	b.n	8006430 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006426:	f7ff fdaa 	bl	8005f7e <LL_RCC_PLLSAI1_IsReady>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f0      	bne.n	8006412 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d137      	bne.n	80064a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800644a:	4313      	orrs	r3, r2
 800644c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006460:	4313      	orrs	r3, r2
 8006462:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006464:	f7ff fd6d 	bl	8005f42 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006468:	f7fc fc5e 	bl	8002d28 <HAL_GetTick>
 800646c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800646e:	e009      	b.n	8006484 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006470:	f7fc fc5a 	bl	8002d28 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d902      	bls.n	8006484 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	73fb      	strb	r3, [r7, #15]
        break;
 8006482:	e004      	b.n	800648e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006484:	f7ff fd7b 	bl	8005f7e <LL_RCC_PLLSAI1_IsReady>
 8006488:	4603      	mov	r3, r0
 800648a:	2b01      	cmp	r3, #1
 800648c:	d1f0      	bne.n	8006470 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d108      	bne.n	80064a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a2:	4313      	orrs	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e09f      	b.n	8006602 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fc fa40 	bl	800295c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064e4:	4b49      	ldr	r3, [pc, #292]	; (800660c <HAL_RTC_Init+0x15c>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d07e      	beq.n	80065ee <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	22ca      	movs	r2, #202	; 0xca
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2253      	movs	r2, #83	; 0x53
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f8ab 	bl	800665c <RTC_EnterInitMode>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	22ff      	movs	r2, #255	; 0xff
 8006512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2204      	movs	r2, #4
 8006518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
 8006520:	e067      	b.n	80065f2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006534:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6899      	ldr	r1, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68d2      	ldr	r2, [r2, #12]
 800655c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6919      	ldr	r1, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	041a      	lsls	r2, r3, #16
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006580:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0203 	bic.w	r2, r2, #3
 8006590:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d113      	bne.n	80065e0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f829 	bl	8006610 <HAL_RTC_WaitForSynchro>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2204      	movs	r2, #4
 80065d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e010      	b.n	8006602 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e001      	b.n	80065f2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	40002800 	.word	0x40002800

08006610 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006626:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006628:	f7fc fb7e 	bl	8002d28 <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800662e:	e009      	b.n	8006644 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006630:	f7fc fb7a 	bl	8002d28 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800663e:	d901      	bls.n	8006644 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e007      	b.n	8006654 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0ee      	beq.n	8006630 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d119      	bne.n	80066a6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f04f 32ff 	mov.w	r2, #4294967295
 800667a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800667c:	f7fc fb54 	bl	8002d28 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006682:	e009      	b.n	8006698 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006684:	f7fc fb50 	bl	8002d28 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006692:	d901      	bls.n	8006698 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e007      	b.n	80066a8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0ee      	beq.n	8006684 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e0a8      	b.n	800681c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	22ca      	movs	r2, #202	; 0xca
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2253      	movs	r2, #83	; 0x53
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d020      	beq.n	800673a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80066f8:	f7fc fb16 	bl	8002d28 <HAL_GetTick>
 80066fc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80066fe:	e015      	b.n	800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006700:	f7fc fb12 	bl	8002d28 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800670e:	d90d      	bls.n	800672c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2203      	movs	r2, #3
 800671c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e077      	b.n	800681c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e2      	bne.n	8006700 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006748:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800675a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800675c:	f7fc fae4 	bl	8002d28 <HAL_GetTick>
 8006760:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006762:	e015      	b.n	8006790 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006764:	f7fc fae0 	bl	8002d28 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006772:	d90d      	bls.n	8006790 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2203      	movs	r2, #3
 8006780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e045      	b.n	800681c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0e2      	beq.n	8006764 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0207 	bic.w	r2, r2, #7
 80067b4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6899      	ldr	r1, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	4a15      	ldr	r2, [pc, #84]	; (8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067f0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006800:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	58000800 	.word	0x58000800

08006828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e049      	b.n	80068ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc f8b8 	bl	80029c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f000 f9ae 	bl	8006bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d001      	beq.n	80068f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e036      	b.n	800695e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a17      	ldr	r2, [pc, #92]	; (800696c <HAL_TIM_Base_Start_IT+0x94>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d004      	beq.n	800691c <HAL_TIM_Base_Start_IT+0x44>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d115      	bne.n	8006948 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <HAL_TIM_Base_Start_IT+0x98>)
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b06      	cmp	r3, #6
 800692c:	d015      	beq.n	800695a <HAL_TIM_Base_Start_IT+0x82>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006934:	d011      	beq.n	800695a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	e008      	b.n	800695a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e000      	b.n	800695c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	00010007 	.word	0x00010007

08006974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d020      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0202 	mvn.w	r2, #2
 80069a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8e4 	bl	8006b8c <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8d6 	bl	8006b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8e7 	bl	8006ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d020      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0204 	mvn.w	r2, #4
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8be 	bl	8006b8c <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8b0 	bl	8006b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8c1 	bl	8006ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d020      	beq.n	8006a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0208 	mvn.w	r2, #8
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2204      	movs	r2, #4
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f898 	bl	8006b8c <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f88a 	bl	8006b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f89b 	bl	8006ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d020      	beq.n	8006abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0210 	mvn.w	r2, #16
 8006a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2208      	movs	r2, #8
 8006a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f872 	bl	8006b8c <HAL_TIM_IC_CaptureCallback>
 8006aa8:	e005      	b.n	8006ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f864 	bl	8006b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f875 	bl	8006ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0201 	mvn.w	r2, #1
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fb fe1c 	bl	8002718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8d0 	bl	8006ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f8c8 	bl	8006cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f834 	bl	8006bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00c      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0220 	mvn.w	r2, #32
 8006b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f890 	bl	8006c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <TIM_Base_SetConfig+0xbc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0x20>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be6:	d108      	bne.n	8006bfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <TIM_Base_SetConfig+0xbc>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00b      	beq.n	8006c1a <TIM_Base_SetConfig+0x52>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c08:	d007      	beq.n	8006c1a <TIM_Base_SetConfig+0x52>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1e      	ldr	r2, [pc, #120]	; (8006c88 <TIM_Base_SetConfig+0xc0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_Base_SetConfig+0x52>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <TIM_Base_SetConfig+0xc4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a0c      	ldr	r2, [pc, #48]	; (8006c84 <TIM_Base_SetConfig+0xbc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0xa0>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a0b      	ldr	r2, [pc, #44]	; (8006c88 <TIM_Base_SetConfig+0xc0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0xa0>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <TIM_Base_SetConfig+0xc4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d103      	bne.n	8006c70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	615a      	str	r2, [r3, #20]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40012c00 	.word	0x40012c00
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <LL_RCC_GetUSARTClockSource>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4013      	ands	r3, r2
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <LL_RCC_GetLPUARTClockSource>:
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4013      	ands	r3, r2
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e042      	b.n	8006da4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fb fe63 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2224      	movs	r2, #36	; 0x24
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa50 	bl	80071fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f825 	bl	8006dac <UART_SetConfig>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e01b      	b.n	8006da4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 facf 	bl	8007340 <UART_CheckIdleState>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db0:	b08c      	sub	sp, #48	; 0x30
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4baf      	ldr	r3, [pc, #700]	; (8007098 <UART_SetConfig+0x2ec>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4aa4      	ldr	r2, [pc, #656]	; (800709c <UART_SetConfig+0x2f0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e14:	4313      	orrs	r3, r2
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	f023 010f 	bic.w	r1, r3, #15
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a95      	ldr	r2, [pc, #596]	; (80070a0 <UART_SetConfig+0x2f4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d125      	bne.n	8006e9c <UART_SetConfig+0xf0>
 8006e50:	2003      	movs	r0, #3
 8006e52:	f7ff ff3b 	bl	8006ccc <LL_RCC_GetUSARTClockSource>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d81b      	bhi.n	8006e94 <UART_SetConfig+0xe8>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0xb8>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e042      	b.n	8006f02 <UART_SetConfig+0x156>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e82:	e03e      	b.n	8006f02 <UART_SetConfig+0x156>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8a:	e03a      	b.n	8006f02 <UART_SetConfig+0x156>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e92:	e036      	b.n	8006f02 <UART_SetConfig+0x156>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9a:	e032      	b.n	8006f02 <UART_SetConfig+0x156>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a7e      	ldr	r2, [pc, #504]	; (800709c <UART_SetConfig+0x2f0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d12a      	bne.n	8006efc <UART_SetConfig+0x150>
 8006ea6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006eaa:	f7ff ff1f 	bl	8006cec <LL_RCC_GetLPUARTClockSource>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eb4:	d01a      	beq.n	8006eec <UART_SetConfig+0x140>
 8006eb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eba:	d81b      	bhi.n	8006ef4 <UART_SetConfig+0x148>
 8006ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec0:	d00c      	beq.n	8006edc <UART_SetConfig+0x130>
 8006ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec6:	d815      	bhi.n	8006ef4 <UART_SetConfig+0x148>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <UART_SetConfig+0x128>
 8006ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed0:	d008      	beq.n	8006ee4 <UART_SetConfig+0x138>
 8006ed2:	e00f      	b.n	8006ef4 <UART_SetConfig+0x148>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eda:	e012      	b.n	8006f02 <UART_SetConfig+0x156>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee2:	e00e      	b.n	8006f02 <UART_SetConfig+0x156>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eea:	e00a      	b.n	8006f02 <UART_SetConfig+0x156>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef2:	e006      	b.n	8006f02 <UART_SetConfig+0x156>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efa:	e002      	b.n	8006f02 <UART_SetConfig+0x156>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a65      	ldr	r2, [pc, #404]	; (800709c <UART_SetConfig+0x2f0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	f040 8097 	bne.w	800703c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d823      	bhi.n	8006f5e <UART_SetConfig+0x1b2>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x170>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f5f 	.word	0x08006f5f
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f5f 	.word	0x08006f5f
 8006f2c:	08006f4f 	.word	0x08006f4f
 8006f30:	08006f5f 	.word	0x08006f5f
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	08006f5f 	.word	0x08006f5f
 8006f3c:	08006f57 	.word	0x08006f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f40:	f7fe fdb2 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>
 8006f44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f46:	e010      	b.n	8006f6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f48:	4b56      	ldr	r3, [pc, #344]	; (80070a4 <UART_SetConfig+0x2f8>)
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f4c:	e00d      	b.n	8006f6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4e:	f7fe fd2b 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f54:	e009      	b.n	8006f6a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f5c:	e005      	b.n	8006f6a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 812b 	beq.w	80071c8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	4a4c      	ldr	r2, [pc, #304]	; (80070a8 <UART_SetConfig+0x2fc>)
 8006f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d305      	bcc.n	8006fa2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d903      	bls.n	8006faa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fa8:	e10e      	b.n	80071c8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2200      	movs	r2, #0
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	60fa      	str	r2, [r7, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	4a3c      	ldr	r2, [pc, #240]	; (80070a8 <UART_SetConfig+0x2fc>)
 8006fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fcc:	f7f9 fcce 	bl	800096c <__aeabi_uldivmod>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	020b      	lsls	r3, r1, #8
 8006fe2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fe6:	0202      	lsls	r2, r0, #8
 8006fe8:	6979      	ldr	r1, [r7, #20]
 8006fea:	6849      	ldr	r1, [r1, #4]
 8006fec:	0849      	lsrs	r1, r1, #1
 8006fee:	2000      	movs	r0, #0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	eb12 0804 	adds.w	r8, r2, r4
 8006ff8:	eb43 0905 	adc.w	r9, r3, r5
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	469a      	mov	sl, r3
 8007004:	4693      	mov	fp, r2
 8007006:	4652      	mov	r2, sl
 8007008:	465b      	mov	r3, fp
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 fcad 	bl	800096c <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4613      	mov	r3, r2
 8007018:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007020:	d308      	bcc.n	8007034 <UART_SetConfig+0x288>
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007028:	d204      	bcs.n	8007034 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a3a      	ldr	r2, [r7, #32]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	e0c9      	b.n	80071c8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800703a:	e0c5      	b.n	80071c8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007044:	d16d      	bne.n	8007122 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800704a:	3b01      	subs	r3, #1
 800704c:	2b07      	cmp	r3, #7
 800704e:	d82d      	bhi.n	80070ac <UART_SetConfig+0x300>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x2ac>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007079 	.word	0x08007079
 800705c:	08007081 	.word	0x08007081
 8007060:	080070ad 	.word	0x080070ad
 8007064:	08007087 	.word	0x08007087
 8007068:	080070ad 	.word	0x080070ad
 800706c:	080070ad 	.word	0x080070ad
 8007070:	080070ad 	.word	0x080070ad
 8007074:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fe fd2c 	bl	8005ad4 <HAL_RCC_GetPCLK2Freq>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707e:	e01b      	b.n	80070b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <UART_SetConfig+0x2f8>)
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007084:	e018      	b.n	80070b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fe fc8f 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708c:	e014      	b.n	80070b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007094:	e010      	b.n	80070b8 <UART_SetConfig+0x30c>
 8007096:	bf00      	nop
 8007098:	cfff69f3 	.word	0xcfff69f3
 800709c:	40008000 	.word	0x40008000
 80070a0:	40013800 	.word	0x40013800
 80070a4:	00f42400 	.word	0x00f42400
 80070a8:	0800af54 	.word	0x0800af54
      default:
        pclk = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8084 	beq.w	80071c8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	4a4b      	ldr	r2, [pc, #300]	; (80071f4 <UART_SetConfig+0x448>)
 80070c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d2:	005a      	lsls	r2, r3, #1
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	441a      	add	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d916      	bls.n	800711a <UART_SetConfig+0x36e>
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f2:	d212      	bcs.n	800711a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f023 030f 	bic.w	r3, r3, #15
 80070fc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	b29b      	uxth	r3, r3
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	b29a      	uxth	r2, r3
 800710a:	8bfb      	ldrh	r3, [r7, #30]
 800710c:	4313      	orrs	r3, r2
 800710e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	8bfa      	ldrh	r2, [r7, #30]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e056      	b.n	80071c8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007120:	e052      	b.n	80071c8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007126:	3b01      	subs	r3, #1
 8007128:	2b07      	cmp	r3, #7
 800712a:	d822      	bhi.n	8007172 <UART_SetConfig+0x3c6>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <UART_SetConfig+0x388>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007155 	.word	0x08007155
 8007138:	0800715d 	.word	0x0800715d
 800713c:	08007173 	.word	0x08007173
 8007140:	08007163 	.word	0x08007163
 8007144:	08007173 	.word	0x08007173
 8007148:	08007173 	.word	0x08007173
 800714c:	08007173 	.word	0x08007173
 8007150:	0800716b 	.word	0x0800716b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007154:	f7fe fcbe 	bl	8005ad4 <HAL_RCC_GetPCLK2Freq>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800715a:	e010      	b.n	800717e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800715c:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <UART_SetConfig+0x44c>)
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007160:	e00d      	b.n	800717e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007162:	f7fe fc21 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8007166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007168:	e009      	b.n	800717e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007170:	e005      	b.n	800717e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800717c:	bf00      	nop
    }

    if (pclk != 0U)
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d021      	beq.n	80071c8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <UART_SetConfig+0x448>)
 800718a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800718e:	461a      	mov	r2, r3
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	fbb3 f2f2 	udiv	r2, r3, r2
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	441a      	add	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d909      	bls.n	80071c2 <UART_SetConfig+0x416>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d205      	bcs.n	80071c2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e002      	b.n	80071c8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3730      	adds	r7, #48	; 0x30
 80071ec:	46bd      	mov	sp, r7
 80071ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f2:	bf00      	nop
 80071f4:	0800af54 	.word	0x0800af54
 80071f8:	00f42400 	.word	0x00f42400

080071fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01a      	beq.n	8007312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d10a      	bne.n	8007312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b098      	sub	sp, #96	; 0x60
 8007344:	af02      	add	r7, sp, #8
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007350:	f7fb fcea 	bl	8002d28 <HAL_GetTick>
 8007354:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d12f      	bne.n	80073c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f88e 	bl	8007494 <UART_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d022      	beq.n	80073c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007392:	653b      	str	r3, [r7, #80]	; 0x50
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739c:	647b      	str	r3, [r7, #68]	; 0x44
 800739e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e063      	b.n	800748c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d149      	bne.n	8007466 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073da:	2200      	movs	r2, #0
 80073dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f857 	bl	8007494 <UART_WaitOnFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d03c      	beq.n	8007466 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	623b      	str	r3, [r7, #32]
   return(result);
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
 800740c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	60fb      	str	r3, [r7, #12]
   return(result);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	64bb      	str	r3, [r7, #72]	; 0x48
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743e:	61fa      	str	r2, [r7, #28]
 8007440:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	69b9      	ldr	r1, [r7, #24]
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	617b      	str	r3, [r7, #20]
   return(result);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e012      	b.n	800748c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3758      	adds	r7, #88	; 0x58
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a4:	e049      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d045      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ae:	f7fb fc3b 	bl	8002d28 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d302      	bcc.n	80074c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e048      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d031      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d110      	bne.n	8007506 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2208      	movs	r2, #8
 80074ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 f838 	bl	8007562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2208      	movs	r2, #8
 80074f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e029      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007514:	d111      	bne.n	800753a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800751e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f81e 	bl	8007562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e00f      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4013      	ands	r3, r2
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	429a      	cmp	r2, r3
 8007556:	d0a6      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007562:	b480      	push	{r7}
 8007564:	b095      	sub	sp, #84	; 0x54
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800757e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007588:	643b      	str	r3, [r7, #64]	; 0x40
 800758a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800758e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e6      	bne.n	800756a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b2:	f023 0301 	bic.w	r3, r3, #1
 80075b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3308      	adds	r3, #8
 80075be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e3      	bne.n	800759c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d118      	bne.n	800760e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f023 0310 	bic.w	r3, r3, #16
 80075f0:	647b      	str	r3, [r7, #68]	; 0x44
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6979      	ldr	r1, [r7, #20]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	613b      	str	r3, [r7, #16]
   return(result);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007622:	bf00      	nop
 8007624:	3754      	adds	r7, #84	; 0x54
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_UARTEx_DisableFifoMode+0x16>
 8007640:	2302      	movs	r3, #2
 8007642:	e027      	b.n	8007694 <HAL_UARTEx_DisableFifoMode+0x66>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2224      	movs	r2, #36	; 0x24
 8007650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007672:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e02d      	b.n	8007714 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2224      	movs	r2, #36	; 0x24
 80076c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f84f 	bl	8007798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007730:	2302      	movs	r3, #2
 8007732:	e02d      	b.n	8007790 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2224      	movs	r2, #36	; 0x24
 8007740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f811 	bl	8007798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d108      	bne.n	80077ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077b8:	e031      	b.n	800781e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077ba:	2308      	movs	r3, #8
 80077bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077be:	2308      	movs	r3, #8
 80077c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	0e5b      	lsrs	r3, r3, #25
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	0f5b      	lsrs	r3, r3, #29
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	7b3a      	ldrb	r2, [r7, #12]
 80077e6:	4911      	ldr	r1, [pc, #68]	; (800782c <UARTEx_SetNbDataToProcess+0x94>)
 80077e8:	5c8a      	ldrb	r2, [r1, r2]
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077ee:	7b3a      	ldrb	r2, [r7, #12]
 80077f0:	490f      	ldr	r1, [pc, #60]	; (8007830 <UARTEx_SetNbDataToProcess+0x98>)
 80077f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	7b7a      	ldrb	r2, [r7, #13]
 8007804:	4909      	ldr	r1, [pc, #36]	; (800782c <UARTEx_SetNbDataToProcess+0x94>)
 8007806:	5c8a      	ldrb	r2, [r1, r2]
 8007808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800780c:	7b7a      	ldrb	r2, [r7, #13]
 800780e:	4908      	ldr	r1, [pc, #32]	; (8007830 <UARTEx_SetNbDataToProcess+0x98>)
 8007810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007812:	fb93 f3f2 	sdiv	r3, r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	0800af6c 	.word	0x0800af6c
 8007830:	0800af74 	.word	0x0800af74

08007834 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	2218      	movs	r2, #24
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f001 f92d 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800784c:	233f      	movs	r3, #63	; 0x3f
 800784e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007850:	2381      	movs	r3, #129	; 0x81
 8007852:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007858:	2301      	movs	r3, #1
 800785a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fba8 	bl	8008fb8 <hci_send_req>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	da01      	bge.n	8007872 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800786e:	23ff      	movs	r3, #255	; 0xff
 8007870:	e000      	b.n	8007874 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007872:	79fb      	ldrb	r3, [r7, #7]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800787c:	b5b0      	push	{r4, r5, r7, lr}
 800787e:	b0ce      	sub	sp, #312	; 0x138
 8007880:	af00      	add	r7, sp, #0
 8007882:	4605      	mov	r5, r0
 8007884:	460c      	mov	r4, r1
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800788e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007892:	462a      	mov	r2, r5
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800789a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800789e:	4622      	mov	r2, r4
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078a6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80078aa:	4602      	mov	r2, r0
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078b2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80078b6:	460a      	mov	r2, r1
 80078b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80078ba:	f107 0310 	add.w	r3, r7, #16
 80078be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80078c2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80078c6:	3308      	adds	r3, #8
 80078c8:	f107 0210 	add.w	r2, r7, #16
 80078cc:	4413      	add	r3, r2
 80078ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80078d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80078d6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80078da:	4413      	add	r3, r2
 80078dc:	3309      	adds	r3, #9
 80078de:	f107 0210 	add.w	r2, r7, #16
 80078e2:	4413      	add	r3, r2
 80078e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078ec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80078fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007902:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007906:	7812      	ldrb	r2, [r2, #0]
 8007908:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800790a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800790e:	3301      	adds	r3, #1
 8007910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007918:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800791c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007920:	8812      	ldrh	r2, [r2, #0]
 8007922:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800792a:	3302      	adds	r3, #2
 800792c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007934:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007938:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800793c:	8812      	ldrh	r2, [r2, #0]
 800793e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007946:	3302      	adds	r3, #2
 8007948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800794c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007950:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007954:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007958:	7812      	ldrb	r2, [r2, #0]
 800795a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800795c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007960:	3301      	adds	r3, #1
 8007962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007966:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800796a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800796e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007974:	3301      	adds	r3, #1
 8007976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800797a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800797e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007982:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007988:	3301      	adds	r3, #1
 800798a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800798e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007992:	3308      	adds	r3, #8
 8007994:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007998:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800799c:	4618      	mov	r0, r3
 800799e:	f001 f872 	bl	8008a86 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80079a2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80079a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80079aa:	4413      	add	r3, r2
 80079ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80079b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079b4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80079b8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80079ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079be:	3301      	adds	r3, #1
 80079c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80079c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079c8:	3301      	adds	r3, #1
 80079ca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80079ce:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 f857 	bl	8008a86 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80079d8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80079dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80079e0:	4413      	add	r3, r2
 80079e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80079ee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80079f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079f4:	3302      	adds	r3, #2
 80079f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80079fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079fe:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007a02:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a08:	3302      	adds	r3, #2
 8007a0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a12:	2218      	movs	r2, #24
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 f845 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a1c:	233f      	movs	r3, #63	; 0x3f
 8007a1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007a22:	2383      	movs	r3, #131	; 0x83
 8007a24:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a28:	f107 0310 	add.w	r3, r7, #16
 8007a2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a38:	f107 030f 	add.w	r3, r7, #15
 8007a3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fab3 	bl	8008fb8 <hci_send_req>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	da01      	bge.n	8007a5c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007a58:	23ff      	movs	r3, #255	; 0xff
 8007a5a:	e004      	b.n	8007a66 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007a5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a60:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a64:	781b      	ldrb	r3, [r3, #0]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bdb0      	pop	{r4, r5, r7, pc}

08007a70 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b0cc      	sub	sp, #304	; 0x130
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4602      	mov	r2, r0
 8007a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007a82:	f107 0310 	add.w	r3, r7, #16
 8007a86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007aa4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007aa8:	7812      	ldrb	r2, [r2, #0]
 8007aaa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aba:	2218      	movs	r2, #24
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fff1 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ac4:	233f      	movs	r3, #63	; 0x3f
 8007ac6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007aca:	2385      	movs	r3, #133	; 0x85
 8007acc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007adc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ae0:	f107 030f 	add.w	r3, r7, #15
 8007ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 fa5f 	bl	8008fb8 <hci_send_req>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da01      	bge.n	8007b04 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007b00:	23ff      	movs	r3, #255	; 0xff
 8007b02:	e004      	b.n	8007b0e <aci_gap_set_io_capability+0x9e>
  return status;
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b0c:	781b      	ldrb	r3, [r3, #0]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007b18:	b5b0      	push	{r4, r5, r7, lr}
 8007b1a:	b0cc      	sub	sp, #304	; 0x130
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4605      	mov	r5, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007b2e:	462a      	mov	r2, r5
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007b46:	4602      	mov	r2, r0
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b52:	460a      	mov	r2, r1
 8007b54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007b56:	f107 0310 	add.w	r3, r7, #16
 8007b5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b78:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b84:	3301      	adds	r3, #1
 8007b86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b92:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bac:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007bb0:	7812      	ldrb	r2, [r2, #0]
 8007bb2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb8:	3301      	adds	r3, #1
 8007bba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bc6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bdc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007be0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007be6:	3301      	adds	r3, #1
 8007be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007bf4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c04:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007c08:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007c0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c18:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007c1c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c24:	3304      	adds	r3, #4
 8007c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007c32:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c38:	3301      	adds	r3, #1
 8007c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c42:	2218      	movs	r2, #24
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 ff2d 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c4c:	233f      	movs	r3, #63	; 0x3f
 8007c4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007c52:	2386      	movs	r3, #134	; 0x86
 8007c54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c58:	f107 0310 	add.w	r3, r7, #16
 8007c5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c68:	f107 030f 	add.w	r3, r7, #15
 8007c6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 f99b 	bl	8008fb8 <hci_send_req>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da01      	bge.n	8007c8c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007c88:	23ff      	movs	r3, #255	; 0xff
 8007c8a:	e004      	b.n	8007c96 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c94:	781b      	ldrb	r3, [r3, #0]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bdb0      	pop	{r4, r5, r7, pc}

08007ca0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b0cc      	sub	sp, #304	; 0x130
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb0:	6019      	str	r1, [r3, #0]
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007cba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007cbc:	f107 0310 	add.w	r3, r7, #16
 8007cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cde:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007ce2:	8812      	ldrh	r2, [r2, #0]
 8007ce4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cea:	3302      	adds	r3, #2
 8007cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cf8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d06:	3304      	adds	r3, #4
 8007d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d10:	2218      	movs	r2, #24
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fec6 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d1a:	233f      	movs	r3, #63	; 0x3f
 8007d1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007d20:	2388      	movs	r3, #136	; 0x88
 8007d22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d26:	f107 0310 	add.w	r3, r7, #16
 8007d2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d36:	f107 030f 	add.w	r3, r7, #15
 8007d3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f934 	bl	8008fb8 <hci_send_req>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	da01      	bge.n	8007d5a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007d56:	23ff      	movs	r3, #255	; 0xff
 8007d58:	e004      	b.n	8007d64 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d62:	781b      	ldrb	r3, [r3, #0]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007d6e:	b590      	push	{r4, r7, lr}
 8007d70:	b0cd      	sub	sp, #308	; 0x134
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	4604      	mov	r4, r0
 8007d76:	4608      	mov	r0, r1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d7e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d94:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d98:	4602      	mov	r2, r0
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007da4:	460a      	mov	r2, r1
 8007da6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	2207      	movs	r2, #7
 8007db6:	2100      	movs	r1, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fe74 	bl	8008aa6 <Osal_MemSet>
  int index_input = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dcc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dd8:	3301      	adds	r3, #1
 8007dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007de6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007df2:	3301      	adds	r3, #1
 8007df4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e00:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007e04:	7812      	ldrb	r2, [r2, #0]
 8007e06:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e16:	2218      	movs	r2, #24
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fe43 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e20:	233f      	movs	r3, #63	; 0x3f
 8007e22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007e26:	238a      	movs	r3, #138	; 0x8a
 8007e28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e2c:	f107 0310 	add.w	r3, r7, #16
 8007e30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007e3c:	f107 0308 	add.w	r3, r7, #8
 8007e40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007e44:	2307      	movs	r3, #7
 8007e46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f8b1 	bl	8008fb8 <hci_send_req>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da01      	bge.n	8007e60 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007e5c:	23ff      	movs	r3, #255	; 0xff
 8007e5e:	e02e      	b.n	8007ebe <aci_gap_init+0x150>
  if ( resp.Status )
 8007e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <aci_gap_init+0x10c>
    return resp.Status;
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	e021      	b.n	8007ebe <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e9c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007ea6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007eb0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007eba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd90      	pop	{r4, r7, pc}

08007ec8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0cc      	sub	sp, #304	; 0x130
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4602      	mov	r2, r0
 8007ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed8:	6019      	str	r1, [r3, #0]
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ee2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007ee4:	f107 0310 	add.w	r3, r7, #16
 8007ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f06:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f12:	3301      	adds	r3, #1
 8007f14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1c:	1c58      	adds	r0, r3, #1
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f26:	781a      	ldrb	r2, [r3, #0]
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f30:	6819      	ldr	r1, [r3, #0]
 8007f32:	f000 fda8 	bl	8008a86 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007f44:	4413      	add	r3, r2
 8007f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f4e:	2218      	movs	r2, #24
 8007f50:	2100      	movs	r1, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fda7 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f58:	233f      	movs	r3, #63	; 0x3f
 8007f5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007f5e:	238e      	movs	r3, #142	; 0x8e
 8007f60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f64:	f107 0310 	add.w	r3, r7, #16
 8007f68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f74:	f107 030f 	add.w	r3, r7, #15
 8007f78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 f815 	bl	8008fb8 <hci_send_req>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da01      	bge.n	8007f98 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007f94:	23ff      	movs	r3, #255	; 0xff
 8007f96:	e004      	b.n	8007fa2 <aci_gap_update_adv_data+0xda>
  return status;
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007fa0:	781b      	ldrb	r3, [r3, #0]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	2218      	movs	r2, #24
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fd71 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fc4:	233f      	movs	r3, #63	; 0x3f
 8007fc6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007fc8:	2392      	movs	r3, #146	; 0x92
 8007fca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fcc:	1dfb      	adds	r3, r7, #7
 8007fce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 ffec 	bl	8008fb8 <hci_send_req>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da01      	bge.n	8007fea <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007fe6:	23ff      	movs	r3, #255	; 0xff
 8007fe8:	e000      	b.n	8007fec <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8007fea:	79fb      	ldrb	r3, [r7, #7]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b0cc      	sub	sp, #304	; 0x130
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008000:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800800e:	460a      	mov	r2, r1
 8008010:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008012:	f107 0310 	add.w	r3, r7, #16
 8008016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800802c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008030:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008034:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008038:	8812      	ldrh	r2, [r2, #0]
 800803a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800803c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008040:	3302      	adds	r3, #2
 8008042:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800804e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800805a:	3301      	adds	r3, #1
 800805c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008060:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008064:	2218      	movs	r2, #24
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fd1c 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800806e:	233f      	movs	r3, #63	; 0x3f
 8008070:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008074:	23a5      	movs	r3, #165	; 0xa5
 8008076:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800807a:	f107 0310 	add.w	r3, r7, #16
 800807e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008086:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800808a:	f107 030f 	add.w	r3, r7, #15
 800808e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008092:	2301      	movs	r3, #1
 8008094:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008098:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 ff8a 	bl	8008fb8 <hci_send_req>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da01      	bge.n	80080ae <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80080aa:	23ff      	movs	r3, #255	; 0xff
 80080ac:	e004      	b.n	80080b8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80080ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080b6:	781b      	ldrb	r3, [r3, #0]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b088      	sub	sp, #32
 80080c6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080cc:	f107 0308 	add.w	r3, r7, #8
 80080d0:	2218      	movs	r2, #24
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fce6 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080da:	233f      	movs	r3, #63	; 0x3f
 80080dc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80080de:	f240 1301 	movw	r3, #257	; 0x101
 80080e2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80080e4:	1dfb      	adds	r3, r7, #7
 80080e6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80080e8:	2301      	movs	r3, #1
 80080ea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 ff60 	bl	8008fb8 <hci_send_req>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	da01      	bge.n	8008102 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80080fe:	23ff      	movs	r3, #255	; 0xff
 8008100:	e000      	b.n	8008104 <aci_gatt_init+0x42>
  return status;
 8008102:	79fb      	ldrb	r3, [r7, #7]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b0cf      	sub	sp, #316	; 0x13c
 8008110:	af00      	add	r7, sp, #0
 8008112:	4604      	mov	r4, r0
 8008114:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008118:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800811c:	6001      	str	r1, [r0, #0]
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008126:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800812a:	4622      	mov	r2, r4
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008132:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008136:	4602      	mov	r2, r0
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800813e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008142:	460a      	mov	r2, r1
 8008144:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008146:	f107 0310 	add.w	r3, r7, #16
 800814a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800814e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008152:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d00a      	beq.n	8008172 <aci_gatt_add_service+0x66>
 800815c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008160:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d101      	bne.n	800816e <aci_gatt_add_service+0x62>
 800816a:	2311      	movs	r3, #17
 800816c:	e002      	b.n	8008174 <aci_gatt_add_service+0x68>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <aci_gatt_add_service+0x68>
 8008172:	2303      	movs	r3, #3
 8008174:	f107 0210 	add.w	r2, r7, #16
 8008178:	4413      	add	r3, r2
 800817a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	2203      	movs	r2, #3
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fc8d 	bl	8008aa6 <Osal_MemSet>
  int index_input = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008192:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008196:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800819a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800819e:	7812      	ldrb	r2, [r2, #0]
 80081a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081a6:	3301      	adds	r3, #1
 80081a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80081ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081b0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d002      	beq.n	80081c0 <aci_gatt_add_service+0xb4>
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d004      	beq.n	80081c8 <aci_gatt_add_service+0xbc>
 80081be:	e007      	b.n	80081d0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80081c0:	2302      	movs	r3, #2
 80081c2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80081c6:	e005      	b.n	80081d4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80081ce:	e001      	b.n	80081d4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80081d0:	2397      	movs	r3, #151	; 0x97
 80081d2:	e06c      	b.n	80082ae <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80081d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081d8:	1c58      	adds	r0, r3, #1
 80081da:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80081de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80081e6:	6819      	ldr	r1, [r3, #0]
 80081e8:	f000 fc4d 	bl	8008a86 <Osal_MemCpy>
    index_input += size;
 80081ec:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80081f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80081f4:	4413      	add	r3, r2
 80081f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80081fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008202:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800820a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800820e:	3301      	adds	r3, #1
 8008210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800821c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008228:	3301      	adds	r3, #1
 800822a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800822e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008232:	2218      	movs	r2, #24
 8008234:	2100      	movs	r1, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fc35 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800823c:	233f      	movs	r3, #63	; 0x3f
 800823e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008242:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008246:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008252:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008256:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008262:	2303      	movs	r3, #3
 8008264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fea2 	bl	8008fb8 <hci_send_req>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	da01      	bge.n	800827e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800827a:	23ff      	movs	r3, #255	; 0xff
 800827c:	e017      	b.n	80082ae <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800827e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800828c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	e00a      	b.n	80082ae <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008298:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800829c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80082aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd90      	pop	{r4, r7, pc}

080082b8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b0d1      	sub	sp, #324	; 0x144
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80082c6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80082ca:	600a      	str	r2, [r1, #0]
 80082cc:	4619      	mov	r1, r3
 80082ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80082d2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80082d6:	4622      	mov	r2, r4
 80082d8:	801a      	strh	r2, [r3, #0]
 80082da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80082de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80082e2:	4602      	mov	r2, r0
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80082ea:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80082ee:	460a      	mov	r2, r1
 80082f0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80082f2:	f107 0318 	add.w	r3, r7, #24
 80082f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80082fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80082fe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d00a      	beq.n	800831e <aci_gatt_add_char+0x66>
 8008308:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800830c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d101      	bne.n	800831a <aci_gatt_add_char+0x62>
 8008316:	2313      	movs	r3, #19
 8008318:	e002      	b.n	8008320 <aci_gatt_add_char+0x68>
 800831a:	2303      	movs	r3, #3
 800831c:	e000      	b.n	8008320 <aci_gatt_add_char+0x68>
 800831e:	2305      	movs	r3, #5
 8008320:	f107 0218 	add.w	r2, r7, #24
 8008324:	4413      	add	r3, r2
 8008326:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800832a:	f107 0314 	add.w	r3, r7, #20
 800832e:	2203      	movs	r2, #3
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fbb7 	bl	8008aa6 <Osal_MemSet>
  int index_input = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800833e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008342:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008346:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800834a:	8812      	ldrh	r2, [r2, #0]
 800834c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800834e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008352:	3302      	adds	r3, #2
 8008354:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008358:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800835c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008360:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800836c:	3301      	adds	r3, #1
 800836e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008372:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008376:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d002      	beq.n	8008386 <aci_gatt_add_char+0xce>
 8008380:	2b02      	cmp	r3, #2
 8008382:	d004      	beq.n	800838e <aci_gatt_add_char+0xd6>
 8008384:	e007      	b.n	8008396 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008386:	2302      	movs	r3, #2
 8008388:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800838c:	e005      	b.n	800839a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800838e:	2310      	movs	r3, #16
 8008390:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008394:	e001      	b.n	800839a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008396:	2397      	movs	r3, #151	; 0x97
 8008398:	e091      	b.n	80084be <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800839a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800839e:	1cd8      	adds	r0, r3, #3
 80083a0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80083a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80083a8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	f000 fb6a 	bl	8008a86 <Osal_MemCpy>
    index_input += size;
 80083b2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80083b6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80083ba:	4413      	add	r3, r2
 80083bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80083c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083c4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80083c8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80083cc:	8812      	ldrh	r2, [r2, #0]
 80083ce:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80083d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083d4:	3302      	adds	r3, #2
 80083d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80083da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083de:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80083e2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80083e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083e8:	3301      	adds	r3, #1
 80083ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80083ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083f2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80083f6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80083f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083fc:	3301      	adds	r3, #1
 80083fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008402:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008406:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800840a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800840c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008410:	3301      	adds	r3, #1
 8008412:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800841a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800841e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008424:	3301      	adds	r3, #1
 8008426:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800842a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800842e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008432:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008434:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008438:	3301      	adds	r3, #1
 800843a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800843e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008442:	2218      	movs	r2, #24
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fb2d 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800844c:	233f      	movs	r3, #63	; 0x3f
 800844e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008452:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008456:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800845a:	f107 0318 	add.w	r3, r7, #24
 800845e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008466:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008472:	2303      	movs	r3, #3
 8008474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008478:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800847c:	2100      	movs	r1, #0
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fd9a 	bl	8008fb8 <hci_send_req>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	da01      	bge.n	800848e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800848a:	23ff      	movs	r3, #255	; 0xff
 800848c:	e017      	b.n	80084be <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800848e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800849c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	e00a      	b.n	80084be <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80084a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80084ba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd90      	pop	{r4, r7, pc}

080084c8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80084c8:	b5b0      	push	{r4, r5, r7, lr}
 80084ca:	b0cc      	sub	sp, #304	; 0x130
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4605      	mov	r5, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	4610      	mov	r0, r2
 80084d4:	4619      	mov	r1, r3
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80084de:	462a      	mov	r2, r5
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ea:	4622      	mov	r2, r4
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80084f6:	4602      	mov	r2, r0
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fe:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008502:	460a      	mov	r2, r1
 8008504:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008506:	f107 0310 	add.w	r3, r7, #16
 800850a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800850e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008512:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008524:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008528:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800852c:	8812      	ldrh	r2, [r2, #0]
 800852e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008534:	3302      	adds	r3, #2
 8008536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800853a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008542:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800854a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800854e:	3302      	adds	r3, #2
 8008550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008558:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800855c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008560:	7812      	ldrb	r2, [r2, #0]
 8008562:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008568:	3301      	adds	r3, #1
 800856a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800856e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008572:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008576:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800857e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008582:	3301      	adds	r3, #1
 8008584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858c:	1d98      	adds	r0, r3, #6
 800858e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008592:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800859e:	f000 fa72 	bl	8008a86 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80085b0:	4413      	add	r3, r2
 80085b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085ba:	2218      	movs	r2, #24
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa71 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085c4:	233f      	movs	r3, #63	; 0x3f
 80085c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80085ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80085ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80085d2:	f107 0310 	add.w	r3, r7, #16
 80085d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80085e2:	f107 030f 	add.w	r3, r7, #15
 80085e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fcde 	bl	8008fb8 <hci_send_req>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da01      	bge.n	8008606 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008602:	23ff      	movs	r3, #255	; 0xff
 8008604:	e004      	b.n	8008610 <aci_gatt_update_char_value+0x148>
  return status;
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800860e:	781b      	ldrb	r3, [r3, #0]
}
 8008610:	4618      	mov	r0, r3
 8008612:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008616:	46bd      	mov	sp, r7
 8008618:	bdb0      	pop	{r4, r5, r7, pc}

0800861a <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b0cc      	sub	sp, #304	; 0x130
 800861e:	af00      	add	r7, sp, #0
 8008620:	4602      	mov	r2, r0
 8008622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008626:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800862a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800862c:	f107 0310 	add.w	r3, r7, #16
 8008630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008638:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800864e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008652:	8812      	ldrh	r2, [r2, #0]
 8008654:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800865a:	3302      	adds	r3, #2
 800865c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008660:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008664:	2218      	movs	r2, #24
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fa1c 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800866e:	233f      	movs	r3, #63	; 0x3f
 8008670:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 8008674:	f240 1327 	movw	r3, #295	; 0x127
 8008678:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800867c:	f107 0310 	add.w	r3, r7, #16
 8008680:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008688:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800868c:	f107 030f 	add.w	r3, r7, #15
 8008690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008694:	2301      	movs	r3, #1
 8008696:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800869a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fc89 	bl	8008fb8 <hci_send_req>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da01      	bge.n	80086b0 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80086ac:	23ff      	movs	r3, #255	; 0xff
 80086ae:	e004      	b.n	80086ba <aci_gatt_allow_read+0xa0>
  return status;
 80086b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086b8:	781b      	ldrb	r3, [r3, #0]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b0cc      	sub	sp, #304	; 0x130
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80086dc:	4602      	mov	r2, r0
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80086e8:	460a      	mov	r2, r1
 80086ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80086ec:	f107 0310 	add.w	r3, r7, #16
 80086f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80086f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800870a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800870e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800871a:	3301      	adds	r3, #1
 800871c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008728:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800872c:	7812      	ldrb	r2, [r2, #0]
 800872e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008734:	3301      	adds	r3, #1
 8008736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800873a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800873e:	1c98      	adds	r0, r3, #2
 8008740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008744:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	f000 f997 	bl	8008a86 <Osal_MemCpy>
  index_input += Length;
 8008758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008766:	4413      	add	r3, r2
 8008768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800876c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008770:	2218      	movs	r2, #24
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f000 f996 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800877a:	233f      	movs	r3, #63	; 0x3f
 800877c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008780:	230c      	movs	r3, #12
 8008782:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800878e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008792:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008796:	f107 030f 	add.w	r3, r7, #15
 800879a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800879e:	2301      	movs	r3, #1
 80087a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fc04 	bl	8008fb8 <hci_send_req>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	da01      	bge.n	80087ba <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80087b6:	23ff      	movs	r3, #255	; 0xff
 80087b8:	e004      	b.n	80087c4 <aci_hal_write_config_data+0x100>
  return status;
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087c2:	781b      	ldrb	r3, [r3, #0]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b0cc      	sub	sp, #304	; 0x130
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	4602      	mov	r2, r0
 80087d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087e8:	460a      	mov	r2, r1
 80087ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80087ec:	f107 0310 	add.w	r3, r7, #16
 80087f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087fc:	2200      	movs	r2, #0
 80087fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800880e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008812:	7812      	ldrb	r2, [r2, #0]
 8008814:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800881a:	3301      	adds	r3, #1
 800881c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008824:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008828:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800882c:	7812      	ldrb	r2, [r2, #0]
 800882e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008830:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008834:	3301      	adds	r3, #1
 8008836:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800883a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800883e:	2218      	movs	r2, #24
 8008840:	2100      	movs	r1, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f92f 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008848:	233f      	movs	r3, #63	; 0x3f
 800884a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800884e:	230f      	movs	r3, #15
 8008850:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800885c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008860:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008864:	f107 030f 	add.w	r3, r7, #15
 8008868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800886c:	2301      	movs	r3, #1
 800886e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fb9d 	bl	8008fb8 <hci_send_req>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	da01      	bge.n	8008888 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008884:	23ff      	movs	r3, #255	; 0xff
 8008886:	e004      	b.n	8008892 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008890:	781b      	ldrb	r3, [r3, #0]
}
 8008892:	4618      	mov	r0, r3
 8008894:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b0cc      	sub	sp, #304	; 0x130
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4602      	mov	r2, r0
 80088a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80088ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80088ae:	f107 0310 	add.w	r3, r7, #16
 80088b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088d0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088d4:	8812      	ldrh	r2, [r2, #0]
 80088d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80088d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088dc:	3302      	adds	r3, #2
 80088de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088e6:	2218      	movs	r2, #24
 80088e8:	2100      	movs	r1, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f8db 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088f0:	233f      	movs	r3, #63	; 0x3f
 80088f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80088f6:	2318      	movs	r3, #24
 80088f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008908:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800890c:	f107 030f 	add.w	r3, r7, #15
 8008910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008914:	2301      	movs	r3, #1
 8008916:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800891a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fb49 	bl	8008fb8 <hci_send_req>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	da01      	bge.n	8008930 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800892c:	23ff      	movs	r3, #255	; 0xff
 800892e:	e004      	b.n	800893a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008934:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008938:	781b      	ldrb	r3, [r3, #0]
}
 800893a:	4618      	mov	r0, r3
 800893c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	2218      	movs	r2, #24
 8008954:	2100      	movs	r1, #0
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f8a5 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x03;
 800895c:	2303      	movs	r3, #3
 800895e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008960:	2303      	movs	r3, #3
 8008962:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008964:	1dfb      	adds	r3, r7, #7
 8008966:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008968:	2301      	movs	r3, #1
 800896a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800896c:	f107 0308 	add.w	r3, r7, #8
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fb20 	bl	8008fb8 <hci_send_req>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	da01      	bge.n	8008982 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800897e:	23ff      	movs	r3, #255	; 0xff
 8008980:	e000      	b.n	8008984 <hci_reset+0x40>
  return status;
 8008982:	79fb      	ldrb	r3, [r7, #7]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b0cd      	sub	sp, #308	; 0x134
 8008990:	af00      	add	r7, sp, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80089a0:	4622      	mov	r2, r4
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80089ac:	4602      	mov	r2, r0
 80089ae:	701a      	strb	r2, [r3, #0]
 80089b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80089b8:	460a      	mov	r2, r1
 80089ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80089bc:	f107 0310 	add.w	r3, r7, #16
 80089c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80089c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089cc:	2200      	movs	r2, #0
 80089ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80089d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089de:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80089e2:	7812      	ldrb	r2, [r2, #0]
 80089e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ea:	3301      	adds	r3, #1
 80089ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80089f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80089fc:	7812      	ldrb	r2, [r2, #0]
 80089fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a04:	3301      	adds	r3, #1
 8008a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a12:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a1e:	3301      	adds	r3, #1
 8008a20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a28:	2218      	movs	r2, #24
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f83a 	bl	8008aa6 <Osal_MemSet>
  rq.ogf = 0x08;
 8008a32:	2308      	movs	r3, #8
 8008a34:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008a38:	2331      	movs	r3, #49	; 0x31
 8008a3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a3e:	f107 0310 	add.w	r3, r7, #16
 8008a42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a4e:	f107 030f 	add.w	r3, r7, #15
 8008a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 faa8 	bl	8008fb8 <hci_send_req>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da01      	bge.n	8008a72 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008a6e:	23ff      	movs	r3, #255	; 0xff
 8008a70:	e004      	b.n	8008a7c <hci_le_set_default_phy+0xf0>
  return status;
 8008a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a7a:	781b      	ldrb	r3, [r3, #0]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd90      	pop	{r4, r7, pc}

08008a86 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f002 f914 	bl	800acc4 <memcpy>
 8008a9c:	4603      	mov	r3, r0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f002 f8d8 	bl	800ac6c <memset>
 8008abc:	4603      	mov	r3, r0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	af00      	add	r7, sp, #0
  return;
 8008aca:	bf00      	nop
}
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  return;
 8008ad8:	bf00      	nop
}
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	af00      	add	r7, sp, #0
  return;
 8008ae6:	bf00      	nop
}
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  return;
 8008af4:	bf00      	nop
}
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008afe:	b480      	push	{r7}
 8008b00:	af00      	add	r7, sp, #0
  return;
 8008b02:	bf00      	nop
}
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  return;
 8008b10:	bf00      	nop
}
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	af00      	add	r7, sp, #0
  return;
 8008b1e:	bf00      	nop
}
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
  return;
 8008b2c:	bf00      	nop
}
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0
  return;
 8008b3a:	bf00      	nop
}
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  return;
 8008b48:	bf00      	nop
}
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008b52:	b480      	push	{r7}
 8008b54:	af00      	add	r7, sp, #0
  return;
 8008b56:	bf00      	nop
}
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  return;
 8008b64:	bf00      	nop
}
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008b6e:	b480      	push	{r7}
 8008b70:	af00      	add	r7, sp, #0
  return;
 8008b72:	bf00      	nop
}
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
  return;
 8008b80:	bf00      	nop
}
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	af00      	add	r7, sp, #0
  return;
 8008b8e:	bf00      	nop
}
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  return;
 8008b9c:	bf00      	nop
}
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	af00      	add	r7, sp, #0
  return;
 8008baa:	bf00      	nop
}
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008bb8:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <SVCCTL_Init+0x18>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <SVCCTL_Init+0x1c>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008bc4:	f000 f806 	bl	8008bd4 <SVCCTL_SvcInit>

  return;
 8008bc8:	bf00      	nop
}
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20000034 	.word	0x20000034
 8008bd0:	20000054 	.word	0x20000054

08008bd4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  BAS_Init();
 8008bd8:	f7ff ff75 	bl	8008ac6 <BAS_Init>

  BLS_Init();
 8008bdc:	f7ff ff7a 	bl	8008ad4 <BLS_Init>

  CRS_STM_Init();
 8008be0:	f7ff ff7f 	bl	8008ae2 <CRS_STM_Init>

  DIS_Init();
 8008be4:	f7ff ff84 	bl	8008af0 <DIS_Init>

  EDS_STM_Init();
 8008be8:	f7ff ff89 	bl	8008afe <EDS_STM_Init>

  HIDS_Init();
 8008bec:	f7ff ff8e 	bl	8008b0c <HIDS_Init>

  HRS_Init();
 8008bf0:	f7ff ff93 	bl	8008b1a <HRS_Init>

  HTS_Init();
 8008bf4:	f7ff ff98 	bl	8008b28 <HTS_Init>

  IAS_Init();
 8008bf8:	f7ff ff9d 	bl	8008b36 <IAS_Init>

  LLS_Init();
 8008bfc:	f7ff ffa2 	bl	8008b44 <LLS_Init>

  TPS_Init();
 8008c00:	f7ff ffa7 	bl	8008b52 <TPS_Init>

  MOTENV_STM_Init();
 8008c04:	f7ff ffac 	bl	8008b60 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008c08:	f7ff ffb1 	bl	8008b6e <P2PS_STM_Init>

  ZDD_STM_Init();
 8008c0c:	f7ff ffb6 	bl	8008b7c <ZDD_STM_Init>

  OTAS_STM_Init();
 8008c10:	f7ff ffbb 	bl	8008b8a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008c14:	f7ff ffc7 	bl	8008ba6 <BVOPUS_STM_Init>

  MESH_Init();
 8008c18:	f7ff ffbe 	bl	8008b98 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008c1c:	f001 fafc 	bl	800a218 <SVCCTL_InitCustomSvc>
  
  return;
 8008c20:	bf00      	nop
}
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c2e:	7f1b      	ldrb	r3, [r3, #28]
 8008c30:	4619      	mov	r1, r3
 8008c32:	4a08      	ldr	r2, [pc, #32]	; (8008c54 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c3c:	7f1b      	ldrb	r3, [r3, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c44:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008c46:	bf00      	nop
}
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000034 	.word	0x20000034

08008c58 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3301      	adds	r3, #1
 8008c64:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2bff      	cmp	r3, #255	; 0xff
 8008c70:	d125      	bne.n	8008cbe <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3302      	adds	r3, #2
 8008c76:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c86:	d118      	bne.n	8008cba <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	757b      	strb	r3, [r7, #21]
 8008c8c:	e00d      	b.n	8008caa <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008c8e:	7d7b      	ldrb	r3, [r7, #21]
 8008c90:	4a1a      	ldr	r2, [pc, #104]	; (8008cfc <SVCCTL_UserEvtRx+0xa4>)
 8008c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d108      	bne.n	8008cb6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008ca4:	7d7b      	ldrb	r3, [r7, #21]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	757b      	strb	r3, [r7, #21]
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <SVCCTL_UserEvtRx+0xa4>)
 8008cac:	7f1b      	ldrb	r3, [r3, #28]
 8008cae:	7d7a      	ldrb	r2, [r7, #21]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d3ec      	bcc.n	8008c8e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008cb4:	e002      	b.n	8008cbc <SVCCTL_UserEvtRx+0x64>
              break;
 8008cb6:	bf00      	nop
          break;
 8008cb8:	e000      	b.n	8008cbc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008cba:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008cbc:	e000      	b.n	8008cc0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008cbe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d00f      	beq.n	8008ce6 <SVCCTL_UserEvtRx+0x8e>
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	dc10      	bgt.n	8008cec <SVCCTL_UserEvtRx+0x94>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <SVCCTL_UserEvtRx+0x7c>
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d006      	beq.n	8008ce0 <SVCCTL_UserEvtRx+0x88>
 8008cd2:	e00b      	b.n	8008cec <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 ff85 	bl	8009be4 <SVCCTL_App_Notification>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	75bb      	strb	r3, [r7, #22]
      break;
 8008cde:	e008      	b.n	8008cf2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75bb      	strb	r3, [r7, #22]
      break;
 8008ce4:	e005      	b.n	8008cf2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75bb      	strb	r3, [r7, #22]
      break;
 8008cea:	e002      	b.n	8008cf2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75bb      	strb	r3, [r7, #22]
      break;
 8008cf0:	bf00      	nop
  }

  return (return_status);
 8008cf2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000034 	.word	0x20000034

08008d00 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008d08:	f107 030c 	add.w	r3, r7, #12
 8008d0c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	212e      	movs	r1, #46	; 0x2e
 8008d18:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008d1c:	f000 fae8 	bl	80092f0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	330b      	adds	r3, #11
 8008d24:	78db      	ldrb	r3, [r3, #3]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b088      	sub	sp, #32
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	210f      	movs	r1, #15
 8008d46:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008d4a:	f000 fad1 	bl	80092f0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	330b      	adds	r3, #11
 8008d52:	78db      	ldrb	r3, [r3, #3]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008d64:	f107 030c 	add.w	r3, r7, #12
 8008d68:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	2110      	movs	r1, #16
 8008d70:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008d74:	f000 fabc 	bl	80092f0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	330b      	adds	r3, #11
 8008d7c:	78db      	ldrb	r3, [r3, #3]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b08b      	sub	sp, #44	; 0x2c
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008db0:	4b4a      	ldr	r3, [pc, #296]	; (8008edc <SHCI_GetWirelessFwInfo+0x154>)
 8008db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008db8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008dc2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a44      	ldr	r2, [pc, #272]	; (8008ee0 <SHCI_GetWirelessFwInfo+0x158>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d10f      	bne.n	8008df4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e01a      	b.n	8008e2a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008dfc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008e00:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	0e1b      	lsrs	r3, r3, #24
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	091b      	lsrs	r3, r3, #4
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 030f 	and.w	r3, r3, #15
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	0e1b      	lsrs	r3, r3, #24
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	0c1b      	lsrs	r3, r3, #16
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	0a1b      	lsrs	r3, r3, #8
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	0e1b      	lsrs	r3, r3, #24
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	0c1b      	lsrs	r3, r3, #16
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	0e1b      	lsrs	r3, r3, #24
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	0c1b      	lsrs	r3, r3, #16
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	372c      	adds	r7, #44	; 0x2c
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	58004000 	.word	0x58004000
 8008ee0:	a94656b9 	.word	0xa94656b9

08008ee4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <hci_init+0x30>)
 8008ef4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008ef6:	4a08      	ldr	r2, [pc, #32]	; (8008f18 <hci_init+0x34>)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008efc:	4806      	ldr	r0, [pc, #24]	; (8008f18 <hci_init+0x34>)
 8008efe:	f000 f979 	bl	80091f4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f8da 	bl	80090c0 <TlInit>

  return;
 8008f0c:	bf00      	nop
}
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000334 	.word	0x20000334
 8008f18:	2000030c 	.word	0x2000030c

08008f1c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008f22:	4822      	ldr	r0, [pc, #136]	; (8008fac <hci_user_evt_proc+0x90>)
 8008f24:	f000 fd32 	bl	800998c <LST_is_empty>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d12b      	bne.n	8008f86 <hci_user_evt_proc+0x6a>
 8008f2e:	4b20      	ldr	r3, [pc, #128]	; (8008fb0 <hci_user_evt_proc+0x94>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d027      	beq.n	8008f86 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	481b      	ldr	r0, [pc, #108]	; (8008fac <hci_user_evt_proc+0x90>)
 8008f3e:	f000 fdb4 	bl	8009aaa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008f42:	4b1c      	ldr	r3, [pc, #112]	; (8008fb4 <hci_user_evt_proc+0x98>)
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008f52:	4b18      	ldr	r3, [pc, #96]	; (8008fb4 <hci_user_evt_proc+0x98>)
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	1d3a      	adds	r2, r7, #4
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008f5c:	793a      	ldrb	r2, [r7, #4]
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <hci_user_evt_proc+0x94>)
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e002      	b.n	8008f6a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008f64:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <hci_user_evt_proc+0x94>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008f6a:	4b11      	ldr	r3, [pc, #68]	; (8008fb0 <hci_user_evt_proc+0x94>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d004      	beq.n	8008f7c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fc0d 	bl	8009794 <TL_MM_EvtDone>
 8008f7a:	e004      	b.n	8008f86 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	480a      	ldr	r0, [pc, #40]	; (8008fac <hci_user_evt_proc+0x90>)
 8008f82:	f000 fd25 	bl	80099d0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008f86:	4809      	ldr	r0, [pc, #36]	; (8008fac <hci_user_evt_proc+0x90>)
 8008f88:	f000 fd00 	bl	800998c <LST_is_empty>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d107      	bne.n	8008fa2 <hci_user_evt_proc+0x86>
 8008f92:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <hci_user_evt_proc+0x94>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008f9a:	4804      	ldr	r0, [pc, #16]	; (8008fac <hci_user_evt_proc+0x90>)
 8008f9c:	f001 f83a 	bl	800a014 <hci_notify_asynch_evt>
  }


  return;
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
}
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	2000005c 	.word	0x2000005c
 8008fb0:	20000068 	.word	0x20000068
 8008fb4:	2000030c 	.word	0x2000030c

08008fb8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f000 f8d1 	bl	800916c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	b21b      	sxth	r3, r3
 8008fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fd8:	b21a      	sxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	029b      	lsls	r3, r3, #10
 8008fe0:	b21b      	sxth	r3, r3
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008fe8:	4b33      	ldr	r3, [pc, #204]	; (80090b8 <hci_send_req+0x100>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	b2d9      	uxtb	r1, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	8bbb      	ldrh	r3, [r7, #28]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f890 	bl	8009120 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009000:	e04e      	b.n	80090a0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009002:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009006:	f001 f81c 	bl	800a042 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800900a:	e043      	b.n	8009094 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800900c:	f107 030c 	add.w	r3, r7, #12
 8009010:	4619      	mov	r1, r3
 8009012:	482a      	ldr	r0, [pc, #168]	; (80090bc <hci_send_req+0x104>)
 8009014:	f000 fd49 	bl	8009aaa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	7a5b      	ldrb	r3, [r3, #9]
 800901c:	2b0f      	cmp	r3, #15
 800901e:	d114      	bne.n	800904a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	330b      	adds	r3, #11
 8009024:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	885b      	ldrh	r3, [r3, #2]
 800902a:	b29b      	uxth	r3, r3
 800902c:	8bba      	ldrh	r2, [r7, #28]
 800902e:	429a      	cmp	r2, r3
 8009030:	d104      	bne.n	800903c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d027      	beq.n	8009094 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009044:	2301      	movs	r3, #1
 8009046:	77fb      	strb	r3, [r7, #31]
 8009048:	e024      	b.n	8009094 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	330b      	adds	r3, #11
 800904e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009056:	b29b      	uxth	r3, r3
 8009058:	8bba      	ldrh	r2, [r7, #28]
 800905a:	429a      	cmp	r2, r3
 800905c:	d114      	bne.n	8009088 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	7a9b      	ldrb	r3, [r3, #10]
 8009062:	3b03      	subs	r3, #3
 8009064:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695a      	ldr	r2, [r3, #20]
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	429a      	cmp	r2, r3
 800906e:	bfa8      	it	ge
 8009070:	461a      	movge	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6918      	ldr	r0, [r3, #16]
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	1cd9      	adds	r1, r3, #3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	461a      	mov	r2, r3
 8009084:	f001 fe1e 	bl	800acc4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009090:	2301      	movs	r3, #1
 8009092:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009094:	4809      	ldr	r0, [pc, #36]	; (80090bc <hci_send_req+0x104>)
 8009096:	f000 fc79 	bl	800998c <LST_is_empty>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0b5      	beq.n	800900c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80090a0:	7ffb      	ldrb	r3, [r7, #31]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0ad      	beq.n	8009002 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80090a6:	2001      	movs	r0, #1
 80090a8:	f000 f860 	bl	800916c <NotifyCmdStatus>

  return 0;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000338 	.word	0x20000338
 80090bc:	2000032c 	.word	0x2000032c

080090c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80090c8:	480f      	ldr	r0, [pc, #60]	; (8009108 <TlInit+0x48>)
 80090ca:	f000 fc4f 	bl	800996c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80090ce:	4a0f      	ldr	r2, [pc, #60]	; (800910c <TlInit+0x4c>)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80090d4:	480e      	ldr	r0, [pc, #56]	; (8009110 <TlInit+0x50>)
 80090d6:	f000 fc49 	bl	800996c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80090da:	4b0e      	ldr	r3, [pc, #56]	; (8009114 <TlInit+0x54>)
 80090dc:	2201      	movs	r2, #1
 80090de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80090e0:	4b0d      	ldr	r3, [pc, #52]	; (8009118 <TlInit+0x58>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00a      	beq.n	80090fe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80090ec:	4b0b      	ldr	r3, [pc, #44]	; (800911c <TlInit+0x5c>)
 80090ee:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <TlInit+0x58>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f107 0208 	add.w	r2, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
  }

  return;
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
}
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	2000032c 	.word	0x2000032c
 800910c:	20000064 	.word	0x20000064
 8009110:	2000005c 	.word	0x2000005c
 8009114:	20000068 	.word	0x20000068
 8009118:	2000030c 	.word	0x2000030c
 800911c:	080091ad 	.word	0x080091ad

08009120 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	603a      	str	r2, [r7, #0]
 800912a:	80fb      	strh	r3, [r7, #6]
 800912c:	460b      	mov	r3, r1
 800912e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009130:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <SendCmd+0x44>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800913a:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <SendCmd+0x44>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	797a      	ldrb	r2, [r7, #5]
 8009140:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009142:	4b08      	ldr	r3, [pc, #32]	; (8009164 <SendCmd+0x44>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	330c      	adds	r3, #12
 8009148:	797a      	ldrb	r2, [r7, #5]
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	4618      	mov	r0, r3
 800914e:	f001 fdb9 	bl	800acc4 <memcpy>

  hciContext.io.Send(0,0);
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <SendCmd+0x48>)
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2100      	movs	r1, #0
 8009158:	2000      	movs	r0, #0
 800915a:	4798      	blx	r3

  return;
 800915c:	bf00      	nop
}
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000064 	.word	0x20000064
 8009168:	2000030c 	.word	0x2000030c

0800916c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <NotifyCmdStatus+0x3c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00d      	beq.n	80091a0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009184:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <NotifyCmdStatus+0x3c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2000      	movs	r0, #0
 800918a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800918c:	e008      	b.n	80091a0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800918e:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <NotifyCmdStatus+0x3c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d004      	beq.n	80091a0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009196:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <NotifyCmdStatus+0x3c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2001      	movs	r0, #1
 800919c:	4798      	blx	r3
  return;
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
}
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20000334 	.word	0x20000334

080091ac <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7a5b      	ldrb	r3, [r3, #9]
 80091b8:	2b0f      	cmp	r3, #15
 80091ba:	d003      	beq.n	80091c4 <TlEvtReceived+0x18>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7a5b      	ldrb	r3, [r3, #9]
 80091c0:	2b0e      	cmp	r3, #14
 80091c2:	d107      	bne.n	80091d4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4809      	ldr	r0, [pc, #36]	; (80091ec <TlEvtReceived+0x40>)
 80091c8:	f000 fc28 	bl	8009a1c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80091cc:	2000      	movs	r0, #0
 80091ce:	f000 ff2d 	bl	800a02c <hci_cmd_resp_release>
 80091d2:	e006      	b.n	80091e2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4806      	ldr	r0, [pc, #24]	; (80091f0 <TlEvtReceived+0x44>)
 80091d8:	f000 fc20 	bl	8009a1c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80091dc:	4804      	ldr	r0, [pc, #16]	; (80091f0 <TlEvtReceived+0x44>)
 80091de:	f000 ff19 	bl	800a014 <hci_notify_asynch_evt>
  }

  return;
 80091e2:	bf00      	nop
}
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	2000032c 	.word	0x2000032c
 80091f0:	2000005c 	.word	0x2000005c

080091f4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a05      	ldr	r2, [pc, #20]	; (8009214 <hci_register_io_bus+0x20>)
 8009200:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a04      	ldr	r2, [pc, #16]	; (8009218 <hci_register_io_bus+0x24>)
 8009206:	611a      	str	r2, [r3, #16]

  return;
 8009208:	bf00      	nop
}
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	0800950d 	.word	0x0800950d
 8009218:	08009575 	.word	0x08009575

0800921c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	4a08      	ldr	r2, [pc, #32]	; (800924c <shci_init+0x30>)
 800922c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800922e:	4a08      	ldr	r2, [pc, #32]	; (8009250 <shci_init+0x34>)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009234:	4806      	ldr	r0, [pc, #24]	; (8009250 <shci_init+0x34>)
 8009236:	f000 f915 	bl	8009464 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 f898 	bl	8009374 <TlInit>

  return;
 8009244:	bf00      	nop
}
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	2000035c 	.word	0x2000035c
 8009250:	2000033c 	.word	0x2000033c

08009254 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800925a:	4822      	ldr	r0, [pc, #136]	; (80092e4 <shci_user_evt_proc+0x90>)
 800925c:	f000 fb96 	bl	800998c <LST_is_empty>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d12b      	bne.n	80092be <shci_user_evt_proc+0x6a>
 8009266:	4b20      	ldr	r3, [pc, #128]	; (80092e8 <shci_user_evt_proc+0x94>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d027      	beq.n	80092be <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	4619      	mov	r1, r3
 8009274:	481b      	ldr	r0, [pc, #108]	; (80092e4 <shci_user_evt_proc+0x90>)
 8009276:	f000 fc18 	bl	8009aaa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800927a:	4b1c      	ldr	r3, [pc, #112]	; (80092ec <shci_user_evt_proc+0x98>)
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00c      	beq.n	800929c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009286:	2301      	movs	r3, #1
 8009288:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800928a:	4b18      	ldr	r3, [pc, #96]	; (80092ec <shci_user_evt_proc+0x98>)
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	1d3a      	adds	r2, r7, #4
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009294:	793a      	ldrb	r2, [r7, #4]
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <shci_user_evt_proc+0x94>)
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	e002      	b.n	80092a2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800929c:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <shci_user_evt_proc+0x94>)
 800929e:	2201      	movs	r2, #1
 80092a0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80092a2:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <shci_user_evt_proc+0x94>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fa71 	bl	8009794 <TL_MM_EvtDone>
 80092b2:	e004      	b.n	80092be <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4619      	mov	r1, r3
 80092b8:	480a      	ldr	r0, [pc, #40]	; (80092e4 <shci_user_evt_proc+0x90>)
 80092ba:	f000 fb89 	bl	80099d0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80092be:	4809      	ldr	r0, [pc, #36]	; (80092e4 <shci_user_evt_proc+0x90>)
 80092c0:	f000 fb64 	bl	800998c <LST_is_empty>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d107      	bne.n	80092da <shci_user_evt_proc+0x86>
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <shci_user_evt_proc+0x94>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80092d2:	4804      	ldr	r0, [pc, #16]	; (80092e4 <shci_user_evt_proc+0x90>)
 80092d4:	f7f7 ffe1 	bl	800129a <shci_notify_asynch_evt>
  }


  return;
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
}
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	2000006c 	.word	0x2000006c
 80092e8:	2000007c 	.word	0x2000007c
 80092ec:	2000033c 	.word	0x2000033c

080092f0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60ba      	str	r2, [r7, #8]
 80092f8:	607b      	str	r3, [r7, #4]
 80092fa:	4603      	mov	r3, r0
 80092fc:	81fb      	strh	r3, [r7, #14]
 80092fe:	460b      	mov	r3, r1
 8009300:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009302:	2000      	movs	r0, #0
 8009304:	f000 f868 	bl	80093d8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009308:	4b17      	ldr	r3, [pc, #92]	; (8009368 <shci_send+0x78>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	89fa      	ldrh	r2, [r7, #14]
 800930e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <shci_send+0x78>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800931a:	4b13      	ldr	r3, [pc, #76]	; (8009368 <shci_send+0x78>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	4618      	mov	r0, r3
 8009326:	f001 fccd 	bl	800acc4 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800932a:	4b10      	ldr	r3, [pc, #64]	; (800936c <shci_send+0x7c>)
 800932c:	2201      	movs	r2, #1
 800932e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009330:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <shci_send+0x80>)
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	2100      	movs	r1, #0
 8009336:	2000      	movs	r0, #0
 8009338:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800933a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800933e:	f7f7 ffc3 	bl	80012c8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f103 0008 	add.w	r0, r3, #8
 8009348:	4b07      	ldr	r3, [pc, #28]	; (8009368 <shci_send+0x78>)
 800934a:	6819      	ldr	r1, [r3, #0]
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <shci_send+0x78>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	789b      	ldrb	r3, [r3, #2]
 8009352:	3303      	adds	r3, #3
 8009354:	461a      	mov	r2, r3
 8009356:	f001 fcb5 	bl	800acc4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800935a:	2001      	movs	r0, #1
 800935c:	f000 f83c 	bl	80093d8 <Cmd_SetStatus>

  return;
 8009360:	bf00      	nop
}
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000078 	.word	0x20000078
 800936c:	20000360 	.word	0x20000360
 8009370:	2000033c 	.word	0x2000033c

08009374 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800937c:	4a10      	ldr	r2, [pc, #64]	; (80093c0 <TlInit+0x4c>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009382:	4810      	ldr	r0, [pc, #64]	; (80093c4 <TlInit+0x50>)
 8009384:	f000 faf2 	bl	800996c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009388:	2001      	movs	r0, #1
 800938a:	f000 f825 	bl	80093d8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800938e:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <TlInit+0x54>)
 8009390:	2201      	movs	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009394:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <TlInit+0x58>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00c      	beq.n	80093b6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <TlInit+0x5c>)
 80093a2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80093a4:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <TlInit+0x60>)
 80093a6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80093a8:	4b08      	ldr	r3, [pc, #32]	; (80093cc <TlInit+0x58>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f107 020c 	add.w	r2, r7, #12
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
  }

  return;
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop
}
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000078 	.word	0x20000078
 80093c4:	2000006c 	.word	0x2000006c
 80093c8:	2000007c 	.word	0x2000007c
 80093cc:	2000033c 	.word	0x2000033c
 80093d0:	08009429 	.word	0x08009429
 80093d4:	08009441 	.word	0x08009441

080093d8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10b      	bne.n	8009400 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80093e8:	4b0d      	ldr	r3, [pc, #52]	; (8009420 <Cmd_SetStatus+0x48>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80093f0:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <Cmd_SetStatus+0x48>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2000      	movs	r0, #0
 80093f6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80093f8:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <Cmd_SetStatus+0x4c>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80093fe:	e00b      	b.n	8009418 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009400:	4b08      	ldr	r3, [pc, #32]	; (8009424 <Cmd_SetStatus+0x4c>)
 8009402:	2201      	movs	r2, #1
 8009404:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <Cmd_SetStatus+0x48>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800940e:	4b04      	ldr	r3, [pc, #16]	; (8009420 <Cmd_SetStatus+0x48>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2001      	movs	r0, #1
 8009414:	4798      	blx	r3
  return;
 8009416:	bf00      	nop
 8009418:	bf00      	nop
}
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000035c 	.word	0x2000035c
 8009424:	20000074 	.word	0x20000074

08009428 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009430:	2000      	movs	r0, #0
 8009432:	f7f7 ff3e 	bl	80012b2 <shci_cmd_resp_release>

  return;
 8009436:	bf00      	nop
}
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4805      	ldr	r0, [pc, #20]	; (8009460 <TlUserEvtReceived+0x20>)
 800944c:	f000 fae6 	bl	8009a1c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009450:	4803      	ldr	r0, [pc, #12]	; (8009460 <TlUserEvtReceived+0x20>)
 8009452:	f7f7 ff22 	bl	800129a <shci_notify_asynch_evt>

  return;
 8009456:	bf00      	nop
}
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000006c 	.word	0x2000006c

08009464 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a05      	ldr	r2, [pc, #20]	; (8009484 <shci_register_io_bus+0x20>)
 8009470:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a04      	ldr	r2, [pc, #16]	; (8009488 <shci_register_io_bus+0x24>)
 8009476:	611a      	str	r2, [r3, #16]

  return;
 8009478:	bf00      	nop
}
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	08009621 	.word	0x08009621
 8009488:	08009675 	.word	0x08009675

0800948c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009490:	f001 f89a 	bl	800a5c8 <HW_IPCC_Enable>

  return;
 8009494:	bf00      	nop
}
 8009496:	bd80      	pop	{r7, pc}

08009498 <TL_Init>:


void TL_Init( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800949c:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <TL_Init+0x48>)
 800949e:	4a11      	ldr	r2, [pc, #68]	; (80094e4 <TL_Init+0x4c>)
 80094a0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80094a2:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <TL_Init+0x48>)
 80094a4:	4a10      	ldr	r2, [pc, #64]	; (80094e8 <TL_Init+0x50>)
 80094a6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80094a8:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <TL_Init+0x48>)
 80094aa:	4a10      	ldr	r2, [pc, #64]	; (80094ec <TL_Init+0x54>)
 80094ac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80094ae:	4b0c      	ldr	r3, [pc, #48]	; (80094e0 <TL_Init+0x48>)
 80094b0:	4a0f      	ldr	r2, [pc, #60]	; (80094f0 <TL_Init+0x58>)
 80094b2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80094b4:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <TL_Init+0x48>)
 80094b6:	4a0f      	ldr	r2, [pc, #60]	; (80094f4 <TL_Init+0x5c>)
 80094b8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <TL_Init+0x48>)
 80094bc:	4a0e      	ldr	r2, [pc, #56]	; (80094f8 <TL_Init+0x60>)
 80094be:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <TL_Init+0x48>)
 80094c2:	4a0e      	ldr	r2, [pc, #56]	; (80094fc <TL_Init+0x64>)
 80094c4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80094c6:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <TL_Init+0x48>)
 80094c8:	4a0d      	ldr	r2, [pc, #52]	; (8009500 <TL_Init+0x68>)
 80094ca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <TL_Init+0x48>)
 80094ce:	4a0d      	ldr	r2, [pc, #52]	; (8009504 <TL_Init+0x6c>)
 80094d0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80094d2:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <TL_Init+0x48>)
 80094d4:	4a0c      	ldr	r2, [pc, #48]	; (8009508 <TL_Init+0x70>)
 80094d6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80094d8:	f001 f88a 	bl	800a5f0 <HW_IPCC_Init>

  return;
 80094dc:	bf00      	nop
}
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20030000 	.word	0x20030000
 80094e4:	20030028 	.word	0x20030028
 80094e8:	20030048 	.word	0x20030048
 80094ec:	20030058 	.word	0x20030058
 80094f0:	20030068 	.word	0x20030068
 80094f4:	20030070 	.word	0x20030070
 80094f8:	20030078 	.word	0x20030078
 80094fc:	20030080 	.word	0x20030080
 8009500:	2003009c 	.word	0x2003009c
 8009504:	200300a0 	.word	0x200300a0
 8009508:	200300ac 	.word	0x200300ac

0800950c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009518:	4811      	ldr	r0, [pc, #68]	; (8009560 <TL_BLE_Init+0x54>)
 800951a:	f000 fa27 	bl	800996c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800951e:	4b11      	ldr	r3, [pc, #68]	; (8009564 <TL_BLE_Init+0x58>)
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4a0c      	ldr	r2, [pc, #48]	; (8009568 <TL_BLE_Init+0x5c>)
 8009538:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	4a08      	ldr	r2, [pc, #32]	; (8009560 <TL_BLE_Init+0x54>)
 800953e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009540:	f001 f86c 	bl	800a61c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a08      	ldr	r2, [pc, #32]	; (800956c <TL_BLE_Init+0x60>)
 800954a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	4a07      	ldr	r2, [pc, #28]	; (8009570 <TL_BLE_Init+0x64>)
 8009552:	6013      	str	r3, [r2, #0]

  return 0;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200300c8 	.word	0x200300c8
 8009564:	20030000 	.word	0x20030000
 8009568:	20030a58 	.word	0x20030a58
 800956c:	2000036c 	.word	0x2000036c
 8009570:	20000370 	.word	0x20000370

08009574 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009580:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <TL_BLE_SendCmd+0x34>)
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2201      	movs	r2, #1
 8009588:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <TL_BLE_SendCmd+0x34>)
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4619      	mov	r1, r3
 8009592:	2001      	movs	r0, #1
 8009594:	f000 f96c 	bl	8009870 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009598:	f001 f84a 	bl	800a630 <HW_IPCC_BLE_SendCmd>

  return 0;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20030000 	.word	0x20030000

080095ac <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80095b2:	e01c      	b.n	80095ee <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	4619      	mov	r1, r3
 80095b8:	4812      	ldr	r0, [pc, #72]	; (8009604 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80095ba:	f000 fa76 	bl	8009aaa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7a5b      	ldrb	r3, [r3, #9]
 80095c2:	2b0f      	cmp	r3, #15
 80095c4:	d003      	beq.n	80095ce <HW_IPCC_BLE_RxEvtNot+0x22>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7a5b      	ldrb	r3, [r3, #9]
 80095ca:	2b0e      	cmp	r3, #14
 80095cc:	d105      	bne.n	80095da <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4619      	mov	r1, r3
 80095d2:	2002      	movs	r0, #2
 80095d4:	f000 f94c 	bl	8009870 <OutputDbgTrace>
 80095d8:	e004      	b.n	80095e4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4619      	mov	r1, r3
 80095de:	2003      	movs	r0, #3
 80095e0:	f000 f946 	bl	8009870 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80095e4:	4b08      	ldr	r3, [pc, #32]	; (8009608 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4610      	mov	r0, r2
 80095ec:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80095ee:	4805      	ldr	r0, [pc, #20]	; (8009604 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80095f0:	f000 f9cc 	bl	800998c <LST_is_empty>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0dc      	beq.n	80095b4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80095fa:	bf00      	nop
}
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200300c8 	.word	0x200300c8
 8009608:	2000036c 	.word	0x2000036c

0800960c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009610:	4b02      	ldr	r3, [pc, #8]	; (800961c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4798      	blx	r3

  return;
 8009616:	bf00      	nop
}
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000370 	.word	0x20000370

08009620 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800962c:	480d      	ldr	r0, [pc, #52]	; (8009664 <TL_SYS_Init+0x44>)
 800962e:	f000 f99d 	bl	800996c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <TL_SYS_Init+0x48>)
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a08      	ldr	r2, [pc, #32]	; (8009664 <TL_SYS_Init+0x44>)
 8009644:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009646:	f001 f815 	bl	800a674 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a07      	ldr	r2, [pc, #28]	; (800966c <TL_SYS_Init+0x4c>)
 8009650:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4a06      	ldr	r2, [pc, #24]	; (8009670 <TL_SYS_Init+0x50>)
 8009658:	6013      	str	r3, [r2, #0]

  return 0;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	200300d0 	.word	0x200300d0
 8009668:	20030000 	.word	0x20030000
 800966c:	20000374 	.word	0x20000374
 8009670:	20000378 	.word	0x20000378

08009674 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009680:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <TL_SYS_SendCmd+0x34>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2210      	movs	r2, #16
 8009688:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <TL_SYS_SendCmd+0x34>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4619      	mov	r1, r3
 8009692:	2004      	movs	r0, #4
 8009694:	f000 f8ec 	bl	8009870 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009698:	f000 fff6 	bl	800a688 <HW_IPCC_SYS_SendCmd>

  return 0;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20030000 	.word	0x20030000

080096ac <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4619      	mov	r1, r3
 80096b8:	2005      	movs	r0, #5
 80096ba:	f000 f8d9 	bl	8009870 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80096be:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a03      	ldr	r2, [pc, #12]	; (80096d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80096c4:	68d2      	ldr	r2, [r2, #12]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3

  return;
 80096cc:	bf00      	nop
}
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20030000 	.word	0x20030000
 80096d4:	20000374 	.word	0x20000374

080096d8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80096de:	e00e      	b.n	80096fe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80096e0:	1d3b      	adds	r3, r7, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	480b      	ldr	r0, [pc, #44]	; (8009714 <HW_IPCC_SYS_EvtNot+0x3c>)
 80096e6:	f000 f9e0 	bl	8009aaa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4619      	mov	r1, r3
 80096ee:	2006      	movs	r0, #6
 80096f0:	f000 f8be 	bl	8009870 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80096f4:	4b08      	ldr	r3, [pc, #32]	; (8009718 <HW_IPCC_SYS_EvtNot+0x40>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	4610      	mov	r0, r2
 80096fc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80096fe:	4805      	ldr	r0, [pc, #20]	; (8009714 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009700:	f000 f944 	bl	800998c <LST_is_empty>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0ea      	beq.n	80096e0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800970a:	bf00      	nop
}
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200300d0 	.word	0x200300d0
 8009718:	20000378 	.word	0x20000378

0800971c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009724:	4817      	ldr	r0, [pc, #92]	; (8009784 <TL_MM_Init+0x68>)
 8009726:	f000 f921 	bl	800996c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800972a:	4817      	ldr	r0, [pc, #92]	; (8009788 <TL_MM_Init+0x6c>)
 800972c:	f000 f91e 	bl	800996c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009730:	4b16      	ldr	r3, [pc, #88]	; (800978c <TL_MM_Init+0x70>)
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	4a16      	ldr	r2, [pc, #88]	; (8009790 <TL_MM_Init+0x74>)
 8009736:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <TL_MM_Init+0x74>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6892      	ldr	r2, [r2, #8]
 8009740:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009742:	4b13      	ldr	r3, [pc, #76]	; (8009790 <TL_MM_Init+0x74>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	68d2      	ldr	r2, [r2, #12]
 800974a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <TL_MM_Init+0x74>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a0c      	ldr	r2, [pc, #48]	; (8009784 <TL_MM_Init+0x68>)
 8009752:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <TL_MM_Init+0x74>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800975e:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <TL_MM_Init+0x74>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6852      	ldr	r2, [r2, #4]
 8009766:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009768:	4b09      	ldr	r3, [pc, #36]	; (8009790 <TL_MM_Init+0x74>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6912      	ldr	r2, [r2, #16]
 8009770:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <TL_MM_Init+0x74>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	6952      	ldr	r2, [r2, #20]
 800977a:	619a      	str	r2, [r3, #24]

  return;
 800977c:	bf00      	nop
}
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200300b8 	.word	0x200300b8
 8009788:	20000364 	.word	0x20000364
 800978c:	20030000 	.word	0x20030000
 8009790:	2000037c 	.word	0x2000037c

08009794 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4807      	ldr	r0, [pc, #28]	; (80097bc <TL_MM_EvtDone+0x28>)
 80097a0:	f000 f93c 	bl	8009a1c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	2000      	movs	r0, #0
 80097a8:	f000 f862 	bl	8009870 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80097ac:	4804      	ldr	r0, [pc, #16]	; (80097c0 <TL_MM_EvtDone+0x2c>)
 80097ae:	f000 ff91 	bl	800a6d4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80097b2:	bf00      	nop
}
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000364 	.word	0x20000364
 80097c0:	080097c5 	.word	0x080097c5

080097c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80097ca:	e00c      	b.n	80097e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80097cc:	1d3b      	adds	r3, r7, #4
 80097ce:	4619      	mov	r1, r3
 80097d0:	480a      	ldr	r0, [pc, #40]	; (80097fc <SendFreeBuf+0x38>)
 80097d2:	f000 f96a 	bl	8009aaa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80097d6:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <SendFreeBuf+0x3c>)
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 f91b 	bl	8009a1c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80097e6:	4805      	ldr	r0, [pc, #20]	; (80097fc <SendFreeBuf+0x38>)
 80097e8:	f000 f8d0 	bl	800998c <LST_is_empty>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ec      	beq.n	80097cc <SendFreeBuf+0x8>
  }

  return;
 80097f2:	bf00      	nop
}
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20000364 	.word	0x20000364
 8009800:	20030000 	.word	0x20030000

08009804 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009808:	4805      	ldr	r0, [pc, #20]	; (8009820 <TL_TRACES_Init+0x1c>)
 800980a:	f000 f8af 	bl	800996c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <TL_TRACES_Init+0x20>)
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	4a03      	ldr	r2, [pc, #12]	; (8009820 <TL_TRACES_Init+0x1c>)
 8009814:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009816:	f000 ff93 	bl	800a740 <HW_IPCC_TRACES_Init>

  return;
 800981a:	bf00      	nop
}
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	200300c0 	.word	0x200300c0
 8009824:	20030000 	.word	0x20030000

08009828 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800982e:	e008      	b.n	8009842 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4808      	ldr	r0, [pc, #32]	; (8009858 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009836:	f000 f938 	bl	8009aaa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 f80d 	bl	800985c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009842:	4805      	ldr	r0, [pc, #20]	; (8009858 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009844:	f000 f8a2 	bl	800998c <LST_is_empty>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f0      	beq.n	8009830 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800984e:	bf00      	nop
}
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200300c0 	.word	0x200300c0

0800985c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b06      	cmp	r3, #6
 8009880:	d845      	bhi.n	800990e <OutputDbgTrace+0x9e>
 8009882:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <OutputDbgTrace+0x18>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	080098a5 	.word	0x080098a5
 800988c:	080098c9 	.word	0x080098c9
 8009890:	080098cf 	.word	0x080098cf
 8009894:	080098e3 	.word	0x080098e3
 8009898:	080098ef 	.word	0x080098ef
 800989c:	080098f5 	.word	0x080098f5
 80098a0:	08009903 	.word	0x08009903
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	7a5b      	ldrb	r3, [r3, #9]
 80098ac:	2bff      	cmp	r3, #255	; 0xff
 80098ae:	d005      	beq.n	80098bc <OutputDbgTrace+0x4c>
 80098b0:	2bff      	cmp	r3, #255	; 0xff
 80098b2:	dc05      	bgt.n	80098c0 <OutputDbgTrace+0x50>
 80098b4:	2b0e      	cmp	r3, #14
 80098b6:	d005      	beq.n	80098c4 <OutputDbgTrace+0x54>
 80098b8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80098ba:	e001      	b.n	80098c0 <OutputDbgTrace+0x50>
          break;
 80098bc:	bf00      	nop
 80098be:	e027      	b.n	8009910 <OutputDbgTrace+0xa0>
          break;
 80098c0:	bf00      	nop
 80098c2:	e025      	b.n	8009910 <OutputDbgTrace+0xa0>
          break;
 80098c4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80098c6:	e023      	b.n	8009910 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80098cc:	e020      	b.n	8009910 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	7a5b      	ldrb	r3, [r3, #9]
 80098d6:	2b0e      	cmp	r3, #14
 80098d8:	d001      	beq.n	80098de <OutputDbgTrace+0x6e>
 80098da:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80098dc:	e000      	b.n	80098e0 <OutputDbgTrace+0x70>
          break;
 80098de:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80098e0:	e016      	b.n	8009910 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	7a5b      	ldrb	r3, [r3, #9]
 80098ea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80098ec:	e010      	b.n	8009910 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80098f2:	e00d      	b.n	8009910 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	7a5b      	ldrb	r3, [r3, #9]
 80098fc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80098fe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009900:	e006      	b.n	8009910 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	7a5b      	ldrb	r3, [r3, #9]
 800990a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800990c:	e000      	b.n	8009910 <OutputDbgTrace+0xa0>

    default:
      break;
 800990e:	bf00      	nop
  }

  return;
 8009910:	bf00      	nop
}
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009926:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <OTP_Read+0x48>)
 8009928:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800992a:	e002      	b.n	8009932 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3b08      	subs	r3, #8
 8009930:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3307      	adds	r3, #7
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	429a      	cmp	r2, r3
 800993c:	d003      	beq.n	8009946 <OTP_Read+0x2a>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a09      	ldr	r2, [pc, #36]	; (8009968 <OTP_Read+0x4c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d1f2      	bne.n	800992c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3307      	adds	r3, #7
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	79fa      	ldrb	r2, [r7, #7]
 800994e:	429a      	cmp	r2, r3
 8009950:	d001      	beq.n	8009956 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009956:	68fb      	ldr	r3, [r7, #12]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	1fff73f8 	.word	0x1fff73f8
 8009968:	1fff7000 	.word	0x1fff7000

0800996c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	605a      	str	r2, [r3, #4]
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009994:	f3ef 8310 	mrs	r3, PRIMASK
 8009998:	60fb      	str	r3, [r7, #12]
  return(result);
 800999a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800999c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800999e:	b672      	cpsid	i
}
 80099a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d102      	bne.n	80099b2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	75fb      	strb	r3, [r7, #23]
 80099b0:	e001      	b.n	80099b6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f383 8810 	msr	PRIMASK, r3
}
 80099c0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099da:	f3ef 8310 	mrs	r3, PRIMASK
 80099de:	60fb      	str	r3, [r7, #12]
  return(result);
 80099e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80099e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099e4:	b672      	cpsid	i
}
 80099e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f383 8810 	msr	PRIMASK, r3
}
 8009a0e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009a10:	bf00      	nop
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a26:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009a2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a30:	b672      	cpsid	i
}
 8009a32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f383 8810 	msr	PRIMASK, r3
}
 8009a5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a70:	f3ef 8310 	mrs	r3, PRIMASK
 8009a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009a78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a7a:	b672      	cpsid	i
}
 8009a7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6812      	ldr	r2, [r2, #0]
 8009a86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6852      	ldr	r2, [r2, #4]
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f383 8810 	msr	PRIMASK, r3
}
 8009a9c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009a9e:	bf00      	nop
 8009aa0:	371c      	adds	r7, #28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009abe:	b672      	cpsid	i
}
 8009ac0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff ffca 	bl	8009a68 <LST_remove_node>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f383 8810 	msr	PRIMASK, r3
}
 8009ade:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009ae0:	bf00      	nop
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009aec:	4b03      	ldr	r3, [pc, #12]	; (8009afc <LL_FLASH_GetUDN+0x14>)
 8009aee:	681b      	ldr	r3, [r3, #0]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	1fff7580 	.word	0x1fff7580

08009b00 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009b04:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <LL_FLASH_GetDeviceID+0x14>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	b2db      	uxtb	r3, r3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	1fff7584 	.word	0x1fff7584

08009b18 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009b1c:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <LL_FLASH_GetSTCompanyID+0x14>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	0a1b      	lsrs	r3, r3, #8
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	1fff7584 	.word	0x1fff7584

08009b30 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b090      	sub	sp, #64	; 0x40
 8009b34:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009b36:	2392      	movs	r3, #146	; 0x92
 8009b38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009b3c:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <APP_BLE_Init+0xa4>)
 8009b3e:	1d3c      	adds	r4, r7, #4
 8009b40:	461d      	mov	r5, r3
 8009b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b52:	c403      	stmia	r4!, {r0, r1}
 8009b54:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009b56:	f000 f905 	bl	8009d64 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	2002      	movs	r0, #2
 8009b5e:	f000 fe17 	bl	800a790 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009b62:	4a1d      	ldr	r2, [pc, #116]	; (8009bd8 <APP_BLE_Init+0xa8>)
 8009b64:	2100      	movs	r1, #0
 8009b66:	2002      	movs	r0, #2
 8009b68:	f000 ff3e 	bl	800a9e8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff f8c6 	bl	8008d00 <SHCI_C2_BLE_Init>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009b7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009b82:	f7f8 fde3 	bl	800274c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009b86:	f000 f903 	bl	8009d90 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009b8a:	f7ff f813 	bl	8008bb4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <APP_BLE_Init+0xac>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <APP_BLE_Init+0xac>)
 8009b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b9c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009b9e:	4a10      	ldr	r2, [pc, #64]	; (8009be0 <APP_BLE_Init+0xb0>)
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	f000 ff20 	bl	800a9e8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8009ba8:	2006      	movs	r0, #6
 8009baa:	f7fe fe77 	bl	800889c <aci_hal_set_radio_activity_mask>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009bb4:	f000 faac 	bl	800a110 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009bb8:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <APP_BLE_Init+0xac>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009bbe:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <APP_BLE_Init+0xac>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f000 f997 	bl	8009ef8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009bca:	bf00      	nop
}
 8009bcc:	3740      	adds	r7, #64	; 0x40
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	0800ad40 	.word	0x0800ad40
 8009bd8:	08008f1d 	.word	0x08008f1d
 8009bdc:	20000388 	.word	0x20000388
 8009be0:	08009fe1 	.word	0x08009fe1

08009be4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	; 0x28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009bec:	2392      	movs	r3, #146	; 0x92
 8009bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2bff      	cmp	r3, #255	; 0xff
 8009bfe:	d053      	beq.n	8009ca8 <SVCCTL_App_Notification+0xc4>
 8009c00:	2bff      	cmp	r3, #255	; 0xff
 8009c02:	f300 80a1 	bgt.w	8009d48 <SVCCTL_App_Notification+0x164>
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d002      	beq.n	8009c10 <SVCCTL_App_Notification+0x2c>
 8009c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c0c:	d020      	beq.n	8009c50 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009c0e:	e09b      	b.n	8009d48 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	3302      	adds	r3, #2
 8009c14:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	4b4e      	ldr	r3, [pc, #312]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c20:	8adb      	ldrh	r3, [r3, #22]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d106      	bne.n	8009c34 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009c26:	4b4c      	ldr	r3, [pc, #304]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009c2c:	4b4a      	ldr	r3, [pc, #296]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8009c34:	2001      	movs	r0, #1
 8009c36:	f000 f95f 	bl	8009ef8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009c3a:	4b48      	ldr	r3, [pc, #288]	; (8009d5c <SVCCTL_App_Notification+0x178>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009c40:	4b45      	ldr	r3, [pc, #276]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c42:	8ada      	ldrh	r2, [r3, #22]
 8009c44:	4b45      	ldr	r3, [pc, #276]	; (8009d5c <SVCCTL_App_Notification+0x178>)
 8009c46:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009c48:	4844      	ldr	r0, [pc, #272]	; (8009d5c <SVCCTL_App_Notification+0x178>)
 8009c4a:	f000 fa4c 	bl	800a0e6 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009c4e:	e07e      	b.n	8009d4e <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	3302      	adds	r3, #2
 8009c54:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d001      	beq.n	8009c62 <SVCCTL_App_Notification+0x7e>
 8009c5e:	2b03      	cmp	r3, #3
          break;
 8009c60:	e021      	b.n	8009ca6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	3301      	adds	r3, #1
 8009c66:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009c68:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d104      	bne.n	8009c7c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009c72:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c74:	2206      	movs	r2, #6
 8009c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009c7a:	e003      	b.n	8009c84 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009c7c:	4b36      	ldr	r3, [pc, #216]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c7e:	2205      	movs	r2, #5
 8009c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	4b32      	ldr	r3, [pc, #200]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c8e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009c90:	4b32      	ldr	r3, [pc, #200]	; (8009d5c <SVCCTL_App_Notification+0x178>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009c96:	4b30      	ldr	r3, [pc, #192]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009c98:	8ada      	ldrh	r2, [r3, #22]
 8009c9a:	4b30      	ldr	r3, [pc, #192]	; (8009d5c <SVCCTL_App_Notification+0x178>)
 8009c9c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009c9e:	482f      	ldr	r0, [pc, #188]	; (8009d5c <SVCCTL_App_Notification+0x178>)
 8009ca0:	f000 fa21 	bl	800a0e6 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009ca4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8009ca6:	e052      	b.n	8009d4e <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	3302      	adds	r3, #2
 8009cac:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cb8:	d040      	beq.n	8009d3c <SVCCTL_App_Notification+0x158>
 8009cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cbe:	dc45      	bgt.n	8009d4c <SVCCTL_App_Notification+0x168>
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d03d      	beq.n	8009d40 <SVCCTL_App_Notification+0x15c>
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	db41      	blt.n	8009d4c <SVCCTL_App_Notification+0x168>
 8009cc8:	f240 420a 	movw	r2, #1034	; 0x40a
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	dc3d      	bgt.n	8009d4c <SVCCTL_App_Notification+0x168>
 8009cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cd4:	dd3a      	ble.n	8009d4c <SVCCTL_App_Notification+0x168>
 8009cd6:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8009cda:	2b09      	cmp	r3, #9
 8009cdc:	d836      	bhi.n	8009d4c <SVCCTL_App_Notification+0x168>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <SVCCTL_App_Notification+0x100>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d35 	.word	0x08009d35
 8009ce8:	08009d0d 	.word	0x08009d0d
 8009cec:	08009d4d 	.word	0x08009d4d
 8009cf0:	08009d4d 	.word	0x08009d4d
 8009cf4:	08009d4d 	.word	0x08009d4d
 8009cf8:	08009d4d 	.word	0x08009d4d
 8009cfc:	08009d45 	.word	0x08009d45
 8009d00:	08009d4d 	.word	0x08009d4d
 8009d04:	08009d21 	.word	0x08009d21
 8009d08:	08009d45 	.word	0x08009d45
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009d0e:	8adb      	ldrh	r3, [r3, #22]
 8009d10:	4913      	ldr	r1, [pc, #76]	; (8009d60 <SVCCTL_App_Notification+0x17c>)
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fd ffc4 	bl	8007ca0 <aci_gap_pass_key_resp>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8009d1e:	e012      	b.n	8009d46 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009d20:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <SVCCTL_App_Notification+0x174>)
 8009d22:	8adb      	ldrh	r3, [r3, #22]
 8009d24:	2101      	movs	r1, #1
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe f964 	bl	8007ff4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8009d32:	e008      	b.n	8009d46 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	3302      	adds	r3, #2
 8009d38:	61bb      	str	r3, [r7, #24]
          break;
 8009d3a:	e004      	b.n	8009d46 <SVCCTL_App_Notification+0x162>
          break;
 8009d3c:	bf00      	nop
 8009d3e:	e005      	b.n	8009d4c <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009d40:	bf00      	nop
 8009d42:	e003      	b.n	8009d4c <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009d44:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009d46:	e001      	b.n	8009d4c <SVCCTL_App_Notification+0x168>
      break;
 8009d48:	bf00      	nop
 8009d4a:	e000      	b.n	8009d4e <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009d4c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009d4e:	2301      	movs	r3, #1
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3728      	adds	r7, #40	; 0x28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000388 	.word	0x20000388
 8009d5c:	2000040c 	.word	0x2000040c
 8009d60:	0001b207 	.word	0x0001b207

08009d64 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <Ble_Tl_Init+0x20>)
 8009d6c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009d6e:	4b06      	ldr	r3, [pc, #24]	; (8009d88 <Ble_Tl_Init+0x24>)
 8009d70:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009d72:	463b      	mov	r3, r7
 8009d74:	4619      	mov	r1, r3
 8009d76:	4805      	ldr	r0, [pc, #20]	; (8009d8c <Ble_Tl_Init+0x28>)
 8009d78:	f7ff f8b4 	bl	8008ee4 <hci_init>

  return;
 8009d7c:	bf00      	nop
}
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200300d8 	.word	0x200300d8
 8009d88:	0800a091 	.word	0x0800a091
 8009d8c:	0800a059 	.word	0x0800a059

08009d90 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d92:	b08d      	sub	sp, #52	; 0x34
 8009d94:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009d96:	2300      	movs	r3, #0
 8009d98:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009d9a:	2392      	movs	r3, #146	; 0x92
 8009d9c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009d9e:	f7fe fdd1 	bl	8008944 <hci_reset>
 8009da2:	4603      	mov	r3, r0
 8009da4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009da6:	f000 f8d7 	bl	8009f58 <BleGetBdAddress>
 8009daa:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	2106      	movs	r1, #6
 8009db0:	2000      	movs	r0, #0
 8009db2:	f7fe fc87 	bl	80086c4 <aci_hal_write_config_data>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8009dba:	4a4a      	ldr	r2, [pc, #296]	; (8009ee4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009dbc:	2110      	movs	r1, #16
 8009dbe:	2018      	movs	r0, #24
 8009dc0:	f7fe fc80 	bl	80086c4 <aci_hal_write_config_data>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009dc8:	4a47      	ldr	r2, [pc, #284]	; (8009ee8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8009dca:	2110      	movs	r1, #16
 8009dcc:	2008      	movs	r0, #8
 8009dce:	f7fe fc79 	bl	80086c4 <aci_hal_write_config_data>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009dd6:	2118      	movs	r1, #24
 8009dd8:	2001      	movs	r0, #1
 8009dda:	f7fe fcf8 	bl	80087ce <aci_hal_set_tx_power_level>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009de2:	f7fe f96e 	bl	80080c2 <aci_gatt_init>
 8009de6:	4603      	mov	r3, r0
 8009de8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	f043 0301 	orr.w	r3, r3, #1
 8009df4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01f      	beq.n	8009e3c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009dfc:	4b3b      	ldr	r3, [pc, #236]	; (8009eec <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009dfe:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009e00:	1dba      	adds	r2, r7, #6
 8009e02:	7bf8      	ldrb	r0, [r7, #15]
 8009e04:	1cbb      	adds	r3, r7, #2
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	1d3b      	adds	r3, r7, #4
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	2207      	movs	r2, #7
 8009e10:	2100      	movs	r1, #0
 8009e12:	f7fd ffac 	bl	8007d6e <aci_gap_init>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009e1a:	88fc      	ldrh	r4, [r7, #6]
 8009e1c:	88bd      	ldrh	r5, [r7, #4]
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f7f6 f9ae 	bl	8000180 <strlen>
 8009e24:	4603      	mov	r3, r0
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	4629      	mov	r1, r5
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7fe fb48 	bl	80084c8 <aci_gatt_update_char_value>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009e3c:	88f8      	ldrh	r0, [r7, #6]
 8009e3e:	8879      	ldrh	r1, [r7, #2]
 8009e40:	463b      	mov	r3, r7
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	f7fe fb3e 	bl	80084c8 <aci_gatt_update_char_value>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009e50:	2202      	movs	r2, #2
 8009e52:	2102      	movs	r1, #2
 8009e54:	2000      	movs	r0, #0
 8009e56:	f7fe fd99 	bl	800898c <hci_le_set_default_phy>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009e5e:	4b24      	ldr	r3, [pc, #144]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e60:	2201      	movs	r2, #1
 8009e62:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009e64:	4b22      	ldr	r3, [pc, #136]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fd fe01 	bl	8007a70 <aci_gap_set_io_capability>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009e72:	4b1f      	ldr	r3, [pc, #124]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e74:	2201      	movs	r2, #1
 8009e76:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009e78:	4b1d      	ldr	r3, [pc, #116]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e7a:	2208      	movs	r2, #8
 8009e7c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009e7e:	4b1c      	ldr	r3, [pc, #112]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e80:	2210      	movs	r2, #16
 8009e82:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009e84:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009e8a:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e8c:	4a19      	ldr	r2, [pc, #100]	; (8009ef4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8009e8e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e98:	789c      	ldrb	r4, [r3, #2]
 8009e9a:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009e9c:	785d      	ldrb	r5, [r3, #1]
 8009e9e:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009ea0:	791b      	ldrb	r3, [r3, #4]
 8009ea2:	4a13      	ldr	r2, [pc, #76]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009ea4:	7952      	ldrb	r2, [r2, #5]
 8009ea6:	4912      	ldr	r1, [pc, #72]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009ea8:	78c9      	ldrb	r1, [r1, #3]
 8009eaa:	4811      	ldr	r0, [pc, #68]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009eac:	6880      	ldr	r0, [r0, #8]
 8009eae:	2600      	movs	r6, #0
 8009eb0:	9604      	str	r6, [sp, #16]
 8009eb2:	9003      	str	r0, [sp, #12]
 8009eb4:	9102      	str	r1, [sp, #8]
 8009eb6:	9201      	str	r2, [sp, #4]
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7fd fe29 	bl	8007b18 <aci_gap_set_authentication_requirement>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009ecc:	789b      	ldrb	r3, [r3, #2]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009ed2:	f7fe f86b 	bl	8007fac <aci_gap_configure_filter_accept_list>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8009eda:	bf00      	nop
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800af84 	.word	0x0800af84
 8009ee8:	0800af94 	.word	0x0800af94
 8009eec:	0800ad7c 	.word	0x0800ad7c
 8009ef0:	20000388 	.word	0x20000388
 8009ef4:	0001b207 	.word	0x0001b207

08009ef8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08c      	sub	sp, #48	; 0x30
 8009efc:	af08      	add	r7, sp, #32
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009f02:	2392      	movs	r3, #146	; 0x92
 8009f04:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009f06:	4a12      	ldr	r2, [pc, #72]	; (8009f50 <Adv_Request+0x58>)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9306      	str	r3, [sp, #24]
 8009f12:	2300      	movs	r3, #0
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	9303      	str	r3, [sp, #12]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	2300      	movs	r3, #0
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	22a0      	movs	r2, #160	; 0xa0
 8009f2e:	2180      	movs	r1, #128	; 0x80
 8009f30:	2000      	movs	r0, #0
 8009f32:	f7fd fca3 	bl	800787c <aci_gap_set_discoverable>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009f3a:	4906      	ldr	r1, [pc, #24]	; (8009f54 <Adv_Request+0x5c>)
 8009f3c:	2015      	movs	r0, #21
 8009f3e:	f7fd ffc3 	bl	8007ec8 <aci_gap_update_adv_data>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8009f46:	bf00      	nop
}
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000388 	.word	0x20000388
 8009f54:	20000014 	.word	0x20000014

08009f58 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009f5e:	f7ff fdc3 	bl	8009ae8 <LL_FLASH_GetUDN>
 8009f62:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d023      	beq.n	8009fb4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009f6c:	f7ff fdd4 	bl	8009b18 <LL_FLASH_GetSTCompanyID>
 8009f70:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009f72:	f7ff fdc5 	bl	8009b00 <LL_FLASH_GetDeviceID>
 8009f76:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	4b16      	ldr	r3, [pc, #88]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009f7e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	0a1b      	lsrs	r3, r3, #8
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009f88:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	4b12      	ldr	r3, [pc, #72]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009f90:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009f98:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	0a1b      	lsrs	r3, r3, #8
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009fa2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	0c1b      	lsrs	r3, r3, #16
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009fac:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <BleGetBdAddress+0x80>)
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	e00b      	b.n	8009fcc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	f7ff fcb1 	bl	800991c <OTP_Read>
 8009fba:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	617b      	str	r3, [r7, #20]
 8009fc6:	e001      	b.n	8009fcc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <BleGetBdAddress+0x84>)
 8009fca:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009fcc:	697b      	ldr	r3, [r7, #20]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000380 	.word	0x20000380
 8009fdc:	0800af7c 	.word	0x0800af7c

08009fe0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009fe6:	4b0a      	ldr	r3, [pc, #40]	; (800a010 <Adv_Cancel+0x30>)
 8009fe8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fec:	2b05      	cmp	r3, #5
 8009fee:	d00a      	beq.n	800a006 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009ff0:	2392      	movs	r3, #146	; 0x92
 8009ff2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009ff4:	f7fd fc1e 	bl	8007834 <aci_gap_set_non_discoverable>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009ffc:	4b04      	ldr	r3, [pc, #16]	; (800a010 <Adv_Cancel+0x30>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800a004:	bf00      	nop
 800a006:	bf00      	nop
}
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20000388 	.word	0x20000388

0800a014 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a01c:	2100      	movs	r1, #0
 800a01e:	2002      	movs	r0, #2
 800a020:	f000 fd04 	bl	800aa2c <UTIL_SEQ_SetTask>

  return;
 800a024:	bf00      	nop
}
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a034:	2001      	movs	r0, #1
 800a036:	f000 fd65 	bl	800ab04 <UTIL_SEQ_SetEvt>

  return;
 800a03a:	bf00      	nop
}
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a04a:	2001      	movs	r0, #1
 800a04c:	f000 fd7a 	bl	800ab44 <UTIL_SEQ_WaitEvt>

  return;
 800a050:	bf00      	nop
}
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	3308      	adds	r3, #8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fdf4 	bl	8008c58 <SVCCTL_UserEvtRx>
 800a070:	4603      	mov	r3, r0
 800a072:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800a080:	e003      	b.n	800a08a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]
  return;
 800a088:	bf00      	nop
}
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <BLE_StatusNot+0x16>
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d006      	beq.n	800a0b2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800a0a4:	e00b      	b.n	800a0be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a0a6:	2307      	movs	r3, #7
 800a0a8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 fcea 	bl	800aa84 <UTIL_SEQ_PauseTask>
      break;
 800a0b0:	e005      	b.n	800a0be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a0b2:	2307      	movs	r3, #7
 800a0b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 fd04 	bl	800aac4 <UTIL_SEQ_ResumeTask>
      break;
 800a0bc:	bf00      	nop
  }

  return;
 800a0be:	bf00      	nop
}
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <Custom_STM_App_Notification+0x16>
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* My_Humidity_Server */
    case CUSTOM_STM_HUM_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HUM_C_READ_EVT */
    	Humidity_Measurement();
 800a0d6:	f000 f831 	bl	800a13c <Humidity_Measurement>
      /* USER CODE END CUSTOM_STM_HUM_C_READ_EVT */
      break;
 800a0da:	e000      	b.n	800a0de <Custom_STM_App_Notification+0x18>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800a0dc:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800a0de:	bf00      	nop
}
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d002      	beq.n	800a0fc <Custom_APP_Notification+0x16>
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d002      	beq.n	800a100 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800a0fa:	e002      	b.n	800a102 <Custom_APP_Notification+0x1c>
      break;
 800a0fc:	bf00      	nop
 800a0fe:	e000      	b.n	800a102 <Custom_APP_Notification+0x1c>
      break;
 800a100:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800a102:	bf00      	nop
}
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

	UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, Humidity_Measurement );
 800a114:	4a06      	ldr	r2, [pc, #24]	; (800a130 <Custom_APP_Init+0x20>)
 800a116:	2100      	movs	r1, #0
 800a118:	2004      	movs	r0, #4
 800a11a:	f000 fc65 	bl	800a9e8 <UTIL_SEQ_RegTask>

	  /**
	   * Create timer for Humidity Measurement
	   */
	  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.TimerMeasurement_Id), hw_ts_Repeated, HMeas);
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <Custom_APP_Init+0x24>)
 800a120:	2201      	movs	r2, #1
 800a122:	4905      	ldr	r1, [pc, #20]	; (800a138 <Custom_APP_Init+0x28>)
 800a124:	2000      	movs	r0, #0
 800a126:	f7f7 fef1 	bl	8001f0c <HW_TS_Create>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800a12a:	bf00      	nop
}
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	0800a13d 	.word	0x0800a13d
 800a134:	0800a16d 	.word	0x0800a16d
 800a138:	20000414 	.word	0x20000414

0800a13c <Humidity_Measurement>:
/* My_Humidity_Server */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

static void Humidity_Measurement(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */
  static uint32_t measurement = 0;

  measurement = getHumidity();
 800a140:	f7f7 f938 	bl	80013b4 <getHumidity>
 800a144:	4603      	mov	r3, r0
 800a146:	461a      	mov	r2, r3
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <Humidity_Measurement+0x28>)
 800a14a:	601a      	str	r2, [r3, #0]

  Custom_App_Context.MeasurementvalueChar.MeasurementValue = measurement;
 800a14c:	4b05      	ldr	r3, [pc, #20]	; (800a164 <Humidity_Measurement+0x28>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	b29a      	uxth	r2, r3
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <Humidity_Measurement+0x2c>)
 800a154:	801a      	strh	r2, [r3, #0]

  Custom_STM_App_Update_Char(CUSTOM_STM_HUM_C, (uint8_t *)&Custom_App_Context.MeasurementvalueChar);
 800a156:	4904      	ldr	r1, [pc, #16]	; (800a168 <Humidity_Measurement+0x2c>)
 800a158:	2000      	movs	r0, #0
 800a15a:	f000 f89b 	bl	800a294 <Custom_STM_App_Update_Char>

/* USER CODE END HRSAPP_Measurement */
  return;
 800a15e:	bf00      	nop
}
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000418 	.word	0x20000418
 800a168:	20000410 	.word	0x20000410

0800a16c <HMeas>:

static void HMeas( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 800a170:	2100      	movs	r1, #0
 800a172:	2004      	movs	r0, #4
 800a174:	f000 fc5a 	bl	800aa2c <UTIL_SEQ_SetTask>

  return;
 800a178:	bf00      	nop
}
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	; 0x28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800a184:	2300      	movs	r3, #0
 800a186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3301      	adds	r3, #1
 800a18e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2bff      	cmp	r3, #255	; 0xff
 800a196:	d136      	bne.n	800a206 <Custom_STM_Event_Handler+0x8a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	3302      	adds	r3, #2
 800a19c:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	f640 4214 	movw	r2, #3092	; 0xc14
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00b      	beq.n	800a1c4 <Custom_STM_Event_Handler+0x48>
 800a1ac:	f640 4214 	movw	r2, #3092	; 0xc14
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	dc22      	bgt.n	800a1fa <Custom_STM_Event_Handler+0x7e>
 800a1b4:	f640 4201 	movw	r2, #3073	; 0xc01
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d020      	beq.n	800a1fe <Custom_STM_Event_Handler+0x82>
 800a1bc:	f640 4213 	movw	r2, #3091	; 0xc13
 800a1c0:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800a1c2:	e01f      	b.n	800a204 <Custom_STM_Event_Handler+0x88>
        	Custom_STM_App_Notification(&Notification);
 800a1c4:	f107 0308 	add.w	r3, r7, #8
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff ff7c 	bl	800a0c6 <Custom_STM_App_Notification>
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	61bb      	str	r3, [r7, #24]
          if (read_req->Attribute_Handle == (CustomContext.CustomHum_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	885b      	ldrh	r3, [r3, #2]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	461a      	mov	r2, r3
 800a1dc:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <Custom_STM_Event_Handler+0x98>)
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d10d      	bne.n	800a202 <Custom_STM_Event_Handler+0x86>
            return_value = SVCCTL_EvtAckFlowEnable;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            aci_gatt_allow_read(read_req->Connection_Handle);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fa11 	bl	800861a <aci_gatt_allow_read>
          break;
 800a1f8:	e003      	b.n	800a202 <Custom_STM_Event_Handler+0x86>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800a1fa:	bf00      	nop
 800a1fc:	e004      	b.n	800a208 <Custom_STM_Event_Handler+0x8c>
          break;
 800a1fe:	bf00      	nop
 800a200:	e002      	b.n	800a208 <Custom_STM_Event_Handler+0x8c>
          break;
 800a202:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a204:	e000      	b.n	800a208 <Custom_STM_Event_Handler+0x8c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800a206:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800a208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800a20c:	4618      	mov	r0, r3
 800a20e:	3728      	adds	r7, #40	; 0x28
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	2000041c 	.word	0x2000041c

0800a218 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08c      	sub	sp, #48	; 0x30
 800a21c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a21e:	2392      	movs	r3, #146	; 0x92
 800a220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800a222:	4818      	ldr	r0, [pc, #96]	; (800a284 <SVCCTL_InitCustomSvc+0x6c>)
 800a224:	f7fe fcfe 	bl	8008c24 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800a228:	2303      	movs	r3, #3
 800a22a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x181a;
 800a22c:	f641 031a 	movw	r3, #6170	; 0x181a
 800a230:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800a232:	7dbb      	ldrb	r3, [r7, #22]
 800a234:	1d39      	adds	r1, r7, #4
 800a236:	4a14      	ldr	r2, [pc, #80]	; (800a288 <SVCCTL_InitCustomSvc+0x70>)
 800a238:	9200      	str	r2, [sp, #0]
 800a23a:	2201      	movs	r2, #1
 800a23c:	2001      	movs	r0, #1
 800a23e:	f7fd ff65 	bl	800810c <aci_gatt_add_service>
 800a242:	4603      	mov	r3, r0
 800a244:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_Humidity_Char
   */
  uuid.Char_UUID_16 = 0x2a6f;
 800a246:	f642 236f 	movw	r3, #10863	; 0x2a6f
 800a24a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HsHdle,
 800a24c:	4b0e      	ldr	r3, [pc, #56]	; (800a288 <SVCCTL_InitCustomSvc+0x70>)
 800a24e:	8818      	ldrh	r0, [r3, #0]
 800a250:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <SVCCTL_InitCustomSvc+0x74>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	1d3a      	adds	r2, r7, #4
 800a258:	490d      	ldr	r1, [pc, #52]	; (800a290 <SVCCTL_InitCustomSvc+0x78>)
 800a25a:	9105      	str	r1, [sp, #20]
 800a25c:	2100      	movs	r1, #0
 800a25e:	9104      	str	r1, [sp, #16]
 800a260:	2110      	movs	r1, #16
 800a262:	9103      	str	r1, [sp, #12]
 800a264:	2104      	movs	r1, #4
 800a266:	9102      	str	r1, [sp, #8]
 800a268:	2100      	movs	r1, #0
 800a26a:	9101      	str	r1, [sp, #4]
 800a26c:	2102      	movs	r1, #2
 800a26e:	9100      	str	r1, [sp, #0]
 800a270:	2101      	movs	r1, #1
 800a272:	f7fe f821 	bl	80082b8 <aci_gatt_add_char>
 800a276:	4603      	mov	r3, r0
 800a278:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800a27a:	bf00      	nop
}
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	0800a17d 	.word	0x0800a17d
 800a288:	2000041c 	.word	0x2000041c
 800a28c:	20000029 	.word	0x20000029
 800a290:	2000041e 	.word	0x2000041e

0800a294 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af02      	add	r7, sp, #8
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a2a0:	2392      	movs	r3, #146	; 0x92
 800a2a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10e      	bne.n	800a2c8 <Custom_STM_App_Update_Char+0x34>
  {

    case CUSTOM_STM_HUM_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HsHdle,
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <Custom_STM_App_Update_Char+0x40>)
 800a2ac:	8818      	ldrh	r0, [r3, #0]
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <Custom_STM_App_Update_Char+0x40>)
 800a2b0:	8859      	ldrh	r1, [r3, #2]
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <Custom_STM_App_Update_Char+0x44>)
 800a2b4:	781a      	ldrb	r2, [r3, #0]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f7fe f903 	bl	80084c8 <aci_gatt_update_char_value>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HUM_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800a2c6:	e000      	b.n	800a2ca <Custom_STM_App_Update_Char+0x36>

    default:
      break;
 800a2c8:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	2000041c 	.word	0x2000041c
 800a2d8:	20000029 	.word	0x20000029

0800a2dc <LL_PWR_EnableBootC2>:
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <LL_PWR_EnableBootC2+0x1c>)
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	4a04      	ldr	r2, [pc, #16]	; (800a2f8 <LL_PWR_EnableBootC2+0x1c>)
 800a2e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ea:	60d3      	str	r3, [r2, #12]
}
 800a2ec:	bf00      	nop
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	58000400 	.word	0x58000400

0800a2fc <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a304:	4b06      	ldr	r3, [pc, #24]	; (800a320 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a306:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a30a:	4905      	ldr	r1, [pc, #20]	; (800a320 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4313      	orrs	r3, r2
 800a310:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	58000800 	.word	0x58000800

0800a324 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a32e:	6a1a      	ldr	r2, [r3, #32]
 800a330:	4904      	ldr	r1, [pc, #16]	; (800a344 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4313      	orrs	r3, r2
 800a336:	620b      	str	r3, [r1, #32]
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	58000800 	.word	0x58000800

0800a348 <LL_AHB3_GRP1_EnableClock>:
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4013      	ands	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a36c:	68fb      	ldr	r3, [r7, #12]
}
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a386:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a38a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4313      	orrs	r3, r2
 800a392:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a39a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
}
 800a3a6:	bf00      	nop
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <LL_C1_IPCC_EnableIT_TXF>:
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <LL_C1_IPCC_EnableIT_RXO>:
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f043 0201 	orr.w	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	601a      	str	r2, [r3, #0]
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	43db      	mvns	r3, r3
 800a406:	401a      	ands	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	605a      	str	r2, [r3, #4]
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	041b      	lsls	r3, r3, #16
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	605a      	str	r2, [r3, #4]
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	43db      	mvns	r3, r3
 800a44e:	401a      	ands	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	605a      	str	r2, [r3, #4]
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	609a      	str	r2, [r3, #8]
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <LL_C1_IPCC_SetFlag_CHx>:
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	041a      	lsls	r2, r3, #16
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	609a      	str	r2, [r3, #8]
}
 800a48e:	bf00      	nop
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d101      	bne.n	800a4b6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69da      	ldr	r2, [r3, #28]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d101      	bne.n	800a4e0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e000      	b.n	800a4e2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a4f4:	2102      	movs	r1, #2
 800a4f6:	4818      	ldr	r0, [pc, #96]	; (800a558 <HW_IPCC_Rx_Handler+0x68>)
 800a4f8:	f7ff ffe4 	bl	800a4c4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d008      	beq.n	800a514 <HW_IPCC_Rx_Handler+0x24>
 800a502:	4b15      	ldr	r3, [pc, #84]	; (800a558 <HW_IPCC_Rx_Handler+0x68>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a50e:	f000 f8d5 	bl	800a6bc <HW_IPCC_SYS_EvtHandler>
 800a512:	e01e      	b.n	800a552 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a514:	2101      	movs	r1, #1
 800a516:	4810      	ldr	r0, [pc, #64]	; (800a558 <HW_IPCC_Rx_Handler+0x68>)
 800a518:	f7ff ffd4 	bl	800a4c4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d008      	beq.n	800a534 <HW_IPCC_Rx_Handler+0x44>
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <HW_IPCC_Rx_Handler+0x68>)
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800a52e:	f000 f889 	bl	800a644 <HW_IPCC_BLE_EvtHandler>
 800a532:	e00e      	b.n	800a552 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a534:	2108      	movs	r1, #8
 800a536:	4808      	ldr	r0, [pc, #32]	; (800a558 <HW_IPCC_Rx_Handler+0x68>)
 800a538:	f7ff ffc4 	bl	800a4c4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <HW_IPCC_Rx_Handler+0x64>
 800a542:	4b05      	ldr	r3, [pc, #20]	; (800a558 <HW_IPCC_Rx_Handler+0x68>)
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f003 0308 	and.w	r3, r3, #8
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a54e:	f000 f901 	bl	800a754 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a552:	bf00      	nop
 800a554:	bf00      	nop
}
 800a556:	bd80      	pop	{r7, pc}
 800a558:	58000c00 	.word	0x58000c00

0800a55c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a560:	2102      	movs	r1, #2
 800a562:	4818      	ldr	r0, [pc, #96]	; (800a5c4 <HW_IPCC_Tx_Handler+0x68>)
 800a564:	f7ff ff99 	bl	800a49a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d108      	bne.n	800a580 <HW_IPCC_Tx_Handler+0x24>
 800a56e:	4b15      	ldr	r3, [pc, #84]	; (800a5c4 <HW_IPCC_Tx_Handler+0x68>)
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a57a:	f000 f893 	bl	800a6a4 <HW_IPCC_SYS_CmdEvtHandler>
 800a57e:	e01e      	b.n	800a5be <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a580:	2108      	movs	r1, #8
 800a582:	4810      	ldr	r0, [pc, #64]	; (800a5c4 <HW_IPCC_Tx_Handler+0x68>)
 800a584:	f7ff ff89 	bl	800a49a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d108      	bne.n	800a5a0 <HW_IPCC_Tx_Handler+0x44>
 800a58e:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <HW_IPCC_Tx_Handler+0x68>)
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d102      	bne.n	800a5a0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a59a:	f000 f8bd 	bl	800a718 <HW_IPCC_MM_FreeBufHandler>
 800a59e:	e00e      	b.n	800a5be <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a5a0:	2120      	movs	r1, #32
 800a5a2:	4808      	ldr	r0, [pc, #32]	; (800a5c4 <HW_IPCC_Tx_Handler+0x68>)
 800a5a4:	f7ff ff79 	bl	800a49a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d108      	bne.n	800a5c0 <HW_IPCC_Tx_Handler+0x64>
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <HW_IPCC_Tx_Handler+0x68>)
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a5ba:	f000 f84f 	bl	800a65c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a5be:	bf00      	nop
 800a5c0:	bf00      	nop
}
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	58000c00 	.word	0x58000c00

0800a5c8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a5cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a5d0:	f7ff fed3 	bl	800a37a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a5d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a5d8:	f7ff fea4 	bl	800a324 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a5dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a5e0:	f7ff fe8c 	bl	800a2fc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a5e4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a5e6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a5e8:	f7ff fe78 	bl	800a2dc <LL_PWR_EnableBootC2>

  return;
 800a5ec:	bf00      	nop
}
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a5f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a5f8:	f7ff fea6 	bl	800a348 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a5fc:	4806      	ldr	r0, [pc, #24]	; (800a618 <HW_IPCC_Init+0x28>)
 800a5fe:	f7ff fee8 	bl	800a3d2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a602:	4805      	ldr	r0, [pc, #20]	; (800a618 <HW_IPCC_Init+0x28>)
 800a604:	f7ff fed5 	bl	800a3b2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a608:	202c      	movs	r0, #44	; 0x2c
 800a60a:	f7f9 fef4 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a60e:	202d      	movs	r0, #45	; 0x2d
 800a610:	f7f9 fef1 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  return;
 800a614:	bf00      	nop
}
 800a616:	bd80      	pop	{r7, pc}
 800a618:	58000c00 	.word	0x58000c00

0800a61c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a620:	2101      	movs	r1, #1
 800a622:	4802      	ldr	r0, [pc, #8]	; (800a62c <HW_IPCC_BLE_Init+0x10>)
 800a624:	f7ff ff0a 	bl	800a43c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a628:	bf00      	nop
}
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	58000c00 	.word	0x58000c00

0800a630 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a634:	2101      	movs	r1, #1
 800a636:	4802      	ldr	r0, [pc, #8]	; (800a640 <HW_IPCC_BLE_SendCmd+0x10>)
 800a638:	f7ff ff20 	bl	800a47c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a63c:	bf00      	nop
}
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	58000c00 	.word	0x58000c00

0800a644 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a648:	f7fe ffb0 	bl	80095ac <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a64c:	2101      	movs	r1, #1
 800a64e:	4802      	ldr	r0, [pc, #8]	; (800a658 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a650:	f7ff ff06 	bl	800a460 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a654:	bf00      	nop
}
 800a656:	bd80      	pop	{r7, pc}
 800a658:	58000c00 	.word	0x58000c00

0800a65c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a660:	2120      	movs	r1, #32
 800a662:	4803      	ldr	r0, [pc, #12]	; (800a670 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a664:	f7ff fed8 	bl	800a418 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a668:	f7fe ffd0 	bl	800960c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a66c:	bf00      	nop
}
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	58000c00 	.word	0x58000c00

0800a674 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a678:	2102      	movs	r1, #2
 800a67a:	4802      	ldr	r0, [pc, #8]	; (800a684 <HW_IPCC_SYS_Init+0x10>)
 800a67c:	f7ff fede 	bl	800a43c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a680:	bf00      	nop
}
 800a682:	bd80      	pop	{r7, pc}
 800a684:	58000c00 	.word	0x58000c00

0800a688 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a68c:	2102      	movs	r1, #2
 800a68e:	4804      	ldr	r0, [pc, #16]	; (800a6a0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a690:	f7ff fef4 	bl	800a47c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a694:	2102      	movs	r1, #2
 800a696:	4802      	ldr	r0, [pc, #8]	; (800a6a0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a698:	f7ff feab 	bl	800a3f2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a69c:	bf00      	nop
}
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	58000c00 	.word	0x58000c00

0800a6a4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a6a8:	2102      	movs	r1, #2
 800a6aa:	4803      	ldr	r0, [pc, #12]	; (800a6b8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a6ac:	f7ff feb4 	bl	800a418 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a6b0:	f7fe fffc 	bl	80096ac <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a6b4:	bf00      	nop
}
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	58000c00 	.word	0x58000c00

0800a6bc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a6c0:	f7ff f80a 	bl	80096d8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a6c4:	2102      	movs	r1, #2
 800a6c6:	4802      	ldr	r0, [pc, #8]	; (800a6d0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a6c8:	f7ff feca 	bl	800a460 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a6cc:	bf00      	nop
}
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	58000c00 	.word	0x58000c00

0800a6d4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a6dc:	2108      	movs	r1, #8
 800a6de:	480c      	ldr	r0, [pc, #48]	; (800a710 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a6e0:	f7ff fedb 	bl	800a49a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d007      	beq.n	800a6fa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a6ea:	4a0a      	ldr	r2, [pc, #40]	; (800a714 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a6f0:	2108      	movs	r1, #8
 800a6f2:	4807      	ldr	r0, [pc, #28]	; (800a710 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a6f4:	f7ff fe7d 	bl	800a3f2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a6f8:	e006      	b.n	800a708 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a6fe:	2108      	movs	r1, #8
 800a700:	4803      	ldr	r0, [pc, #12]	; (800a710 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a702:	f7ff febb 	bl	800a47c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a706:	bf00      	nop
}
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	58000c00 	.word	0x58000c00
 800a714:	20000420 	.word	0x20000420

0800a718 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a71c:	2108      	movs	r1, #8
 800a71e:	4806      	ldr	r0, [pc, #24]	; (800a738 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a720:	f7ff fe7a 	bl	800a418 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a724:	4b05      	ldr	r3, [pc, #20]	; (800a73c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a72a:	2108      	movs	r1, #8
 800a72c:	4802      	ldr	r0, [pc, #8]	; (800a738 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a72e:	f7ff fea5 	bl	800a47c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a732:	bf00      	nop
}
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	58000c00 	.word	0x58000c00
 800a73c:	20000420 	.word	0x20000420

0800a740 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a744:	2108      	movs	r1, #8
 800a746:	4802      	ldr	r0, [pc, #8]	; (800a750 <HW_IPCC_TRACES_Init+0x10>)
 800a748:	f7ff fe78 	bl	800a43c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a74c:	bf00      	nop
}
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	58000c00 	.word	0x58000c00

0800a754 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a758:	f7ff f866 	bl	8009828 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a75c:	2108      	movs	r1, #8
 800a75e:	4802      	ldr	r0, [pc, #8]	; (800a768 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a760:	f7ff fe7e 	bl	800a460 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a764:	bf00      	nop
}
 800a766:	bd80      	pop	{r7, pc}
 800a768:	58000c00 	.word	0x58000c00

0800a76c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <UTIL_LPM_Init+0x1c>)
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <UTIL_LPM_Init+0x20>)
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a77c:	bf00      	nop
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000424 	.word	0x20000424
 800a78c:	20000428 	.word	0x20000428

0800a790 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a79c:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a0:	613b      	str	r3, [r7, #16]
  return(result);
 800a7a2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a7a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7a6:	b672      	cpsid	i
}
 800a7a8:	bf00      	nop
  
  switch(state)
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d008      	beq.n	800a7c2 <UTIL_LPM_SetOffMode+0x32>
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d10e      	bne.n	800a7d2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a7b4:	4b0d      	ldr	r3, [pc, #52]	; (800a7ec <UTIL_LPM_SetOffMode+0x5c>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	4a0b      	ldr	r2, [pc, #44]	; (800a7ec <UTIL_LPM_SetOffMode+0x5c>)
 800a7be:	6013      	str	r3, [r2, #0]
      break;
 800a7c0:	e008      	b.n	800a7d4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	43da      	mvns	r2, r3
 800a7c6:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <UTIL_LPM_SetOffMode+0x5c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <UTIL_LPM_SetOffMode+0x5c>)
 800a7ce:	6013      	str	r3, [r2, #0]
      break;
 800a7d0:	e000      	b.n	800a7d4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a7d2:	bf00      	nop
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f383 8810 	msr	PRIMASK, r3
}
 800a7de:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a7e0:	bf00      	nop
 800a7e2:	371c      	adds	r7, #28
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20000428 	.word	0x20000428

0800a7f0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b090      	sub	sp, #64	; 0x40
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a7f8:	4b73      	ldr	r3, [pc, #460]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a7fe:	4b72      	ldr	r3, [pc, #456]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4013      	ands	r3, r2
 800a806:	4a70      	ldr	r2, [pc, #448]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a808:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a80a:	4b70      	ldr	r3, [pc, #448]	; (800a9cc <UTIL_SEQ_Run+0x1dc>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a810:	4b6f      	ldr	r3, [pc, #444]	; (800a9d0 <UTIL_SEQ_Run+0x1e0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a816:	4b6f      	ldr	r3, [pc, #444]	; (800a9d4 <UTIL_SEQ_Run+0x1e4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a81c:	4b6e      	ldr	r3, [pc, #440]	; (800a9d8 <UTIL_SEQ_Run+0x1e8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a822:	e08d      	b.n	800a940 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a828:	e002      	b.n	800a830 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82c:	3301      	adds	r3, #1
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a830:	4a6a      	ldr	r2, [pc, #424]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a834:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	401a      	ands	r2, r3
 800a83c:	4b62      	ldr	r3, [pc, #392]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4013      	ands	r3, r2
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0f1      	beq.n	800a82a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a846:	4a65      	ldr	r2, [pc, #404]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	401a      	ands	r2, r3
 800a852:	4b5d      	ldr	r3, [pc, #372]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4013      	ands	r3, r2
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a85a:	4a60      	ldr	r2, [pc, #384]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	4013      	ands	r3, r2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a86c:	4a5b      	ldr	r2, [pc, #364]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	4413      	add	r3, r2
 800a874:	f04f 32ff 	mov.w	r2, #4294967295
 800a878:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a87a:	4a58      	ldr	r2, [pc, #352]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	4413      	add	r3, r2
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	4013      	ands	r3, r2
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 f9b3 	bl	800abf4 <SEQ_BitPosition>
 800a88e:	4603      	mov	r3, r0
 800a890:	461a      	mov	r2, r3
 800a892:	4b53      	ldr	r3, [pc, #332]	; (800a9e0 <UTIL_SEQ_Run+0x1f0>)
 800a894:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a896:	4a51      	ldr	r2, [pc, #324]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	4b4f      	ldr	r3, [pc, #316]	; (800a9e0 <UTIL_SEQ_Run+0x1f0>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	401a      	ands	r2, r3
 800a8ae:	494b      	ldr	r1, [pc, #300]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	440b      	add	r3, r1
 800a8b6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8be:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8c2:	b672      	cpsid	i
}
 800a8c4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a8c6:	4b46      	ldr	r3, [pc, #280]	; (800a9e0 <UTIL_SEQ_Run+0x1f0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d0:	43da      	mvns	r2, r3
 800a8d2:	4b3e      	ldr	r3, [pc, #248]	; (800a9cc <UTIL_SEQ_Run+0x1dc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	4a3c      	ldr	r2, [pc, #240]	; (800a9cc <UTIL_SEQ_Run+0x1dc>)
 800a8da:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a8dc:	2302      	movs	r3, #2
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e0:	e013      	b.n	800a90a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	4a3d      	ldr	r2, [pc, #244]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a8e8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a8ec:	4b3c      	ldr	r3, [pc, #240]	; (800a9e0 <UTIL_SEQ_Run+0x1f0>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f6:	43da      	mvns	r2, r3
 800a8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	400a      	ands	r2, r1
 800a8fe:	4937      	ldr	r1, [pc, #220]	; (800a9dc <UTIL_SEQ_Run+0x1ec>)
 800a900:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	3b01      	subs	r3, #1
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e8      	bne.n	800a8e2 <UTIL_SEQ_Run+0xf2>
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f383 8810 	msr	PRIMASK, r3
}
 800a91a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a91c:	4b30      	ldr	r3, [pc, #192]	; (800a9e0 <UTIL_SEQ_Run+0x1f0>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a30      	ldr	r2, [pc, #192]	; (800a9e4 <UTIL_SEQ_Run+0x1f4>)
 800a922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a926:	4798      	blx	r3

    local_taskset = TaskSet;
 800a928:	4b28      	ldr	r3, [pc, #160]	; (800a9cc <UTIL_SEQ_Run+0x1dc>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a92e:	4b28      	ldr	r3, [pc, #160]	; (800a9d0 <UTIL_SEQ_Run+0x1e0>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a934:	4b27      	ldr	r3, [pc, #156]	; (800a9d4 <UTIL_SEQ_Run+0x1e4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a93a:	4b27      	ldr	r3, [pc, #156]	; (800a9d8 <UTIL_SEQ_Run+0x1e8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	401a      	ands	r2, r3
 800a946:	4b20      	ldr	r3, [pc, #128]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4013      	ands	r3, r2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <UTIL_SEQ_Run+0x16c>
 800a950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	4013      	ands	r3, r2
 800a956:	2b00      	cmp	r3, #0
 800a958:	f43f af64 	beq.w	800a824 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a95c:	4b20      	ldr	r3, [pc, #128]	; (800a9e0 <UTIL_SEQ_Run+0x1f0>)
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a964:	f000 f938 	bl	800abd8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a968:	f3ef 8310 	mrs	r3, PRIMASK
 800a96c:	613b      	str	r3, [r7, #16]
  return(result);
 800a96e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a972:	b672      	cpsid	i
}
 800a974:	bf00      	nop
  local_taskset = TaskSet;
 800a976:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <UTIL_SEQ_Run+0x1dc>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a97c:	4b14      	ldr	r3, [pc, #80]	; (800a9d0 <UTIL_SEQ_Run+0x1e0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a982:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <UTIL_SEQ_Run+0x1e4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	401a      	ands	r2, r3
 800a98e:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4013      	ands	r3, r2
 800a994:	2b00      	cmp	r3, #0
 800a996:	d107      	bne.n	800a9a8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a998:	4b0f      	ldr	r3, [pc, #60]	; (800a9d8 <UTIL_SEQ_Run+0x1e8>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99e:	4013      	ands	r3, r2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a9a4:	f7f6 fc65 	bl	8001272 <UTIL_SEQ_Idle>
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f383 8810 	msr	PRIMASK, r3
}
 800a9b2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a9b4:	f000 f917 	bl	800abe6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a9b8:	4a03      	ldr	r2, [pc, #12]	; (800a9c8 <UTIL_SEQ_Run+0x1d8>)
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	6013      	str	r3, [r2, #0]

  return;
 800a9be:	bf00      	nop
}
 800a9c0:	3740      	adds	r7, #64	; 0x40
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000030 	.word	0x20000030
 800a9cc:	2000042c 	.word	0x2000042c
 800a9d0:	20000430 	.word	0x20000430
 800a9d4:	2000002c 	.word	0x2000002c
 800a9d8:	20000434 	.word	0x20000434
 800a9dc:	200004bc 	.word	0x200004bc
 800a9e0:	20000438 	.word	0x20000438
 800a9e4:	2000043c 	.word	0x2000043c

0800a9e8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f8:	617b      	str	r3, [r7, #20]
  return(result);
 800a9fa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a9fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9fe:	b672      	cpsid	i
}
 800aa00:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f8f6 	bl	800abf4 <SEQ_BitPosition>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4a06      	ldr	r2, [pc, #24]	; (800aa28 <UTIL_SEQ_RegTask+0x40>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f383 8810 	msr	PRIMASK, r3
}
 800aa1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800aa20:	bf00      	nop
}
 800aa22:	3720      	adds	r7, #32
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	2000043c 	.word	0x2000043c

0800aa2c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa36:	f3ef 8310 	mrs	r3, PRIMASK
 800aa3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa40:	b672      	cpsid	i
}
 800aa42:	bf00      	nop

  TaskSet |= TaskId_bm;
 800aa44:	4b0d      	ldr	r3, [pc, #52]	; (800aa7c <UTIL_SEQ_SetTask+0x50>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	4a0b      	ldr	r2, [pc, #44]	; (800aa7c <UTIL_SEQ_SetTask+0x50>)
 800aa4e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800aa50:	4a0b      	ldr	r2, [pc, #44]	; (800aa80 <UTIL_SEQ_SetTask+0x54>)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	4908      	ldr	r1, [pc, #32]	; (800aa80 <UTIL_SEQ_SetTask+0x54>)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f383 8810 	msr	PRIMASK, r3
}
 800aa6e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800aa70:	bf00      	nop
}
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	2000042c 	.word	0x2000042c
 800aa80:	200004bc 	.word	0x200004bc

0800aa84 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa8c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa90:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa96:	b672      	cpsid	i
}
 800aa98:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	43da      	mvns	r2, r3
 800aa9e:	4b08      	ldr	r3, [pc, #32]	; (800aac0 <UTIL_SEQ_PauseTask+0x3c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	4a06      	ldr	r2, [pc, #24]	; (800aac0 <UTIL_SEQ_PauseTask+0x3c>)
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f383 8810 	msr	PRIMASK, r3
}
 800aab2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800aab4:	bf00      	nop
}
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	2000002c 	.word	0x2000002c

0800aac4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aacc:	f3ef 8310 	mrs	r3, PRIMASK
 800aad0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aad2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aad6:	b672      	cpsid	i
}
 800aad8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800aada:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <UTIL_SEQ_ResumeTask+0x3c>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	4a07      	ldr	r2, [pc, #28]	; (800ab00 <UTIL_SEQ_ResumeTask+0x3c>)
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f383 8810 	msr	PRIMASK, r3
}
 800aaf0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800aaf2:	bf00      	nop
}
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	2000002c 	.word	0x2000002c

0800ab04 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab12:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ab14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab16:	b672      	cpsid	i
}
 800ab18:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ab1a:	4b09      	ldr	r3, [pc, #36]	; (800ab40 <UTIL_SEQ_SetEvt+0x3c>)
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	4a07      	ldr	r2, [pc, #28]	; (800ab40 <UTIL_SEQ_SetEvt+0x3c>)
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f383 8810 	msr	PRIMASK, r3
}
 800ab30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ab32:	bf00      	nop
}
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20000430 	.word	0x20000430

0800ab44 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ab4c:	4b1f      	ldr	r3, [pc, #124]	; (800abcc <UTIL_SEQ_WaitEvt+0x88>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ab52:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <UTIL_SEQ_WaitEvt+0x88>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5a:	d102      	bne.n	800ab62 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61fb      	str	r3, [r7, #28]
 800ab60:	e005      	b.n	800ab6e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800ab62:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <UTIL_SEQ_WaitEvt+0x88>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2201      	movs	r2, #1
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ab6e:	4b18      	ldr	r3, [pc, #96]	; (800abd0 <UTIL_SEQ_WaitEvt+0x8c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ab74:	4a16      	ldr	r2, [pc, #88]	; (800abd0 <UTIL_SEQ_WaitEvt+0x8c>)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ab7a:	e003      	b.n	800ab84 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	69f8      	ldr	r0, [r7, #28]
 800ab80:	f7f6 fb7e 	bl	8001280 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ab84:	4b13      	ldr	r3, [pc, #76]	; (800abd4 <UTIL_SEQ_WaitEvt+0x90>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0f5      	beq.n	800ab7c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ab90:	4a0e      	ldr	r2, [pc, #56]	; (800abcc <UTIL_SEQ_WaitEvt+0x88>)
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab96:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab9c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ab9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aba0:	b672      	cpsid	i
}
 800aba2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	43da      	mvns	r2, r3
 800aba8:	4b0a      	ldr	r3, [pc, #40]	; (800abd4 <UTIL_SEQ_WaitEvt+0x90>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4013      	ands	r3, r2
 800abae:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <UTIL_SEQ_WaitEvt+0x90>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f383 8810 	msr	PRIMASK, r3
}
 800abbc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800abbe:	4a04      	ldr	r2, [pc, #16]	; (800abd0 <UTIL_SEQ_WaitEvt+0x8c>)
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	6013      	str	r3, [r2, #0]
  return;
 800abc4:	bf00      	nop
}
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000438 	.word	0x20000438
 800abd0:	20000434 	.word	0x20000434
 800abd4:	20000430 	.word	0x20000430

0800abd8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800abdc:	bf00      	nop
}
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800abe6:	b480      	push	{r7}
 800abe8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800abea:	bf00      	nop
}
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	0c1b      	lsrs	r3, r3, #16
 800ac08:	041b      	lsls	r3, r3, #16
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <SEQ_BitPosition+0x24>
 800ac0e:	2310      	movs	r3, #16
 800ac10:	73fb      	strb	r3, [r7, #15]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	041b      	lsls	r3, r3, #16
 800ac16:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <SEQ_BitPosition+0x3a>
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	3308      	adds	r3, #8
 800ac26:	73fb      	strb	r3, [r7, #15]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d105      	bne.n	800ac44 <SEQ_BitPosition+0x50>
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	73fb      	strb	r3, [r7, #15]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	0f1b      	lsrs	r3, r3, #28
 800ac48:	4a07      	ldr	r2, [pc, #28]	; (800ac68 <SEQ_BitPosition+0x74>)
 800ac4a:	5cd2      	ldrb	r2, [r2, r3]
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	4413      	add	r3, r2
 800ac50:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	f1c3 031f 	rsb	r3, r3, #31
 800ac58:	b2db      	uxtb	r3, r3
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	0800afa4 	.word	0x0800afa4

0800ac6c <memset>:
 800ac6c:	4402      	add	r2, r0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d100      	bne.n	800ac76 <memset+0xa>
 800ac74:	4770      	bx	lr
 800ac76:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7a:	e7f9      	b.n	800ac70 <memset+0x4>

0800ac7c <__libc_init_array>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4d0d      	ldr	r5, [pc, #52]	; (800acb4 <__libc_init_array+0x38>)
 800ac80:	4c0d      	ldr	r4, [pc, #52]	; (800acb8 <__libc_init_array+0x3c>)
 800ac82:	1b64      	subs	r4, r4, r5
 800ac84:	10a4      	asrs	r4, r4, #2
 800ac86:	2600      	movs	r6, #0
 800ac88:	42a6      	cmp	r6, r4
 800ac8a:	d109      	bne.n	800aca0 <__libc_init_array+0x24>
 800ac8c:	4d0b      	ldr	r5, [pc, #44]	; (800acbc <__libc_init_array+0x40>)
 800ac8e:	4c0c      	ldr	r4, [pc, #48]	; (800acc0 <__libc_init_array+0x44>)
 800ac90:	f000 f826 	bl	800ace0 <_init>
 800ac94:	1b64      	subs	r4, r4, r5
 800ac96:	10a4      	asrs	r4, r4, #2
 800ac98:	2600      	movs	r6, #0
 800ac9a:	42a6      	cmp	r6, r4
 800ac9c:	d105      	bne.n	800acaa <__libc_init_array+0x2e>
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca4:	4798      	blx	r3
 800aca6:	3601      	adds	r6, #1
 800aca8:	e7ee      	b.n	800ac88 <__libc_init_array+0xc>
 800acaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800acae:	4798      	blx	r3
 800acb0:	3601      	adds	r6, #1
 800acb2:	e7f2      	b.n	800ac9a <__libc_init_array+0x1e>
 800acb4:	0800afbc 	.word	0x0800afbc
 800acb8:	0800afbc 	.word	0x0800afbc
 800acbc:	0800afbc 	.word	0x0800afbc
 800acc0:	0800afc0 	.word	0x0800afc0

0800acc4 <memcpy>:
 800acc4:	440a      	add	r2, r1
 800acc6:	4291      	cmp	r1, r2
 800acc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800accc:	d100      	bne.n	800acd0 <memcpy+0xc>
 800acce:	4770      	bx	lr
 800acd0:	b510      	push	{r4, lr}
 800acd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acda:	4291      	cmp	r1, r2
 800acdc:	d1f9      	bne.n	800acd2 <memcpy+0xe>
 800acde:	bd10      	pop	{r4, pc}

0800ace0 <_init>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr

0800acec <_fini>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	bf00      	nop
 800acf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf2:	bc08      	pop	{r3}
 800acf4:	469e      	mov	lr, r3
 800acf6:	4770      	bx	lr
