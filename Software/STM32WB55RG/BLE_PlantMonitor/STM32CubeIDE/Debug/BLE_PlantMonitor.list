
BLE_PlantMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b344  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b730  0800b730  0001b730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000008  0800b738  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000045  20000038  0800b768  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000080  0800b7ad  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000658  20000094  0800b7be  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00001404  200006ec  0800b7be  000206ec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .debug_info   00034f3b  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006c84  00000000  00000000  00054ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c90  00000000  00000000  0005bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000029a0  00000000  00000000  0005e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000304b9  00000000  00000000  000612b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d0f3  00000000  00000000  00091769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00107d4b  00000000  00000000  000ce85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d65a7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b834  00000000  00000000  001d65f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000094 	.word	0x20000094
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b468 	.word	0x0800b468

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000098 	.word	0x20000098
 8000178:	0800b468 	.word	0x0800b468

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80001aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001ae:	4905      	ldr	r1, [pc, #20]	; (80001c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4313      	orrs	r3, r2
 80001b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001b8:	bf00      	nop
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c2:	4770      	bx	lr
 80001c4:	58000800 	.word	0x58000800

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4313      	orrs	r3, r2
 80001de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4013      	ands	r3, r2
 80001ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ec:	68fb      	ldr	r3, [r7, #12]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr

080001fa <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001fa:	b480      	push	{r7}
 80001fc:	b085      	sub	sp, #20
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000224:	68fb      	ldr	r3, [r7, #12]
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000236:	f003 f997 	bl	8003568 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800023a:	f003 f99b 	bl	8003574 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800023e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000242:	f7ff ffad 	bl	80001a0 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000246:	f000 f821 	bl	800028c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800024a:	f000 f8c3 	bl	80003d4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800024e:	bf00      	nop
}
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <APPD_EnableCPU2+0x34>)
 800025c:	1d3c      	adds	r4, r7, #4
 800025e:	461d      	mov	r5, r3
 8000260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000268:	c403      	stmia	r4!, {r0, r1}
 800026a:	8022      	strh	r2, [r4, #0]
 800026c:	3402      	adds	r4, #2
 800026e:	0c13      	lsrs	r3, r2, #16
 8000270:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000272:	f00a fd7d 	bl	800ad70 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f009 ffd8 	bl	800a22e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800027e:	bf00      	nop
}
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bdb0      	pop	{r4, r5, r7, pc}
 8000286:	bf00      	nop
 8000288:	0800b480 	.word	0x0800b480

0800028c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]
 80002b0:	e038      	b.n	8000324 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80002b2:	7ffb      	ldrb	r3, [r7, #31]
 80002b4:	4a44      	ldr	r2, [pc, #272]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4413      	add	r3, r2
 80002ba:	799b      	ldrb	r3, [r3, #6]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d02b      	beq.n	8000318 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002c0:	7ffb      	ldrb	r3, [r7, #31]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002c8:	4a40      	ldr	r2, [pc, #256]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d01b      	beq.n	8000306 <APPD_SetCPU2GpioConfig+0x7a>
 80002ce:	4a3f      	ldr	r2, [pc, #252]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d823      	bhi.n	800031c <APPD_SetCPU2GpioConfig+0x90>
 80002d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002d8:	d003      	beq.n	80002e2 <APPD_SetCPU2GpioConfig+0x56>
 80002da:	4a3d      	ldr	r2, [pc, #244]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d009      	beq.n	80002f4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002e0:	e01c      	b.n	800031c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002e2:	7ffb      	ldrb	r3, [r7, #31]
 80002e4:	4a38      	ldr	r2, [pc, #224]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4413      	add	r3, r2
 80002ea:	889a      	ldrh	r2, [r3, #4]
 80002ec:	8bbb      	ldrh	r3, [r7, #28]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	83bb      	strh	r3, [r7, #28]
          break;
 80002f2:	e014      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002f4:	7ffb      	ldrb	r3, [r7, #31]
 80002f6:	4a34      	ldr	r2, [pc, #208]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	4413      	add	r3, r2
 80002fc:	889a      	ldrh	r2, [r3, #4]
 80002fe:	8b7b      	ldrh	r3, [r7, #26]
 8000300:	4313      	orrs	r3, r2
 8000302:	837b      	strh	r3, [r7, #26]
          break;
 8000304:	e00b      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	4413      	add	r3, r2
 800030e:	889a      	ldrh	r2, [r3, #4]
 8000310:	8b3b      	ldrh	r3, [r7, #24]
 8000312:	4313      	orrs	r3, r2
 8000314:	833b      	strh	r3, [r7, #24]
          break;
 8000316:	e002      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000318:	bf00      	nop
 800031a:	e000      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800031c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800031e:	7ffb      	ldrb	r3, [r7, #31]
 8000320:	3301      	adds	r3, #1
 8000322:	77fb      	strb	r3, [r7, #31]
 8000324:	7ffb      	ldrb	r3, [r7, #31]
 8000326:	2b25      	cmp	r3, #37	; 0x25
 8000328:	d9c3      	bls.n	80002b2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000336:	8bbb      	ldrh	r3, [r7, #28]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d014      	beq.n	8000366 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800033c:	8bbb      	ldrh	r3, [r7, #28]
 800033e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ff41 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff57 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f004 fada 	bl	800490c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000358:	8bbb      	ldrh	r3, [r7, #28]
 800035a:	2200      	movs	r2, #0
 800035c:	4619      	mov	r1, r3
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f004 fc43 	bl	8004bec <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000366:	8b7b      	ldrh	r3, [r7, #26]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d012      	beq.n	8000392 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800036c:	8b7b      	ldrh	r3, [r7, #26]
 800036e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	2002      	movs	r0, #2
 8000372:	f7ff ff29 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000376:	2002      	movs	r0, #2
 8000378:	f7ff ff3f 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 8000382:	f004 fac3 	bl	800490c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000386:	8b7b      	ldrh	r3, [r7, #26]
 8000388:	2200      	movs	r2, #0
 800038a:	4619      	mov	r1, r3
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 800038e:	f004 fc2d 	bl	8004bec <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000392:	8b3b      	ldrh	r3, [r7, #24]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d013      	beq.n	80003c0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000398:	8b3b      	ldrh	r3, [r7, #24]
 800039a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	2004      	movs	r0, #4
 800039e:	f7ff ff13 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003a2:	2004      	movs	r0, #4
 80003a4:	f7ff ff29 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ae:	f004 faad 	bl	800490c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ba:	f004 fc17 	bl	8004bec <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
}
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	0800b51c 	.word	0x0800b51c
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400

080003d4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003d8:	bf00      	nop
}
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <LL_C2_PWR_SetPowerMode+0x28>)
 80003ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f2:	f023 0207 	bic.w	r2, r3, #7
 80003f6:	4905      	ldr	r1, [pc, #20]	; (800040c <LL_C2_PWR_SetPowerMode+0x28>)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	58000400 	.word	0x58000400

08000410 <LL_EXTI_EnableIT_32_63>:
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <LL_EXTI_EnableIT_32_63+0x24>)
 800041a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800041e:	4905      	ldr	r1, [pc, #20]	; (8000434 <LL_EXTI_EnableIT_32_63+0x24>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4313      	orrs	r3, r2
 8000424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	58000800 	.word	0x58000800

08000438 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000446:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800044a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000452:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800045e:	4313      	orrs	r3, r2
 8000460:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	cafecafe 	.word	0xcafecafe

08000474 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	608b      	str	r3, [r1, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <LL_DBGMCU_GetDeviceID+0x18>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e0042000 	.word	0xe0042000

080004b8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <LL_DBGMCU_GetRevisionID+0x18>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	0c1b      	lsrs	r3, r3, #16
 80004c2:	b29b      	uxth	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e0042000 	.word	0xe0042000

080004d4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LL_LPM_EnableSleep+0x1c>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <LL_LPM_EnableSleep+0x1c>)
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	6113      	str	r3, [r2, #16]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	22ff      	movs	r2, #255	; 0xff
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	22ca      	movs	r2, #202	; 0xca
 800051a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2253      	movs	r2, #83	; 0x53
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f023 0207 	bic.w	r2, r3, #7
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	609a      	str	r2, [r3, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <MX_APPE_Config+0x18>)
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000560:	f000 f830 	bl	80005c4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000564:	f000 f835 	bl	80005d2 <Config_HSE>

  return;
 8000568:	bf00      	nop
}
 800056a:	bd80      	pop	{r7, pc}
 800056c:	58004000 	.word	0x58004000

08000570 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000574:	f000 f841 	bl	80005fa <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000578:	f000 f85a 	bl	8000630 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800057c:	4909      	ldr	r1, [pc, #36]	; (80005a4 <MX_APPE_Init+0x34>)
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fe56 	bl	8001230 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000584:	f7ff fe55 	bl	8000232 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000588:	2101      	movs	r1, #1
 800058a:	2001      	movs	r0, #1
 800058c:	f00a fc8e 	bl	800aeac <UTIL_LPM_SetOffMode>

  Led_Init();
 8000590:	f000 f927 	bl	80007e2 <Led_Init>

  Button_Init();
 8000594:	f000 f92c 	bl	80007f0 <Button_Init>
  
  RxUART_Init();
 8000598:	f000 f9ba 	bl	8000910 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800059c:	f000 f856 	bl	800064c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80005a0:	bf00      	nop
}
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000508 	.word	0x20000508

080005a8 <Init_Smps>:

void Init_Smps(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005ac:	bf00      	nop
}
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <Init_Exti>:

void Init_Exti(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80005ba:	2050      	movs	r0, #80	; 0x50
 80005bc:	f7ff ff28 	bl	8000410 <LL_EXTI_EnableIT_32_63>

  return;
 80005c0:	bf00      	nop
}
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80005c8:	bf00      	nop
}
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f009 fde9 	bl	800a1b0 <OTP_Read>
 80005de:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	799b      	ldrb	r3, [r3, #6]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff24 	bl	8000438 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
}
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <System_Init>:

static void System_Init(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  Init_Smps();
 80005fe:	f7ff ffd3 	bl	80005a8 <Init_Smps>

  Init_Exti();
 8000602:	f7ff ffd8 	bl	80005b6 <Init_Exti>

  Init_Rtc();
 8000606:	f000 f803 	bl	8000610 <Init_Rtc>

  return;
 800060a:	bf00      	nop
}
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <Init_Rtc+0x1c>)
 8000616:	f7ff ff7a 	bl	800050e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800061a:	2100      	movs	r1, #0
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <Init_Rtc+0x1c>)
 800061e:	f7ff ff86 	bl	800052e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000622:	4802      	ldr	r0, [pc, #8]	; (800062c <Init_Rtc+0x1c>)
 8000624:	f7ff ff66 	bl	80004f4 <LL_RTC_EnableWriteProtection>

  return;
 8000628:	bf00      	nop
}
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40002800 	.word	0x40002800

08000630 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000634:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000638:	f7ff ff1c 	bl	8000474 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800063c:	f00a fc24 	bl	800ae88 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000640:	2004      	movs	r0, #4
 8000642:	f7ff fecf 	bl	80003e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000646:	bf00      	nop
}
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000652:	f00a f9d7 	bl	800aa04 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <appe_Tl_Init+0x50>)
 8000658:	2100      	movs	r1, #0
 800065a:	2040      	movs	r0, #64	; 0x40
 800065c:	f00a fd88 	bl	800b170 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <appe_Tl_Init+0x54>)
 8000662:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <appe_Tl_Init+0x58>)
 8000666:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	480e      	ldr	r0, [pc, #56]	; (80006a8 <appe_Tl_Init+0x5c>)
 800066e:	f009 feb9 	bl	800a3e4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <appe_Tl_Init+0x60>)
 8000674:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <appe_Tl_Init+0x64>)
 8000678:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <appe_Tl_Init+0x68>)
 800067c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800067e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000682:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4618      	mov	r0, r3
 800068a:	f00a fafd 	bl	800ac88 <TL_MM_Init>

  TL_Enable();
 800068e:	f00a f9b3 	bl	800a9f8 <TL_Enable>

  return;
 8000692:	bf00      	nop
}
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	0800a41d 	.word	0x0800a41d
 80006a0:	20030734 	.word	0x20030734
 80006a4:	080006b9 	.word	0x080006b9
 80006a8:	080006d1 	.word	0x080006d1
 80006ac:	2003094c 	.word	0x2003094c
 80006b0:	20030840 	.word	0x20030840
 80006b4:	200301f8 	.word	0x200301f8

080006b8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80006c2:	bf00      	nop
}
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	330b      	adds	r3, #11
 80006de:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d81f      	bhi.n	800072e <APPE_SysUserEvtRx+0x5e>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <APPE_SysUserEvtRx+0x24>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000715 	.word	0x08000715
 80006f8:	08000727 	.word	0x08000727
 80006fc:	0800072f 	.word	0x0800072f
 8000700:	0800072f 	.word	0x0800072f
 8000704:	0800072f 	.word	0x0800072f
 8000708:	0800072f 	.word	0x0800072f
 800070c:	0800072f 	.word	0x0800072f
 8000710:	0800072f 	.word	0x0800072f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4618      	mov	r0, r3
 800071a:	f009 fdb5 	bl	800a288 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f81b 	bl	800075a <APPE_SysEvtReadyProcessing>
    break;
 8000724:	e004      	b.n	8000730 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f806 	bl	8000738 <APPE_SysEvtError>
    break;
 800072c:	e000      	b.n	8000730 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800072e:	bf00      	nop
  }

  return;
 8000730:	bf00      	nop
}
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	330b      	adds	r3, #11
 8000746:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3302      	adds	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800074e:	bf00      	nop
}
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b08a      	sub	sp, #40	; 0x28
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	330b      	adds	r3, #11
 800077e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	3302      	adds	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d11d      	bne.n	80007ca <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800078e:	f7ff fd61 	bl	8000254 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000792:	230f      	movs	r3, #15
 8000794:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000796:	237f      	movs	r3, #127	; 0x7f
 8000798:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800079a:	f7ff fe8d 	bl	80004b8 <LL_DBGMCU_GetRevisionID>
 800079e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80007a6:	f7ff fe79 	bl	800049c <LL_DBGMCU_GetDeviceID>
 80007aa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f009 fd50 	bl	800a25c <SHCI_C2_Config>

    APP_BLE_Init();
 80007bc:	f001 fdae 	bl	800231c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2001      	movs	r0, #1
 80007c4:	f00a fb72 	bl	800aeac <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80007c8:	e007      	b.n	80007da <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d103      	bne.n	80007da <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  return;
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
}
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 80007e6:	bf00      	nop
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <Button_Init>:

static void Button_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 fd1e 	bl	8003238 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2001      	movs	r0, #1
 8000800:	f002 fd1a 	bl	8003238 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000804:	2101      	movs	r1, #1
 8000806:	2002      	movs	r0, #2
 8000808:	f002 fd16 	bl	8003238 <BSP_PB_Init>
#endif

  return;
 800080c:	bf00      	nop
}
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f002 fe62 	bl	80034e0 <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d00a      	beq.n	8000840 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800082a:	f002 fe71 	bl	8003510 <HAL_GetTickFreq>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000838:	e002      	b.n	8000840 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800083a:	f7ff fe4b 	bl	80004d4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800083e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000840:	f002 fe4e 	bl	80034e0 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f4      	bhi.n	800083a <HAL_Delay+0x2a>
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
 8000862:	f00a fb89 	bl	800af78 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800086e:	f00a fb4d 	bl	800af0c <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000872:	bf00      	nop
}
 8000874:	bd80      	pop	{r7, pc}

08000876 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f00a fb78 	bl	800af78 <UTIL_SEQ_Run>

  return;
 8000888:	bf00      	nop
}
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000898:	2100      	movs	r1, #0
 800089a:	2040      	movs	r0, #64	; 0x40
 800089c:	f00a fc8a 	bl	800b1b4 <UTIL_SEQ_SetTask>
  return;
 80008a0:	bf00      	nop
}
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f00a fceb 	bl	800b28c <UTIL_SEQ_SetEvt>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f00a fd00 	bl	800b2cc <UTIL_SEQ_WaitEvt>
  return;
 80008cc:	bf00      	nop
}
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	2b10      	cmp	r3, #16
 80008e2:	d006      	beq.n	80008f2 <HAL_GPIO_EXTI_Callback+0x1e>
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	dc0d      	bgt.n	8000904 <HAL_GPIO_EXTI_Callback+0x30>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0x24>
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80008f0:	e008      	b.n	8000904 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80008f2:	f001 fe43 	bl	800257c <APP_BLE_Key_Button1_Action>
      break; 
 80008f6:	e006      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80008f8:	f001 fe4e 	bl	8002598 <APP_BLE_Key_Button2_Action>
      break; 
 80008fc:	e003      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80008fe:	f001 fe5d 	bl	80025bc <APP_BLE_Key_Button3_Action>
      break;
 8000902:	e000      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000904:	bf00      	nop

  }
  return;
 8000906:	bf00      	nop
}
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <RxUART_Init>:

static void RxUART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <RxUART_Init+0x14>)
 8000916:	2201      	movs	r2, #1
 8000918:	4903      	ldr	r1, [pc, #12]	; (8000928 <RxUART_Init+0x18>)
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fef4 	bl	8001708 <HW_UART_Receive_IT>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800092d 	.word	0x0800092d
 8000928:	200000b8 	.word	0x200000b8

0800092c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <RxCpltCallback+0x54>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d81a      	bhi.n	800096e <RxCpltCallback+0x42>
  {
    if (aRxBuffer[0] == '\r')
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <RxCpltCallback+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b0d      	cmp	r3, #13
 800093e:	d10b      	bne.n	8000958 <RxCpltCallback+0x2c>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      UartCmdExecute();
 8000940:	f000 f826 	bl	8000990 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <RxCpltCallback+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <RxCpltCallback+0x5c>)
 8000952:	f00a fd81 	bl	800b458 <memset>
 8000956:	e00a      	b.n	800096e <RxCpltCallback+0x42>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <RxCpltCallback+0x54>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	b291      	uxth	r1, r2
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <RxCpltCallback+0x54>)
 8000962:	8011      	strh	r1, [r2, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <RxCpltCallback+0x58>)
 8000968:	7819      	ldrb	r1, [r3, #0]
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <RxCpltCallback+0x5c>)
 800096c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <RxCpltCallback+0x60>)
 8000970:	2201      	movs	r2, #1
 8000972:	4904      	ldr	r1, [pc, #16]	; (8000984 <RxCpltCallback+0x58>)
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fec7 	bl	8001708 <HW_UART_Receive_IT>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001c0 	.word	0x200001c0
 8000984:	200000b8 	.word	0x200000b8
 8000988:	200000c0 	.word	0x200000c0
 800098c:	0800092d 	.word	0x0800092d

08000990 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8000994:	4915      	ldr	r1, [pc, #84]	; (80009ec <UartCmdExecute+0x5c>)
 8000996:	4816      	ldr	r0, [pc, #88]	; (80009f0 <UartCmdExecute+0x60>)
 8000998:	f7ff fbf0 	bl	800017c <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d106      	bne.n	80009b0 <UartCmdExecute+0x20>
  {
    APP_DBG_MSG("SW1 OK\n");
    exti_handle.Line = EXTI_LINE_4;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <UartCmdExecute+0x64>)
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <UartCmdExecute+0x68>)
 80009a6:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <UartCmdExecute+0x64>)
 80009aa:	f003 ff8d 	bl	80048c8 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80009ae:	e01b      	b.n	80009e8 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80009b0:	4912      	ldr	r1, [pc, #72]	; (80009fc <UartCmdExecute+0x6c>)
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <UartCmdExecute+0x60>)
 80009b4:	f7ff fbe2 	bl	800017c <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d107      	bne.n	80009ce <UartCmdExecute+0x3e>
    exti_handle.Line = EXTI_LINE_0;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <UartCmdExecute+0x64>)
 80009c0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80009c4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <UartCmdExecute+0x64>)
 80009c8:	f003 ff7e 	bl	80048c8 <HAL_EXTI_GenerateSWI>
}
 80009cc:	e00c      	b.n	80009e8 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80009ce:	490c      	ldr	r1, [pc, #48]	; (8000a00 <UartCmdExecute+0x70>)
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <UartCmdExecute+0x60>)
 80009d2:	f7ff fbd3 	bl	800017c <strcmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <UartCmdExecute+0x58>
    exti_handle.Line = EXTI_LINE_1;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <UartCmdExecute+0x64>)
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <UartCmdExecute+0x74>)
 80009e0:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <UartCmdExecute+0x64>)
 80009e4:	f003 ff70 	bl	80048c8 <HAL_EXTI_GenerateSWI>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800b49c 	.word	0x0800b49c
 80009f0:	200000c0 	.word	0x200000c0
 80009f4:	200000b0 	.word	0x200000b0
 80009f8:	16000004 	.word	0x16000004
 80009fc:	0800b4a0 	.word	0x0800b4a0
 8000a00:	0800b4a4 	.word	0x0800b4a4
 8000a04:	16000001 	.word	0x16000001

08000a08 <LL_EXTI_EnableIT_0_31>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a16:	4905      	ldr	r1, [pc, #20]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58000800 	.word	0x58000800

08000a30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]

}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000800 	.word	0x58000800

08000a54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a6a:	e005      	b.n	8000a78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d1f5      	bne.n	8000a6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a80:	683b      	ldr	r3, [r7, #0]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40002800 	.word	0x40002800

08000a94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3315      	adds	r3, #21
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d009      	beq.n	8000ad2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	4916      	ldr	r1, [pc, #88]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	7bfa      	ldrb	r2, [r7, #15]
 8000ae4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	3314      	adds	r3, #20
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <LinkTimerAfter+0x88>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	440b      	add	r3, r1
 8000b08:	3315      	adds	r3, #21
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	701a      	strb	r2, [r3, #0]

  return;
 8000b0e:	bf00      	nop
}
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200001c4 	.word	0x200001c4

08000b20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <LinkTimerBefore+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d032      	beq.n	8000ba2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4927      	ldr	r1, [pc, #156]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	4922      	ldr	r1, [pc, #136]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3315      	adds	r3, #21
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3315      	adds	r3, #21
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	4918      	ldr	r1, [pc, #96]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	3314      	adds	r3, #20
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ba0:	e014      	b.n	8000bcc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	3315      	adds	r3, #21
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	701a      	strb	r2, [r3, #0]
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000254 	.word	0x20000254
 8000bdc:	200001c4 	.word	0x200001c4

08000be0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <linkTimer+0x144>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d118      	bne.n	8000c26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <linkTimer+0x148>)
 8000bfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <linkTimer+0x144>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	4949      	ldr	r1, [pc, #292]	; (8000d2c <linkTimer+0x14c>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	2206      	movs	r2, #6
 8000c16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <linkTimer+0x150>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	e078      	b.n	8000d18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c26:	f000 f909 	bl	8000e3c <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	493e      	ldr	r1, [pc, #248]	; (8000d2c <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	4419      	add	r1, r3
 8000c46:	4839      	ldr	r0, [pc, #228]	; (8000d2c <linkTimer+0x14c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4403      	add	r3, r0
 8000c52:	3308      	adds	r3, #8
 8000c54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4934      	ldr	r1, [pc, #208]	; (8000d2c <linkTimer+0x14c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <linkTimer+0x144>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <linkTimer+0x14c>)
 8000c74:	460b      	mov	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3308      	adds	r3, #8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d337      	bcc.n	8000cf8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <linkTimer+0x144>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca2:	e013      	b.n	8000ccc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ca4:	7b7a      	ldrb	r2, [r7, #13]
 8000ca6:	4921      	ldr	r1, [pc, #132]	; (8000d2c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3315      	adds	r3, #21
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cb8:	7b7a      	ldrb	r2, [r7, #13]
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <linkTimer+0x14c>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3315      	adds	r3, #21
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d00b      	beq.n	8000cea <linkTimer+0x10a>
 8000cd2:	7b3a      	ldrb	r2, [r7, #12]
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <linkTimer+0x14c>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d2dc      	bcs.n	8000ca4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cea:	7b7a      	ldrb	r2, [r7, #13]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fecf 	bl	8000a94 <LinkTimerAfter>
 8000cf6:	e00f      	b.n	8000d18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <linkTimer+0x144>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff0c 	bl	8000b20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <linkTimer+0x144>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <linkTimer+0x148>)
 8000d10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <linkTimer+0x144>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000254 	.word	0x20000254
 8000d28:	20000255 	.word	0x20000255
 8000d2c:	200001c4 	.word	0x200001c4
 8000d30:	20000258 	.word	0x20000258

08000d34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d111      	bne.n	8000d74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <UnlinkTimer+0xfc>)
 8000d58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <UnlinkTimer+0x100>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3315      	adds	r3, #21
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e03e      	b.n	8000df2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	492f      	ldr	r1, [pc, #188]	; (8000e34 <UnlinkTimer+0x100>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3314      	adds	r3, #20
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	492a      	ldr	r1, [pc, #168]	; (8000e34 <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <UnlinkTimer+0x100>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3315      	adds	r3, #21
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <UnlinkTimer+0x100>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3315      	adds	r3, #21
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d013      	beq.n	8000df2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <UnlinkTimer+0x100>)
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3314      	adds	r3, #20
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <UnlinkTimer+0x100>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3314      	adds	r3, #20
 8000dee:	4602      	mov	r2, r0
 8000df0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	490f      	ldr	r1, [pc, #60]	; (8000e34 <UnlinkTimer+0x100>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	330c      	adds	r3, #12
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <UnlinkTimer+0xf8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b06      	cmp	r3, #6
 8000e0e:	d107      	bne.n	8000e20 <UnlinkTimer+0xec>
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <UnlinkTimer+0x104>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
}
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000254 	.word	0x20000254
 8000e30:	20000255 	.word	0x20000255
 8000e34:	200001c4 	.word	0x200001c4
 8000e38:	20000258 	.word	0x20000258

08000e3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d026      	beq.n	8000e9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e4c:	f7ff fe02 	bl	8000a54 <ReadRtcSsrValue>
 8000e50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d805      	bhi.n	8000e68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	e00a      	b.n	8000e7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ReturnTimeElapsed+0x74>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <ReturnTimeElapsed+0x78>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <ReturnTimeElapsed+0x7c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	40d3      	lsrs	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	b29b      	uxth	r3, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000258 	.word	0x20000258
 8000eb0:	20000260 	.word	0x20000260
 8000eb4:	2000025e 	.word	0x2000025e
 8000eb8:	2000025d 	.word	0x2000025d

08000ebc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d108      	bne.n	8000ede <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ecc:	f7ff fdc2 	bl	8000a54 <ReadRtcSsrValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <RestartWakeupCounter+0x9c>)
 8000ed4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f003 fb6d 	bl	80045b6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000edc:	e039      	b.n	8000f52 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d803      	bhi.n	8000eec <RestartWakeupCounter+0x30>
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <RestartWakeupCounter+0xa0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d002      	beq.n	8000ef2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000ef2:	bf00      	nop
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f8      	beq.n	8000ef4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f12:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000f16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f1a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f003 fb58 	bl	80045d2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	0c1b      	lsrs	r3, r3, #16
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	88fa      	ldrh	r2, [r7, #6]
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f32:	f7ff fd8f 	bl	8000a54 <ReadRtcSsrValue>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <RestartWakeupCounter+0x9c>)
 8000f3a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f4c:	f3af 8000 	nop.w
  return ;
 8000f50:	bf00      	nop
}
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000258 	.word	0x20000258
 8000f5c:	2000025d 	.word	0x2000025d
 8000f60:	20000508 	.word	0x20000508
 8000f64:	58000800 	.word	0x58000800
 8000f68:	40002800 	.word	0x40002800

08000f6c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <RescheduleTimerList+0x11c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d107      	bne.n	8000f90 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f80:	bf00      	nop
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <RescheduleTimerList+0x120>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f8      	bne.n	8000f82 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f90:	4b3e      	ldr	r3, [pc, #248]	; (800108c <RescheduleTimerList+0x120>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <RescheduleTimerList+0x120>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f9e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <RescheduleTimerList+0x124>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	493a      	ldr	r1, [pc, #232]	; (8001094 <RescheduleTimerList+0x128>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fba:	f7ff ff3f 	bl	8000e3c <ReturnTimeElapsed>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d205      	bcs.n	8000fd6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <RescheduleTimerList+0x12c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e04d      	b.n	8001072 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <RescheduleTimerList+0x130>)
 8000fda:	8812      	ldrh	r2, [r2, #0]
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d906      	bls.n	8000ff6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <RescheduleTimerList+0x130>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <RescheduleTimerList+0x12c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e03d      	b.n	8001072 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <RescheduleTimerList+0x12c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001006:	e034      	b.n	8001072 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	4922      	ldr	r1, [pc, #136]	; (8001094 <RescheduleTimerList+0x128>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3308      	adds	r3, #8
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	429a      	cmp	r2, r3
 800101e:	d20a      	bcs.n	8001036 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	491c      	ldr	r1, [pc, #112]	; (8001094 <RescheduleTimerList+0x128>)
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e013      	b.n	800105e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3308      	adds	r3, #8
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	1ac9      	subs	r1, r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <RescheduleTimerList+0x128>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4403      	add	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <RescheduleTimerList+0x128>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3315      	adds	r3, #21
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b06      	cmp	r3, #6
 8001076:	d1c7      	bne.n	8001008 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001078:	89bb      	ldrh	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff1e 	bl	8000ebc <RestartWakeupCounter>

  return ;
 8001080:	bf00      	nop
}
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40002800 	.word	0x40002800
 800108c:	20000508 	.word	0x20000508
 8001090:	20000254 	.word	0x20000254
 8001094:	200001c4 	.word	0x200001c4
 8001098:	2000025c 	.word	0x2000025c
 800109c:	20000262 	.word	0x20000262

080010a0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010a6:	f3ef 8310 	mrs	r3, PRIMASK
 80010aa:	617b      	str	r3, [r7, #20]
  return(result);
 80010ac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	; 0xca
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	; 0x53
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	4b54      	ldr	r3, [pc, #336]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010d4:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010e0:	4950      	ldr	r1, [pc, #320]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	330c      	adds	r3, #12
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d16e      	bne.n	80011d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fa:	494a      	ldr	r1, [pc, #296]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800110a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800110e:	4945      	ldr	r1, [pc, #276]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	3310      	adds	r3, #16
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d04c      	beq.n	80011c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800112a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800112e:	493d      	ldr	r1, [pc, #244]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	330d      	adds	r3, #13
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d124      	bne.n	800118e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdf2 	bl	8000d34 <UnlinkTimer>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f383 8810 	msr	PRIMASK, r3
}
 800115a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800115c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001160:	4930      	ldr	r1, [pc, #192]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	3304      	adds	r3, #4
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fa32 	bl	80015e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	; 0xca
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	; 0x53
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
 800118c:	e012      	b.n	80011b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f383 8810 	msr	PRIMASK, r3
}
 8001198:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800119a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f99a 	bl	80014d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	22ca      	movs	r2, #202	; 0xca
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2253      	movs	r2, #83	; 0x53
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	4619      	mov	r1, r3
 80011bc:	69b8      	ldr	r0, [r7, #24]
 80011be:	f000 fa95 	bl	80016ec <HW_TS_RTC_Int_AppNot>
 80011c2:	e022      	b.n	800120a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80011c4:	f7ff fed2 	bl	8000f6c <RescheduleTimerList>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f383 8810 	msr	PRIMASK, r3
}
 80011d2:	e01a      	b.n	800120a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011d4:	bf00      	nop
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f8      	beq.n	80011d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f383 8810 	msr	PRIMASK, r3
}
 8001208:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001212:	bf00      	nop
}
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000508 	.word	0x20000508
 8001220:	20000254 	.word	0x20000254
 8001224:	200001c4 	.word	0x200001c4
 8001228:	2000025c 	.word	0x2000025c
 800122c:	58000800 	.word	0x58000800

08001230 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	22ca      	movs	r2, #202	; 0xca
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
 8001244:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HW_TS_Init+0x188>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2253      	movs	r2, #83	; 0x53
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HW_TS_Init+0x18c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <HW_TS_Init+0x18c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HW_TS_Init+0x18c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f1c3 0304 	rsb	r3, r3, #4
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HW_TS_Init+0x190>)
 800126c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HW_TS_Init+0x18c>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001276:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800127a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	2a00      	cmp	r2, #0
 800128c:	d101      	bne.n	8001292 <HW_TS_Init+0x62>
  {
    return 32U;
 800128e:	2220      	movs	r2, #32
 8001290:	e003      	b.n	800129a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	fab2 f282 	clz	r2, r2
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	40d3      	lsrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HW_TS_Init+0x194>)
 80012a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <HW_TS_Init+0x18c>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HW_TS_Init+0x198>)
 80012b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HW_TS_Init+0x198>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <HW_TS_Init+0x194>)
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HW_TS_Init+0x190>)
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	40d3      	lsrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012da:	4293      	cmp	r3, r2
 80012dc:	d904      	bls.n	80012e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HW_TS_Init+0x19c>)
 80012e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e003      	b.n	80012f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HW_TS_Init+0x19c>)
 80012ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012f4:	f7ff fb9c 	bl	8000a30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012fc:	f7ff fb84 	bl	8000a08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13d      	bne.n	8001382 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Init+0x1a0>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HW_TS_Init+0x1a4>)
 800130e:	f04f 32ff 	mov.w	r2, #4294967295
 8001312:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e00c      	b.n	8001334 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	492e      	ldr	r1, [pc, #184]	; (80013d8 <HW_TS_Init+0x1a8>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	330c      	adds	r3, #12
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	3301      	adds	r3, #1
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b05      	cmp	r3, #5
 8001338:	d9ef      	bls.n	800131a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HW_TS_Init+0x1ac>)
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HW_TS_Init+0x188>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HW_TS_Init+0x188>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HW_TS_Init+0x188>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HW_TS_Init+0x188>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001360:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HW_TS_Init+0x1b0>)
 8001364:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001368:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800136a:	2003      	movs	r0, #3
 800136c:	f003 f931 	bl	80045d2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HW_TS_Init+0x188>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HW_TS_Init+0x188>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e009      	b.n	8001396 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HW_TS_Init+0x188>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001390:	2003      	movs	r0, #3
 8001392:	f003 f910 	bl	80045b6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HW_TS_Init+0x188>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800139e:	2200      	movs	r2, #0
 80013a0:	2103      	movs	r1, #3
 80013a2:	2003      	movs	r0, #3
 80013a4:	f003 f8c5 	bl	8004532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f003 f8dc 	bl	8004566 <HAL_NVIC_EnableIRQ>

  return;
 80013ae:	bf00      	nop
}
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000508 	.word	0x20000508
 80013bc:	40002800 	.word	0x40002800
 80013c0:	2000025d 	.word	0x2000025d
 80013c4:	2000025e 	.word	0x2000025e
 80013c8:	20000260 	.word	0x20000260
 80013cc:	20000262 	.word	0x20000262
 80013d0:	2000025c 	.word	0x2000025c
 80013d4:	20000258 	.word	0x20000258
 80013d8:	200001c4 	.word	0x200001c4
 80013dc:	20000254 	.word	0x20000254
 80013e0:	58000800 	.word	0x58000800

080013e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fa:	f3ef 8310 	mrs	r3, PRIMASK
 80013fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8001400:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001408:	e004      	b.n	8001414 <HW_TS_Create+0x30>
  {
    loop++;
 800140a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140e:	3301      	adds	r3, #1
 8001410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001418:	2b05      	cmp	r3, #5
 800141a:	d80c      	bhi.n	8001436 <HW_TS_Create+0x52>
 800141c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001420:	492c      	ldr	r1, [pc, #176]	; (80014d4 <HW_TS_Create+0xf0>)
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	330c      	adds	r3, #12
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e9      	bne.n	800140a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800143a:	2b06      	cmp	r3, #6
 800143c:	d038      	beq.n	80014b0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800143e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001442:	4924      	ldr	r1, [pc, #144]	; (80014d4 <HW_TS_Create+0xf0>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	330c      	adds	r3, #12
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f383 8810 	msr	PRIMASK, r3
}
 800145e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001464:	491b      	ldr	r1, [pc, #108]	; (80014d4 <HW_TS_Create+0xf0>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3310      	adds	r3, #16
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001476:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800147a:	4916      	ldr	r1, [pc, #88]	; (80014d4 <HW_TS_Create+0xf0>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	330d      	adds	r3, #13
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800148c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001490:	4910      	ldr	r1, [pc, #64]	; (80014d4 <HW_TS_Create+0xf0>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014a6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ae:	e008      	b.n	80014c2 <HW_TS_Create+0xde>
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f383 8810 	msr	PRIMASK, r3
}
 80014ba:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200001c4 	.word	0x200001c4

080014d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014e2:	f3ef 8310 	mrs	r3, PRIMASK
 80014e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80014e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014f0:	2003      	movs	r0, #3
 80014f2:	f003 f846 	bl	8004582 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HW_TS_Stop+0xf0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22ca      	movs	r2, #202	; 0xca
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2253      	movs	r2, #83	; 0x53
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	4930      	ldr	r1, [pc, #192]	; (80015cc <HW_TS_Stop+0xf4>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	330c      	adds	r3, #12
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d142      	bne.n	80015a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc06 	bl	8000d34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HW_TS_Stop+0xf8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	2b06      	cmp	r3, #6
 8001532:	d12f      	bne.n	8001594 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HW_TS_Stop+0xfc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001540:	d107      	bne.n	8001552 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001542:	bf00      	nop
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f8      	bne.n	8001544 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HW_TS_Stop+0xf0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001560:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001562:	bf00      	nop
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f8      	beq.n	8001564 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HW_TS_Stop+0xf0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001582:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HW_TS_Stop+0x100>)
 8001586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800158a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800158c:	2003      	movs	r0, #3
 800158e:	f003 f820 	bl	80045d2 <HAL_NVIC_ClearPendingIRQ>
 8001592:	e007      	b.n	80015a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HW_TS_Stop+0x104>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	7cfa      	ldrb	r2, [r7, #19]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80015a0:	f7ff fce4 	bl	8000f6c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HW_TS_Stop+0xf0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	22ff      	movs	r2, #255	; 0xff
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015ac:	2003      	movs	r0, #3
 80015ae:	f002 ffda 	bl	8004566 <HAL_NVIC_EnableIRQ>
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f383 8810 	msr	PRIMASK, r3
}
 80015bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015be:	bf00      	nop
}
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000508 	.word	0x20000508
 80015cc:	200001c4 	.word	0x200001c4
 80015d0:	20000254 	.word	0x20000254
 80015d4:	40002800 	.word	0x40002800
 80015d8:	58000800 	.word	0x58000800
 80015dc:	20000255 	.word	0x20000255

080015e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	493b      	ldr	r1, [pc, #236]	; (80016dc <HW_TS_Start+0xfc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	330c      	adds	r3, #12
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d103      	bne.n	800160c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff66 	bl	80014d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800160c:	f3ef 8310 	mrs	r3, PRIMASK
 8001610:	60fb      	str	r3, [r7, #12]
  return(result);
 8001612:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800161a:	2003      	movs	r0, #3
 800161c:	f002 ffb1 	bl	8004582 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HW_TS_Start+0x100>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22ca      	movs	r2, #202	; 0xca
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HW_TS_Start+0x100>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2253      	movs	r2, #83	; 0x53
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	492a      	ldr	r1, [pc, #168]	; (80016dc <HW_TS_Start+0xfc>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	4925      	ldr	r1, [pc, #148]	; (80016dc <HW_TS_Start+0xfc>)
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3308      	adds	r3, #8
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	4920      	ldr	r1, [pc, #128]	; (80016dc <HW_TS_Start+0xfc>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3304      	adds	r3, #4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fab6 	bl	8000be0 <linkTimer>
 8001674:	4603      	mov	r3, r0
 8001676:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HW_TS_Start+0x104>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HW_TS_Start+0x108>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	7c7a      	ldrb	r2, [r7, #17]
 8001686:	429a      	cmp	r2, r3
 8001688:	d002      	beq.n	8001690 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800168a:	f7ff fc6f 	bl	8000f6c <RescheduleTimerList>
 800168e:	e013      	b.n	80016b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4912      	ldr	r1, [pc, #72]	; (80016dc <HW_TS_Start+0xfc>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3308      	adds	r3, #8
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	1ac9      	subs	r1, r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <HW_TS_Start+0xfc>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4403      	add	r3, r0
 80016b4:	3308      	adds	r3, #8
 80016b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HW_TS_Start+0x100>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c0:	2003      	movs	r0, #3
 80016c2:	f002 ff50 	bl	8004566 <HAL_NVIC_EnableIRQ>
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f383 8810 	msr	PRIMASK, r3
}
 80016d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d2:	bf00      	nop
}
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001c4 	.word	0x200001c4
 80016e0:	20000508 	.word	0x20000508
 80016e4:	20000254 	.word	0x20000254
 80016e8:	20000255 	.word	0x20000255

080016ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4798      	blx	r3

  return;
 80016fe:	bf00      	nop
}
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	4613      	mov	r3, r2
 8001718:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10c      	bne.n	800173a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HW_UART_Receive_IT+0x3c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HW_UART_Receive_IT+0x40>)
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HW_UART_Receive_IT+0x44>)
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	89bb      	ldrh	r3, [r7, #12]
 800172e:	461a      	mov	r2, r3
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HW_UART_Receive_IT+0x40>)
 8001734:	f005 faae 	bl	8006c94 <HAL_UART_Receive_IT>
            break;
 8001738:	e000      	b.n	800173c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800173a:	bf00      	nop
    }

    return;
 800173c:	bf00      	nop
}
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000264 	.word	0x20000264
 8001748:	200003a0 	.word	0x200003a0
 800174c:	40013800 	.word	0x40013800

08001750 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_UART_RxCpltCallback+0x34>)
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_UART_RxCpltCallback+0x38>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_UART_RxCpltCallback+0x38>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4798      	blx	r3
            }
            break;
 8001772:	e001      	b.n	8001778 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001778:	bf00      	nop
    }

    return;
 800177a:	bf00      	nop
}
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40013800 	.word	0x40013800
 8001788:	20000264 	.word	0x20000264

0800178c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_UART_TxCpltCallback+0x34>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_UART_TxCpltCallback+0x38>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_UART_TxCpltCallback+0x38>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4798      	blx	r3
            }
            break;
 80017ae:	e001      	b.n	80017b4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80017b4:	bf00      	nop
    }

    return;
 80017b6:	bf00      	nop
}
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40013800 	.word	0x40013800
 80017c4:	20000268 	.word	0x20000268

080017c8 <LL_RCC_LSE_SetDriveCapability>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	f023 0218 	bic.w	r2, r3, #24
 80017dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_AHB2_GRP1_EnableClock>:
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 fdd2 	bl	8003404 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001860:	f7fe fe78 	bl	8000554 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f816 	bl	8001894 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001868:	f000 f884 	bl	8001974 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800186c:	f000 f906 	bl	8001a7c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 f987 	bl	8001b82 <MX_GPIO_Init>
  MX_DMA_Init();
 8001874:	f000 f968 	bl	8001b48 <MX_DMA_Init>
  MX_RTC_Init();
 8001878:	f000 f932 	bl	8001ae0 <MX_RTC_Init>
  MX_RNG_Init();
 800187c:	f000 f91a 	bl	8001ab4 <MX_RNG_Init>
  MX_ADC1_Init();
 8001880:	f000 f898 	bl	80019b4 <MX_ADC1_Init>
  MX_RF_Init();
 8001884:	f000 f90e 	bl	8001aa4 <MX_RF_Init>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001888:	f7fe fe72 	bl	8000570 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800188c:	f7fe ffe5 	bl	800085a <MX_APPE_Process>
 8001890:	e7fc      	b.n	800188c <main+0x34>
	...

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09a      	sub	sp, #104	; 0x68
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2248      	movs	r2, #72	; 0x48
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 fdd8 	bl	800b458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f023 0303 	bic.w	r3, r3, #3
 80018d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018de:	f003 fa5f 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff70 	bl	80017c8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <SystemClock_Config+0xdc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <SystemClock_Config+0xdc>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <SystemClock_Config+0xdc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001904:	2347      	movs	r3, #71	; 0x47
 8001906:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fdb5 	bl	8005498 <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001934:	f000 f932 	bl	8001b9c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001938:	236f      	movs	r3, #111	; 0x6f
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800193c:	2302      	movs	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f004 f911 	bl	8005b80 <HAL_RCC_ClockConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001964:	f000 f91a 	bl	8001b9c <Error_Handler>
  }
}
 8001968:	bf00      	nop
 800196a:	3768      	adds	r7, #104	; 0x68
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58000400 	.word	0x58000400

08001974 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2250      	movs	r2, #80	; 0x50
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f009 fd69 	bl	800b458 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001986:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800198a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800198c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001992:	2302      	movs	r3, #2
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001996:	2310      	movs	r3, #16
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fd00 	bl	80063a2 <HAL_RCCEx_PeriphCLKConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019a8:	f000 f8f8 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	; 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <MX_ADC1_Init+0xc0>)
 80019ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019ea:	2204      	movs	r2, #4
 80019ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a2c:	f001 ff34 	bl	8003898 <HAL_ADC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001a36:	f000 f8b1 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_ADC1_Init+0xc4>)
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a46:	237f      	movs	r3, #127	; 0x7f
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a58:	f002 f86a 	bl	8003b30 <HAL_ADC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a62:	f000 f89b 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000026c 	.word	0x2000026c
 8001a74:	50040000 	.word	0x50040000
 8001a78:	04300002 	.word	0x04300002

08001a7c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_IPCC_Init+0x20>)
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <MX_IPCC_Init+0x24>)
 8001a84:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_IPCC_Init+0x20>)
 8001a88:	f003 f904 	bl	8004c94 <HAL_IPCC_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a92:	f000 f883 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002d0 	.word	0x200002d0
 8001aa0:	58000c00 	.word	0x58000c00

08001aa4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_RNG_Init+0x24>)
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <MX_RNG_Init+0x28>)
 8001abc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_RNG_Init+0x24>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_RNG_Init+0x24>)
 8001ac6:	f004 fef3 	bl	80068b0 <HAL_RNG_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001ad0:	f000 f864 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200004f4 	.word	0x200004f4
 8001adc:	58001000 	.word	0x58001000

08001ae0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_RTC_Init+0x60>)
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <MX_RTC_Init+0x64>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_RTC_Init+0x60>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_RTC_Init+0x60>)
 8001af2:	220f      	movs	r2, #15
 8001af4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_RTC_Init+0x60>)
 8001af8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001afc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b16:	480a      	ldr	r0, [pc, #40]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b18:	f004 ff00 	bl	800691c <HAL_RTC_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f83b 	bl	8001b9c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b2c:	f004 fff6 	bl	8006b1c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001b36:	f000 f831 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000508 	.word	0x20000508
 8001b44:	40002800 	.word	0x40002800

08001b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f7ff fe51 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fe4e 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7ff fe4b 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	210f      	movs	r1, #15
 8001b62:	200e      	movs	r0, #14
 8001b64:	f002 fce5 	bl	8004532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b68:	200e      	movs	r0, #14
 8001b6a:	f002 fcfc 	bl	8004566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	203a      	movs	r0, #58	; 0x3a
 8001b74:	f002 fcdd 	bl	8004532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001b78:	203a      	movs	r0, #58	; 0x3a
 8001b7a:	f002 fcf4 	bl	8004566 <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2004      	movs	r0, #4
 8001b88:	f7ff fe4d 	bl	8001826 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fe4a 	bl	8001826 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2002      	movs	r0, #2
 8001b94:	f7ff fe47 	bl	8001826 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <LL_PWR_SetPowerMode>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <LL_PWR_SetPowerMode+0x24>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <LL_PWR_SetPowerMode+0x24>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	58000400 	.word	0x58000400

08001bd4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <LL_PWR_ClearFlag_WU+0x14>)
 8001bda:	221f      	movs	r2, #31
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	58000400 	.word	0x58000400

08001bec <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d101      	bne.n	8001c04 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	58000400 	.word	0x58000400

08001c14 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c26:	d101      	bne.n	8001c2c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	58000400 	.word	0x58000400

08001c3c <LL_RCC_HSE_Enable>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_RCC_HSE_IsReady>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c6c:	d101      	bne.n	8001c72 <LL_RCC_HSE_IsReady+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_RCC_HSE_IsReady+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_HSI_Enable>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_HSI_IsReady>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d101      	bne.n	8001cb4 <LL_RCC_HSI_IsReady+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_RCC_HSI_IsReady+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_RCC_SetSysClkSource>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_GetSysClkSource>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_LPM_EnableSleep>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <LL_LPM_EnableSleep+0x1c>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <LL_LPM_EnableSleep+0x1c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	6113      	str	r3, [r2, #16]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <LL_LPM_EnableDeepSleep+0x1c>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <LL_LPM_EnableDeepSleep+0x1c>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6113      	str	r3, [r2, #16]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	3220      	adds	r2, #32
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <LL_HSEM_1StepLock+0x2c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d001      	beq.n	8001d86 <LL_HSEM_1StepLock+0x1e>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_HSEM_1StepLock+0x20>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	80000400 	.word	0x80000400

08001d98 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001dc2:	f001 fbb1 	bl	8003528 <HAL_SuspendTick>

  EnterLowPower();
 8001dc6:	f000 f835 	bl	8001e34 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001dca:	f7ff ff03 	bl	8001bd4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f7ff feec 	bl	8001bac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001dd4:	f7ff ffb8 	bl	8001d48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001dd8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001dda:	bf00      	nop
}
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8001de2:	f001 fbb1 	bl	8003548 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001de6:	bf00      	nop
}
 8001de8:	bd80      	pop	{r7, pc}

08001dea <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001dee:	f001 fb9b 	bl	8003528 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001df2:	f000 f81f 	bl	8001e34 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f7ff fed8 	bl	8001bac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001dfc:	f7ff ffa4 	bl	8001d48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001e00:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001e02:	bf00      	nop
}
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001e0a:	f000 f84f 	bl	8001eac <ExitLowPower>

  HAL_ResumeTick();
 8001e0e:	f001 fb9b 	bl	8003548 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001e12:	bf00      	nop
}
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001e1a:	f001 fb85 	bl	8003528 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001e1e:	f7ff ff83 	bl	8001d28 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001e22:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001e24:	bf00      	nop
}
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001e2c:	f001 fb8c 	bl	8003548 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001e30:	bf00      	nop
}
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001e38:	bf00      	nop
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4819      	ldr	r0, [pc, #100]	; (8001ea4 <EnterLowPower+0x70>)
 8001e3e:	f7ff ff93 	bl	8001d68 <LL_HSEM_1StepLock>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f8      	bne.n	8001e3a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001e48:	2104      	movs	r1, #4
 8001e4a:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <EnterLowPower+0x70>)
 8001e4c:	f7ff ff8c 	bl	8001d68 <LL_HSEM_1StepLock>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d117      	bne.n	8001e86 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001e56:	f7ff fedd 	bl	8001c14 <LL_PWR_IsActiveFlag_C2DS>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <EnterLowPower+0x36>
 8001e60:	f7ff fec4 	bl	8001bec <LL_PWR_IsActiveFlag_C2SB>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d015      	beq.n	8001e96 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <EnterLowPower+0x70>)
 8001e70:	f7ff ff92 	bl	8001d98 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001e74:	f000 f852 	bl	8001f1c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <EnterLowPower+0x74>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <EnterLowPower+0x74>)
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e007      	b.n	8001e96 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001e86:	f000 f849 	bl	8001f1c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <EnterLowPower+0x74>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <EnterLowPower+0x74>)
 8001e90:	f023 0307 	bic.w	r3, r3, #7
 8001e94:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2103      	movs	r1, #3
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <EnterLowPower+0x70>)
 8001e9c:	f7ff ff7c 	bl	8001d98 <LL_HSEM_ReleaseLock>

  return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58001400 	.word	0x58001400
 8001ea8:	58004000 	.word	0x58004000

08001eac <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4817      	ldr	r0, [pc, #92]	; (8001f14 <ExitLowPower+0x68>)
 8001eb6:	f7ff ff6f 	bl	8001d98 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001eba:	bf00      	nop
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	4815      	ldr	r0, [pc, #84]	; (8001f14 <ExitLowPower+0x68>)
 8001ec0:	f7ff ff52 	bl	8001d68 <LL_HSEM_1StepLock>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f8      	bne.n	8001ebc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001eca:	f7ff ff0d 	bl	8001ce8 <LL_RCC_GetSysClkSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d118      	bne.n	8001f06 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8001ed4:	f7ff feb2 	bl	8001c3c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <ExitLowPower+0x6c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0307 	bic.w	r3, r3, #7
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <ExitLowPower+0x6c>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8001ee8:	bf00      	nop
 8001eea:	f7ff feb6 	bl	8001c5a <LL_RCC_HSE_IsReady>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0fa      	beq.n	8001eea <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff fee3 	bl	8001cc0 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001efa:	bf00      	nop
 8001efc:	f7ff fef4 	bl	8001ce8 <LL_RCC_GetSysClkSource>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d1fa      	bne.n	8001efc <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <ExitLowPower+0x68>)
 8001f0c:	f7ff ff44 	bl	8001d98 <LL_HSEM_ReleaseLock>

  return;
 8001f10:	bf00      	nop
}
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58001400 	.word	0x58001400
 8001f18:	58004000 	.word	0x58004000

08001f1c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001f20:	f7ff fead 	bl	8001c7e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001f24:	bf00      	nop
 8001f26:	f7ff feb9 	bl	8001c9c <LL_RCC_HSI_IsReady>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0fa      	beq.n	8001f26 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff fec5 	bl	8001cc0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fee2 	bl	8001d00 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001f3c:	bf00      	nop
 8001f3e:	f7ff fed3 	bl	8001ce8 <LL_RCC_GetSysClkSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d1fa      	bne.n	8001f3e <Switch_On_HSI+0x22>
  return;
 8001f48:	bf00      	nop
}
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_AHB2_GRP1_EnableClock>:
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_AHB3_GRP1_EnableClock>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_APB1_GRP1_EnableClock>:
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002008:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800200c:	f7ff ffc8 	bl	8001fa0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	202e      	movs	r0, #46	; 0x2e
 8002016:	f002 fa8c 	bl	8004532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800201a:	202e      	movs	r0, #46	; 0x2e
 800201c:	f002 faa3 	bl	8004566 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b09c      	sub	sp, #112	; 0x70
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	2250      	movs	r2, #80	; 0x50
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f009 fa07 	bl	800b458 <memset>
  if(hadc->Instance==ADC1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_ADC_MspInit+0x9c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d130      	bne.n	80020b6 <HAL_ADC_MspInit+0x92>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002058:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 800205a:	2308      	movs	r3, #8
 800205c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800205e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002062:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002068:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800206a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800206e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8002070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002074:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f004 f98e 	bl	80063a2 <HAL_RCCEx_PeriphCLKConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800208c:	f7ff fd86 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002090:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002094:	f7ff ff6b 	bl	8001f6e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002098:	2004      	movs	r0, #4
 800209a:	f7ff ff68 	bl	8001f6e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800209e:	2301      	movs	r3, #1
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	2303      	movs	r3, #3
 80020a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020ae:	4619      	mov	r1, r3
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <HAL_ADC_MspInit+0xa0>)
 80020b2:	f002 fc2b 	bl	800490c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3770      	adds	r7, #112	; 0x70
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	50040000 	.word	0x50040000
 80020c4:	48000800 	.word	0x48000800

080020c8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_IPCC_MspInit+0x44>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d113      	bne.n	8002102 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80020da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80020de:	f7ff ff5f 	bl	8001fa0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	202c      	movs	r0, #44	; 0x2c
 80020e8:	f002 fa23 	bl	8004532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80020ec:	202c      	movs	r0, #44	; 0x2c
 80020ee:	f002 fa3a 	bl	8004566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	202d      	movs	r0, #45	; 0x2d
 80020f8:	f002 fa1b 	bl	8004532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020fc:	202d      	movs	r0, #45	; 0x2d
 80020fe:	f002 fa32 	bl	8004566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58000c00 	.word	0x58000c00

08002110 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b096      	sub	sp, #88	; 0x58
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	2250      	movs	r2, #80	; 0x50
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f009 f999 	bl	800b458 <memset>
  if(hrng->Instance==RNG)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_RNG_MspInit+0x50>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d113      	bne.n	8002158 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4618      	mov	r0, r3
 8002142:	f004 f92e 	bl	80063a2 <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800214c:	f7ff fd26 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002150:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002154:	f7ff ff24 	bl	8001fa0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3758      	adds	r7, #88	; 0x58
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	58001000 	.word	0x58001000

08002164 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b096      	sub	sp, #88	; 0x58
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	2250      	movs	r2, #80	; 0x50
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f009 f96f 	bl	800b458 <memset>
  if(hrtc->Instance==RTC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_RTC_MspInit+0x64>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d11d      	bne.n	80021c0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002188:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f004 f904 	bl	80063a2 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021a0:	f7ff fcfc 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a4:	f7ff fed2 	bl	8001f4c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ac:	f7ff ff11 	bl	8001fd2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2003      	movs	r0, #3
 80021b6:	f002 f9bc 	bl	8004532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f002 f9d3 	bl	8004566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3758      	adds	r7, #88	; 0x58
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40002800 	.word	0x40002800

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f001 f94a 	bl	80034b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800222c:	f7fe ff38 	bl	80010a0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA1_Channel4_IRQHandler+0x10>)
 800223a:	f002 fa96 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000434 	.word	0x20000434

08002248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <USART1_IRQHandler+0x10>)
 800224e:	f004 fd6d 	bl	8006d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200003a0 	.word	0x200003a0

0800225c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <LPUART1_IRQHandler+0x10>)
 8002262:	f004 fd63 	bl	8006d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000030c 	.word	0x2000030c

08002270 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002274:	f000 fe4c 	bl	8002f10 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002280:	f000 fe7e 	bl	8002f80 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800228c:	f002 fcde 	bl	8004c4c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA2_Channel4_IRQHandler+0x10>)
 800229a:	f002 fa66 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000494 	.word	0x20000494

080022a8 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80022ac:	2010      	movs	r0, #16
 80022ae:	f002 fcb5 	bl	8004c1c <HAL_GPIO_EXTI_IRQHandler>
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f002 fcae 	bl	8004c1c <HAL_GPIO_EXTI_IRQHandler>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80022c8:	2002      	movs	r0, #2
 80022ca:	f002 fca7 	bl	8004c1c <HAL_GPIO_EXTI_IRQHandler>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LL_FLASH_GetUDN+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	1fff7580 	.word	0x1fff7580

080022ec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <LL_FLASH_GetDeviceID+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	1fff7584 	.word	0x1fff7584

08002304 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <LL_FLASH_GetSTCompanyID+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0a1b      	lsrs	r3, r3, #8
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	1fff7584 	.word	0x1fff7584

0800231c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b090      	sub	sp, #64	; 0x40
 8002320:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <APP_BLE_Init+0xb8>)
 8002324:	1d3c      	adds	r4, r7, #4
 8002326:	461d      	mov	r5, r3
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002338:	c403      	stmia	r4!, {r0, r1}
 800233a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800233c:	f000 f974 	bl	8002628 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002340:	2101      	movs	r1, #1
 8002342:	2002      	movs	r0, #2
 8002344:	f008 fdb2 	bl	800aeac <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <APP_BLE_Init+0xbc>)
 800234a:	2100      	movs	r1, #0
 800234c:	2004      	movs	r0, #4
 800234e:	f008 ff0f 	bl	800b170 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f007 ff53 	bl	800a200 <SHCI_C2_BLE_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8002360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <APP_BLE_Init+0x50>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002368:	f7ff fc18 	bl	8001b9c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800236c:	f000 f972 	bl	8002654 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002370:	f008 fa9a 	bl	800a8a8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <APP_BLE_Init+0xc0>)
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <APP_BLE_Init+0xc0>)
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 8002384:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <APP_BLE_Init+0xc4>)
 8002386:	2100      	movs	r1, #0
 8002388:	2001      	movs	r0, #1
 800238a:	f008 fef1 	bl	800b170 <UTIL_SEQ_RegTask>
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800238e:	f000 fb77 	bl	8002a80 <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 8002392:	f000 fbb9 	bl	8002b08 <HRSAPP_Init>
  /**
   * Initialize HSS Application
   */
  HSSAPP_Init();
 8002396:	f000 fc6d 	bl	8002c74 <HSSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <APP_BLE_Init+0xc8>)
 800239c:	2200      	movs	r2, #0
 800239e:	4912      	ldr	r1, [pc, #72]	; (80023e8 <APP_BLE_Init+0xcc>)
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff f81f 	bl	80013e4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <APP_BLE_Init+0xc0>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <APP_BLE_Init+0xc0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 80023b2:	f641 000d 	movw	r0, #6157	; 0x180d
 80023b6:	f000 facf 	bl	8002958 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <APP_BLE_Init+0xd0>)
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <APP_BLE_Init+0xd4>)
 80023c2:	22a0      	movs	r2, #160	; 0xa0
 80023c4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fa12 	bl	80027f0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80023cc:	bf00      	nop
}
 80023ce:	3740      	adds	r7, #64	; 0x40
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdb0      	pop	{r4, r5, r7, pc}
 80023d4:	0800b4a8 	.word	0x0800b4a8
 80023d8:	080098cd 	.word	0x080098cd
 80023dc:	20000534 	.word	0x20000534
 80023e0:	080029c1 	.word	0x080029c1
 80023e4:	080029b1 	.word	0x080029b1
 80023e8:	200005b5 	.word	0x200005b5
 80023ec:	200005b8 	.word	0x200005b8
 80023f0:	200005ba 	.word	0x200005ba

080023f4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80023fc:	2392      	movs	r3, #146	; 0x92
 80023fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3301      	adds	r3, #1
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2bff      	cmp	r3, #255	; 0xff
 800240e:	d062      	beq.n	80024d6 <SVCCTL_App_Notification+0xe2>
 8002410:	2bff      	cmp	r3, #255	; 0xff
 8002412:	f300 80a6 	bgt.w	8002562 <SVCCTL_App_Notification+0x16e>
 8002416:	2b05      	cmp	r3, #5
 8002418:	d002      	beq.n	8002420 <SVCCTL_App_Notification+0x2c>
 800241a:	2b3e      	cmp	r3, #62	; 0x3e
 800241c:	d016      	beq.n	800244c <SVCCTL_App_Notification+0x58>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800241e:	e0a0      	b.n	8002562 <SVCCTL_App_Notification+0x16e>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	3302      	adds	r3, #2
 8002424:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <SVCCTL_App_Notification+0x180>)
 8002430:	8adb      	ldrh	r3, [r3, #22]
 8002432:	429a      	cmp	r2, r3
 8002434:	d106      	bne.n	8002444 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002436:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <SVCCTL_App_Notification+0x180>)
 8002438:	2200      	movs	r2, #0
 800243a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <SVCCTL_App_Notification+0x180>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8002444:	2001      	movs	r0, #1
 8002446:	f000 f9d3 	bl	80027f0 <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800244a:	e08d      	b.n	8002568 <SVCCTL_App_Notification+0x174>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	3302      	adds	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d005      	beq.n	8002466 <SVCCTL_App_Notification+0x72>
 800245a:	2b0c      	cmp	r3, #12
 800245c:	dc37      	bgt.n	80024ce <SVCCTL_App_Notification+0xda>
 800245e:	2b01      	cmp	r3, #1
 8002460:	d017      	beq.n	8002492 <SVCCTL_App_Notification+0x9e>
 8002462:	2b03      	cmp	r3, #3
          break;
 8002464:	e033      	b.n	80024ce <SVCCTL_App_Notification+0xda>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <SVCCTL_App_Notification+0x180>)
 800246e:	8adb      	ldrh	r3, [r3, #22]
 8002470:	f107 020e 	add.w	r2, r7, #14
 8002474:	f107 010f 	add.w	r1, r7, #15
 8002478:	4618      	mov	r0, r3
 800247a:	f007 f814 	bl	80094a6 <hci_le_read_phy>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8002484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002488:	2b00      	cmp	r3, #0
 800248a:	d122      	bne.n	80024d2 <SVCCTL_App_Notification+0xde>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
          break;
 8002490:	e01f      	b.n	80024d2 <SVCCTL_App_Notification+0xde>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <SVCCTL_App_Notification+0x180>)
 800249a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f81a 	bl	80014d8 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80024a4:	4b33      	ldr	r3, [pc, #204]	; (8002574 <SVCCTL_App_Notification+0x180>)
 80024a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d104      	bne.n	80024b8 <SVCCTL_App_Notification+0xc4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <SVCCTL_App_Notification+0x180>)
 80024b0:	2206      	movs	r2, #6
 80024b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80024b6:	e003      	b.n	80024c0 <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <SVCCTL_App_Notification+0x180>)
 80024ba:	2205      	movs	r2, #5
 80024bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <SVCCTL_App_Notification+0x180>)
 80024ca:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80024cc:	e002      	b.n	80024d4 <SVCCTL_App_Notification+0xe0>
          break;
 80024ce:	bf00      	nop
 80024d0:	e04a      	b.n	8002568 <SVCCTL_App_Notification+0x174>
          break;
 80024d2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80024d4:	e048      	b.n	8002568 <SVCCTL_App_Notification+0x174>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	3302      	adds	r3, #2
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	d83d      	bhi.n	8002566 <SVCCTL_App_Notification+0x172>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <SVCCTL_App_Notification+0xfc>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	0800255f 	.word	0x0800255f
 80024f4:	08002557 	.word	0x08002557
 80024f8:	0800251d 	.word	0x0800251d
 80024fc:	0800255f 	.word	0x0800255f
 8002500:	0800255f 	.word	0x0800255f
 8002504:	08002531 	.word	0x08002531
 8002508:	08002567 	.word	0x08002567
 800250c:	0800255f 	.word	0x0800255f
 8002510:	0800255f 	.word	0x0800255f
 8002514:	08002543 	.word	0x08002543
 8002518:	0800255f 	.word	0x0800255f
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <SVCCTL_App_Notification+0x180>)
 800251e:	8adb      	ldrh	r3, [r3, #22]
 8002520:	4915      	ldr	r1, [pc, #84]	; (8002578 <SVCCTL_App_Notification+0x184>)
 8002522:	4618      	mov	r0, r3
 8002524:	f006 f876 	bl	8008614 <aci_gap_pass_key_resp>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800252e:	e017      	b.n	8002560 <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <SVCCTL_App_Notification+0x180>)
 8002532:	8adb      	ldrh	r3, [r3, #22]
 8002534:	4618      	mov	r0, r3
 8002536:	f006 fa92 	bl	8008a5e <aci_gap_allow_rebond>
 800253a:	4603      	mov	r3, r0
 800253c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002540:	e00e      	b.n	8002560 <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <SVCCTL_App_Notification+0x180>)
 8002544:	8adb      	ldrh	r3, [r3, #22]
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f006 fadc 	bl	8008b06 <aci_gap_numeric_comparison_value_confirm_yesno>
 800254e:	4603      	mov	r3, r0
 8002550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 8002554:	e004      	b.n	8002560 <SVCCTL_App_Notification+0x16c>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3302      	adds	r3, #2
 800255a:	623b      	str	r3, [r7, #32]
          break;    
 800255c:	e000      	b.n	8002560 <SVCCTL_App_Notification+0x16c>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800255e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002560:	e001      	b.n	8002566 <SVCCTL_App_Notification+0x172>
      break;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <SVCCTL_App_Notification+0x174>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002566:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	3730      	adds	r7, #48	; 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000534 	.word	0x20000534
 8002578:	0001e240 	.word	0x0001e240

0800257c <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002582:	2392      	movs	r3, #146	; 0x92
 8002584:	71fb      	strb	r3, [r7, #7]

  ret = aci_gap_clear_security_db();
 8002586:	f006 fa46 	bl	8008a16 <aci_gap_clear_security_db>
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
  }
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800259e:	2392      	movs	r3, #146	; 0x92
 80025a0:	71fb      	strb	r3, [r7, #7]
  
  ret = aci_gap_slave_security_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle); 
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <APP_BLE_Key_Button2_Action+0x20>)
 80025a4:	8adb      	ldrh	r3, [r3, #22]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 f948 	bl	800883c <aci_gap_slave_security_req>
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("===>> aci_gap_slave_security_req - Success\n");
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000534 	.word	0x20000534

080025bc <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af02      	add	r7, sp, #8
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80025c2:	2392      	movs	r3, #146	; 0x92
 80025c4:	71fb      	strb	r3, [r7, #7]

  ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <APP_BLE_Key_Button3_Action+0x68>)
 80025c8:	8adb      	ldrh	r3, [r3, #22]
 80025ca:	1d7a      	adds	r2, r7, #5
 80025cc:	1db9      	adds	r1, r7, #6
 80025ce:	4618      	mov	r0, r3
 80025d0:	f006 ff69 	bl	80094a6 <hci_le_read_phy>
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11d      	bne.n	800261a <APP_BLE_Key_Button3_Action+0x5e>
  }
  else
  {
    APP_DBG_MSG("==>> hci_le_read_phy - Success\n");
    APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
    if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d10f      	bne.n	8002604 <APP_BLE_Key_Button3_Action+0x48>
 80025e4:	797b      	ldrb	r3, [r7, #5]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d10c      	bne.n	8002604 <APP_BLE_Key_Button3_Action+0x48>
    {
      APP_DBG_MSG("==>> hci_le_set_phy PHY Param  TX= %d, RX= %d - ", TX_1M, RX_1M);
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_1M,RX_1M,0);
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <APP_BLE_Key_Button3_Action+0x68>)
 80025ec:	8ad8      	ldrh	r0, [r3, #22]
 80025ee:	2300      	movs	r3, #0
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	2201      	movs	r2, #1
 80025f6:	2100      	movs	r1, #0
 80025f8:	f007 f850 	bl	800969c <hci_le_set_phy>
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
      if (ret != BLE_STATUS_SUCCESS)
 8002600:	bf00      	nop
      {
        APP_DBG_MSG("Success\n\r");
      }
    } 
  }
}
 8002602:	e00a      	b.n	800261a <APP_BLE_Key_Button3_Action+0x5e>
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED,0);
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <APP_BLE_Key_Button3_Action+0x68>)
 8002606:	8ad8      	ldrh	r0, [r3, #22]
 8002608:	2300      	movs	r3, #0
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2302      	movs	r3, #2
 800260e:	2202      	movs	r2, #2
 8002610:	2100      	movs	r1, #0
 8002612:	f007 f843 	bl	800969c <hci_le_set_phy>
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000534 	.word	0x20000534

08002628 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <Ble_Tl_Init+0x20>)
 8002630:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <Ble_Tl_Init+0x24>)
 8002634:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002636:	463b      	mov	r3, r7
 8002638:	4619      	mov	r1, r3
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <Ble_Tl_Init+0x28>)
 800263c:	f007 f92a 	bl	8009894 <hci_init>

  return;
 8002640:	bf00      	nop
}
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20030028 	.word	0x20030028
 800264c:	08002a4b 	.word	0x08002a4b
 8002650:	08002a13 	.word	0x08002a13

08002654 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	b08d      	sub	sp, #52	; 0x34
 8002658:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800265a:	f44f 7350 	mov.w	r3, #832	; 0x340
 800265e:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002660:	2392      	movs	r3, #146	; 0x92
 8002662:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002664:	f006 fefb 	bl	800945e <hci_reset>
 8002668:	4603      	mov	r3, r0
 800266a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800266c:	f000 f930 	bl	80028d0 <BleGetBdAddress>
 8002670:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	2106      	movs	r1, #6
 8002676:	2000      	movs	r0, #0
 8002678:	f006 fe05 	bl	8009286 <aci_hal_write_config_data>
 800267c:	4603      	mov	r3, r0
 800267e:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	795a      	ldrb	r2, [r3, #5]
 8002684:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002686:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	791a      	ldrb	r2, [r3, #4]
 800268c:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800268e:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	78da      	ldrb	r2, [r3, #3]
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002696:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	789a      	ldrb	r2, [r3, #2]
 800269c:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800269e:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	785a      	ldrb	r2, [r3, #1]
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80026a6:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80026ae:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <Ble_Hci_Gap_Gatt_Init+0x188>)
 80026b2:	2110      	movs	r1, #16
 80026b4:	2018      	movs	r0, #24
 80026b6:	f006 fde6 	bl	8009286 <aci_hal_write_config_data>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80026be:	4a48      	ldr	r2, [pc, #288]	; (80027e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80026c0:	2110      	movs	r1, #16
 80026c2:	2008      	movs	r0, #8
 80026c4:	f006 fddf 	bl	8009286 <aci_hal_write_config_data>
 80026c8:	4603      	mov	r3, r0
 80026ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80026cc:	2118      	movs	r1, #24
 80026ce:	2001      	movs	r0, #1
 80026d0:	f006 fe5e 	bl	8009390 <aci_hal_set_tx_power_level>
 80026d4:	4603      	mov	r3, r0
 80026d6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80026d8:	f006 fa7c 	bl	8008bd4 <aci_gatt_init>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01f      	beq.n	8002732 <Ble_Hci_Gap_Gatt_Init+0xde>
  {
    const char *name = "ESSTM";
 80026f2:	4b3c      	ldr	r3, [pc, #240]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80026f4:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80026f6:	1dba      	adds	r2, r7, #6
 80026f8:	7bf8      	ldrb	r0, [r7, #15]
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	2207      	movs	r2, #7
 8002706:	2100      	movs	r1, #0
 8002708:	f005 ffeb 	bl	80086e2 <aci_gap_init>
 800270c:	4603      	mov	r3, r0
 800270e:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8002710:	88fc      	ldrh	r4, [r7, #6]
 8002712:	88bd      	ldrh	r5, [r7, #4]
 8002714:	68b8      	ldr	r0, [r7, #8]
 8002716:	f7fd fd3b 	bl	8000190 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	2200      	movs	r2, #0
 8002726:	4629      	mov	r1, r5
 8002728:	4620      	mov	r0, r4
 800272a:	f006 fc56 	bl	8008fda <aci_gatt_update_char_value>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8002732:	88f8      	ldrh	r0, [r7, #6]
 8002734:	8879      	ldrh	r1, [r7, #2]
 8002736:	463b      	mov	r3, r7
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2302      	movs	r3, #2
 800273c:	2200      	movs	r2, #0
 800273e:	f006 fc4c 	bl	8008fda <aci_gatt_update_char_value>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002746:	2202      	movs	r2, #2
 8002748:	2102      	movs	r1, #2
 800274a:	2000      	movs	r0, #0
 800274c:	f006 ff29 	bl	80095a2 <hci_le_set_default_phy>
 8002750:	4603      	mov	r3, r0
 8002752:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f005 fe40 	bl	80083e4 <aci_gap_set_io_capability>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800276a:	2201      	movs	r2, #1
 800276c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002770:	2208      	movs	r2, #8
 8002772:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002776:	2210      	movs	r2, #16
 8002778:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800277c:	2200      	movs	r2, #0
 800277e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002782:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <Ble_Hci_Gap_Gatt_Init+0x198>)
 8002784:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002788:	2201      	movs	r2, #1
 800278a:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800278e:	789c      	ldrb	r4, [r3, #2]
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002792:	785d      	ldrb	r5, [r3, #1]
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002796:	791b      	ldrb	r3, [r3, #4]
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800279a:	7952      	ldrb	r2, [r2, #5]
 800279c:	4912      	ldr	r1, [pc, #72]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800279e:	78c9      	ldrb	r1, [r1, #3]
 80027a0:	4811      	ldr	r0, [pc, #68]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80027a2:	6880      	ldr	r0, [r0, #8]
 80027a4:	2600      	movs	r6, #0
 80027a6:	9604      	str	r6, [sp, #16]
 80027a8:	9003      	str	r0, [sp, #12]
 80027aa:	9102      	str	r1, [sp, #8]
 80027ac:	9201      	str	r2, [sp, #4]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	2201      	movs	r2, #1
 80027b4:	4629      	mov	r1, r5
 80027b6:	4620      	mov	r0, r4
 80027b8:	f005 fe68 	bl	800848c <aci_gap_set_authentication_requirement>
 80027bc:	4603      	mov	r3, r0
 80027be:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <Ble_Hci_Gap_Gatt_Init+0x17c>
  {
    ret = aci_gap_configure_whitelist();
 80027c8:	f006 f901 	bl	80089ce <aci_gap_configure_whitelist>
 80027cc:	4603      	mov	r3, r0
 80027ce:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d8:	20000008 	.word	0x20000008
 80027dc:	0800b66c 	.word	0x0800b66c
 80027e0:	0800b67c 	.word	0x0800b67c
 80027e4:	0800b4e4 	.word	0x0800b4e4
 80027e8:	20000534 	.word	0x20000534
 80027ec:	0001b207 	.word	0x0001b207

080027f0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af08      	add	r7, sp, #32
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80027fa:	2392      	movs	r3, #146	; 0x92
 80027fc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <Adv_Request+0xc4>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <Adv_Request+0xc8>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	81bb      	strh	r3, [r7, #12]
 8002810:	e005      	b.n	800281e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002812:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002816:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002818:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800281c:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <Adv_Request+0xcc>)
 8002820:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fe57 	bl	80014d8 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d10d      	bne.n	800284c <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <Adv_Request+0xcc>)
 8002832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002836:	2b01      	cmp	r3, #1
 8002838:	d004      	beq.n	8002844 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <Adv_Request+0xcc>)
 800283c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002840:	2b02      	cmp	r3, #2
 8002842:	d103      	bne.n	800284c <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8002844:	f005 fcb0 	bl	80081a8 <aci_gap_set_non_discoverable>
 8002848:	4603      	mov	r3, r0
 800284a:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <Adv_Request+0xcc>)
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <Adv_Request+0xcc>)
 8002856:	7e1b      	ldrb	r3, [r3, #24]
 8002858:	89ba      	ldrh	r2, [r7, #12]
 800285a:	89f9      	ldrh	r1, [r7, #14]
 800285c:	2000      	movs	r0, #0
 800285e:	9006      	str	r0, [sp, #24]
 8002860:	2000      	movs	r0, #0
 8002862:	9005      	str	r0, [sp, #20]
 8002864:	4816      	ldr	r0, [pc, #88]	; (80028c0 <Adv_Request+0xd0>)
 8002866:	9004      	str	r0, [sp, #16]
 8002868:	9303      	str	r3, [sp, #12]
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <Adv_Request+0xd4>)
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2306      	movs	r3, #6
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	2000      	movs	r0, #0
 800287a:	f005 fcb9 	bl	80081f0 <aci_gap_set_discoverable>
 800287e:	4603      	mov	r3, r0
 8002880:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8002882:	4911      	ldr	r1, [pc, #68]	; (80028c8 <Adv_Request+0xd8>)
 8002884:	200e      	movs	r0, #14
 8002886:	f006 f830 	bl	80088ea <aci_gap_update_adv_data>
 800288a:	4603      	mov	r3, r0
 800288c:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <Adv_Request+0xcc>)
 800289c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80028a0:	490a      	ldr	r1, [pc, #40]	; (80028cc <Adv_Request+0xdc>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fe9c 	bl	80015e0 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
}
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200005b8 	.word	0x200005b8
 80028b8:	200005ba 	.word	0x200005ba
 80028bc:	20000534 	.word	0x20000534
 80028c0:	2000054d 	.word	0x2000054d
 80028c4:	0800b68c 	.word	0x0800b68c
 80028c8:	20000008 	.word	0x20000008
 80028cc:	0001e046 	.word	0x0001e046

080028d0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80028d6:	f7ff fcfd 	bl	80022d4 <LL_FLASH_GetUDN>
 80028da:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d023      	beq.n	800292c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80028e4:	f7ff fd0e 	bl	8002304 <LL_FLASH_GetSTCompanyID>
 80028e8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80028ea:	f7ff fcff 	bl	80022ec <LL_FLASH_GetDeviceID>
 80028ee:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <BleGetBdAddress+0x80>)
 80028f6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <BleGetBdAddress+0x80>)
 8002900:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <BleGetBdAddress+0x80>)
 8002908:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <BleGetBdAddress+0x80>)
 8002910:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <BleGetBdAddress+0x80>)
 800291a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <BleGetBdAddress+0x80>)
 8002924:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <BleGetBdAddress+0x80>)
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e00b      	b.n	8002944 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800292c:	2000      	movs	r0, #0
 800292e:	f007 fc3f 	bl	800a1b0 <OTP_Read>
 8002932:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e001      	b.n	8002944 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <BleGetBdAddress+0x84>)
 8002942:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8002944:	697b      	ldr	r3, [r7, #20]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000052c 	.word	0x2000052c
 8002954:	0800b664 	.word	0x0800b664

08002958 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 8002964:	7e1b      	ldrb	r3, [r3, #24]
 8002966:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 800296e:	440b      	add	r3, r1
 8002970:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 8002974:	7e1b      	ldrb	r3, [r3, #24]
 8002976:	3301      	adds	r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 800297c:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 8002986:	7e1b      	ldrb	r3, [r3, #24]
 8002988:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 800298a:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 800298e:	440b      	add	r3, r1
 8002990:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 8002994:	7e1b      	ldrb	r3, [r3, #24]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <Add_Advertisment_Service_UUID+0x54>)
 800299c:	761a      	strb	r2, [r3, #24]

  return;
 800299e:	bf00      	nop
}
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000534 	.word	0x20000534

080029b0 <Adv_Mgr>:

static void Adv_Mgr(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	2001      	movs	r0, #1
 80029b8:	f008 fbfc 	bl	800b1b4 <UTIL_SEQ_SetTask>

  return;
 80029bc:	bf00      	nop
}
 80029be:	bd80      	pop	{r7, pc}

080029c0 <Adv_Update>:

static void Adv_Update(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80029c4:	2002      	movs	r0, #2
 80029c6:	f7ff ff13 	bl	80027f0 <Adv_Request>

  return;
 80029ca:	bf00      	nop
}
 80029cc:	bd80      	pop	{r7, pc}

080029ce <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80029d6:	2100      	movs	r1, #0
 80029d8:	2004      	movs	r0, #4
 80029da:	f008 fbeb 	bl	800b1b4 <UTIL_SEQ_SetTask>

  return;
 80029de:	bf00      	nop
}
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f008 fc4c 	bl	800b28c <UTIL_SEQ_SetEvt>

  return;
 80029f4:	bf00      	nop
}
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f008 fc61 	bl	800b2cc <UTIL_SEQ_WaitEvt>

  return;
 8002a0a:	bf00      	nop
}
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	3308      	adds	r3, #8
 8002a24:	4618      	mov	r0, r3
 8002a26:	f007 ff93 	bl	800a950 <SVCCTL_UserEvtRx>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002a3a:	e003      	b.n	8002a44 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
  return;
 8002a42:	bf00      	nop
}
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <BLE_StatusNot+0x16>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d006      	beq.n	8002a6c <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8002a5e:	e00b      	b.n	8002a78 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002a60:	233f      	movs	r3, #63	; 0x3f
 8002a62:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f008 fbd1 	bl	800b20c <UTIL_SEQ_PauseTask>
      break;
 8002a6a:	e005      	b.n	8002a78 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002a6c:	233f      	movs	r3, #63	; 0x3f
 8002a6e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f008 fbeb 	bl	800b24c <UTIL_SEQ_ResumeTask>
      break;
 8002a76:	bf00      	nop
  }

  return;
 8002a78:	bf00      	nop
}
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
   *
   * @param UUID
   * @param pPData
   * @return
   */
  dis_information_data.pPayload = (uint8_t*)DISAPP_MANUFACTURER_NAME;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <DISAPP_Init+0x24>)
 8002a88:	603b      	str	r3, [r7, #0]
  dis_information_data.Length = sizeof(DISAPP_MANUFACTURER_NAME);
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	713b      	strb	r3, [r7, #4]
  DIS_UpdateChar(MANUFACTURER_NAME_UUID, &dis_information_data);
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	f642 2029 	movw	r0, #10793	; 0x2a29
 8002a96:	f006 fed7 	bl	8009848 <DIS_UpdateChar>
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	0800b4ec 	.word	0x0800b4ec

08002aa8 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d01a      	beq.n	8002aee <HRS_Notification+0x46>
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	dc1e      	bgt.n	8002afa <HRS_Notification+0x52>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HRS_Notification+0x1e>
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d007      	beq.n	8002ad4 <HRS_Notification+0x2c>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 8002ac4:	e019      	b.n	8002afa <HRS_Notification+0x52>
      HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 0;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HRS_Notification+0x5c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	809a      	strh	r2, [r3, #4]
      HRSAPP_Context.ResetEnergyExpended = 1;
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HRS_Notification+0x5c>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	731a      	strb	r2, [r3, #12]
      break;
 8002ad2:	e013      	b.n	8002afc <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HRS_Notification+0x5c>)
 8002ad6:	7b5b      	ldrb	r3, [r3, #13]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fcfd 	bl	80014d8 <HW_TS_Stop>
      HW_TS_Start(HRSAPP_Context.TimerMeasurement_Id, HRSAPP_MEASUREMENT_INTERVAL);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HRS_Notification+0x5c>)
 8002ae0:	7b5b      	ldrb	r3, [r3, #13]
 8002ae2:	f640 0101 	movw	r1, #2049	; 0x801
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fd7a 	bl	80015e0 <HW_TS_Start>
      break;
 8002aec:	e006      	b.n	8002afc <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HRS_Notification+0x5c>)
 8002af0:	7b5b      	ldrb	r3, [r3, #13]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fcf0 	bl	80014d8 <HW_TS_Stop>
      break;
 8002af8:	e000      	b.n	8002afc <HRS_Notification+0x54>
      break;
 8002afa:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 8002afc:	bf00      	nop
}
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200005bc 	.word	0x200005bc

08002b08 <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HRSAPP_Measurement );
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <HRSAPP_Init+0x84>)
 8002b10:	2100      	movs	r1, #0
 8002b12:	2002      	movs	r0, #2
 8002b14:	f008 fb2c 	bl	800b170 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN HRSAPP_Init */
  /**
   * Set Body Sensor Location
   */
  HRSAPP_Context.ResetEnergyExpended = 0;
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	731a      	strb	r2, [r3, #12]
  HRSAPP_Context.BodySensorLocationChar = HRS_BODY_SENSOR_LOCATION_HAND;
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b20:	2204      	movs	r2, #4
 8002b22:	701a      	strb	r2, [r3, #0]
  HRS_UpdateChar(SENSOR_LOCATION_UUID, (uint8_t *)&HRSAPP_Context.BodySensorLocationChar);
 8002b24:	491a      	ldr	r1, [pc, #104]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b26:	f642 2038 	movw	r0, #10808	; 0x2a38
 8002b2a:	f007 fa13 	bl	8009f54 <HRS_UpdateChar>

  /**
   * Set Flags for measurement value
   */

  HRSAPP_Context.MeasurementvalueChar.Flags = ( HRS_HRM_VALUE_FORMAT_UINT16      | 
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b30:	221f      	movs	r2, #31
 8002b32:	72da      	strb	r2, [r3, #11]
                                                  HRS_HRM_SENSOR_CONTACTS_SUPPORTED |
                                                  HRS_HRM_ENERGY_EXPENDED_PRESENT  |
                                                  HRS_HRM_RR_INTERVAL_PRESENT );

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b36:	7adb      	ldrb	r3, [r3, #11]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HRSAPP_Init+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 10;
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b42:	220a      	movs	r2, #10
 8002b44:	809a      	strh	r2, [r3, #4]
#endif
  
#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_RR_INTERVAL_PRESENT)
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b48:	7adb      	ldrb	r3, [r3, #11]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HRSAPP_Init+0x70>
  {
    uint8_t i;
    
    HRSAPP_Context.MeasurementvalueChar.NbreOfValidRRIntervalValues = BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG;
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	729a      	strb	r2, [r3, #10]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	e009      	b.n	8002b72 <HRSAPP_Init+0x6a>
      HRSAPP_Context.MeasurementvalueChar.aRRIntervalValues[i] = 1024;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HRSAPP_Init+0x88>)
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6a:	80da      	strh	r2, [r3, #6]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f2      	beq.n	8002b5e <HRSAPP_Init+0x56>
#endif
  
  /**
   * Create timer for Heart Rate Measurement
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HRSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HrMeas);
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HRSAPP_Init+0x8c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <HRSAPP_Init+0x90>)
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe fc30 	bl	80013e4 <HW_TS_Create>

/* USER CODE END HRSAPP_Init */
  return;
 8002b84:	bf00      	nop
}
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	200005bc 	.word	0x200005bc
 8002b94:	08002c05 	.word	0x08002c05
 8002b98:	200005c9 	.word	0x200005c9

08002b9c <HRSAPP_Measurement>:

static void HRSAPP_Measurement(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */
  uint32_t measurement;

  measurement = ((HRSAPP_Read_RTC_SSR_SS()) & 0x07) + 65;
 8002ba2:	f000 f837 	bl	8002c14 <HRSAPP_Read_RTC_SSR_SS>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	3341      	adds	r3, #65	; 0x41
 8002bae:	607b      	str	r3, [r7, #4]

  HRSAPP_Context.MeasurementvalueChar.MeasurementValue = measurement;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002bb6:	805a      	strh	r2, [r3, #2]
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002bba:	7adb      	ldrb	r3, [r3, #11]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HRSAPP_Measurement+0x3e>
     (HRSAPP_Context.ResetEnergyExpended == 0))
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002bc6:	7b1b      	ldrb	r3, [r3, #12]
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <HRSAPP_Measurement+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended += 5;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002bce:	889b      	ldrh	r3, [r3, #4]
 8002bd0:	3305      	adds	r3, #5
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002bd6:	809a      	strh	r2, [r3, #4]
 8002bd8:	e006      	b.n	8002be8 <HRSAPP_Measurement+0x4c>
  else if(HRSAPP_Context.ResetEnergyExpended == 1)
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002bdc:	7b1b      	ldrb	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HRSAPP_Measurement+0x4c>
    HRSAPP_Context.ResetEnergyExpended = 0;
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HRSAPP_Measurement+0x60>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	731a      	strb	r2, [r3, #12]
#endif

  HRS_UpdateChar(HEART_RATE_MEASURMENT_UUID, (uint8_t *)&HRSAPP_Context.MeasurementvalueChar);
 8002be8:	4905      	ldr	r1, [pc, #20]	; (8002c00 <HRSAPP_Measurement+0x64>)
 8002bea:	f642 2037 	movw	r0, #10807	; 0x2a37
 8002bee:	f007 f9b1 	bl	8009f54 <HRS_UpdateChar>

/* USER CODE END HRSAPP_Measurement */
  return;
 8002bf2:	bf00      	nop
}
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200005bc 	.word	0x200005bc
 8002c00:	200005be 	.word	0x200005be

08002c04 <HrMeas>:

static void HrMeas( void )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	f008 fad2 	bl	800b1b4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 8002c10:	bf00      	nop
}
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HRSAPP_Read_RTC_SSR_SS>:

static uint32_t HRSAPP_Read_RTC_SSR_SS ( void )
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HRSAPP_Read_RTC_SSR_SS+0x14>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	b29b      	uxth	r3, r3
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40002800 	.word	0x40002800

08002c2c <HSS_Notification>:
static void HSSAPP_Measurement(void);
static uint32_t HSSAPP_Read_RTC_SSR_SS ( void );


void HSS_Notification(HSS_App_Notification_evt_t *pNotification)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HSS_Notification_1 */

/* USER CODE END HSS_Notification_1 */
  switch(pNotification->HSS_Evt_Opcode)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HSS_Notification+0x16>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d00d      	beq.n	8002c5c <HSS_Notification+0x30>

   default:
/* USER CODE BEGIN HSS_Notification_Default */

/* USER CODE END HSS_Notification_Default */
      break;
 8002c40:	e012      	b.n	8002c68 <HSS_Notification+0x3c>
      HW_TS_Stop(HSSAPP_Context.TimerMeasurement_Id);
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HSS_Notification+0x44>)
 8002c44:	789b      	ldrb	r3, [r3, #2]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fc46 	bl	80014d8 <HW_TS_Stop>
      HW_TS_Start(HSSAPP_Context.TimerMeasurement_Id, HSSAPP_MEASUREMENT_INTERVAL);
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HSS_Notification+0x44>)
 8002c4e:	789b      	ldrb	r3, [r3, #2]
 8002c50:	f245 010b 	movw	r1, #20491	; 0x500b
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe fcc3 	bl	80015e0 <HW_TS_Start>
      break;
 8002c5a:	e005      	b.n	8002c68 <HSS_Notification+0x3c>
      HW_TS_Stop(HSSAPP_Context.TimerMeasurement_Id);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HSS_Notification+0x44>)
 8002c5e:	789b      	ldrb	r3, [r3, #2]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fc39 	bl	80014d8 <HW_TS_Stop>
      break;
 8002c66:	bf00      	nop
  }
/* USER CODE BEGIN HSS_Notification_2 */

/* USER CODE END HSS_Notification_2 */
  return;
 8002c68:	bf00      	nop
}
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200005cc 	.word	0x200005cc

08002c74 <HSSAPP_Init>:

void HSSAPP_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HSSAPP_Measurement );
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HSSAPP_Init+0x20>)
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f008 fa77 	bl	800b170 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN PMSAPP_Init */
  
  /**
   * Create timer for Humidity Measurement
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HSSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HSMeas);
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HSSAPP_Init+0x24>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	4905      	ldr	r1, [pc, #20]	; (8002c9c <HSSAPP_Init+0x28>)
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe fbab 	bl	80013e4 <HW_TS_Create>

/* USER CODE END HSSAPP_Init */
  return;
 8002c8e:	bf00      	nop
}
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	08002ca1 	.word	0x08002ca1
 8002c98:	08002cd5 	.word	0x08002cd5
 8002c9c:	200005ce 	.word	0x200005ce

08002ca0 <HSSAPP_Measurement>:

static void HSSAPP_Measurement(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HSSAPP_Measurement */
  uint32_t measurement;

  measurement = ((HSSAPP_Read_RTC_SSR_SS()) & 0x07) + 65;
 8002ca6:	f000 f81d 	bl	8002ce4 <HSSAPP_Read_RTC_SSR_SS>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	3341      	adds	r3, #65	; 0x41
 8002cb2:	607b      	str	r3, [r7, #4]

  HSSAPP_Context.MeasurementvalueChar.MeasurementValue = measurement;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HSSAPP_Measurement+0x30>)
 8002cba:	801a      	strh	r2, [r3, #0]

  HSS_UpdateChar(HUMIDITY_UUID ,(uint8_t *)&HSSAPP_Context.MeasurementvalueChar);
 8002cbc:	4904      	ldr	r1, [pc, #16]	; (8002cd0 <HSSAPP_Measurement+0x30>)
 8002cbe:	f642 206f 	movw	r0, #10863	; 0x2a6f
 8002cc2:	f007 fa43 	bl	800a14c <HSS_UpdateChar>

/* USER CODE END HSSAPP_Measurement */
  return;
 8002cc6:	bf00      	nop
}
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200005cc 	.word	0x200005cc

08002cd4 <HSMeas>:

static void HSMeas( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f008 fa6a 	bl	800b1b4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 8002ce0:	bf00      	nop
}
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HSSAPP_Read_RTC_SSR_SS>:

static uint32_t HSSAPP_Read_RTC_SSR_SS ( void )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HSSAPP_Read_RTC_SSR_SS+0x14>)
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	b29b      	uxth	r3, r3
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40002800 	.word	0x40002800

08002cfc <LL_PWR_EnableBootC2>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <LL_PWR_EnableBootC2+0x1c>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <LL_PWR_EnableBootC2+0x1c>)
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0a:	60d3      	str	r3, [r2, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	58000400 	.word	0x58000400

08002d1c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002d26:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002d2a:	4905      	ldr	r1, [pc, #20]	; (8002d40 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	58000800 	.word	0x58000800

08002d44 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	4904      	ldr	r1, [pc, #16]	; (8002d64 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	620b      	str	r3, [r1, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	58000800 	.word	0x58000800

08002d68 <LL_AHB3_GRP1_EnableClock>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	605a      	str	r2, [r3, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d101      	bne.n	8002ed6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d101      	bne.n	8002f00 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002f14:	2102      	movs	r1, #2
 8002f16:	4819      	ldr	r0, [pc, #100]	; (8002f7c <HW_IPCC_Rx_Handler+0x6c>)
 8002f18:	f7ff ffe4 	bl	8002ee4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HW_IPCC_Rx_Handler+0x26>
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HW_IPCC_Rx_Handler+0x6c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002f30:	f000 f8da 	bl	80030e8 <HW_IPCC_SYS_EvtHandler>
 8002f34:	e01f      	b.n	8002f76 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8002f36:	2101      	movs	r1, #1
 8002f38:	4810      	ldr	r0, [pc, #64]	; (8002f7c <HW_IPCC_Rx_Handler+0x6c>)
 8002f3a:	f7ff ffd3 	bl	8002ee4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HW_IPCC_Rx_Handler+0x46>
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HW_IPCC_Rx_Handler+0x6c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8002f50:	f000 f88e 	bl	8003070 <HW_IPCC_BLE_EvtHandler>
 8002f54:	e00f      	b.n	8002f76 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8002f56:	2108      	movs	r1, #8
 8002f58:	4808      	ldr	r0, [pc, #32]	; (8002f7c <HW_IPCC_Rx_Handler+0x6c>)
 8002f5a:	f7ff ffc3 	bl	8002ee4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HW_IPCC_Rx_Handler+0x68>
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HW_IPCC_Rx_Handler+0x6c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8002f72:	f000 f905 	bl	8003180 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
}
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58000c00 	.word	0x58000c00

08002f80 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002f84:	2102      	movs	r1, #2
 8002f86:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <HW_IPCC_Tx_Handler+0x70>)
 8002f88:	f7ff ff97 	bl	8002eba <LL_C1_IPCC_IsActiveFlag_CHx>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HW_IPCC_Tx_Handler+0x26>
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HW_IPCC_Tx_Handler+0x70>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002fa0:	f000 f896 	bl	80030d0 <HW_IPCC_SYS_CmdEvtHandler>
 8002fa4:	e020      	b.n	8002fe8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002fa6:	2108      	movs	r1, #8
 8002fa8:	4811      	ldr	r0, [pc, #68]	; (8002ff0 <HW_IPCC_Tx_Handler+0x70>)
 8002faa:	f7ff ff86 	bl	8002eba <LL_C1_IPCC_IsActiveFlag_CHx>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HW_IPCC_Tx_Handler+0x48>
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HW_IPCC_Tx_Handler+0x70>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002fc2:	f000 f8bf 	bl	8003144 <HW_IPCC_MM_FreeBufHandler>
 8002fc6:	e00f      	b.n	8002fe8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002fc8:	2120      	movs	r1, #32
 8002fca:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <HW_IPCC_Tx_Handler+0x70>)
 8002fcc:	f7ff ff75 	bl	8002eba <LL_C1_IPCC_IsActiveFlag_CHx>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HW_IPCC_Tx_Handler+0x6a>
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HW_IPCC_Tx_Handler+0x70>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002fe4:	f000 f850 	bl	8003088 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
}
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	58000c00 	.word	0x58000c00

08002ff4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002ff8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ffc:	f7ff fecd 	bl	8002d9a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003004:	f7ff fe9e 	bl	8002d44 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003008:	f44f 7000 	mov.w	r0, #512	; 0x200
 800300c:	f7ff fe86 	bl	8002d1c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003010:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003012:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003014:	f7ff fe72 	bl	8002cfc <LL_PWR_EnableBootC2>

  return;
 8003018:	bf00      	nop
}
 800301a:	bd80      	pop	{r7, pc}

0800301c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003020:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003024:	f7ff fea0 	bl	8002d68 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003028:	4806      	ldr	r0, [pc, #24]	; (8003044 <HW_IPCC_Init+0x28>)
 800302a:	f7ff fee2 	bl	8002df2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800302e:	4805      	ldr	r0, [pc, #20]	; (8003044 <HW_IPCC_Init+0x28>)
 8003030:	f7ff fecf 	bl	8002dd2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003034:	202c      	movs	r0, #44	; 0x2c
 8003036:	f001 fa96 	bl	8004566 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800303a:	202d      	movs	r0, #45	; 0x2d
 800303c:	f001 fa93 	bl	8004566 <HAL_NVIC_EnableIRQ>

  return;
 8003040:	bf00      	nop
}
 8003042:	bd80      	pop	{r7, pc}
 8003044:	58000c00 	.word	0x58000c00

08003048 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800304c:	2101      	movs	r1, #1
 800304e:	4802      	ldr	r0, [pc, #8]	; (8003058 <HW_IPCC_BLE_Init+0x10>)
 8003050:	f7ff ff04 	bl	8002e5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003054:	bf00      	nop
}
 8003056:	bd80      	pop	{r7, pc}
 8003058:	58000c00 	.word	0x58000c00

0800305c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003060:	2101      	movs	r1, #1
 8003062:	4802      	ldr	r0, [pc, #8]	; (800306c <HW_IPCC_BLE_SendCmd+0x10>)
 8003064:	f7ff ff1a 	bl	8002e9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003068:	bf00      	nop
}
 800306a:	bd80      	pop	{r7, pc}
 800306c:	58000c00 	.word	0x58000c00

08003070 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003074:	f007 fd50 	bl	800ab18 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003078:	2101      	movs	r1, #1
 800307a:	4802      	ldr	r0, [pc, #8]	; (8003084 <HW_IPCC_BLE_EvtHandler+0x14>)
 800307c:	f7ff ff00 	bl	8002e80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003080:	bf00      	nop
}
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58000c00 	.word	0x58000c00

08003088 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800308c:	2120      	movs	r1, #32
 800308e:	4803      	ldr	r0, [pc, #12]	; (800309c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003090:	f7ff fed2 	bl	8002e38 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003094:	f007 fd70 	bl	800ab78 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003098:	bf00      	nop
}
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58000c00 	.word	0x58000c00

080030a0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80030a4:	2102      	movs	r1, #2
 80030a6:	4802      	ldr	r0, [pc, #8]	; (80030b0 <HW_IPCC_SYS_Init+0x10>)
 80030a8:	f7ff fed8 	bl	8002e5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80030ac:	bf00      	nop
}
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58000c00 	.word	0x58000c00

080030b4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80030b8:	2102      	movs	r1, #2
 80030ba:	4804      	ldr	r0, [pc, #16]	; (80030cc <HW_IPCC_SYS_SendCmd+0x18>)
 80030bc:	f7ff feee 	bl	8002e9c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80030c0:	2102      	movs	r1, #2
 80030c2:	4802      	ldr	r0, [pc, #8]	; (80030cc <HW_IPCC_SYS_SendCmd+0x18>)
 80030c4:	f7ff fea5 	bl	8002e12 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80030c8:	bf00      	nop
}
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	58000c00 	.word	0x58000c00

080030d0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80030d4:	2102      	movs	r1, #2
 80030d6:	4803      	ldr	r0, [pc, #12]	; (80030e4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80030d8:	f7ff feae 	bl	8002e38 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80030dc:	f007 fd9c 	bl	800ac18 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80030e0:	bf00      	nop
}
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58000c00 	.word	0x58000c00

080030e8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80030ec:	f007 fdaa 	bl	800ac44 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80030f0:	2102      	movs	r1, #2
 80030f2:	4802      	ldr	r0, [pc, #8]	; (80030fc <HW_IPCC_SYS_EvtHandler+0x14>)
 80030f4:	f7ff fec4 	bl	8002e80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80030f8:	bf00      	nop
}
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	58000c00 	.word	0x58000c00

08003100 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003108:	2108      	movs	r1, #8
 800310a:	480c      	ldr	r0, [pc, #48]	; (800313c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800310c:	f7ff fed5 	bl	8002eba <LL_C1_IPCC_IsActiveFlag_CHx>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800311c:	2108      	movs	r1, #8
 800311e:	4807      	ldr	r0, [pc, #28]	; (800313c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003120:	f7ff fe77 	bl	8002e12 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003124:	e006      	b.n	8003134 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800312a:	2108      	movs	r1, #8
 800312c:	4803      	ldr	r0, [pc, #12]	; (800313c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800312e:	f7ff feb5 	bl	8002e9c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003132:	bf00      	nop
}
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	58000c00 	.word	0x58000c00
 8003140:	200005d0 	.word	0x200005d0

08003144 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003148:	2108      	movs	r1, #8
 800314a:	4806      	ldr	r0, [pc, #24]	; (8003164 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800314c:	f7ff fe74 	bl	8002e38 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003156:	2108      	movs	r1, #8
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800315a:	f7ff fe9f 	bl	8002e9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800315e:	bf00      	nop
}
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	58000c00 	.word	0x58000c00
 8003168:	200005d0 	.word	0x200005d0

0800316c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003170:	2108      	movs	r1, #8
 8003172:	4802      	ldr	r0, [pc, #8]	; (800317c <HW_IPCC_TRACES_Init+0x10>)
 8003174:	f7ff fe72 	bl	8002e5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003178:	bf00      	nop
}
 800317a:	bd80      	pop	{r7, pc}
 800317c:	58000c00 	.word	0x58000c00

08003180 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003184:	f007 fe06 	bl	800ad94 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003188:	2108      	movs	r1, #8
 800318a:	4802      	ldr	r0, [pc, #8]	; (8003194 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800318c:	f7ff fe78 	bl	8002e80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003190:	bf00      	nop
}
 8003192:	bd80      	pop	{r7, pc}
 8003194:	58000c00 	.word	0x58000c00

08003198 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003198:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800319a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319c:	3304      	adds	r3, #4

0800319e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80031a2:	d3f9      	bcc.n	8003198 <CopyDataInit>
  bx lr
 80031a4:	4770      	bx	lr

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80031a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80031a8:	3004      	adds	r0, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80031aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>
  bx lr
 80031ae:	4770      	bx	lr

080031b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80031b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031b4:	f000 f8b0 	bl	8003318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80031b8:	480b      	ldr	r0, [pc, #44]	; (80031e8 <LoopForever+0x8>)
 80031ba:	490c      	ldr	r1, [pc, #48]	; (80031ec <LoopForever+0xc>)
 80031bc:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <LoopForever+0x10>)
 80031be:	2300      	movs	r3, #0
 80031c0:	f7ff ffed 	bl	800319e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80031c4:	480b      	ldr	r0, [pc, #44]	; (80031f4 <LoopForever+0x14>)
 80031c6:	490c      	ldr	r1, [pc, #48]	; (80031f8 <LoopForever+0x18>)
 80031c8:	2300      	movs	r3, #0
 80031ca:	f7ff ffee 	bl	80031aa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80031ce:	480b      	ldr	r0, [pc, #44]	; (80031fc <LoopForever+0x1c>)
 80031d0:	490b      	ldr	r1, [pc, #44]	; (8003200 <LoopForever+0x20>)
 80031d2:	2300      	movs	r3, #0
 80031d4:	f7ff ffe9 	bl	80031aa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031d8:	f008 f90c 	bl	800b3f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80031dc:	f7fe fb3c 	bl	8001858 <main>

080031e0 <LoopForever>:

LoopForever:
  b LoopForever
 80031e0:	e7fe      	b.n	80031e0 <LoopForever>
 80031e2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80031e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80031e8:	20000008 	.word	0x20000008
 80031ec:	20000038 	.word	0x20000038
 80031f0:	0800b738 	.word	0x0800b738
  INIT_BSS _sbss, _ebss
 80031f4:	20000094 	.word	0x20000094
 80031f8:	200006ec 	.word	0x200006ec
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80031fc:	200301e4 	.word	0x200301e4
 8003200:	20030a67 	.word	0x20030a67

08003204 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003204:	e7fe      	b.n	8003204 <ADC1_IRQHandler>

08003206 <LL_AHB2_GRP1_EnableClock>:
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4313      	orrs	r3, r2
 800321c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	460a      	mov	r2, r1
 8003242:	71fb      	strb	r3, [r7, #7]
 8003244:	4613      	mov	r3, r2
 8003246:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <BSP_PB_Init+0x2e>
 800325e:	2004      	movs	r0, #4
 8003260:	f7ff ffd1 	bl	8003206 <LL_AHB2_GRP1_EnableClock>
 8003264:	e00c      	b.n	8003280 <BSP_PB_Init+0x48>
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d103      	bne.n	8003274 <BSP_PB_Init+0x3c>
 800326c:	2008      	movs	r0, #8
 800326e:	f7ff ffca 	bl	8003206 <LL_AHB2_GRP1_EnableClock>
 8003272:	e005      	b.n	8003280 <BSP_PB_Init+0x48>
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d102      	bne.n	8003280 <BSP_PB_Init+0x48>
 800327a:	2008      	movs	r0, #8
 800327c:	f7ff ffc3 	bl	8003206 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003280:	79bb      	ldrb	r3, [r7, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d117      	bne.n	80032b6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <BSP_PB_Init+0xd4>)
 800328a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003298:	2302      	movs	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <BSP_PB_Init+0xd8>)
 80032a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a4:	f107 020c 	add.w	r2, r7, #12
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 fb2e 	bl	800490c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7fd faad 	bl	8000810 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d123      	bne.n	8003304 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <BSP_PB_Init+0xd4>)
 80032c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80032ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <BSP_PB_Init+0xd8>)
 80032d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d8:	f107 020c 	add.w	r2, r7, #12
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 fb14 	bl	800490c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <BSP_PB_Init+0xdc>)
 80032e8:	5cd3      	ldrb	r3, [r2, r3]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	210f      	movs	r1, #15
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 f91e 	bl	8004532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <BSP_PB_Init+0xdc>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f931 	bl	8004566 <HAL_NVIC_EnableIRQ>
  }
}
 8003304:	bf00      	nop
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	0800b694 	.word	0x0800b694
 8003310:	20000018 	.word	0x20000018
 8003314:	0800b69c 	.word	0x0800b69c

08003318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <SystemInit+0xa0>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <SystemInit+0xa0>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <SystemInit+0xa0>)
 800332a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800332e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003346:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800334a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <SystemInit+0xa4>)
 8003358:	4013      	ands	r3, r2
 800335a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003368:	f023 0305 	bic.w	r3, r3, #5
 800336c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <SystemInit+0xa8>)
 800338a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <SystemInit+0xa8>)
 8003392:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed00 	.word	0xe000ed00
 80033bc:	faf6fefb 	.word	0xfaf6fefb
 80033c0:	22041000 	.word	0x22041000

080033c4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6053      	str	r3, [r2, #4]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e0042000 	.word	0xe0042000

080033e4 <LL_DBGMCU_EnableDBGStopMode>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	6053      	str	r3, [r2, #4]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e0042000 	.word	0xe0042000

08003404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_Init+0x3c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <HAL_Init+0x3c>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800341a:	2003      	movs	r0, #3
 800341c:	f001 f87e 	bl	800451c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003420:	2000      	movs	r0, #0
 8003422:	f000 f80f 	bl	8003444 <HAL_InitTick>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	71fb      	strb	r3, [r7, #7]
 8003430:	e001      	b.n	8003436 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003432:	f7fe fde7 	bl	8002004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003436:	79fb      	ldrb	r3, [r7, #7]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	58004000 	.word	0x58004000

08003444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_InitTick+0x6c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d024      	beq.n	80034a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003458:	f002 fd3e 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_InitTick+0x6c>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	4619      	mov	r1, r3
 8003464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003468:	fbb3 f3f1 	udiv	r3, r3, r1
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f894 	bl	800459e <HAL_SYSTICK_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b0f      	cmp	r3, #15
 8003480:	d809      	bhi.n	8003496 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003482:	2200      	movs	r2, #0
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	f04f 30ff 	mov.w	r0, #4294967295
 800348a:	f001 f852 	bl	8004532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_InitTick+0x70>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	e007      	b.n	80034a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e004      	b.n	80034a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e001      	b.n	80034a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000002c 	.word	0x2000002c
 80034b4:	20000028 	.word	0x20000028

080034b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_IncTick+0x20>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_IncTick+0x24>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <HAL_IncTick+0x24>)
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	2000002c 	.word	0x2000002c
 80034dc:	200005d4 	.word	0x200005d4

080034e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return uwTick;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_GetTick+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	200005d4 	.word	0x200005d4

080034f8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_GetTickPrio+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000028 	.word	0x20000028

08003510 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_GetTickFreq+0x14>)
 8003516:	781b      	ldrb	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	2000002c 	.word	0x2000002c

08003528 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_SuspendTick+0x1c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_SuspendTick+0x1c>)
 8003532:	f023 0302 	bic.w	r3, r3, #2
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_ResumeTick+0x1c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_ResumeTick+0x1c>)
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000e010 	.word	0xe000e010

08003568 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800356c:	f7ff ff2a 	bl	80033c4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003578:	f7ff ff34 	bl	80033e4 <LL_DBGMCU_EnableDBGStopMode>
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3360      	adds	r3, #96	; 0x60
 80035fa:	461a      	mov	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <LL_ADC_SetOffset+0x44>)
 800360a:	4013      	ands	r3, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	4313      	orrs	r3, r2
 8003618:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	03fff000 	.word	0x03fff000

08003630 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	461a      	mov	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3360      	adds	r3, #96	; 0x60
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	431a      	orrs	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003692:	b480      	push	{r7}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3330      	adds	r3, #48	; 0x30
 80036a2:	461a      	mov	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	211f      	movs	r1, #31
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	401a      	ands	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	f003 011f 	and.w	r1, r3, #31
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3314      	adds	r3, #20
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0e5b      	lsrs	r3, r3, #25
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	4413      	add	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	0d1b      	lsrs	r3, r3, #20
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2107      	movs	r1, #7
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	401a      	ands	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0d1b      	lsrs	r3, r3, #20
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	43db      	mvns	r3, r3
 800375a:	401a      	ands	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0318 	and.w	r3, r3, #24
 8003762:	4908      	ldr	r1, [pc, #32]	; (8003784 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003764:	40d9      	lsrs	r1, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	400b      	ands	r3, r1
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	0007ffff 	.word	0x0007ffff

08003788 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6093      	str	r3, [r2, #8]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c0:	d101      	bne.n	80037c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003810:	d101      	bne.n	8003816 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <LL_ADC_IsEnabled+0x18>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <LL_ADC_IsEnabled+0x1a>
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d101      	bne.n	8003862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d101      	bne.n	8003888 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e12e      	b.n	8003b14 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe fbad 	bl	8002024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff65 	bl	80037ac <LL_ADC_IsDeepPowerDownEnabled>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff4b 	bl	8003788 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff80 	bl	80037fc <LL_ADC_IsInternalRegulatorEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ff64 	bl	80037d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800390c:	4b83      	ldr	r3, [pc, #524]	; (8003b1c <HAL_ADC_Init+0x284>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	4a83      	ldr	r2, [pc, #524]	; (8003b20 <HAL_ADC_Init+0x288>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	3301      	adds	r3, #1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003920:	e002      	b.n	8003928 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3b01      	subs	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f9      	bne.n	8003922 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff62 	bl	80037fc <LL_ADC_IsInternalRegulatorEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff73 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003964:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 80c7 	bne.w	8003b02 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 80c3 	bne.w	8003b02 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003984:	f043 0202 	orr.w	r2, r3, #2
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff47 	bl	8003824 <LL_ADC_IsEnabled>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800399c:	4861      	ldr	r0, [pc, #388]	; (8003b24 <HAL_ADC_Init+0x28c>)
 800399e:	f7ff ff41 	bl	8003824 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4619      	mov	r1, r3
 80039ae:	485e      	ldr	r0, [pc, #376]	; (8003b28 <HAL_ADC_Init+0x290>)
 80039b0:	f7ff fde6 	bl	8003580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e5b      	ldrb	r3, [r3, #25]
 80039b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80039d4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	3b01      	subs	r3, #1
 80039ec:	045b      	lsls	r3, r3, #17
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <HAL_ADC_Init+0x294>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff0e 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003a2e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff1b 	bl	8003870 <LL_ADC_INJ_IsConversionOngoing>
 8003a3a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d13d      	bne.n	8003abe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d13a      	bne.n	8003abe <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a4c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a54:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d118      	bne.n	8003aae <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a86:	f023 0304 	bic.w	r3, r3, #4
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	611a      	str	r2, [r3, #16]
 8003aac:	e007      	b.n	8003abe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f023 010f 	bic.w	r1, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ade:	e007      	b.n	8003af0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 020f 	bic.w	r2, r2, #15
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
 8003b00:	e007      	b.n	8003b12 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f043 0210 	orr.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000024 	.word	0x20000024
 8003b20:	053e2d63 	.word	0x053e2d63
 8003b24:	50040000 	.word	0x50040000
 8003b28:	50040300 	.word	0x50040300
 8003b2c:	fff0c007 	.word	0xfff0c007

08003b30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0b6      	sub	sp, #216	; 0xd8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x22>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e39f      	b.n	8004292 <HAL_ADC_ConfigChannel+0x762>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fe73 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 8384 	bne.w	8004274 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f7ff fd8a 	bl	8003692 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fe61 	bl	800384a <LL_ADC_REG_IsConversionOngoing>
 8003b88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe6d 	bl	8003870 <LL_ADC_INJ_IsConversionOngoing>
 8003b96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 81a6 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 81a1 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f7ff fd95 	bl	80036ea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d00a      	beq.n	8003bf8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bf2:	f7ff fcf9 	bl	80035e8 <LL_ADC_SetOffset>
 8003bf6:	e17b      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fd16 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0xf4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fd0b 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	f003 021f 	and.w	r2, r3, #31
 8003c22:	e01e      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x132>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fd00 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003c52:	2320      	movs	r3, #32
 8003c54:	e004      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d105      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x14a>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0e9b      	lsrs	r3, r3, #26
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	e018      	b.n	8003cac <HAL_ADC_ConfigChannel+0x17c>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	e004      	b.n	8003cac <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d106      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fccf 	bl	800365c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fcb3 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x1ba>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fca8 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	e01e      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x1f8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fc9d 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e004      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x210>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	e018      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x242>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003d64:	2320      	movs	r3, #32
 8003d66:	e004      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d106      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fc6c 	bl	800365c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2102      	movs	r1, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fc50 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x280>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fc45 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003da6:	4603      	mov	r3, r0
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	f003 021f 	and.w	r2, r3, #31
 8003dae:	e01e      	b.n	8003dee <HAL_ADC_ConfigChannel+0x2be>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fc3a 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e004      	b.n	8003dec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x2d6>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0e9b      	lsrs	r3, r3, #26
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	e016      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x304>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003e26:	2320      	movs	r3, #32
 8003e28:	e004      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d106      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fc0b 	bl	800365c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fbef 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x342>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2103      	movs	r1, #3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fbe4 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	e017      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x372>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2103      	movs	r1, #3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fbd9 	bl	8003630 <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e003      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x38a>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	0e9b      	lsrs	r3, r3, #26
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	e011      	b.n	8003ede <HAL_ADC_ConfigChannel+0x3ae>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	e003      	b.n	8003ede <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d106      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2103      	movs	r1, #3
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fbb6 	bl	800365c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fc95 	bl	8003824 <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 81c2 	bne.w	8004286 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7ff fc16 	bl	8003740 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a8e      	ldr	r2, [pc, #568]	; (8004154 <HAL_ADC_ConfigChannel+0x624>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	f040 8130 	bne.w	8004180 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x418>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	3301      	adds	r3, #1
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2b09      	cmp	r3, #9
 8003f3e:	bf94      	ite	ls
 8003f40:	2301      	movls	r3, #1
 8003f42:	2300      	movhi	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e019      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x44c>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2b09      	cmp	r3, #9
 8003f74:	bf94      	ite	ls
 8003f76:	2301      	movls	r3, #1
 8003f78:	2300      	movhi	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d079      	beq.n	8004074 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x46c>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	3301      	adds	r3, #1
 8003f94:	069b      	lsls	r3, r3, #26
 8003f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9a:	e015      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x498>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	e003      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	069b      	lsls	r3, r3, #26
 8003fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d109      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x4b8>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0e9b      	lsrs	r3, r3, #26
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	e017      	b.n	8004018 <HAL_ADC_ConfigChannel+0x4e8>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004000:	2320      	movs	r3, #32
 8004002:	e003      	b.n	800400c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8004004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3301      	adds	r3, #1
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	2101      	movs	r1, #1
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	ea42 0103 	orr.w	r1, r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <HAL_ADC_ConfigChannel+0x50e>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	3301      	adds	r3, #1
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	051b      	lsls	r3, r3, #20
 800403c:	e018      	b.n	8004070 <HAL_ADC_ConfigChannel+0x540>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e003      	b.n	8004062 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3301      	adds	r3, #1
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004070:	430b      	orrs	r3, r1
 8004072:	e080      	b.n	8004176 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x560>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	3301      	adds	r3, #1
 8004088:	069b      	lsls	r3, r3, #26
 800408a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800408e:	e015      	b.n	80040bc <HAL_ADC_ConfigChannel+0x58c>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	069b      	lsls	r3, r3, #26
 80040b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x5ac>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0e9b      	lsrs	r3, r3, #26
 80040ce:	3301      	adds	r3, #1
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2101      	movs	r1, #1
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	e017      	b.n	800410c <HAL_ADC_ConfigChannel+0x5dc>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	61fb      	str	r3, [r7, #28]
  return result;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2101      	movs	r1, #1
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	ea42 0103 	orr.w	r1, r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x608>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	3b1e      	subs	r3, #30
 8004130:	051b      	lsls	r3, r3, #20
 8004132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004136:	e01d      	b.n	8004174 <HAL_ADC_ConfigChannel+0x644>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	613b      	str	r3, [r7, #16]
  return result;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004150:	2320      	movs	r3, #32
 8004152:	e005      	b.n	8004160 <HAL_ADC_ConfigChannel+0x630>
 8004154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3301      	adds	r3, #1
 8004162:	f003 021f 	and.w	r2, r3, #31
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	3b1e      	subs	r3, #30
 800416e:	051b      	lsls	r3, r3, #20
 8004170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004174:	430b      	orrs	r3, r1
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	6892      	ldr	r2, [r2, #8]
 800417a:	4619      	mov	r1, r3
 800417c:	f7ff fab5 	bl	80036ea <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b45      	ldr	r3, [pc, #276]	; (800429c <HAL_ADC_ConfigChannel+0x76c>)
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d07c      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800418c:	4844      	ldr	r0, [pc, #272]	; (80042a0 <HAL_ADC_ConfigChannel+0x770>)
 800418e:	f7ff fa1d 	bl	80035cc <LL_ADC_GetCommonPathInternalCh>
 8004192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004196:	4843      	ldr	r0, [pc, #268]	; (80042a4 <HAL_ADC_ConfigChannel+0x774>)
 8004198:	f7ff fb44 	bl	8003824 <LL_ADC_IsEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d15e      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a40      	ldr	r2, [pc, #256]	; (80042a8 <HAL_ADC_ConfigChannel+0x778>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d127      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x6cc>
 80041ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d121      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <HAL_ADC_ConfigChannel+0x774>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d161      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041ca:	4619      	mov	r1, r3
 80041cc:	4834      	ldr	r0, [pc, #208]	; (80042a0 <HAL_ADC_ConfigChannel+0x770>)
 80041ce:	f7ff f9ea 	bl	80035a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_ADC_ConfigChannel+0x77c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	4a35      	ldr	r2, [pc, #212]	; (80042b0 <HAL_ADC_ConfigChannel+0x780>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	099b      	lsrs	r3, r3, #6
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80041ec:	e002      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f9      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041fa:	e044      	b.n	8004286 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <HAL_ADC_ConfigChannel+0x784>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d113      	bne.n	800422e <HAL_ADC_ConfigChannel+0x6fe>
 8004206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <HAL_ADC_ConfigChannel+0x774>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d134      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800421c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004224:	4619      	mov	r1, r3
 8004226:	481e      	ldr	r0, [pc, #120]	; (80042a0 <HAL_ADC_ConfigChannel+0x770>)
 8004228:	f7ff f9bd 	bl	80035a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800422c:	e02b      	b.n	8004286 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_ADC_ConfigChannel+0x788>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d126      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x756>
 8004238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d120      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <HAL_ADC_ConfigChannel+0x774>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d11b      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800424e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004256:	4619      	mov	r1, r3
 8004258:	4811      	ldr	r0, [pc, #68]	; (80042a0 <HAL_ADC_ConfigChannel+0x770>)
 800425a:	f7ff f9a4 	bl	80035a6 <LL_ADC_SetCommonPathInternalCh>
 800425e:	e012      	b.n	8004286 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004272:	e008      	b.n	8004286 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800428e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004292:	4618      	mov	r0, r3
 8004294:	37d8      	adds	r7, #216	; 0xd8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	80080000 	.word	0x80080000
 80042a0:	50040300 	.word	0x50040300
 80042a4:	50040000 	.word	0x50040000
 80042a8:	c7520000 	.word	0xc7520000
 80042ac:	20000024 	.word	0x20000024
 80042b0:	053e2d63 	.word	0x053e2d63
 80042b4:	cb840000 	.word	0xcb840000
 80042b8:	80000001 	.word	0x80000001

080042bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042d8:	4013      	ands	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ee:	4a04      	ldr	r2, [pc, #16]	; (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	60d3      	str	r3, [r2, #12]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <__NVIC_GetPriorityGrouping+0x18>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 0307 	and.w	r3, r3, #7
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db0b      	blt.n	800434a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4907      	ldr	r1, [pc, #28]	; (8004358 <__NVIC_EnableIRQ+0x38>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2001      	movs	r0, #1
 8004342:	fa00 f202 	lsl.w	r2, r0, r2
 8004346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000e100 	.word	0xe000e100

0800435c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	2b00      	cmp	r3, #0
 800436c:	db12      	blt.n	8004394 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	490a      	ldr	r1, [pc, #40]	; (80043a0 <__NVIC_DisableIRQ+0x44>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2001      	movs	r0, #1
 800437e:	fa00 f202 	lsl.w	r2, r0, r2
 8004382:	3320      	adds	r3, #32
 8004384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004388:	f3bf 8f4f 	dsb	sy
}
 800438c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800438e:	f3bf 8f6f 	isb	sy
}
 8004392:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000e100 	.word	0xe000e100

080043a4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	db0c      	blt.n	80043d0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	4907      	ldr	r1, [pc, #28]	; (80043dc <__NVIC_SetPendingIRQ+0x38>)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2001      	movs	r0, #1
 80043c6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ca:	3340      	adds	r3, #64	; 0x40
 80043cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100

080043e0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	db0c      	blt.n	800440c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	f003 021f 	and.w	r2, r3, #31
 80043f8:	4907      	ldr	r1, [pc, #28]	; (8004418 <__NVIC_ClearPendingIRQ+0x38>)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2001      	movs	r0, #1
 8004402:	fa00 f202 	lsl.w	r2, r0, r2
 8004406:	3360      	adds	r3, #96	; 0x60
 8004408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000e100 	.word	0xe000e100

0800441c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	2b00      	cmp	r3, #0
 800442e:	db0a      	blt.n	8004446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	490c      	ldr	r1, [pc, #48]	; (8004468 <__NVIC_SetPriority+0x4c>)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	440b      	add	r3, r1
 8004440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004444:	e00a      	b.n	800445c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <__NVIC_SetPriority+0x50>)
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	3b04      	subs	r3, #4
 8004454:	0112      	lsls	r2, r2, #4
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	440b      	add	r3, r1
 800445a:	761a      	strb	r2, [r3, #24]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000e100 	.word	0xe000e100
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f1c3 0307 	rsb	r3, r3, #7
 800448a:	2b04      	cmp	r3, #4
 800448c:	bf28      	it	cs
 800448e:	2304      	movcs	r3, #4
 8004490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3304      	adds	r3, #4
 8004496:	2b06      	cmp	r3, #6
 8004498:	d902      	bls.n	80044a0 <NVIC_EncodePriority+0x30>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3b03      	subs	r3, #3
 800449e:	e000      	b.n	80044a2 <NVIC_EncodePriority+0x32>
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43da      	mvns	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	401a      	ands	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b8:	f04f 31ff 	mov.w	r1, #4294967295
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	fa01 f303 	lsl.w	r3, r1, r3
 80044c2:	43d9      	mvns	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c8:	4313      	orrs	r3, r2
         );
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e8:	d301      	bcc.n	80044ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00f      	b.n	800450e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ee:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <SysTick_Config+0x40>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044f6:	210f      	movs	r1, #15
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	f7ff ff8e 	bl	800441c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <SysTick_Config+0x40>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <SysTick_Config+0x40>)
 8004508:	2207      	movs	r2, #7
 800450a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	e000e010 	.word	0xe000e010

0800451c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fec9 	bl	80042bc <__NVIC_SetPriorityGrouping>
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004540:	f7ff fee0 	bl	8004304 <__NVIC_GetPriorityGrouping>
 8004544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff ff90 	bl	8004470 <NVIC_EncodePriority>
 8004550:	4602      	mov	r2, r0
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff5f 	bl	800441c <__NVIC_SetPriority>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fed3 	bl	8004320 <__NVIC_EnableIRQ>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fee3 	bl	800435c <__NVIC_DisableIRQ>
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ff96 	bl	80044d8 <SysTick_Config>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff feed 	bl	80043a4 <__NVIC_SetPendingIRQ>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	4603      	mov	r3, r0
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80045dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fefd 	bl	80043e0 <__NVIC_ClearPendingIRQ>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e04f      	b.n	80046a0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d008      	beq.n	800461e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e040      	b.n	80046a0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 020e 	bic.w	r2, r2, #14
 800462c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800463c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f003 021c 	and.w	r2, r3, #28
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f202 	lsl.w	r2, r1, r2
 8004660:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800466a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00c      	beq.n	800468e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004682:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800468c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d005      	beq.n	80046d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e047      	b.n	8004760 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 020e 	bic.w	r2, r2, #14
 80046de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	f003 021c 	and.w	r2, r3, #28
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f202 	lsl.w	r2, r1, r2
 8004712:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800471c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004734:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800473e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
    }
  }
  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 031c 	and.w	r3, r3, #28
 800478a:	2204      	movs	r2, #4
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d026      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x7a>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d021      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0204 	bic.w	r2, r2, #4
 80047bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 021c 	and.w	r2, r3, #28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2104      	movs	r1, #4
 80047cc:	fa01 f202 	lsl.w	r2, r1, r2
 80047d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d071      	beq.n	80048be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047e2:	e06c      	b.n	80048be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	f003 031c 	and.w	r3, r3, #28
 80047ec:	2202      	movs	r2, #2
 80047ee:	409a      	lsls	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02e      	beq.n	8004856 <HAL_DMA_IRQHandler+0xec>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d029      	beq.n	8004856 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020a 	bic.w	r2, r2, #10
 800481e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	f003 021c 	and.w	r2, r3, #28
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2102      	movs	r1, #2
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d038      	beq.n	80048be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004854:	e033      	b.n	80048be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f003 031c 	and.w	r3, r3, #28
 800485e:	2208      	movs	r2, #8
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02a      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x156>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d025      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 020e 	bic.w	r2, r2, #14
 8004882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f003 021c 	and.w	r2, r3, #28
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
}
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2201      	movs	r2, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	015b      	lsls	r3, r3, #5
 80048f0:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80048f4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80048f8:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800491a:	e14c      	b.n	8004bb6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 813e 	beq.w	8004bb0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d005      	beq.n	800494c <HAL_GPIO_Init+0x40>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d130      	bne.n	80049ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004982:	2201      	movs	r2, #1
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	091b      	lsrs	r3, r3, #4
 8004998:	f003 0201 	and.w	r2, r3, #1
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d017      	beq.n	80049ea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d123      	bne.n	8004a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	08da      	lsrs	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3208      	adds	r2, #8
 80049fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	08da      	lsrs	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3208      	adds	r2, #8
 8004a38:	6939      	ldr	r1, [r7, #16]
 8004a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	2203      	movs	r2, #3
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 0203 	and.w	r2, r3, #3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8098 	beq.w	8004bb0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a80:	4a54      	ldr	r2, [pc, #336]	; (8004bd4 <HAL_GPIO_Init+0x2c8>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	3302      	adds	r3, #2
 8004a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	220f      	movs	r2, #15
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004aaa:	d019      	beq.n	8004ae0 <HAL_GPIO_Init+0x1d4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a4a      	ldr	r2, [pc, #296]	; (8004bd8 <HAL_GPIO_Init+0x2cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_GPIO_Init+0x1d0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a49      	ldr	r2, [pc, #292]	; (8004bdc <HAL_GPIO_Init+0x2d0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00d      	beq.n	8004ad8 <HAL_GPIO_Init+0x1cc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a48      	ldr	r2, [pc, #288]	; (8004be0 <HAL_GPIO_Init+0x2d4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <HAL_GPIO_Init+0x1c8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a47      	ldr	r2, [pc, #284]	; (8004be4 <HAL_GPIO_Init+0x2d8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d101      	bne.n	8004ad0 <HAL_GPIO_Init+0x1c4>
 8004acc:	2304      	movs	r3, #4
 8004ace:	e008      	b.n	8004ae2 <HAL_GPIO_Init+0x1d6>
 8004ad0:	2307      	movs	r3, #7
 8004ad2:	e006      	b.n	8004ae2 <HAL_GPIO_Init+0x1d6>
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e004      	b.n	8004ae2 <HAL_GPIO_Init+0x1d6>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e002      	b.n	8004ae2 <HAL_GPIO_Init+0x1d6>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_GPIO_Init+0x1d6>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	f002 0203 	and.w	r2, r2, #3
 8004ae8:	0092      	lsls	r2, r2, #2
 8004aea:	4093      	lsls	r3, r2
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004af2:	4938      	ldr	r1, [pc, #224]	; (8004bd4 <HAL_GPIO_Init+0x2c8>)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b00:	4b39      	ldr	r3, [pc, #228]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b24:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b2a:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b4e:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b54:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004b82:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <HAL_GPIO_Init+0x2dc>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f47f aeab 	bne.w	800491c <HAL_GPIO_Init+0x10>
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	48000400 	.word	0x48000400
 8004bdc:	48000800 	.word	0x48000800
 8004be0:	48000c00 	.word	0x48000c00
 8004be4:	48001000 	.word	0x48001000
 8004be8:	58000800 	.word	0x58000800

08004bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c08:	e002      	b.n	8004c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fe4a 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	58000800 	.word	0x58000800

08004c4c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_HSEM_IRQHandler+0x30>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_HSEM_IRQHandler+0x30>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	4906      	ldr	r1, [pc, #24]	; (8004c7c <HAL_HSEM_IRQHandler+0x30>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_HSEM_IRQHandler+0x30>)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f807 	bl	8004c80 <HAL_HSEM_FreeCallback>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	58001500 	.word	0x58001500

08004c80 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01e      	beq.n	8004ce4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004ca6:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <HAL_IPCC_Init+0x60>)
 8004ca8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd fa06 	bl	80020c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004cbc:	68b8      	ldr	r0, [r7, #8]
 8004cbe:	f000 f85b 	bl	8004d78 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f82c 	bl	8004d2c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ce2:	e001      	b.n	8004ce8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	58000c00 	.word	0x58000c00

08004cf8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e00f      	b.n	8004d5a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <IPCC_SetDefaultCallbacks+0x44>)
 8004d44:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3306      	adds	r3, #6
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <IPCC_SetDefaultCallbacks+0x48>)
 8004d52:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d9ec      	bls.n	8004d3a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	08004cf9 	.word	0x08004cf9
 8004d74:	08004d13 	.word	0x08004d13

08004d78 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223f      	movs	r2, #63	; 0x3f
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	58000400 	.word	0x58000400

08004dc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	58000400 	.word	0x58000400

08004ddc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d101      	bne.n	8004df4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_HSE_Enable>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_RCC_HSE_Disable>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e30:	6013      	str	r3, [r2, #0]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_RCC_HSE_IsReady>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e4e:	d101      	bne.n	8004e54 <LL_RCC_HSE_IsReady+0x18>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <LL_RCC_HSE_IsReady+0x1a>
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_RCC_HSI_Enable>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_RCC_HSI_Disable>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e90:	6013      	str	r3, [r2, #0]
}
 8004e92:	bf00      	nop
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_HSI_IsReady>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eae:	d101      	bne.n	8004eb4 <LL_RCC_HSI_IsReady+0x18>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <LL_RCC_HSI_IsReady+0x1a>
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <LL_RCC_HSI48_Enable>:
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004f02:	bf00      	nop
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <LL_RCC_HSI48_Disable>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_RCC_HSI48_IsReady>:
{
 8004f2e:	b480      	push	{r7}
 8004f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d101      	bne.n	8004f46 <LL_RCC_HSI48_IsReady+0x18>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <LL_RCC_HSI48_IsReady+0x1a>
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_RCC_LSE_Enable>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f6a:	bf00      	nop
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_RCC_LSE_Disable>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <LL_RCC_LSE_EnableBypass>:
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa6:	f043 0304 	orr.w	r3, r3, #4
 8004faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fae:	bf00      	nop
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_LSE_DisableBypass>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <LL_RCC_LSE_IsReady>:
{
 8004fda:	b480      	push	{r7}
 8004fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d101      	bne.n	8004ff2 <LL_RCC_LSE_IsReady+0x18>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <LL_RCC_LSE_IsReady+0x1a>
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_LSI1_Enable>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005016:	bf00      	nop
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <LL_RCC_LSI1_Disable>:
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_RCC_LSI1_IsReady>:
{
 8005042:	b480      	push	{r7}
 8005044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d101      	bne.n	800505a <LL_RCC_LSI1_IsReady+0x18>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <LL_RCC_LSI1_IsReady+0x1a>
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_RCC_LSI2_Enable>:
{
 8005066:	b480      	push	{r7}
 8005068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_RCC_LSI2_Disable>:
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <LL_RCC_LSI2_IsReady>:
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80050ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d101      	bne.n	80050c2 <LL_RCC_LSI2_IsReady+0x18>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <LL_RCC_LSI2_IsReady+0x1a>
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <LL_RCC_LSI2_SetTrimming>:
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_MSI_Enable>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <LL_RCC_MSI_Disable>:
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	6013      	str	r3, [r2, #0]
}
 800512e:	bf00      	nop
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <LL_RCC_MSI_IsReady>:
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d101      	bne.n	800514e <LL_RCC_MSI_IsReady+0x16>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <LL_RCC_MSI_IsReady+0x18>
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_MSI_SetRange>:
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_RCC_MSI_GetRange>:
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005192:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2bb0      	cmp	r3, #176	; 0xb0
 8005198:	d901      	bls.n	800519e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800519a:	23b0      	movs	r3, #176	; 0xb0
 800519c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800519e:	687b      	ldr	r3, [r7, #4]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c6:	4313      	orrs	r3, r2
 80051c8:	604b      	str	r3, [r1, #4]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_RCC_SetSysClkSource>:
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f023 0203 	bic.w	r2, r3, #3
 80051e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_GetSysClkSource>:
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <LL_RCC_SetAHBPrescaler>:
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_C2_RCC_SetAHBPrescaler>:
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800524e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_SetAHB4Prescaler>:
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800527a:	f023 020f 	bic.w	r2, r3, #15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <LL_RCC_SetAPB1Prescaler>:
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_RCC_SetAPB2Prescaler>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4313      	orrs	r3, r2
 80052da:	608b      	str	r3, [r1, #8]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_RCC_GetAHBPrescaler>:
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_GetAHB4Prescaler>:
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005308:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800532a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800534c:	6013      	str	r3, [r2, #0]
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800535c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536a:	d101      	bne.n	8005370 <LL_RCC_PLL_IsReady+0x18>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <LL_RCC_PLL_IsReady+0x1a>
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800539a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80053ae:	b480      	push	{r7}
 80053b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80053b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80053bc:	4618      	mov	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0303 	and.w	r3, r3, #3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d101      	bne.n	80053f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005402:	b480      	push	{r7}
 8005404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005416:	d101      	bne.n	800541c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543c:	d101      	bne.n	8005442 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800544e:	b480      	push	{r7}
 8005450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005460:	d101      	bne.n	8005466 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005480:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005484:	d101      	bne.n	800548a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b08d      	sub	sp, #52	; 0x34
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e363      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 808d 	beq.w	80055d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b8:	f7ff fea1 	bl	80051fe <LL_RCC_GetSysClkSource>
 80054bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054be:	f7ff ff82 	bl	80053c6 <LL_RCC_PLL_GetMainSource>
 80054c2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x3e>
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d147      	bne.n	8005560 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d144      	bne.n	8005560 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e347      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80054e6:	f7ff fe4c 	bl	8005182 <LL_RCC_MSI_GetRange>
 80054ea:	4603      	mov	r3, r0
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d914      	bls.n	800551a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fd03 	bl	8005f00 <RCC_SetFlashLatencyFromMSIRange>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e336      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fe26 	bl	800515a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fe4a 	bl	80051ac <LL_RCC_MSI_SetCalibTrimming>
 8005518:	e013      	b.n	8005542 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fe1b 	bl	800515a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fe3f 	bl	80051ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fce4 	bl	8005f00 <RCC_SetFlashLatencyFromMSIRange>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e317      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005542:	f000 fcc9 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8005546:	4603      	mov	r3, r0
 8005548:	4aa4      	ldr	r2, [pc, #656]	; (80057dc <HAL_RCC_OscConfig+0x344>)
 800554a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800554c:	4ba4      	ldr	r3, [pc, #656]	; (80057e0 <HAL_RCC_OscConfig+0x348>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd ff77 	bl	8003444 <HAL_InitTick>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d039      	beq.n	80055d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e308      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01e      	beq.n	80055a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005568:	f7ff fdc8 	bl	80050fc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800556c:	f7fd ffb8 	bl	80034e0 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005574:	f7fd ffb4 	bl	80034e0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e2f5      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005586:	f7ff fdd7 	bl	8005138 <LL_RCC_MSI_IsReady>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f1      	beq.n	8005574 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fde0 	bl	800515a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fe04 	bl	80051ac <LL_RCC_MSI_SetCalibTrimming>
 80055a4:	e015      	b.n	80055d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055a6:	f7ff fdb8 	bl	800511a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055aa:	f7fd ff99 	bl	80034e0 <HAL_GetTick>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055b2:	f7fd ff95 	bl	80034e0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e2d6      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80055c4:	f7ff fdb8 	bl	8005138 <LL_RCC_MSI_IsReady>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f1      	bne.n	80055b2 <HAL_RCC_OscConfig+0x11a>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d047      	beq.n	800566e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055de:	f7ff fe0e 	bl	80051fe <LL_RCC_GetSysClkSource>
 80055e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055e4:	f7ff feef 	bl	80053c6 <LL_RCC_PLL_GetMainSource>
 80055e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_OscConfig+0x164>
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b0c      	cmp	r3, #12
 80055f4:	d108      	bne.n	8005608 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d105      	bne.n	8005608 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d134      	bne.n	800566e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e2b4      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d102      	bne.n	8005618 <HAL_RCC_OscConfig+0x180>
 8005612:	f7ff fbf5 	bl	8004e00 <LL_RCC_HSE_Enable>
 8005616:	e001      	b.n	800561c <HAL_RCC_OscConfig+0x184>
 8005618:	f7ff fc01 	bl	8004e1e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d012      	beq.n	800564a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fd ff5c 	bl	80034e0 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562c:	f7fd ff58 	bl	80034e0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	; 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e299      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800563e:	f7ff fbfd 	bl	8004e3c <LL_RCC_HSE_IsReady>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f1      	beq.n	800562c <HAL_RCC_OscConfig+0x194>
 8005648:	e011      	b.n	800566e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fd ff49 	bl	80034e0 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005652:	f7fd ff45 	bl	80034e0 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b64      	cmp	r3, #100	; 0x64
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e286      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005664:	f7ff fbea 	bl	8004e3c <LL_RCC_HSE_IsReady>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f1      	bne.n	8005652 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04c      	beq.n	8005714 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800567a:	f7ff fdc0 	bl	80051fe <LL_RCC_GetSysClkSource>
 800567e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005680:	f7ff fea1 	bl	80053c6 <LL_RCC_PLL_GetMainSource>
 8005684:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d005      	beq.n	8005698 <HAL_RCC_OscConfig+0x200>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d10e      	bne.n	80056b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d10b      	bne.n	80056b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e266      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fc09 	bl	8004ec0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80056ae:	e031      	b.n	8005714 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d019      	beq.n	80056ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b8:	f7ff fbd2 	bl	8004e60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd ff10 	bl	80034e0 <HAL_GetTick>
 80056c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c4:	f7fd ff0c 	bl	80034e0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e24d      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056d6:	f7ff fbe1 	bl	8004e9c <LL_RCC_HSI_IsReady>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f1      	beq.n	80056c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fbeb 	bl	8004ec0 <LL_RCC_HSI_SetCalibTrimming>
 80056ea:	e013      	b.n	8005714 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ec:	f7ff fbc7 	bl	8004e7e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fd fef6 	bl	80034e0 <HAL_GetTick>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fd fef2 	bl	80034e0 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e233      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800570a:	f7ff fbc7 	bl	8004e9c <LL_RCC_HSI_IsReady>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f1      	bne.n	80056f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a3 	beq.w	8005874 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d076      	beq.n	8005824 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d046      	beq.n	80057d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005742:	f7ff fc7e 	bl	8005042 <LL_RCC_LSI1_IsReady>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d113      	bne.n	8005774 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800574c:	f7ff fc57 	bl	8004ffe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005750:	f7fd fec6 	bl	80034e0 <HAL_GetTick>
 8005754:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005758:	f7fd fec2 	bl	80034e0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e203      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800576a:	f7ff fc6a 	bl	8005042 <LL_RCC_LSI1_IsReady>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f1      	beq.n	8005758 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005774:	f7ff fc77 	bl	8005066 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fd feb2 	bl	80034e0 <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005780:	f7fd feae 	bl	80034e0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b03      	cmp	r3, #3
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e1ef      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005792:	f7ff fc8a 	bl	80050aa <LL_RCC_LSI2_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f1      	beq.n	8005780 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fc94 	bl	80050ce <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80057a6:	f7ff fc3b 	bl	8005020 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fd fe99 	bl	80034e0 <HAL_GetTick>
 80057ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057b2:	f7fd fe95 	bl	80034e0 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e1d6      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80057c4:	f7ff fc3d 	bl	8005042 <LL_RCC_LSI1_IsReady>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f1      	bne.n	80057b2 <HAL_RCC_OscConfig+0x31a>
 80057ce:	e051      	b.n	8005874 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80057d0:	f7ff fc15 	bl	8004ffe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fd fe84 	bl	80034e0 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057da:	e00c      	b.n	80057f6 <HAL_RCC_OscConfig+0x35e>
 80057dc:	20000024 	.word	0x20000024
 80057e0:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057e4:	f7fd fe7c 	bl	80034e0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e1bd      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057f6:	f7ff fc24 	bl	8005042 <LL_RCC_LSI1_IsReady>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f1      	beq.n	80057e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005800:	f7ff fc42 	bl	8005088 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005806:	f7fd fe6b 	bl	80034e0 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b03      	cmp	r3, #3
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1ac      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005818:	f7ff fc47 	bl	80050aa <LL_RCC_LSI2_IsReady>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f1      	bne.n	8005806 <HAL_RCC_OscConfig+0x36e>
 8005822:	e027      	b.n	8005874 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005824:	f7ff fc30 	bl	8005088 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fd fe5a 	bl	80034e0 <HAL_GetTick>
 800582c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005830:	f7fd fe56 	bl	80034e0 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b03      	cmp	r3, #3
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e197      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005842:	f7ff fc32 	bl	80050aa <LL_RCC_LSI2_IsReady>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f1      	bne.n	8005830 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800584c:	f7ff fbe8 	bl	8005020 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fd fe46 	bl	80034e0 <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005858:	f7fd fe42 	bl	80034e0 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e183      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800586a:	f7ff fbea 	bl	8005042 <LL_RCC_LSI1_IsReady>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f1      	bne.n	8005858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05b      	beq.n	8005938 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005880:	4ba7      	ldr	r3, [pc, #668]	; (8005b20 <HAL_RCC_OscConfig+0x688>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d114      	bne.n	80058b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800588c:	f7ff fa88 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005890:	f7fd fe26 	bl	80034e0 <HAL_GetTick>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005898:	f7fd fe22 	bl	80034e0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e163      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058aa:	4b9d      	ldr	r3, [pc, #628]	; (8005b20 <HAL_RCC_OscConfig+0x688>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d102      	bne.n	80058c4 <HAL_RCC_OscConfig+0x42c>
 80058be:	f7ff fb48 	bl	8004f52 <LL_RCC_LSE_Enable>
 80058c2:	e00c      	b.n	80058de <HAL_RCC_OscConfig+0x446>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d104      	bne.n	80058d6 <HAL_RCC_OscConfig+0x43e>
 80058cc:	f7ff fb63 	bl	8004f96 <LL_RCC_LSE_EnableBypass>
 80058d0:	f7ff fb3f 	bl	8004f52 <LL_RCC_LSE_Enable>
 80058d4:	e003      	b.n	80058de <HAL_RCC_OscConfig+0x446>
 80058d6:	f7ff fb4d 	bl	8004f74 <LL_RCC_LSE_Disable>
 80058da:	f7ff fb6d 	bl	8004fb8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e6:	f7fd fdfb 	bl	80034e0 <HAL_GetTick>
 80058ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fd fdf7 	bl	80034e0 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e136      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005904:	f7ff fb69 	bl	8004fda <LL_RCC_LSE_IsReady>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0ef      	beq.n	80058ee <HAL_RCC_OscConfig+0x456>
 800590e:	e013      	b.n	8005938 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005910:	f7fd fde6 	bl	80034e0 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005916:	e00a      	b.n	800592e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005918:	f7fd fde2 	bl	80034e0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e121      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800592e:	f7ff fb54 	bl	8004fda <LL_RCC_LSE_IsReady>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1ef      	bne.n	8005918 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02c      	beq.n	800599e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d014      	beq.n	8005976 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800594c:	f7ff facd 	bl	8004eea <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005950:	f7fd fdc6 	bl	80034e0 <HAL_GetTick>
 8005954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005958:	f7fd fdc2 	bl	80034e0 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e103      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800596a:	f7ff fae0 	bl	8004f2e <LL_RCC_HSI48_IsReady>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f1      	beq.n	8005958 <HAL_RCC_OscConfig+0x4c0>
 8005974:	e013      	b.n	800599e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005976:	f7ff fac9 	bl	8004f0c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fd fdb1 	bl	80034e0 <HAL_GetTick>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005982:	f7fd fdad 	bl	80034e0 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0ee      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005994:	f7ff facb 	bl	8004f2e <LL_RCC_HSI48_IsReady>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f1      	bne.n	8005982 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80e4 	beq.w	8005b70 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a8:	f7ff fc29 	bl	80051fe <LL_RCC_GetSysClkSource>
 80059ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	f040 80b4 	bne.w	8005b28 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0203 	and.w	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d123      	bne.n	8005a16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d11c      	bne.n	8005a16 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d114      	bne.n	8005a16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d10d      	bne.n	8005a16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d106      	bne.n	8005a16 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d05d      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	d058      	beq.n	8005ace <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0a1      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a2e:	f7ff fc84 	bl	800533a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a32:	f7fd fd55 	bl	80034e0 <HAL_GetTick>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fd fd51 	bl	80034e0 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e092      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ef      	bne.n	8005a3a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <HAL_RCC_OscConfig+0x68c>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a86:	430a      	orrs	r2, r1
 8005a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a90:	f7ff fc44 	bl	800531c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aa4:	f7fd fd1c 	bl	80034e0 <HAL_GetTick>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd fd18 	bl	80034e0 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e059      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0ef      	beq.n	8005aac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005acc:	e050      	b.n	8005b70 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e04f      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d147      	bne.n	8005b70 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ae0:	f7ff fc1c 	bl	800531c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005af4:	f7fd fcf4 	bl	80034e0 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fd fcf0 	bl	80034e0 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e031      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0ef      	beq.n	8005afc <HAL_RCC_OscConfig+0x664>
 8005b1c:	e028      	b.n	8005b70 <HAL_RCC_OscConfig+0x6d8>
 8005b1e:	bf00      	nop
 8005b20:	58000400 	.word	0x58000400
 8005b24:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d01e      	beq.n	8005b6c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2e:	f7ff fc04 	bl	800533a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b32:	f7fd fcd5 	bl	80034e0 <HAL_GetTick>
 8005b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3a:	f7fd fcd1 	bl	80034e0 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e012      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ef      	bne.n	8005b3a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCC_OscConfig+0x6e4>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	60cb      	str	r3, [r1, #12]
 8005b6a:	e001      	b.n	8005b70 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3734      	adds	r7, #52	; 0x34
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	eefefffc 	.word	0xeefefffc

08005b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e12d      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b98      	ldr	r3, [pc, #608]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d91b      	bls.n	8005bda <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b95      	ldr	r3, [pc, #596]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 0207 	bic.w	r2, r3, #7
 8005baa:	4993      	ldr	r1, [pc, #588]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb2:	f7fd fc95 	bl	80034e0 <HAL_GetTick>
 8005bb6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bba:	f7fd fc91 	bl	80034e0 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e111      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bcc:	4b8a      	ldr	r3, [pc, #552]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d1ef      	bne.n	8005bba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fb13 	bl	8005216 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bf0:	f7fd fc76 	bl	80034e0 <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bf8:	f7fd fc72 	bl	80034e0 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0f2      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c0a:	f7ff fbe8 	bl	80053de <LL_RCC_IsActiveFlag_HPRE>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f1      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d016      	beq.n	8005c4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fb0a 	bl	800523e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c2a:	f7fd fc59 	bl	80034e0 <HAL_GetTick>
 8005c2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c32:	f7fd fc55 	bl	80034e0 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e0d5      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c44:	f7ff fbdd 	bl	8005402 <LL_RCC_IsActiveFlag_C2HPRE>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f1      	beq.n	8005c32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fb03 	bl	800526a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c64:	f7fd fc3c 	bl	80034e0 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c6c:	f7fd fc38 	bl	80034e0 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0b8      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c7e:	f7ff fbd3 	bl	8005428 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f1      	beq.n	8005c6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fafd 	bl	8005298 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c9e:	f7fd fc1f 	bl	80034e0 <HAL_GetTick>
 8005ca2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ca6:	f7fd fc1b 	bl	80034e0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e09b      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005cb8:	f7ff fbc9 	bl	800544e <LL_RCC_IsActiveFlag_PPRE1>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f1      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d017      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff faf3 	bl	80052c0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cda:	f7fd fc01 	bl	80034e0 <HAL_GetTick>
 8005cde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ce2:	f7fd fbfd 	bl	80034e0 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e07d      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cf4:	f7ff fbbd 	bl	8005472 <LL_RCC_IsActiveFlag_PPRE2>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f1      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d043      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d106      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005d12:	f7ff f893 	bl	8004e3c <LL_RCC_HSE_IsReady>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11e      	bne.n	8005d5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e067      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005d28:	f7ff fb16 	bl	8005358 <LL_RCC_PLL_IsReady>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d113      	bne.n	8005d5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e05c      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005d3e:	f7ff f9fb 	bl	8005138 <LL_RCC_MSI_IsReady>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d108      	bne.n	8005d5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e051      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d4c:	f7ff f8a6 	bl	8004e9c <LL_RCC_HSI_IsReady>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e04a      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fa39 	bl	80051d6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d64:	f7fd fbbc 	bl	80034e0 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fd fbb8 	bl	80034e0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e036      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	f7ff fa3c 	bl	80051fe <LL_RCC_GetSysClkSource>
 8005d86:	4602      	mov	r2, r0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d1ec      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d92:	4b19      	ldr	r3, [pc, #100]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d21b      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da0:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f023 0207 	bic.w	r2, r3, #7
 8005da8:	4913      	ldr	r1, [pc, #76]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db0:	f7fd fb96 	bl	80034e0 <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005db8:	f7fd fb92 	bl	80034e0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e012      	b.n	8005df0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCC_ClockConfig+0x278>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d1ef      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005dd8:	f000 f87e 	bl	8005ed8 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4a07      	ldr	r2, [pc, #28]	; (8005dfc <HAL_RCC_ClockConfig+0x27c>)
 8005de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005de2:	f7fd fb89 	bl	80034f8 <HAL_GetTickPrio>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fd fb2b 	bl	8003444 <HAL_InitTick>
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	58004000 	.word	0x58004000
 8005dfc:	20000024 	.word	0x20000024

08005e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e06:	f7ff f9fa 	bl	80051fe <LL_RCC_GetSysClkSource>
 8005e0a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e12:	f7ff f9b6 	bl	8005182 <LL_RCC_MSI_GetRange>
 8005e16:	4603      	mov	r3, r0
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e04b      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d102      	bne.n	8005e34 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e2e:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e045      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d10a      	bne.n	8005e50 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e3a:	f7fe ffcf 	bl	8004ddc <LL_RCC_HSE_IsEnabledDiv2>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d102      	bne.n	8005e4a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e44:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e03a      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e4a:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e037      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e50:	f7ff fab9 	bl	80053c6 <LL_RCC_PLL_GetMainSource>
 8005e54:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d003      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0x64>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d003      	beq.n	8005e6a <HAL_RCC_GetSysClockFreq+0x6a>
 8005e62:	e00d      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e66:	60bb      	str	r3, [r7, #8]
        break;
 8005e68:	e015      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e6a:	f7fe ffb7 	bl	8004ddc <LL_RCC_HSE_IsEnabledDiv2>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d102      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e74:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e76:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e78:	e00d      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e7a:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e7c:	60bb      	str	r3, [r7, #8]
        break;
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e80:	f7ff f97f 	bl	8005182 <LL_RCC_MSI_GetRange>
 8005e84:	4603      	mov	r3, r0
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ecc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e92:	60bb      	str	r3, [r7, #8]
        break;
 8005e94:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005e96:	f7ff fa71 	bl	800537c <LL_RCC_PLL_GetN>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	fb03 f402 	mul.w	r4, r3, r2
 8005ea2:	f7ff fa84 	bl	80053ae <LL_RCC_PLL_GetDivider>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	3301      	adds	r3, #1
 8005eac:	fbb4 f4f3 	udiv	r4, r4, r3
 8005eb0:	f7ff fa71 	bl	8005396 <LL_RCC_PLL_GetR>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	0f5b      	lsrs	r3, r3, #29
 8005eb8:	3301      	adds	r3, #1
 8005eba:	fbb4 f3f3 	udiv	r3, r4, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd90      	pop	{r4, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	0800b6e0 	.word	0x0800b6e0
 8005ed0:	00f42400 	.word	0x00f42400
 8005ed4:	01e84800 	.word	0x01e84800

08005ed8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed8:	b598      	push	{r3, r4, r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005edc:	f7ff ff90 	bl	8005e00 <HAL_RCC_GetSysClockFreq>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	f7ff fa01 	bl	80052e8 <LL_RCC_GetAHBPrescaler>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	4a03      	ldr	r2, [pc, #12]	; (8005efc <HAL_RCC_GetHCLKFreq+0x24>)
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd98      	pop	{r3, r4, r7, pc}
 8005efc:	0800b6a0 	.word	0x0800b6a0

08005f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2bb0      	cmp	r3, #176	; 0xb0
 8005f0c:	d903      	bls.n	8005f16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e007      	b.n	8005f26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	4a11      	ldr	r2, [pc, #68]	; (8005f64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f26:	f7ff f9eb 	bl	8005300 <LL_RCC_GetAHB4Prescaler>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005f44:	fba2 2303 	umull	r2, r3, r2, r3
 8005f48:	0c9c      	lsrs	r4, r3, #18
 8005f4a:	f7fe ff39 	bl	8004dc0 <HAL_PWREx_GetVoltageRange>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4619      	mov	r1, r3
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f80c 	bl	8005f70 <RCC_SetFlashLatency>
 8005f58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}
 8005f62:	bf00      	nop
 8005f64:	0800b6e0 	.word	0x0800b6e0
 8005f68:	0800b6a0 	.word	0x0800b6a0
 8005f6c:	431bde83 	.word	0x431bde83

08005f70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b093      	sub	sp, #76	; 0x4c
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005f7a:	4b37      	ldr	r3, [pc, #220]	; (8006058 <RCC_SetFlashLatency+0xe8>)
 8005f7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005f80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005f86:	4a35      	ldr	r2, [pc, #212]	; (800605c <RCC_SetFlashLatency+0xec>)
 8005f88:	f107 031c 	add.w	r3, r7, #28
 8005f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005f92:	4b33      	ldr	r3, [pc, #204]	; (8006060 <RCC_SetFlashLatency+0xf0>)
 8005f94:	f107 040c 	add.w	r4, r7, #12
 8005f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d11a      	bne.n	8005fe0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
 8005fae:	e013      	b.n	8005fd8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	3348      	adds	r3, #72	; 0x48
 8005fb6:	443b      	add	r3, r7
 8005fb8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d807      	bhi.n	8005fd2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3348      	adds	r3, #72	; 0x48
 8005fc8:	443b      	add	r3, r7
 8005fca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005fce:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005fd0:	e020      	b.n	8006014 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d9e8      	bls.n	8005fb0 <RCC_SetFlashLatency+0x40>
 8005fde:	e019      	b.n	8006014 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe4:	e013      	b.n	800600e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3348      	adds	r3, #72	; 0x48
 8005fec:	443b      	add	r3, r7
 8005fee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d807      	bhi.n	8006008 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	3348      	adds	r3, #72	; 0x48
 8005ffe:	443b      	add	r3, r7
 8006000:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006004:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006006:	e005      	b.n	8006014 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	3301      	adds	r3, #1
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	2b02      	cmp	r3, #2
 8006012:	d9e8      	bls.n	8005fe6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <RCC_SetFlashLatency+0xf4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 0207 	bic.w	r2, r3, #7
 800601c:	4911      	ldr	r1, [pc, #68]	; (8006064 <RCC_SetFlashLatency+0xf4>)
 800601e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006020:	4313      	orrs	r3, r2
 8006022:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006024:	f7fd fa5c 	bl	80034e0 <HAL_GetTick>
 8006028:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800602a:	e008      	b.n	800603e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800602c:	f7fd fa58 	bl	80034e0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e007      	b.n	800604e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <RCC_SetFlashLatency+0xf4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006048:	429a      	cmp	r2, r3
 800604a:	d1ef      	bne.n	800602c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	374c      	adds	r7, #76	; 0x4c
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}
 8006056:	bf00      	nop
 8006058:	0800b4f0 	.word	0x0800b4f0
 800605c:	0800b500 	.word	0x0800b500
 8006060:	0800b50c 	.word	0x0800b50c
 8006064:	58004000 	.word	0x58004000

08006068 <LL_RCC_LSE_IsEnabled>:
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <LL_RCC_LSE_IsEnabled+0x18>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <LL_RCC_LSE_IsEnabled+0x1a>
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_RCC_LSE_IsReady>:
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b02      	cmp	r3, #2
 800609e:	d101      	bne.n	80060a4 <LL_RCC_LSE_IsReady+0x18>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <LL_RCC_LSE_IsReady+0x1a>
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_RCC_SetRFWKPClockSource>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_SetSMPSClockSource>:
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f023 0203 	bic.w	r2, r3, #3
 80060ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_RCC_SetSMPSPrescaler>:
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800610c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4313      	orrs	r3, r2
 800611e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_RCC_SetUSARTClockSource>:
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613c:	f023 0203 	bic.w	r2, r3, #3
 8006140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_SetLPUARTClockSource>:
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800616c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_RCC_SetI2CClockSource>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <LL_RCC_SetLPTIMClockSource>:
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	43db      	mvns	r3, r3
 80061d6:	401a      	ands	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_SetSAIClockSource>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_SetRNGClockSource>:
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <LL_RCC_SetCLK48ClockSource>:
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800625e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <LL_RCC_SetUSBClockSource>:
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ffe3 	bl	800624a <LL_RCC_SetCLK48ClockSource>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <LL_RCC_SetADCClockSource>:
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LL_RCC_SetRTCClockSource>:
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_RCC_GetRTCClockSource>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_ForceBackupDomainReset>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_RCC_PLLSAI1_Enable>:
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006350:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006354:	6013      	str	r3, [r2, #0]
}
 8006356:	bf00      	nop
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <LL_RCC_PLLSAI1_Disable>:
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <LL_RCC_PLLSAI1_IsReady>:
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006390:	d101      	bne.n	8006396 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b088      	sub	sp, #32
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80063aa:	2300      	movs	r3, #0
 80063ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063ae:	2300      	movs	r3, #0
 80063b0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d034      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063c6:	d021      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80063c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063cc:	d81b      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063d2:	d01d      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80063d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063d8:	d815      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80063de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e2:	d110      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80063f4:	e00d      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f947 	bl	800668e <RCCEx_PLLSAI1_ConfigNP>
 8006400:	4603      	mov	r3, r0
 8006402:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006404:	e005      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	77fb      	strb	r3, [r7, #31]
        break;
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	7ffb      	ldrb	r3, [r7, #31]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fee8 	bl	80061f2 <LL_RCC_SetSAIClockSource>
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7ffb      	ldrb	r3, [r7, #31]
 8006426:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006430:	2b00      	cmp	r3, #0
 8006432:	d046      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006434:	f7ff ff56 	bl	80062e4 <LL_RCC_GetRTCClockSource>
 8006438:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	429a      	cmp	r2, r3
 8006442:	d03c      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006444:	f7fe fcac 	bl	8004da0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ff30 	bl	80062b8 <LL_RCC_SetRTCClockSource>
 8006458:	e02e      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006464:	f7ff ff4b 	bl	80062fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006468:	f7ff ff5a 	bl	8006320 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800647a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006484:	f7ff fdf0 	bl	8006068 <LL_RCC_LSE_IsEnabled>
 8006488:	4603      	mov	r3, r0
 800648a:	2b01      	cmp	r3, #1
 800648c:	d114      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800648e:	f7fd f827 	bl	80034e0 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006494:	e00b      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006496:	f7fd f823 	bl	80034e0 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d902      	bls.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	77fb      	strb	r3, [r7, #31]
              break;
 80064ac:	e004      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064ae:	f7ff fded 	bl	800608c <LL_RCC_LSE_IsReady>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d1ee      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064b8:	7ffb      	ldrb	r3, [r7, #31]
 80064ba:	77bb      	strb	r3, [r7, #30]
 80064bc:	e001      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fe2a 	bl	800612c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fe35 	bl	8006158 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fe5d 	bl	80061be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe52 	bl	80061be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fe2a 	bl	8006184 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe1f 	bl	8006184 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d022      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fe8d 	bl	8006276 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006564:	d107      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006574:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657e:	d10b      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f8dd 	bl	8006744 <RCCEx_PLLSAI1_ConfigNQ>
 800658a:	4603      	mov	r3, r0
 800658c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800658e:	7ffb      	ldrb	r3, [r7, #31]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006594:	7ffb      	ldrb	r3, [r7, #31]
 8006596:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02b      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d008      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b6:	d003      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fe2a 	bl	800621e <LL_RCC_SetRNGClockSource>
 80065ca:	e00a      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	2000      	movs	r0, #0
 80065d8:	f7ff fe21 	bl	800621e <LL_RCC_SetRNGClockSource>
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fe34 	bl	800624a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80065ea:	d107      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80065ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d022      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fe3d 	bl	800628c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661a:	d107      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800661c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006634:	d10b      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f8dd 	bl	80067fa <RCCEx_PLLSAI1_ConfigNR>
 8006640:	4603      	mov	r3, r0
 8006642:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006644:	7ffb      	ldrb	r3, [r7, #31]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800664a:	7ffb      	ldrb	r3, [r7, #31]
 800664c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fd26 	bl	80060b0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff fd45 	bl	8006104 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fd2c 	bl	80060dc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006684:	7fbb      	ldrb	r3, [r7, #30]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800669a:	f7ff fe61 	bl	8006360 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800669e:	f7fc ff1f 	bl	80034e0 <HAL_GetTick>
 80066a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066a4:	e009      	b.n	80066ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066a6:	f7fc ff1b 	bl	80034e0 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d902      	bls.n	80066ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	73fb      	strb	r3, [r7, #15]
      break;
 80066b8:	e004      	b.n	80066c4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ba:	f7ff fe60 	bl	800637e <LL_RCC_PLLSAI1_IsReady>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f0      	bne.n	80066a6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d137      	bne.n	800673a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066de:	4313      	orrs	r3, r2
 80066e0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80066e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80066f8:	f7ff fe23 	bl	8006342 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fc:	f7fc fef0 	bl	80034e0 <HAL_GetTick>
 8006700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006702:	e009      	b.n	8006718 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006704:	f7fc feec 	bl	80034e0 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d902      	bls.n	8006718 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	73fb      	strb	r3, [r7, #15]
        break;
 8006716:	e004      	b.n	8006722 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006718:	f7ff fe31 	bl	800637e <LL_RCC_PLLSAI1_IsReady>
 800671c:	4603      	mov	r3, r0
 800671e:	2b01      	cmp	r3, #1
 8006720:	d1f0      	bne.n	8006704 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006750:	f7ff fe06 	bl	8006360 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006754:	f7fc fec4 	bl	80034e0 <HAL_GetTick>
 8006758:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800675a:	e009      	b.n	8006770 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800675c:	f7fc fec0 	bl	80034e0 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d902      	bls.n	8006770 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	73fb      	strb	r3, [r7, #15]
      break;
 800676e:	e004      	b.n	800677a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006770:	f7ff fe05 	bl	800637e <LL_RCC_PLLSAI1_IsReady>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d137      	bne.n	80067f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006794:	4313      	orrs	r3, r2
 8006796:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067aa:	4313      	orrs	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067ae:	f7ff fdc8 	bl	8006342 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b2:	f7fc fe95 	bl	80034e0 <HAL_GetTick>
 80067b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067b8:	e009      	b.n	80067ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ba:	f7fc fe91 	bl	80034e0 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d902      	bls.n	80067ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	73fb      	strb	r3, [r7, #15]
        break;
 80067cc:	e004      	b.n	80067d8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067ce:	f7ff fdd6 	bl	800637e <LL_RCC_PLLSAI1_IsReady>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d1f0      	bne.n	80067ba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067ec:	4313      	orrs	r3, r2
 80067ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006806:	f7ff fdab 	bl	8006360 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800680a:	f7fc fe69 	bl	80034e0 <HAL_GetTick>
 800680e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006810:	e009      	b.n	8006826 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006812:	f7fc fe65 	bl	80034e0 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d902      	bls.n	8006826 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e004      	b.n	8006830 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006826:	f7ff fdaa 	bl	800637e <LL_RCC_PLLSAI1_IsReady>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d137      	bne.n	80068a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800684a:	4313      	orrs	r3, r2
 800684c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006860:	4313      	orrs	r3, r2
 8006862:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006864:	f7ff fd6d 	bl	8006342 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006868:	f7fc fe3a 	bl	80034e0 <HAL_GetTick>
 800686c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800686e:	e009      	b.n	8006884 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006870:	f7fc fe36 	bl	80034e0 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d902      	bls.n	8006884 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
        break;
 8006882:	e004      	b.n	800688e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006884:	f7ff fd7b 	bl	800637e <LL_RCC_PLLSAI1_IsReady>
 8006888:	4603      	mov	r3, r0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d1f0      	bne.n	8006870 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d108      	bne.n	80068a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068a2:	4313      	orrs	r3, r2
 80068a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e027      	b.n	8006912 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7a5b      	ldrb	r3, [r3, #9]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fb fc1c 	bl	8002110 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f023 0120 	bic.w	r1, r3, #32
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0204 	orr.w	r2, r2, #4
 8006902:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e09f      	b.n	8006a6e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fb fc0e 	bl	8002164 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006950:	4b49      	ldr	r3, [pc, #292]	; (8006a78 <HAL_RTC_Init+0x15c>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b10      	cmp	r3, #16
 800695a:	d07e      	beq.n	8006a5a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	22ca      	movs	r2, #202	; 0xca
 8006962:	625a      	str	r2, [r3, #36]	; 0x24
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2253      	movs	r2, #83	; 0x53
 800696a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8ab 	bl	8006ac8 <RTC_EnterInitMode>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	73fb      	strb	r3, [r7, #15]
 800698c:	e067      	b.n	8006a5e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6899      	ldr	r1, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	68d2      	ldr	r2, [r2, #12]
 80069c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6919      	ldr	r1, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	041a      	lsls	r2, r3, #16
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ec:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0203 	bic.w	r2, r2, #3
 80069fc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d113      	bne.n	8006a4c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f829 	bl	8006a7c <HAL_RTC_WaitForSynchro>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00d      	beq.n	8006a4c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	22ff      	movs	r2, #255	; 0xff
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e010      	b.n	8006a6e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	22ff      	movs	r2, #255	; 0xff
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
 8006a58:	e001      	b.n	8006a5e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40002800 	.word	0x40002800

08006a7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a94:	f7fc fd24 	bl	80034e0 <HAL_GetTick>
 8006a98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a9a:	e009      	b.n	8006ab0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a9c:	f7fc fd20 	bl	80034e0 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e007      	b.n	8006ac0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0ee      	beq.n	8006a9c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d119      	bne.n	8006b12 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ae8:	f7fc fcfa 	bl	80034e0 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006aee:	e009      	b.n	8006b04 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006af0:	f7fc fcf6 	bl	80034e0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afe:	d901      	bls.n	8006b04 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e007      	b.n	8006b14 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0ee      	beq.n	8006af0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e0a8      	b.n	8006c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	22ca      	movs	r2, #202	; 0xca
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2253      	movs	r2, #83	; 0x53
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d020      	beq.n	8006ba6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006b64:	f7fc fcbc 	bl	80034e0 <HAL_GetTick>
 8006b68:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b6a:	e015      	b.n	8006b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b6c:	f7fc fcb8 	bl	80034e0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b7a:	d90d      	bls.n	8006b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2203      	movs	r2, #3
 8006b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e077      	b.n	8006c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e2      	bne.n	8006b6c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006bc6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006bc8:	f7fc fc8a 	bl	80034e0 <HAL_GetTick>
 8006bcc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006bce:	e015      	b.n	8006bfc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bd0:	f7fc fc86 	bl	80034e0 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bde:	d90d      	bls.n	8006bfc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2203      	movs	r2, #3
 8006bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e045      	b.n	8006c88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0e2      	beq.n	8006bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0207 	bic.w	r2, r2, #7
 8006c20:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6899      	ldr	r1, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006c32:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c38:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006c42:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c5c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c6c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	22ff      	movs	r2, #255	; 0xff
 8006c74:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	58000800 	.word	0x58000800

08006c94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d137      	bne.n	8006d1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_UART_Receive_IT+0x24>
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e030      	b.n	8006d1e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <HAL_UART_Receive_IT+0x94>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d01f      	beq.n	8006d0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d018      	beq.n	8006d0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e6      	bne.n	8006cda <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fb44 	bl	80073a0 <UART_Start_Receive_IT>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40008000 	.word	0x40008000

08006d2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b0ba      	sub	sp, #232	; 0xe8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d56:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d11b      	bne.n	8006da0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d015      	beq.n	8006da0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d105      	bne.n	8006d8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 82e3 	beq.w	800735c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
      }
      return;
 8006d9e:	e2dd      	b.n	800735c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8123 	beq.w	8006ff0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006daa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006dae:	4b8d      	ldr	r3, [pc, #564]	; (8006fe4 <HAL_UART_IRQHandler+0x2b8>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006db6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006dba:	4b8b      	ldr	r3, [pc, #556]	; (8006fe8 <HAL_UART_IRQHandler+0x2bc>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8116 	beq.w	8006ff0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d011      	beq.n	8006df4 <HAL_UART_IRQHandler+0xc8>
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2201      	movs	r2, #1
 8006de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d011      	beq.n	8006e24 <HAL_UART_IRQHandler+0xf8>
 8006e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2202      	movs	r2, #2
 8006e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1a:	f043 0204 	orr.w	r2, r3, #4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d011      	beq.n	8006e54 <HAL_UART_IRQHandler+0x128>
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2204      	movs	r2, #4
 8006e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4a:	f043 0202 	orr.w	r2, r3, #2
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d017      	beq.n	8006e90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e70:	4b5c      	ldr	r3, [pc, #368]	; (8006fe4 <HAL_UART_IRQHandler+0x2b8>)
 8006e72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e86:	f043 0208 	orr.w	r2, r3, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d012      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x196>
 8006e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8249 	beq.w	8007360 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d013      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d005      	beq.n	8006f26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d054      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb5c 	bl	80075e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d146      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1d9      	bne.n	8006f3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_UART_IRQHandler+0x2c0>)
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fd fb83 	bl	80046ac <HAL_DMA_Abort_IT>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d019      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbe:	e00f      	b.n	8006fe0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f9d7 	bl	8007374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	e00b      	b.n	8006fe0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f9d3 	bl	8007374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fce:	e007      	b.n	8006fe0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f9cf 	bl	8007374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006fde:	e1bf      	b.n	8007360 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe0:	bf00      	nop
    return;
 8006fe2:	e1bd      	b.n	8007360 <HAL_UART_IRQHandler+0x634>
 8006fe4:	10000001 	.word	0x10000001
 8006fe8:	04000120 	.word	0x04000120
 8006fec:	080076b1 	.word	0x080076b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	f040 8153 	bne.w	80072a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 814c 	beq.w	80072a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8145 	beq.w	80072a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2210      	movs	r2, #16
 800701c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	f040 80bb 	bne.w	80071a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800703c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 818f 	beq.w	8007364 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800704c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007050:	429a      	cmp	r2, r3
 8007052:	f080 8187 	bcs.w	8007364 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800705c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 8087 	bne.w	8007182 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800708c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800709e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1da      	bne.n	8007074 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3308      	adds	r3, #8
 80070c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e1      	bne.n	80070be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800710a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800710c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800711e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007120:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007124:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800712c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e3      	bne.n	80070fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800714e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007150:	f023 0310 	bic.w	r3, r3, #16
 8007154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007162:	65bb      	str	r3, [r7, #88]	; 0x58
 8007164:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e4      	bne.n	8007140 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717c:	4618      	mov	r0, r3
 800717e:	f7fd fa36 	bl	80045ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007194:	b29b      	uxth	r3, r3
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	b29b      	uxth	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8f3 	bl	8007388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071a2:	e0df      	b.n	8007364 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80d1 	beq.w	8007368 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80071c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80cc 	beq.w	8007368 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071f2:	647b      	str	r3, [r7, #68]	; 0x44
 80071f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e4      	bne.n	80071d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	623b      	str	r3, [r7, #32]
   return(result);
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800722e:	633a      	str	r2, [r7, #48]	; 0x30
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e1      	bne.n	8007206 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	60fb      	str	r3, [r7, #12]
   return(result);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0310 	bic.w	r3, r3, #16
 800726a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	69b9      	ldr	r1, [r7, #24]
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	617b      	str	r3, [r7, #20]
   return(result);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e4      	bne.n	8007256 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f875 	bl	8007388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800729e:	e063      	b.n	8007368 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <HAL_UART_IRQHandler+0x59e>
 80072ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 ff52 	bl	800816c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072c8:	e051      	b.n	800736e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d014      	beq.n	8007300 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d03a      	beq.n	800736c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
    }
    return;
 80072fe:	e035      	b.n	800736c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d009      	beq.n	8007320 <HAL_UART_IRQHandler+0x5f4>
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9df 	bl	80076dc <UART_EndTransmit_IT>
    return;
 800731e:	e026      	b.n	800736e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <HAL_UART_IRQHandler+0x614>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 ff2b 	bl	8008194 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800733e:	e016      	b.n	800736e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <HAL_UART_IRQHandler+0x642>
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007350:	2b00      	cmp	r3, #0
 8007352:	da0c      	bge.n	800736e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 ff13 	bl	8008180 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800735a:	e008      	b.n	800736e <HAL_UART_IRQHandler+0x642>
      return;
 800735c:	bf00      	nop
 800735e:	e006      	b.n	800736e <HAL_UART_IRQHandler+0x642>
    return;
 8007360:	bf00      	nop
 8007362:	e004      	b.n	800736e <HAL_UART_IRQHandler+0x642>
      return;
 8007364:	bf00      	nop
 8007366:	e002      	b.n	800736e <HAL_UART_IRQHandler+0x642>
      return;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <HAL_UART_IRQHandler+0x642>
    return;
 800736c:	bf00      	nop
  }
}
 800736e:	37e8      	adds	r7, #232	; 0xe8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b0a3      	sub	sp, #140	; 0x8c
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	88fa      	ldrh	r2, [r7, #6]
 80073b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	d10e      	bne.n	80073f2 <UART_Start_Receive_IT+0x52>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <UART_Start_Receive_IT+0x48>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073e6:	e02d      	b.n	8007444 <UART_Start_Receive_IT+0xa4>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	22ff      	movs	r2, #255	; 0xff
 80073ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073f0:	e028      	b.n	8007444 <UART_Start_Receive_IT+0xa4>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10d      	bne.n	8007416 <UART_Start_Receive_IT+0x76>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <UART_Start_Receive_IT+0x6c>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800740a:	e01b      	b.n	8007444 <UART_Start_Receive_IT+0xa4>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	227f      	movs	r2, #127	; 0x7f
 8007410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007414:	e016      	b.n	8007444 <UART_Start_Receive_IT+0xa4>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800741e:	d10d      	bne.n	800743c <UART_Start_Receive_IT+0x9c>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <UART_Start_Receive_IT+0x92>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	227f      	movs	r2, #127	; 0x7f
 800742c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007430:	e008      	b.n	8007444 <UART_Start_Receive_IT+0xa4>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	223f      	movs	r2, #63	; 0x3f
 8007436:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800743a:	e003      	b.n	8007444 <UART_Start_Receive_IT+0xa4>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2222      	movs	r2, #34	; 0x22
 8007450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007478:	673a      	str	r2, [r7, #112]	; 0x70
 800747a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800747e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e3      	bne.n	8007454 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007494:	d14f      	bne.n	8007536 <UART_Start_Receive_IT+0x196>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d349      	bcc.n	8007536 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074aa:	d107      	bne.n	80074bc <UART_Start_Receive_IT+0x11c>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d103      	bne.n	80074bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a47      	ldr	r2, [pc, #284]	; (80075d4 <UART_Start_Receive_IT+0x234>)
 80074b8:	675a      	str	r2, [r3, #116]	; 0x74
 80074ba:	e002      	b.n	80074c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4a46      	ldr	r2, [pc, #280]	; (80075d8 <UART_Start_Receive_IT+0x238>)
 80074c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01a      	beq.n	8007500 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e4      	bne.n	80074ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007520:	64ba      	str	r2, [r7, #72]	; 0x48
 8007522:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800752e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e5      	bne.n	8007500 <UART_Start_Receive_IT+0x160>
 8007534:	e046      	b.n	80075c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753e:	d107      	bne.n	8007550 <UART_Start_Receive_IT+0x1b0>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a24      	ldr	r2, [pc, #144]	; (80075dc <UART_Start_Receive_IT+0x23c>)
 800754c:	675a      	str	r2, [r3, #116]	; 0x74
 800754e:	e002      	b.n	8007556 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4a23      	ldr	r2, [pc, #140]	; (80075e0 <UART_Start_Receive_IT+0x240>)
 8007554:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d019      	beq.n	8007592 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007572:	677b      	str	r3, [r7, #116]	; 0x74
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
 800757e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_Start_Receive_IT+0x1be>
 8007590:	e018      	b.n	80075c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	613b      	str	r3, [r7, #16]
   return(result);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f043 0320 	orr.w	r3, r3, #32
 80075a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	69f9      	ldr	r1, [r7, #28]
 80075b6:	6a3a      	ldr	r2, [r7, #32]
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	378c      	adds	r7, #140	; 0x8c
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	08007e05 	.word	0x08007e05
 80075d8:	08007aa5 	.word	0x08007aa5
 80075dc:	080078ed 	.word	0x080078ed
 80075e0:	08007735 	.word	0x08007735

080075e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b095      	sub	sp, #84	; 0x54
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760a:	643b      	str	r3, [r7, #64]	; 0x40
 800760c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e6      	bne.n	80075ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	61fb      	str	r3, [r7, #28]
   return(result);
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e3      	bne.n	800761e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d118      	bne.n	8007690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	60bb      	str	r3, [r7, #8]
   return(result);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	647b      	str	r3, [r7, #68]	; 0x44
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6979      	ldr	r1, [r7, #20]
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	613b      	str	r3, [r7, #16]
   return(result);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e6      	bne.n	800765e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80076a4:	bf00      	nop
 80076a6:	3754      	adds	r7, #84	; 0x54
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff fe50 	bl	8007374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	61fb      	str	r3, [r7, #28]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6979      	ldr	r1, [r7, #20]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	613b      	str	r3, [r7, #16]
   return(result);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e6      	bne.n	80076e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fa f831 	bl	800178c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772a:	bf00      	nop
 800772c:	3720      	adds	r7, #32
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b09c      	sub	sp, #112	; 0x70
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007742:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774c:	2b22      	cmp	r3, #34	; 0x22
 800774e:	f040 80be 	bne.w	80078ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800775c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007760:	b2d9      	uxtb	r1, r3
 8007762:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007766:	b2da      	uxtb	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776c:	400a      	ands	r2, r1
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 80a1 	bne.w	80078de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80077bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3308      	adds	r3, #8
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	667b      	str	r3, [r7, #100]	; 0x64
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077ee:	647a      	str	r2, [r7, #68]	; 0x44
 80077f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e5      	bne.n	80077ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <UART_RxISR_8BIT+0x1b4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d01f      	beq.n	8007860 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d018      	beq.n	8007860 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	623b      	str	r3, [r7, #32]
   return(result);
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007842:	663b      	str	r3, [r7, #96]	; 0x60
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
 800784e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007864:	2b01      	cmp	r3, #1
 8007866:	d12e      	bne.n	80078c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	60fb      	str	r3, [r7, #12]
   return(result);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	617b      	str	r3, [r7, #20]
   return(result);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e6      	bne.n	800786e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	d103      	bne.n	80078b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2210      	movs	r2, #16
 80078b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fd62 	bl	8007388 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078c4:	e00b      	b.n	80078de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7f9 ff42 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 80078cc:	e007      	b.n	80078de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0208 	orr.w	r2, r2, #8
 80078dc:	619a      	str	r2, [r3, #24]
}
 80078de:	bf00      	nop
 80078e0:	3770      	adds	r7, #112	; 0x70
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40008000 	.word	0x40008000

080078ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b09c      	sub	sp, #112	; 0x70
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007904:	2b22      	cmp	r3, #34	; 0x22
 8007906:	f040 80be 	bne.w	8007a86 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007918:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800791a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800791e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007922:	4013      	ands	r3, r2
 8007924:	b29a      	uxth	r2, r3
 8007926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007928:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	f040 80a1 	bne.w	8007a96 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007968:	667b      	str	r3, [r7, #100]	; 0x64
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007972:	657b      	str	r3, [r7, #84]	; 0x54
 8007974:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e6      	bne.n	8007954 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	663b      	str	r3, [r7, #96]	; 0x60
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079a6:	643a      	str	r2, [r7, #64]	; 0x40
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a33      	ldr	r2, [pc, #204]	; (8007aa0 <UART_RxISR_16BIT+0x1b4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d01f      	beq.n	8007a18 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d018      	beq.n	8007a18 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d12e      	bne.n	8007a7e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	613b      	str	r3, [r7, #16]
   return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d103      	bne.n	8007a6e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fc86 	bl	8007388 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a7c:	e00b      	b.n	8007a96 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7f9 fe66 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 8007a84:	e007      	b.n	8007a96 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0208 	orr.w	r2, r2, #8
 8007a94:	619a      	str	r2, [r3, #24]
}
 8007a96:	bf00      	nop
 8007a98:	3770      	adds	r7, #112	; 0x70
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40008000 	.word	0x40008000

08007aa4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b0ac      	sub	sp, #176	; 0xb0
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ab2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ada:	2b22      	cmp	r3, #34	; 0x22
 8007adc:	f040 8182 	bne.w	8007de4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ae6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aea:	e125      	b.n	8007d38 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007af6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007afa:	b2d9      	uxtb	r1, r3
 8007afc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	400a      	ands	r2, r1
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d053      	beq.n	8007be6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d011      	beq.n	8007b6e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b64:	f043 0201 	orr.w	r2, r3, #1
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d011      	beq.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f043 0204 	orr.w	r2, r3, #4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d011      	beq.n	8007bce <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc4:	f043 0202 	orr.w	r2, r3, #2
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d006      	beq.n	8007be6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fbcb 	bl	8007374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f040 80a2 	bne.w	8007d38 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c18:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e4      	bne.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c40:	f023 0301 	bic.w	r3, r3, #1
 8007c44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c52:	66ba      	str	r2, [r7, #104]	; 0x68
 8007c54:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e1      	bne.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a5f      	ldr	r2, [pc, #380]	; (8007dfc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d021      	beq.n	8007cc8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d01a      	beq.n	8007cc8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e4      	bne.n	8007c92 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d130      	bne.n	8007d32 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	f023 0310 	bic.w	r3, r3, #16
 8007cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e4      	bne.n	8007cd6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b10      	cmp	r3, #16
 8007d18:	d103      	bne.n	8007d22 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff fb2c 	bl	8007388 <HAL_UARTEx_RxEventCallback>
 8007d30:	e002      	b.n	8007d38 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7f9 fd0c 	bl	8001750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f47f aecf 	bne.w	8007aec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d049      	beq.n	8007df4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d242      	bcs.n	8007df4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e3      	bne.n	8007d6e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007daa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f043 0320 	orr.w	r3, r3, #32
 8007dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	613b      	str	r3, [r7, #16]
   return(result);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e4      	bne.n	8007dac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007de2:	e007      	b.n	8007df4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0208 	orr.w	r2, r2, #8
 8007df2:	619a      	str	r2, [r3, #24]
}
 8007df4:	bf00      	nop
 8007df6:	37b0      	adds	r7, #176	; 0xb0
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40008000 	.word	0x40008000
 8007e00:	08007735 	.word	0x08007735

08007e04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b0ae      	sub	sp, #184	; 0xb8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e12:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e3a:	2b22      	cmp	r3, #34	; 0x22
 8007e3c:	f040 8186 	bne.w	800814c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e4a:	e129      	b.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007e62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007e66:	4013      	ands	r3, r2
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e74:	1c9a      	adds	r2, r3, #2
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d053      	beq.n	8007f4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d011      	beq.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec8:	f043 0201 	orr.w	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f043 0204 	orr.w	r2, r3, #4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f28:	f043 0202 	orr.w	r2, r3, #2
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fa19 	bl	8007374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f040 80a4 	bne.w	80080a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f7e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e2      	bne.n	8007f58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3308      	adds	r3, #8
 8007f98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e1      	bne.n	8007f92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a5f      	ldr	r2, [pc, #380]	; (8008164 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d021      	beq.n	8008030 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01a      	beq.n	8008030 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800800a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800800e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800801c:	65bb      	str	r3, [r7, #88]	; 0x58
 800801e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e4      	bne.n	8007ffa <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d130      	bne.n	800809a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008060:	647b      	str	r3, [r7, #68]	; 0x44
 8008062:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800806e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b10      	cmp	r3, #16
 8008080:	d103      	bne.n	800808a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2210      	movs	r2, #16
 8008088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff f978 	bl	8007388 <HAL_UARTEx_RxEventCallback>
 8008098:	e002      	b.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f9 fb58 	bl	8001750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d006      	beq.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80080a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f47f aecb 	bne.w	8007e4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d049      	beq.n	800815c <UART_RxISR_16BIT_FIFOEN+0x358>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d242      	bcs.n	800815c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	623b      	str	r3, [r7, #32]
   return(result);
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80080fa:	633a      	str	r2, [r7, #48]	; 0x30
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e3      	bne.n	80080d6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a15      	ldr	r2, [pc, #84]	; (8008168 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008112:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	60fb      	str	r3, [r7, #12]
   return(result);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f043 0320 	orr.w	r3, r3, #32
 8008128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	69b9      	ldr	r1, [r7, #24]
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	617b      	str	r3, [r7, #20]
   return(result);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e4      	bne.n	8008114 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800814a:	e007      	b.n	800815c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0208 	orr.w	r2, r2, #8
 800815a:	619a      	str	r2, [r3, #24]
}
 800815c:	bf00      	nop
 800815e:	37b8      	adds	r7, #184	; 0xb8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40008000 	.word	0x40008000
 8008168:	080078ed 	.word	0x080078ed

0800816c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	2218      	movs	r2, #24
 80081b8:	2100      	movs	r1, #0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 ffe8 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081c0:	233f      	movs	r3, #63	; 0x3f
 80081c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80081c4:	2381      	movs	r3, #129	; 0x81
 80081c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80081c8:	1dfb      	adds	r3, r7, #7
 80081ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80081cc:	2301      	movs	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fbc6 	bl	8009968 <hci_send_req>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da01      	bge.n	80081e6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80081e2:	23ff      	movs	r3, #255	; 0xff
 80081e4:	e000      	b.n	80081e8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80081e6:	79fb      	ldrb	r3, [r7, #7]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80081f0:	b5b0      	push	{r4, r5, r7, lr}
 80081f2:	b0ce      	sub	sp, #312	; 0x138
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4605      	mov	r5, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	4610      	mov	r0, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008202:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008206:	462a      	mov	r2, r5
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800820e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008212:	4622      	mov	r2, r4
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800821a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800821e:	4602      	mov	r2, r0
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008226:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800822a:	460a      	mov	r2, r1
 800822c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800822e:	f107 0310 	add.w	r3, r7, #16
 8008232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008236:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800823a:	3308      	adds	r3, #8
 800823c:	f107 0210 	add.w	r2, r7, #16
 8008240:	4413      	add	r3, r2
 8008242:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008246:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800824a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800824e:	4413      	add	r3, r2
 8008250:	3309      	adds	r3, #9
 8008252:	f107 0210 	add.w	r2, r7, #16
 8008256:	4413      	add	r3, r2
 8008258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800825c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008260:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800826e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008272:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008276:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800827e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008282:	3301      	adds	r3, #1
 8008284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008288:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800828c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008290:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800829a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800829e:	3302      	adds	r3, #2
 80082a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80082a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80082ac:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80082b0:	8812      	ldrh	r2, [r2, #0]
 80082b2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80082b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ba:	3302      	adds	r3, #2
 80082bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80082c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80082c8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80082d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d4:	3301      	adds	r3, #1
 80082d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80082da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082de:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80082e2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80082e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e8:	3301      	adds	r3, #1
 80082ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80082ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082f2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80082f6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80082f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082fc:	3301      	adds	r3, #1
 80082fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008306:	3308      	adds	r3, #8
 8008308:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800830c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008310:	4618      	mov	r0, r3
 8008312:	f001 ff2d 	bl	800a170 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008316:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800831a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800831e:	4413      	add	r3, r2
 8008320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008324:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008328:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800832c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800832e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008332:	3301      	adds	r3, #1
 8008334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008338:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800833c:	3301      	adds	r3, #1
 800833e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008342:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008346:	4618      	mov	r0, r3
 8008348:	f001 ff12 	bl	800a170 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800834c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008350:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008354:	4413      	add	r3, r2
 8008356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800835a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008362:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008368:	3302      	adds	r3, #2
 800836a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008376:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800837c:	3302      	adds	r3, #2
 800837e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008386:	2218      	movs	r2, #24
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f001 ff00 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008390:	233f      	movs	r3, #63	; 0x3f
 8008392:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008396:	2383      	movs	r3, #131	; 0x83
 8008398:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800839c:	f107 0310 	add.w	r3, r7, #16
 80083a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80083ac:	f107 030f 	add.w	r3, r7, #15
 80083b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fad1 	bl	8009968 <hci_send_req>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da01      	bge.n	80083d0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80083cc:	23ff      	movs	r3, #255	; 0xff
 80083ce:	e004      	b.n	80083da <aci_gap_set_discoverable+0x1ea>
  return status;
 80083d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083d4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80083d8:	781b      	ldrb	r3, [r3, #0]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bdb0      	pop	{r4, r5, r7, pc}

080083e4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b0cc      	sub	sp, #304	; 0x130
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4602      	mov	r2, r0
 80083ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80083f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80083f6:	f107 0310 	add.w	r3, r7, #16
 80083fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008414:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008418:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008424:	3301      	adds	r3, #1
 8008426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800842a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800842e:	2218      	movs	r2, #24
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 feac 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008438:	233f      	movs	r3, #63	; 0x3f
 800843a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800843e:	2385      	movs	r3, #133	; 0x85
 8008440:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008444:	f107 0310 	add.w	r3, r7, #16
 8008448:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800844c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008450:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008454:	f107 030f 	add.w	r3, r7, #15
 8008458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800845c:	2301      	movs	r3, #1
 800845e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008466:	2100      	movs	r1, #0
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fa7d 	bl	8009968 <hci_send_req>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	da01      	bge.n	8008478 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008474:	23ff      	movs	r3, #255	; 0xff
 8008476:	e004      	b.n	8008482 <aci_gap_set_io_capability+0x9e>
  return status;
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008480:	781b      	ldrb	r3, [r3, #0]
}
 8008482:	4618      	mov	r0, r3
 8008484:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800848c:	b5b0      	push	{r4, r5, r7, lr}
 800848e:	b0cc      	sub	sp, #304	; 0x130
 8008490:	af00      	add	r7, sp, #0
 8008492:	4605      	mov	r5, r0
 8008494:	460c      	mov	r4, r1
 8008496:	4610      	mov	r0, r2
 8008498:	4619      	mov	r1, r3
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80084a2:	462a      	mov	r2, r5
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80084ae:	4622      	mov	r2, r4
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80084ba:	4602      	mov	r2, r0
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c6:	460a      	mov	r2, r1
 80084c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80084ca:	f107 0310 	add.w	r3, r7, #16
 80084ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80084e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084f8:	3301      	adds	r3, #1
 80084fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80084fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008506:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800850e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008512:	3301      	adds	r3, #1
 8008514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008520:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800852c:	3301      	adds	r3, #1
 800852e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008536:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800853a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008546:	3301      	adds	r3, #1
 8008548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800854c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008550:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008554:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800855a:	3301      	adds	r3, #1
 800855c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008564:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008568:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800856a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800856e:	3301      	adds	r3, #1
 8008570:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008578:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800857c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800857e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008582:	3301      	adds	r3, #1
 8008584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008590:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008598:	3304      	adds	r3, #4
 800859a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800859e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80085a6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80085a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ac:	3301      	adds	r3, #1
 80085ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085b6:	2218      	movs	r2, #24
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fde8 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085c0:	233f      	movs	r3, #63	; 0x3f
 80085c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80085c6:	2386      	movs	r3, #134	; 0x86
 80085c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80085cc:	f107 0310 	add.w	r3, r7, #16
 80085d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80085dc:	f107 030f 	add.w	r3, r7, #15
 80085e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 f9b9 	bl	8009968 <hci_send_req>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	da01      	bge.n	8008600 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80085fc:	23ff      	movs	r3, #255	; 0xff
 80085fe:	e004      	b.n	800860a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008608:	781b      	ldrb	r3, [r3, #0]
}
 800860a:	4618      	mov	r0, r3
 800860c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008610:	46bd      	mov	sp, r7
 8008612:	bdb0      	pop	{r4, r5, r7, pc}

08008614 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b0cc      	sub	sp, #304	; 0x130
 8008618:	af00      	add	r7, sp, #0
 800861a:	4602      	mov	r2, r0
 800861c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008624:	6019      	str	r1, [r3, #0]
 8008626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800862e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008630:	f107 0310 	add.w	r3, r7, #16
 8008634:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800864a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008652:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008656:	8812      	ldrh	r2, [r2, #0]
 8008658:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800865a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800865e:	3302      	adds	r3, #2
 8008660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008668:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800866c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008670:	6812      	ldr	r2, [r2, #0]
 8008672:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800867a:	3304      	adds	r3, #4
 800867c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008680:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008684:	2218      	movs	r2, #24
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fd81 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 800868e:	233f      	movs	r3, #63	; 0x3f
 8008690:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008694:	2388      	movs	r3, #136	; 0x88
 8008696:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800869a:	f107 0310 	add.w	r3, r7, #16
 800869e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086aa:	f107 030f 	add.w	r3, r7, #15
 80086ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 f952 	bl	8009968 <hci_send_req>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da01      	bge.n	80086ce <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80086ca:	23ff      	movs	r3, #255	; 0xff
 80086cc:	e004      	b.n	80086d8 <aci_gap_pass_key_resp+0xc4>
  return status;
 80086ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086d6:	781b      	ldrb	r3, [r3, #0]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80086e2:	b590      	push	{r4, r7, lr}
 80086e4:	b0cd      	sub	sp, #308	; 0x134
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	4604      	mov	r4, r0
 80086ea:	4608      	mov	r0, r1
 80086ec:	4611      	mov	r1, r2
 80086ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086f2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80086f6:	6013      	str	r3, [r2, #0]
 80086f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008700:	4622      	mov	r2, r4
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008708:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800870c:	4602      	mov	r2, r0
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008714:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008718:	460a      	mov	r2, r1
 800871a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800871c:	f107 0310 	add.w	r3, r7, #16
 8008720:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	2207      	movs	r2, #7
 800872a:	2100      	movs	r1, #0
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fd2f 	bl	800a190 <Osal_MemSet>
  int index_input = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800873c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008740:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874c:	3301      	adds	r3, #1
 800874e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008756:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800875a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008766:	3301      	adds	r3, #1
 8008768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800876c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008770:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008774:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008778:	7812      	ldrb	r2, [r2, #0]
 800877a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800877c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008780:	3301      	adds	r3, #1
 8008782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800878a:	2218      	movs	r2, #24
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fcfe 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008794:	233f      	movs	r3, #63	; 0x3f
 8008796:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800879a:	238a      	movs	r3, #138	; 0x8a
 800879c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087a0:	f107 0310 	add.w	r3, r7, #16
 80087a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80087b0:	f107 0308 	add.w	r3, r7, #8
 80087b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80087b8:	2307      	movs	r3, #7
 80087ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f8cf 	bl	8009968 <hci_send_req>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	da01      	bge.n	80087d4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80087d0:	23ff      	movs	r3, #255	; 0xff
 80087d2:	e02e      	b.n	8008832 <aci_gap_init+0x150>
  if ( resp.Status )
 80087d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <aci_gap_init+0x10c>
    return resp.Status;
 80087e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	e021      	b.n	8008832 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80087ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008810:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008814:	b29a      	uxth	r2, r3
 8008816:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800881a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008824:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008828:	b29a      	uxth	r2, r3
 800882a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800882e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008838:	46bd      	mov	sp, r7
 800883a:	bd90      	pop	{r4, r7, pc}

0800883c <aci_gap_slave_security_req>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_slave_security_req( uint16_t Connection_Handle )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b0cc      	sub	sp, #304	; 0x130
 8008840:	af00      	add	r7, sp, #0
 8008842:	4602      	mov	r2, r0
 8008844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008848:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800884c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 800884e:	f107 0310 	add.w	r3, r7, #16
 8008852:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008870:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008874:	8812      	ldrh	r2, [r2, #0]
 8008876:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008878:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800887c:	3302      	adds	r3, #2
 800887e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008886:	2218      	movs	r2, #24
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fc80 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008890:	233f      	movs	r3, #63	; 0x3f
 8008892:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08d;
 8008896:	238d      	movs	r3, #141	; 0x8d
 8008898:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800889c:	230f      	movs	r3, #15
 800889e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80088a2:	f107 0310 	add.w	r3, r7, #16
 80088a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088b2:	f107 030f 	add.w	r3, r7, #15
 80088b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088ba:	2301      	movs	r3, #1
 80088bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 f84e 	bl	8009968 <hci_send_req>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da01      	bge.n	80088d6 <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 80088d2:	23ff      	movs	r3, #255	; 0xff
 80088d4:	e004      	b.n	80088e0 <aci_gap_slave_security_req+0xa4>
  return status;
 80088d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088de:	781b      	ldrb	r3, [r3, #0]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <aci_gap_update_adv_data>:

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b0cc      	sub	sp, #304	; 0x130
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	4602      	mov	r2, r0
 80088f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fa:	6019      	str	r1, [r3, #0]
 80088fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008900:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008904:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800890e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008912:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008924:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008928:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800893a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893e:	1c58      	adds	r0, r3, #1
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	f001 fc0c 	bl	800a170 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008966:	4413      	add	r3, r2
 8008968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800896c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008970:	2218      	movs	r2, #24
 8008972:	2100      	movs	r1, #0
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fc0b 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 800897a:	233f      	movs	r3, #63	; 0x3f
 800897c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008980:	238e      	movs	r3, #142	; 0x8e
 8008982:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008986:	f107 0310 	add.w	r3, r7, #16
 800898a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800898e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008992:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008996:	f107 030f 	add.w	r3, r7, #15
 800899a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800899e:	2301      	movs	r3, #1
 80089a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089a8:	2100      	movs	r1, #0
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 ffdc 	bl	8009968 <hci_send_req>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	da01      	bge.n	80089ba <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80089b6:	23ff      	movs	r3, #255	; 0xff
 80089b8:	e004      	b.n	80089c4 <aci_gap_update_adv_data+0xda>
  return status;
 80089ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089c2:	781b      	ldrb	r3, [r3, #0]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b088      	sub	sp, #32
 80089d2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089d8:	f107 0308 	add.w	r3, r7, #8
 80089dc:	2218      	movs	r2, #24
 80089de:	2100      	movs	r1, #0
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 fbd5 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089e6:	233f      	movs	r3, #63	; 0x3f
 80089e8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80089ea:	2392      	movs	r3, #146	; 0x92
 80089ec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80089ee:	1dfb      	adds	r3, r7, #7
 80089f0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80089f2:	2301      	movs	r3, #1
 80089f4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	2100      	movs	r1, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 ffb3 	bl	8009968 <hci_send_req>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da01      	bge.n	8008a0c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008a08:	23ff      	movs	r3, #255	; 0xff
 8008a0a:	e000      	b.n	8008a0e <aci_gap_configure_whitelist+0x40>
  return status;
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b088      	sub	sp, #32
 8008a1a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a20:	f107 0308 	add.w	r3, r7, #8
 8008a24:	2218      	movs	r2, #24
 8008a26:	2100      	movs	r1, #0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 fbb1 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a2e:	233f      	movs	r3, #63	; 0x3f
 8008a30:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8008a32:	2394      	movs	r3, #148	; 0x94
 8008a34:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008a36:	1dfb      	adds	r3, r7, #7
 8008a38:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a3e:	f107 0308 	add.w	r3, r7, #8
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 ff8f 	bl	8009968 <hci_send_req>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da01      	bge.n	8008a54 <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008a50:	23ff      	movs	r3, #255	; 0xff
 8008a52:	e000      	b.n	8008a56 <aci_gap_clear_security_db+0x40>
  return status;
 8008a54:	79fb      	ldrb	r3, [r7, #7]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <aci_gap_allow_rebond>:

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b0cc      	sub	sp, #304	; 0x130
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	4602      	mov	r2, r0
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a6e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8008a70:	f107 0310 	add.w	r3, r7, #16
 8008a74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a92:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a96:	8812      	ldrh	r2, [r2, #0]
 8008a98:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008aa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aa8:	2218      	movs	r2, #24
 8008aaa:	2100      	movs	r1, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 fb6f 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ab2:	233f      	movs	r3, #63	; 0x3f
 8008ab4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8008ab8:	2395      	movs	r3, #149	; 0x95
 8008aba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008abe:	f107 0310 	add.w	r3, r7, #16
 8008ac2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ace:	f107 030f 	add.w	r3, r7, #15
 8008ad2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008adc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 ff40 	bl	8009968 <hci_send_req>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da01      	bge.n	8008af2 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8008aee:	23ff      	movs	r3, #255	; 0xff
 8008af0:	e004      	b.n	8008afc <aci_gap_allow_rebond+0x9e>
  return status;
 8008af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008afa:	781b      	ldrb	r3, [r3, #0]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b0cc      	sub	sp, #304	; 0x130
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008b20:	460a      	mov	r2, r1
 8008b22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008b24:	f107 0310 	add.w	r3, r7, #16
 8008b28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b46:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008b4a:	8812      	ldrh	r2, [r2, #0]
 8008b4c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b52:	3302      	adds	r3, #2
 8008b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b60:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b76:	2218      	movs	r2, #24
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 fb08 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b80:	233f      	movs	r3, #63	; 0x3f
 8008b82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008b86:	23a5      	movs	r3, #165	; 0xa5
 8008b88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b8c:	f107 0310 	add.w	r3, r7, #16
 8008b90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b9c:	f107 030f 	add.w	r3, r7, #15
 8008ba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008baa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fed9 	bl	8009968 <hci_send_req>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	da01      	bge.n	8008bc0 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008bbc:	23ff      	movs	r3, #255	; 0xff
 8008bbe:	e004      	b.n	8008bca <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bc8:	781b      	ldrb	r3, [r3, #0]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bde:	f107 0308 	add.w	r3, r7, #8
 8008be2:	2218      	movs	r2, #24
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 fad2 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bec:	233f      	movs	r3, #63	; 0x3f
 8008bee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008bf0:	f240 1301 	movw	r3, #257	; 0x101
 8008bf4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008bf6:	1dfb      	adds	r3, r7, #7
 8008bf8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 feaf 	bl	8009968 <hci_send_req>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da01      	bge.n	8008c14 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008c10:	23ff      	movs	r3, #255	; 0xff
 8008c12:	e000      	b.n	8008c16 <aci_gatt_init+0x42>
  return status;
 8008c14:	79fb      	ldrb	r3, [r7, #7]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008c1e:	b590      	push	{r4, r7, lr}
 8008c20:	b0cf      	sub	sp, #316	; 0x13c
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	4604      	mov	r4, r0
 8008c26:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008c2a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008c2e:	6001      	str	r1, [r0, #0]
 8008c30:	4610      	mov	r0, r2
 8008c32:	4619      	mov	r1, r3
 8008c34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c38:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c44:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008c48:	4602      	mov	r2, r0
 8008c4a:	701a      	strb	r2, [r3, #0]
 8008c4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c50:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008c54:	460a      	mov	r2, r1
 8008c56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008c58:	f107 0310 	add.w	r3, r7, #16
 8008c5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008c60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c64:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d00a      	beq.n	8008c84 <aci_gatt_add_service+0x66>
 8008c6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c72:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d101      	bne.n	8008c80 <aci_gatt_add_service+0x62>
 8008c7c:	2311      	movs	r3, #17
 8008c7e:	e002      	b.n	8008c86 <aci_gatt_add_service+0x68>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <aci_gatt_add_service+0x68>
 8008c84:	2303      	movs	r3, #3
 8008c86:	f107 0210 	add.w	r2, r7, #16
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008c90:	f107 030c 	add.w	r3, r7, #12
 8008c94:	2203      	movs	r2, #3
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 fa79 	bl	800a190 <Osal_MemSet>
  int index_input = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ca8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008cac:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cb8:	3301      	adds	r3, #1
 8008cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cc2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d002      	beq.n	8008cd2 <aci_gatt_add_service+0xb4>
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d004      	beq.n	8008cda <aci_gatt_add_service+0xbc>
 8008cd0:	e007      	b.n	8008ce2 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008cd8:	e005      	b.n	8008ce6 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008cda:	2310      	movs	r3, #16
 8008cdc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008ce0:	e001      	b.n	8008ce6 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008ce2:	2397      	movs	r3, #151	; 0x97
 8008ce4:	e06c      	b.n	8008dc0 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008cea:	1c58      	adds	r0, r3, #1
 8008cec:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008cf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cf4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008cf8:	6819      	ldr	r1, [r3, #0]
 8008cfa:	f001 fa39 	bl	800a170 <Osal_MemCpy>
    index_input += size;
 8008cfe:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008d02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d06:	4413      	add	r3, r2
 8008d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d10:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d14:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008d18:	7812      	ldrb	r2, [r2, #0]
 8008d1a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d2e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d44:	2218      	movs	r2, #24
 8008d46:	2100      	movs	r1, #0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 fa21 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d4e:	233f      	movs	r3, #63	; 0x3f
 8008d50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008d54:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008d58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d5c:	f107 0310 	add.w	r3, r7, #16
 8008d60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008d6c:	f107 030c 	add.w	r3, r7, #12
 8008d70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008d74:	2303      	movs	r3, #3
 8008d76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d7e:	2100      	movs	r1, #0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fdf1 	bl	8009968 <hci_send_req>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da01      	bge.n	8008d90 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008d8c:	23ff      	movs	r3, #255	; 0xff
 8008d8e:	e017      	b.n	8008dc0 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008d90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008d9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	e00a      	b.n	8008dc0 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008daa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008dbc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}

08008dca <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008dca:	b590      	push	{r4, r7, lr}
 8008dcc:	b0d1      	sub	sp, #324	; 0x144
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008dd8:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008ddc:	600a      	str	r2, [r1, #0]
 8008dde:	4619      	mov	r1, r3
 8008de0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008de4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008de8:	4622      	mov	r2, r4
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008df0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008df4:	4602      	mov	r2, r0
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dfc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008e00:	460a      	mov	r2, r1
 8008e02:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008e04:	f107 0318 	add.w	r3, r7, #24
 8008e08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e10:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d00a      	beq.n	8008e30 <aci_gatt_add_char+0x66>
 8008e1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e1e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d101      	bne.n	8008e2c <aci_gatt_add_char+0x62>
 8008e28:	2313      	movs	r3, #19
 8008e2a:	e002      	b.n	8008e32 <aci_gatt_add_char+0x68>
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e000      	b.n	8008e32 <aci_gatt_add_char+0x68>
 8008e30:	2305      	movs	r3, #5
 8008e32:	f107 0218 	add.w	r2, r7, #24
 8008e36:	4413      	add	r3, r2
 8008e38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e3c:	f107 0314 	add.w	r3, r7, #20
 8008e40:	2203      	movs	r2, #3
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 f9a3 	bl	800a190 <Osal_MemSet>
  int index_input = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008e54:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008e58:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008e5c:	8812      	ldrh	r2, [r2, #0]
 8008e5e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e64:	3302      	adds	r3, #2
 8008e66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008e6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008e6e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008e72:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008e84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e88:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d002      	beq.n	8008e98 <aci_gatt_add_char+0xce>
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d004      	beq.n	8008ea0 <aci_gatt_add_char+0xd6>
 8008e96:	e007      	b.n	8008ea8 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008e9e:	e005      	b.n	8008eac <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008ea6:	e001      	b.n	8008eac <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008ea8:	2397      	movs	r3, #151	; 0x97
 8008eaa:	e091      	b.n	8008fd0 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008eac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008eb0:	1cd8      	adds	r0, r3, #3
 8008eb2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008eb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008eba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008ebe:	6819      	ldr	r1, [r3, #0]
 8008ec0:	f001 f956 	bl	800a170 <Osal_MemCpy>
    index_input += size;
 8008ec4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008ec8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008ecc:	4413      	add	r3, r2
 8008ece:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008ed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ed6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008eda:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008ede:	8812      	ldrh	r2, [r2, #0]
 8008ee0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008ee2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ef0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008ef4:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008ef6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008efa:	3301      	adds	r3, #1
 8008efc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008f00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f04:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008f08:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008f0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f0e:	3301      	adds	r3, #1
 8008f10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f18:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008f1c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f22:	3301      	adds	r3, #1
 8008f24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008f28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f2c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008f30:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008f32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f36:	3301      	adds	r3, #1
 8008f38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008f3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f40:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008f44:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008f46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008f54:	2218      	movs	r2, #24
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 f919 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f5e:	233f      	movs	r3, #63	; 0x3f
 8008f60:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008f64:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008f68:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008f6c:	f107 0318 	add.w	r3, r7, #24
 8008f70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008f74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008f7c:	f107 0314 	add.w	r3, r7, #20
 8008f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008f84:	2303      	movs	r3, #3
 8008f86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fce9 	bl	8009968 <hci_send_req>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	da01      	bge.n	8008fa0 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008f9c:	23ff      	movs	r3, #255	; 0xff
 8008f9e:	e017      	b.n	8008fd0 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008fa0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008fae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	e00a      	b.n	8008fd0 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008fba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008fcc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd90      	pop	{r4, r7, pc}

08008fda <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008fda:	b5b0      	push	{r4, r5, r7, lr}
 8008fdc:	b0cc      	sub	sp, #304	; 0x130
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009004:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009008:	4602      	mov	r2, r0
 800900a:	701a      	strb	r2, [r3, #0]
 800900c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009010:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009014:	460a      	mov	r2, r1
 8009016:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009018:	f107 0310 	add.w	r3, r7, #16
 800901c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009024:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009036:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800903a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800903e:	8812      	ldrh	r2, [r2, #0]
 8009040:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009046:	3302      	adds	r3, #2
 8009048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800904c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009050:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009054:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009058:	8812      	ldrh	r2, [r2, #0]
 800905a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800905c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009060:	3302      	adds	r3, #2
 8009062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800906e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009072:	7812      	ldrb	r2, [r2, #0]
 8009074:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800907a:	3301      	adds	r3, #1
 800907c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009084:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009088:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800908c:	7812      	ldrb	r2, [r2, #0]
 800908e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009094:	3301      	adds	r3, #1
 8009096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800909a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909e:	1d98      	adds	r0, r3, #6
 80090a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80090b0:	f001 f85e 	bl	800a170 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80090b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80090c2:	4413      	add	r3, r2
 80090c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090cc:	2218      	movs	r2, #24
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f85d 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090d6:	233f      	movs	r3, #63	; 0x3f
 80090d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80090dc:	f44f 7383 	mov.w	r3, #262	; 0x106
 80090e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090f4:	f107 030f 	add.w	r3, r7, #15
 80090f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009106:	2100      	movs	r1, #0
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fc2d 	bl	8009968 <hci_send_req>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	da01      	bge.n	8009118 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009114:	23ff      	movs	r3, #255	; 0xff
 8009116:	e004      	b.n	8009122 <aci_gatt_update_char_value+0x148>
  return status;
 8009118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800911c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009120:	781b      	ldrb	r3, [r3, #0]
}
 8009122:	4618      	mov	r0, r3
 8009124:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009128:	46bd      	mov	sp, r7
 800912a:	bdb0      	pop	{r4, r5, r7, pc}

0800912c <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800912c:	b5b0      	push	{r4, r5, r7, lr}
 800912e:	b0cc      	sub	sp, #304	; 0x130
 8009130:	af00      	add	r7, sp, #0
 8009132:	4605      	mov	r5, r0
 8009134:	460c      	mov	r4, r1
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009142:	462a      	mov	r2, r5
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800914e:	4622      	mov	r2, r4
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009156:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800915a:	4602      	mov	r2, r0
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009162:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009166:	460a      	mov	r2, r1
 8009168:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800916a:	f107 0310 	add.w	r3, r7, #16
 800916e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009176:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009188:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800918c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009190:	8812      	ldrh	r2, [r2, #0]
 8009192:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009194:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009198:	3302      	adds	r3, #2
 800919a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80091aa:	8812      	ldrh	r2, [r2, #0]
 80091ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80091ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091b2:	3302      	adds	r3, #2
 80091b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 80091b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091c0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80091c4:	7812      	ldrb	r2, [r2, #0]
 80091c6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80091c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091cc:	3301      	adds	r3, #1
 80091ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 80091d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091da:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80091e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091e6:	3301      	adds	r3, #1
 80091e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80091ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80091f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80091f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091fa:	3301      	adds	r3, #1
 80091fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8009200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009204:	3307      	adds	r3, #7
 8009206:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800920a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800920e:	4618      	mov	r0, r3
 8009210:	f000 ffae 	bl	800a170 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009214:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8009218:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800921c:	4413      	add	r3, r2
 800921e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009226:	2218      	movs	r2, #24
 8009228:	2100      	movs	r1, #0
 800922a:	4618      	mov	r0, r3
 800922c:	f000 ffb0 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009230:	233f      	movs	r3, #63	; 0x3f
 8009232:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8009236:	f44f 7393 	mov.w	r3, #294	; 0x126
 800923a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800923e:	f107 0310 	add.w	r3, r7, #16
 8009242:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800924a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800924e:	f107 030f 	add.w	r3, r7, #15
 8009252:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009256:	2301      	movs	r3, #1
 8009258:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800925c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fb80 	bl	8009968 <hci_send_req>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	da01      	bge.n	8009272 <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800926e:	23ff      	movs	r3, #255	; 0xff
 8009270:	e004      	b.n	800927c <aci_gatt_write_resp+0x150>
  return status;
 8009272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009276:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800927a:	781b      	ldrb	r3, [r3, #0]
}
 800927c:	4618      	mov	r0, r3
 800927e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009282:	46bd      	mov	sp, r7
 8009284:	bdb0      	pop	{r4, r5, r7, pc}

08009286 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b0cc      	sub	sp, #304	; 0x130
 800928a:	af00      	add	r7, sp, #0
 800928c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800929e:	4602      	mov	r2, r0
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80092aa:	460a      	mov	r2, r1
 80092ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092be:	2200      	movs	r2, #0
 80092c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80092c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092dc:	3301      	adds	r3, #1
 80092de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80092e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092ea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80092f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f6:	3301      	adds	r3, #1
 80092f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80092fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009300:	1c98      	adds	r0, r3, #2
 8009302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009306:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009314:	6819      	ldr	r1, [r3, #0]
 8009316:	f000 ff2b 	bl	800a170 <Osal_MemCpy>
  index_input += Length;
 800931a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009328:	4413      	add	r3, r2
 800932a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800932e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009332:	2218      	movs	r2, #24
 8009334:	2100      	movs	r1, #0
 8009336:	4618      	mov	r0, r3
 8009338:	f000 ff2a 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 800933c:	233f      	movs	r3, #63	; 0x3f
 800933e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009342:	230c      	movs	r3, #12
 8009344:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009348:	f107 0310 	add.w	r3, r7, #16
 800934c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009354:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009358:	f107 030f 	add.w	r3, r7, #15
 800935c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009360:	2301      	movs	r3, #1
 8009362:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009366:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fafb 	bl	8009968 <hci_send_req>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	da01      	bge.n	800937c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009378:	23ff      	movs	r3, #255	; 0xff
 800937a:	e004      	b.n	8009386 <aci_hal_write_config_data+0x100>
  return status;
 800937c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009380:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009384:	781b      	ldrb	r3, [r3, #0]
}
 8009386:	4618      	mov	r0, r3
 8009388:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b0cc      	sub	sp, #304	; 0x130
 8009394:	af00      	add	r7, sp, #0
 8009396:	4602      	mov	r2, r0
 8009398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093aa:	460a      	mov	r2, r1
 80093ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80093ae:	f107 0310 	add.w	r3, r7, #16
 80093b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80093c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093dc:	3301      	adds	r3, #1
 80093de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80093e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093ea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80093f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093f6:	3301      	adds	r3, #1
 80093f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009400:	2218      	movs	r2, #24
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fec3 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x3f;
 800940a:	233f      	movs	r3, #63	; 0x3f
 800940c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009410:	230f      	movs	r3, #15
 8009412:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009416:	f107 0310 	add.w	r3, r7, #16
 800941a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800941e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009426:	f107 030f 	add.w	r3, r7, #15
 800942a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800942e:	2301      	movs	r3, #1
 8009430:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009434:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fa94 	bl	8009968 <hci_send_req>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	da01      	bge.n	800944a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009446:	23ff      	movs	r3, #255	; 0xff
 8009448:	e004      	b.n	8009454 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800944a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009452:	781b      	ldrb	r3, [r3, #0]
}
 8009454:	4618      	mov	r0, r3
 8009456:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b088      	sub	sp, #32
 8009462:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009468:	f107 0308 	add.w	r3, r7, #8
 800946c:	2218      	movs	r2, #24
 800946e:	2100      	movs	r1, #0
 8009470:	4618      	mov	r0, r3
 8009472:	f000 fe8d 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x03;
 8009476:	2303      	movs	r3, #3
 8009478:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800947a:	2303      	movs	r3, #3
 800947c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800947e:	1dfb      	adds	r3, r7, #7
 8009480:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009482:	2301      	movs	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009486:	f107 0308 	add.w	r3, r7, #8
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fa6b 	bl	8009968 <hci_send_req>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	da01      	bge.n	800949c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009498:	23ff      	movs	r3, #255	; 0xff
 800949a:	e000      	b.n	800949e <hci_reset+0x40>
  return status;
 800949c:	79fb      	ldrb	r3, [r7, #7]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b0ce      	sub	sp, #312	; 0x138
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b4:	6019      	str	r1, [r3, #0]
 80094b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094c4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094c8:	4602      	mov	r2, r0
 80094ca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80094cc:	f107 0318 	add.w	r3, r7, #24
 80094d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80094d4:	f107 0310 	add.w	r3, r7, #16
 80094d8:	2205      	movs	r2, #5
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fe57 	bl	800a190 <Osal_MemSet>
  int index_input = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80094e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094f0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80094f4:	8812      	ldrh	r2, [r2, #0]
 80094f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80094f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094fc:	3302      	adds	r3, #2
 80094fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009502:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009506:	2218      	movs	r2, #24
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fe40 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x08;
 8009510:	2308      	movs	r3, #8
 8009512:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009516:	2330      	movs	r3, #48	; 0x30
 8009518:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800951c:	f107 0318 	add.w	r3, r7, #24
 8009520:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009528:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800952c:	f107 0310 	add.w	r3, r7, #16
 8009530:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009534:	2305      	movs	r3, #5
 8009536:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800953a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fa11 	bl	8009968 <hci_send_req>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	da01      	bge.n	8009550 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800954c:	23ff      	movs	r3, #255	; 0xff
 800954e:	e023      	b.n	8009598 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8009550:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009554:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <hci_le_read_phy+0xc4>
    return resp.Status;
 800955e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009562:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	e016      	b.n	8009598 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800956a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800956e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009572:	78da      	ldrb	r2, [r3, #3]
 8009574:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8009580:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009584:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009588:	791a      	ldrb	r2, [r3, #4]
 800958a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800958e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80095a2:	b590      	push	{r4, r7, lr}
 80095a4:	b0cd      	sub	sp, #308	; 0x134
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	4604      	mov	r4, r0
 80095aa:	4608      	mov	r0, r1
 80095ac:	4611      	mov	r1, r2
 80095ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80095b6:	4622      	mov	r2, r4
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095c2:	4602      	mov	r2, r0
 80095c4:	701a      	strb	r2, [r3, #0]
 80095c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ca:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80095ce:	460a      	mov	r2, r1
 80095d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80095d2:	f107 0310 	add.w	r3, r7, #16
 80095d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80095ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80095f8:	7812      	ldrb	r2, [r2, #0]
 80095fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009600:	3301      	adds	r3, #1
 8009602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800960e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800961a:	3301      	adds	r3, #1
 800961c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009624:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009628:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800962c:	7812      	ldrb	r2, [r2, #0]
 800962e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009634:	3301      	adds	r3, #1
 8009636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800963a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800963e:	2218      	movs	r2, #24
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fda4 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x08;
 8009648:	2308      	movs	r3, #8
 800964a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800964e:	2331      	movs	r3, #49	; 0x31
 8009650:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009654:	f107 0310 	add.w	r3, r7, #16
 8009658:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800965c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009660:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009664:	f107 030f 	add.w	r3, r7, #15
 8009668:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800966c:	2301      	movs	r3, #1
 800966e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009676:	2100      	movs	r1, #0
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f975 	bl	8009968 <hci_send_req>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	da01      	bge.n	8009688 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009684:	23ff      	movs	r3, #255	; 0xff
 8009686:	e004      	b.n	8009692 <hci_le_set_default_phy+0xf0>
  return status;
 8009688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009690:	781b      	ldrb	r3, [r3, #0]
}
 8009692:	4618      	mov	r0, r3
 8009694:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009698:	46bd      	mov	sp, r7
 800969a:	bd90      	pop	{r4, r7, pc}

0800969c <hci_le_set_phy>:
tBleStatus hci_le_set_phy( uint16_t Connection_Handle,
                           uint8_t ALL_PHYS,
                           uint8_t TX_PHYS,
                           uint8_t RX_PHYS,
                           uint16_t PHY_options )
{
 800969c:	b5b0      	push	{r4, r5, r7, lr}
 800969e:	b0cc      	sub	sp, #304	; 0x130
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4605      	mov	r5, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096b2:	462a      	mov	r2, r5
 80096b4:	801a      	strh	r2, [r3, #0]
 80096b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80096be:	4622      	mov	r2, r4
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096ca:	4602      	mov	r2, r0
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80096d6:	460a      	mov	r2, r1
 80096d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_phy_cp0 *cp0 = (hci_le_set_phy_cp0*)(cmd_buffer);
 80096da:	f107 0310 	add.w	r3, r7, #16
 80096de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80096f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096fc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009700:	8812      	ldrh	r2, [r2, #0]
 8009702:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009708:	3302      	adds	r3, #2
 800970a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800970e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009712:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009716:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800971e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009722:	3301      	adds	r3, #1
 8009724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009730:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009734:	7812      	ldrb	r2, [r2, #0]
 8009736:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800973c:	3301      	adds	r3, #1
 800973e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009746:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800974a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009756:	3301      	adds	r3, #1
 8009758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PHY_options = PHY_options;
 800975c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009760:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009764:	f8a3 2005 	strh.w	r2, [r3, #5]
  index_input += 2;
 8009768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800976c:	3302      	adds	r3, #2
 800976e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009776:	2218      	movs	r2, #24
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fd08 	bl	800a190 <Osal_MemSet>
  rq.ogf = 0x08;
 8009780:	2308      	movs	r3, #8
 8009782:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x032;
 8009786:	2332      	movs	r3, #50	; 0x32
 8009788:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800978c:	230f      	movs	r3, #15
 800978e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009792:	f107 0310 	add.w	r3, r7, #16
 8009796:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800979a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800979e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097a2:	f107 030f 	add.w	r3, r7, #15
 80097a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097aa:	2301      	movs	r3, #1
 80097ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f8d6 	bl	8009968 <hci_send_req>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da01      	bge.n	80097c6 <hci_le_set_phy+0x12a>
    return BLE_STATUS_TIMEOUT;
 80097c2:	23ff      	movs	r3, #255	; 0xff
 80097c4:	e004      	b.n	80097d0 <hci_le_set_phy+0x134>
  return status;
 80097c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097ce:	781b      	ldrb	r3, [r3, #0]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080097dc <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 80097e2:	2204      	movs	r2, #4
 80097e4:	2100      	movs	r1, #0
 80097e6:	4816      	ldr	r0, [pc, #88]	; (8009840 <DIS_Init+0x64>)
 80097e8:	f001 fe36 	bl	800b458 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 80097ec:	f641 030a 	movw	r3, #6154	; 0x180a
 80097f0:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 80097f2:	1d39      	adds	r1, r7, #4
 80097f4:	4b12      	ldr	r3, [pc, #72]	; (8009840 <DIS_Init+0x64>)
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	2303      	movs	r3, #3
 80097fa:	2201      	movs	r2, #1
 80097fc:	2001      	movs	r0, #1
 80097fe:	f7ff fa0e 	bl	8008c1e <aci_gatt_add_service>
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8009806:	f642 2329 	movw	r3, #10793	; 0x2a29
 800980a:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 800980c:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <DIS_Init+0x64>)
 800980e:	8818      	ldrh	r0, [r3, #0]
 8009810:	1d3a      	adds	r2, r7, #4
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <DIS_Init+0x68>)
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	2301      	movs	r3, #1
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	230a      	movs	r3, #10
 800981c:	9303      	str	r3, [sp, #12]
 800981e:	2300      	movs	r3, #0
 8009820:	9302      	str	r3, [sp, #8]
 8009822:	2300      	movs	r3, #0
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	2302      	movs	r3, #2
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	2320      	movs	r3, #32
 800982c:	2101      	movs	r1, #1
 800982e:	f7ff facc 	bl	8008dca <aci_gatt_add_char>
 8009832:	4603      	mov	r3, r0
 8009834:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8009836:	bf00      	nop
}
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000038 	.word	0x20000038
 8009844:	2000003a 	.word	0x2000003a

08009848 <DIS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval None
 */
tBleStatus DIS_UpdateChar(uint16_t UUID, DIS_Data_t *pPData)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af02      	add	r7, sp, #8
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value;

  switch(UUID)
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	f642 2229 	movw	r2, #10793	; 0x2a29
 800985a:	4293      	cmp	r3, r2
 800985c:	d10f      	bne.n	800987e <DIS_UpdateChar+0x36>
  {
#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
    case MANUFACTURER_NAME_UUID:
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <DIS_UpdateChar+0x48>)
 8009860:	8818      	ldrh	r0, [r3, #0]
 8009862:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <DIS_UpdateChar+0x48>)
 8009864:	8859      	ldrh	r1, [r3, #2]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	791a      	ldrb	r2, [r3, #4]
                                                DIS_Context.ManufacturerNameStringCharHdle,
                                                0,
                                                pPData->Length,
                                                (uint8_t *)pPData->pPayload);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	2200      	movs	r2, #0
 8009874:	f7ff fbb1 	bl	8008fda <aci_gatt_update_char_value>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
      break;
 800987c:	e002      	b.n	8009884 <DIS_UpdateChar+0x3c>
                                                (uint8_t *)pPData->pPayload);
      break;
#endif

    default:
      return_value = BLE_STATUS_ERROR;
 800987e:	2397      	movs	r3, #151	; 0x97
 8009880:	73fb      	strb	r3, [r7, #15]
      break;
 8009882:	bf00      	nop
  }

  return return_value;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}/* end DIS_UpdateChar() */
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000038 	.word	0x20000038

08009894 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	4a08      	ldr	r2, [pc, #32]	; (80098c4 <hci_init+0x30>)
 80098a4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80098a6:	4a08      	ldr	r2, [pc, #32]	; (80098c8 <hci_init+0x34>)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80098ac:	4806      	ldr	r0, [pc, #24]	; (80098c8 <hci_init+0x34>)
 80098ae:	f000 f973 	bl	8009b98 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f8d4 	bl	8009a64 <TlInit>

  return;
 80098bc:	bf00      	nop
}
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000600 	.word	0x20000600
 80098c8:	200005d8 	.word	0x200005d8

080098cc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80098d2:	4822      	ldr	r0, [pc, #136]	; (800995c <hci_user_evt_proc+0x90>)
 80098d4:	f000 feca 	bl	800a66c <LST_is_empty>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d12b      	bne.n	8009936 <hci_user_evt_proc+0x6a>
 80098de:	4b20      	ldr	r3, [pc, #128]	; (8009960 <hci_user_evt_proc+0x94>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d027      	beq.n	8009936 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80098e6:	f107 030c 	add.w	r3, r7, #12
 80098ea:	4619      	mov	r1, r3
 80098ec:	481b      	ldr	r0, [pc, #108]	; (800995c <hci_user_evt_proc+0x90>)
 80098ee:	f000 ff4c 	bl	800a78a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80098f2:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <hci_user_evt_proc+0x98>)
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80098fe:	2301      	movs	r3, #1
 8009900:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <hci_user_evt_proc+0x98>)
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	1d3a      	adds	r2, r7, #4
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800990c:	793a      	ldrb	r2, [r7, #4]
 800990e:	4b14      	ldr	r3, [pc, #80]	; (8009960 <hci_user_evt_proc+0x94>)
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e002      	b.n	800991a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <hci_user_evt_proc+0x94>)
 8009916:	2201      	movs	r2, #1
 8009918:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800991a:	4b11      	ldr	r3, [pc, #68]	; (8009960 <hci_user_evt_proc+0x94>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4618      	mov	r0, r3
 8009926:	f001 f9eb 	bl	800ad00 <TL_MM_EvtDone>
 800992a:	e004      	b.n	8009936 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4619      	mov	r1, r3
 8009930:	480a      	ldr	r0, [pc, #40]	; (800995c <hci_user_evt_proc+0x90>)
 8009932:	f000 febd 	bl	800a6b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009936:	4809      	ldr	r0, [pc, #36]	; (800995c <hci_user_evt_proc+0x90>)
 8009938:	f000 fe98 	bl	800a66c <LST_is_empty>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d107      	bne.n	8009952 <hci_user_evt_proc+0x86>
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <hci_user_evt_proc+0x94>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800994a:	4804      	ldr	r0, [pc, #16]	; (800995c <hci_user_evt_proc+0x90>)
 800994c:	f7f9 f83f 	bl	80029ce <hci_notify_asynch_evt>
  }


  return;
 8009950:	bf00      	nop
 8009952:	bf00      	nop
}
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000040 	.word	0x20000040
 8009960:	2000004c 	.word	0x2000004c
 8009964:	200005d8 	.word	0x200005d8

08009968 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009974:	2000      	movs	r0, #0
 8009976:	f000 f8cb 	bl	8009b10 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800997a:	2300      	movs	r3, #0
 800997c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	885b      	ldrh	r3, [r3, #2]
 8009982:	b21b      	sxth	r3, r3
 8009984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009988:	b21a      	sxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	029b      	lsls	r3, r3, #10
 8009990:	b21b      	sxth	r3, r3
 8009992:	4313      	orrs	r3, r2
 8009994:	b21b      	sxth	r3, r3
 8009996:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	b2d9      	uxtb	r1, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	8bbb      	ldrh	r3, [r7, #28]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 f88d 	bl	8009ac4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80099aa:	e04e      	b.n	8009a4a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80099ac:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80099b0:	f7f9 f824 	bl	80029fc <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80099b4:	e043      	b.n	8009a3e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80099b6:	f107 030c 	add.w	r3, r7, #12
 80099ba:	4619      	mov	r1, r3
 80099bc:	4828      	ldr	r0, [pc, #160]	; (8009a60 <hci_send_req+0xf8>)
 80099be:	f000 fee4 	bl	800a78a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	7a5b      	ldrb	r3, [r3, #9]
 80099c6:	2b0f      	cmp	r3, #15
 80099c8:	d114      	bne.n	80099f4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	330b      	adds	r3, #11
 80099ce:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	885b      	ldrh	r3, [r3, #2]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	8bba      	ldrh	r2, [r7, #28]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d104      	bne.n	80099e6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	7812      	ldrb	r2, [r2, #0]
 80099e4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d027      	beq.n	8009a3e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80099ee:	2301      	movs	r3, #1
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e024      	b.n	8009a3e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	330b      	adds	r3, #11
 80099f8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	8bba      	ldrh	r2, [r7, #28]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d114      	bne.n	8009a32 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	7a9b      	ldrb	r3, [r3, #10]
 8009a0c:	3b03      	subs	r3, #3
 8009a0e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695a      	ldr	r2, [r3, #20]
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	bfa8      	it	ge
 8009a1a:	461a      	movge	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6918      	ldr	r0, [r3, #16]
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	1cd9      	adds	r1, r3, #3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f001 fd05 	bl	800b43c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009a3e:	4808      	ldr	r0, [pc, #32]	; (8009a60 <hci_send_req+0xf8>)
 8009a40:	f000 fe14 	bl	800a66c <LST_is_empty>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0b5      	beq.n	80099b6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009a4a:	7ffb      	ldrb	r3, [r7, #31]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0ad      	beq.n	80099ac <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009a50:	2001      	movs	r0, #1
 8009a52:	f000 f85d 	bl	8009b10 <NotifyCmdStatus>

  return 0;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	200005f8 	.word	0x200005f8

08009a64 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009a6c:	480f      	ldr	r0, [pc, #60]	; (8009aac <TlInit+0x48>)
 8009a6e:	f000 fded 	bl	800a64c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009a72:	4a0f      	ldr	r2, [pc, #60]	; (8009ab0 <TlInit+0x4c>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009a78:	480e      	ldr	r0, [pc, #56]	; (8009ab4 <TlInit+0x50>)
 8009a7a:	f000 fde7 	bl	800a64c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <TlInit+0x54>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009a84:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <TlInit+0x58>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <TlInit+0x5c>)
 8009a92:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009a94:	4b09      	ldr	r3, [pc, #36]	; (8009abc <TlInit+0x58>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f107 0208 	add.w	r2, r7, #8
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4798      	blx	r3
  }

  return;
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
}
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200005f8 	.word	0x200005f8
 8009ab0:	20000048 	.word	0x20000048
 8009ab4:	20000040 	.word	0x20000040
 8009ab8:	2000004c 	.word	0x2000004c
 8009abc:	200005d8 	.word	0x200005d8
 8009ac0:	08009b51 	.word	0x08009b51

08009ac4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	603a      	str	r2, [r7, #0]
 8009ace:	80fb      	strh	r3, [r7, #6]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009ad4:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <SendCmd+0x44>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009ade:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <SendCmd+0x44>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	797a      	ldrb	r2, [r7, #5]
 8009ae4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009ae6:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <SendCmd+0x44>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	330c      	adds	r3, #12
 8009aec:	797a      	ldrb	r2, [r7, #5]
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 fca3 	bl	800b43c <memcpy>

  hciContext.io.Send(0,0);
 8009af6:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <SendCmd+0x48>)
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2100      	movs	r1, #0
 8009afc:	2000      	movs	r0, #0
 8009afe:	4798      	blx	r3

  return;
 8009b00:	bf00      	nop
}
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20000048 	.word	0x20000048
 8009b0c:	200005d8 	.word	0x200005d8

08009b10 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d108      	bne.n	8009b32 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <NotifyCmdStatus+0x3c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00d      	beq.n	8009b44 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <NotifyCmdStatus+0x3c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009b30:	e008      	b.n	8009b44 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009b32:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <NotifyCmdStatus+0x3c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009b3a:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <NotifyCmdStatus+0x3c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2001      	movs	r0, #1
 8009b40:	4798      	blx	r3
  return;
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
}
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000600 	.word	0x20000600

08009b50 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7a5b      	ldrb	r3, [r3, #9]
 8009b5c:	2b0f      	cmp	r3, #15
 8009b5e:	d003      	beq.n	8009b68 <TlEvtReceived+0x18>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	7a5b      	ldrb	r3, [r3, #9]
 8009b64:	2b0e      	cmp	r3, #14
 8009b66:	d107      	bne.n	8009b78 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4809      	ldr	r0, [pc, #36]	; (8009b90 <TlEvtReceived+0x40>)
 8009b6c:	f000 fdc6 	bl	800a6fc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009b70:	2000      	movs	r0, #0
 8009b72:	f7f8 ff38 	bl	80029e6 <hci_cmd_resp_release>
 8009b76:	e006      	b.n	8009b86 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4806      	ldr	r0, [pc, #24]	; (8009b94 <TlEvtReceived+0x44>)
 8009b7c:	f000 fdbe 	bl	800a6fc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009b80:	4804      	ldr	r0, [pc, #16]	; (8009b94 <TlEvtReceived+0x44>)
 8009b82:	f7f8 ff24 	bl	80029ce <hci_notify_asynch_evt>
  }

  return;
 8009b86:	bf00      	nop
}
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200005f8 	.word	0x200005f8
 8009b94:	20000040 	.word	0x20000040

08009b98 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a05      	ldr	r2, [pc, #20]	; (8009bb8 <hci_register_io_bus+0x20>)
 8009ba4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a04      	ldr	r2, [pc, #16]	; (8009bbc <hci_register_io_bus+0x24>)
 8009baa:	611a      	str	r2, [r3, #16]

  return;
 8009bac:	bf00      	nop
}
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	0800aa79 	.word	0x0800aa79
 8009bbc:	0800aae1 	.word	0x0800aae1

08009bc0 <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	; 0x38
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2bff      	cmp	r3, #255	; 0xff
 8009bda:	d174      	bne.n	8009cc6 <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	3302      	adds	r3, #2
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	f640 4201 	movw	r2, #3073	; 0xc01
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d03f      	beq.n	8009c70 <HeartRate_Event_Handler+0xb0>
 8009bf0:	f640 4213 	movw	r2, #3091	; 0xc13
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d160      	bne.n	8009cba <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	3302      	adds	r3, #2
 8009bfc:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	4b33      	ldr	r3, [pc, #204]	; (8009cd4 <HeartRate_Event_Handler+0x114>)
 8009c08:	88db      	ldrh	r3, [r3, #6]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d156      	bne.n	8009cbe <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009c10:	2301      	movs	r3, #1
 8009c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	795b      	ldrb	r3, [r3, #5]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d117      	bne.n	8009c4e <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	b298      	uxth	r0, r3
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	885b      	ldrh	r3, [r3, #2]
 8009c28:	b299      	uxth	r1, r3
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 8009c2e:	6a3a      	ldr	r2, [r7, #32]
 8009c30:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009c32:	9201      	str	r2, [sp, #4]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2300      	movs	r3, #0
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f7ff fa77 	bl	800912c <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8009c42:	f107 030c 	add.w	r3, r7, #12
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7f8 ff2e 	bl	8002aa8 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 8009c4c:	e037      	b.n	8009cbe <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b298      	uxth	r0, r3
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	885b      	ldrh	r3, [r3, #2]
 8009c58:	b299      	uxth	r1, r3
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 8009c5e:	6a3a      	ldr	r2, [r7, #32]
 8009c60:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009c62:	9201      	str	r2, [sp, #4]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2380      	movs	r3, #128	; 0x80
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f7ff fa5f 	bl	800912c <aci_gatt_write_resp>
        break;
 8009c6e:	e026      	b.n	8009cbe <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	3302      	adds	r3, #2
 8009c74:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <HeartRate_Event_Handler+0x114>)
 8009c80:	885b      	ldrh	r3, [r3, #2]
 8009c82:	3302      	adds	r3, #2
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d11c      	bne.n	8009cc2 <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	7a1b      	ldrb	r3, [r3, #8]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8009c9e:	f107 030c 	add.w	r3, r7, #12
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f8 ff00 	bl	8002aa8 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 8009ca8:	e00b      	b.n	8009cc2 <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 8009caa:	2302      	movs	r3, #2
 8009cac:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7f8 fef8 	bl	8002aa8 <HRS_Notification>
        break;
 8009cb8:	e003      	b.n	8009cc2 <HeartRate_Event_Handler+0x102>

        default:
          break;
 8009cba:	bf00      	nop
 8009cbc:	e004      	b.n	8009cc8 <HeartRate_Event_Handler+0x108>
        break;
 8009cbe:	bf00      	nop
 8009cc0:	e002      	b.n	8009cc8 <HeartRate_Event_Handler+0x108>
        break;
 8009cc2:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009cc4:	e000      	b.n	8009cc8 <HeartRate_Event_Handler+0x108>

    default:
      break;
 8009cc6:	bf00      	nop
  }

  return(return_value);
 8009cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3730      	adds	r7, #48	; 0x30
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20000050 	.word	0x20000050

08009cd8 <Update_Char_BodySensorLocation>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_BodySensorLocation(HRS_BodySensorLocation_t *pBodySensorLocationValue)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	6078      	str	r0, [r7, #4]
  tBleStatus return_value = BLE_STATUS_SUCCESS;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8009ce4:	4b08      	ldr	r3, [pc, #32]	; (8009d08 <Update_Char_BodySensorLocation+0x30>)
 8009ce6:	8818      	ldrh	r0, [r3, #0]
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <Update_Char_BodySensorLocation+0x30>)
 8009cea:	8899      	ldrh	r1, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7ff f971 	bl	8008fda <aci_gatt_update_char_value>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
                                            HRS_Context.BodySensorLocationCharHdle,
                                            0, /* charValOffset */
                                            1, /* charValueLen */
                                            (uint8_t *) pBodySensorLocationValue);
  return return_value;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_BodySensorLocation() */
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000050 	.word	0x20000050

08009d0c <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HRS_MeasVal_t *pMeasurement )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 8009d14:	2300      	movs	r3, #0
 8009d16:	753b      	strb	r3, [r7, #20]
  uint8_t hrm_char_length;

  /**
   * Flags update
   */
  ahrm_value[0] = (uint8_t)pMeasurement->Flags;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	7a5b      	ldrb	r3, [r3, #9]
 8009d1c:	733b      	strb	r3, [r7, #12]
  hrm_char_length = 1;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	75fb      	strb	r3, [r7, #23]

  /**
   *  Heart Rate Measurement Value
   */
  if ( (pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16 )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	7a5b      	ldrb	r3, [r3, #9]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d018      	beq.n	8009d60 <Update_Char_Measurement+0x54>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue & 0xFF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	881a      	ldrh	r2, [r3, #0]
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	3318      	adds	r3, #24
 8009d38:	443b      	add	r3, r7
 8009d3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
 8009d40:	3301      	adds	r3, #1
 8009d42:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue >> 8);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	0a1b      	lsrs	r3, r3, #8
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	3318      	adds	r3, #24
 8009d52:	443b      	add	r3, r7
 8009d54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
 8009d5e:	e00a      	b.n	8009d76 <Update_Char_Measurement+0x6a>
  }
  else
  {
    ahrm_value[hrm_char_length] = (uint8_t)pMeasurement->MeasurementValue;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	881a      	ldrh	r2, [r3, #0]
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	3318      	adds	r3, #24
 8009d6a:	443b      	add	r3, r7
 8009d6c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	3301      	adds	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  /**
   *  Energy Expended
   */
  if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7a5b      	ldrb	r3, [r3, #9]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d017      	beq.n	8009db2 <Update_Char_Measurement+0xa6>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended & 0xFF);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	885a      	ldrh	r2, [r3, #2]
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	b2d2      	uxtb	r2, r2
 8009d8a:	3318      	adds	r3, #24
 8009d8c:	443b      	add	r3, r7
 8009d8e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	3301      	adds	r3, #1
 8009d96:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended >> 8);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	885b      	ldrh	r3, [r3, #2]
 8009d9c:	0a1b      	lsrs	r3, r3, #8
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	3318      	adds	r3, #24
 8009da6:	443b      	add	r3, r7
 8009da8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	3301      	adds	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  /**
   *  RR Interval Values
   */
  if ((pMeasurement->Flags) &  HRS_HRM_RR_INTERVAL_PRESENT)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7a5b      	ldrb	r3, [r3, #9]
 8009db6:	f003 0310 	and.w	r3, r3, #16
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d048      	beq.n	8009e50 <Update_Char_Measurement+0x144>
  {
    uint8_t index;
    uint8_t rr_interval_number;

    if((pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	7a5b      	ldrb	r3, [r3, #9]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00d      	beq.n	8009de6 <Update_Char_Measurement+0xda>
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7a5b      	ldrb	r3, [r3, #9]
 8009dce:	f003 0308 	and.w	r3, r3, #8
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <Update_Char_Measurement+0xd2>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-2);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7a1b      	ldrb	r3, [r3, #8]
 8009dda:	757b      	strb	r3, [r7, #21]
 8009ddc:	e010      	b.n	8009e00 <Update_Char_Measurement+0xf4>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	7a1b      	ldrb	r3, [r3, #8]
 8009de2:	757b      	strb	r3, [r7, #21]
 8009de4:	e00c      	b.n	8009e00 <Update_Char_Measurement+0xf4>
#endif
    }
    else
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7a5b      	ldrb	r3, [r3, #9]
 8009dea:	f003 0308 	and.w	r3, r3, #8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <Update_Char_Measurement+0xee>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7a1b      	ldrb	r3, [r3, #8]
 8009df6:	757b      	strb	r3, [r7, #21]
 8009df8:	e002      	b.n	8009e00 <Update_Char_Measurement+0xf4>
        }
      }
      else
      {
        rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	7a1b      	ldrb	r3, [r3, #8]
 8009dfe:	757b      	strb	r3, [r7, #21]
#else /**< (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0) */
      rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
#endif
    }

    for ( index = 0 ; index < rr_interval_number ; index++ )
 8009e00:	2300      	movs	r3, #0
 8009e02:	75bb      	strb	r3, [r7, #22]
 8009e04:	e020      	b.n	8009e48 <Update_Char_Measurement+0x13c>
    {
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] & 0xFF);
 8009e06:	7dbb      	ldrb	r3, [r7, #22]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	889a      	ldrh	r2, [r3, #4]
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	b2d2      	uxtb	r2, r2
 8009e14:	3318      	adds	r3, #24
 8009e16:	443b      	add	r3, r7
 8009e18:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] >> 8);
 8009e22:	7dbb      	ldrb	r3, [r7, #22]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	4413      	add	r3, r2
 8009e2a:	889b      	ldrh	r3, [r3, #4]
 8009e2c:	0a1b      	lsrs	r3, r3, #8
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	3318      	adds	r3, #24
 8009e36:	443b      	add	r3, r7
 8009e38:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
    for ( index = 0 ; index < rr_interval_number ; index++ )
 8009e42:	7dbb      	ldrb	r3, [r7, #22]
 8009e44:	3301      	adds	r3, #1
 8009e46:	75bb      	strb	r3, [r7, #22]
 8009e48:	7dba      	ldrb	r2, [r7, #22]
 8009e4a:	7d7b      	ldrb	r3, [r7, #21]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d3da      	bcc.n	8009e06 <Update_Char_Measurement+0xfa>
    }
  }

#endif  /**< (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0) */

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <Update_Char_Measurement+0x16c>)
 8009e52:	8818      	ldrh	r0, [r3, #0]
 8009e54:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <Update_Char_Measurement+0x16c>)
 8009e56:	8859      	ldrh	r1, [r3, #2]
 8009e58:	7dfa      	ldrb	r2, [r7, #23]
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	f7ff f8b9 	bl	8008fda <aci_gatt_update_char_value>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	753b      	strb	r3, [r7, #20]
                                            HRS_Context.HeartRatemeasurementCharHdle,
                                            0, /* charValOffset */
                                            hrm_char_length, /* charValueLen */
                                            (uint8_t *) &ahrm_value[0]);

  return return_value;
 8009e6c:	7d3b      	ldrb	r3, [r7, #20]
}/* end Update_Char_Measurement() */
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000050 	.word	0x20000050

08009e7c <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8009e82:	2300      	movs	r3, #0
 8009e84:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 8009e86:	482e      	ldr	r0, [pc, #184]	; (8009f40 <HRS_Init+0xc4>)
 8009e88:	f000 fd48 	bl	800a91c <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 8009e8c:	f641 030d 	movw	r3, #6157	; 0x180d
 8009e90:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8009e92:	1d39      	adds	r1, r7, #4
 8009e94:	4b2b      	ldr	r3, [pc, #172]	; (8009f44 <HRS_Init+0xc8>)
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2308      	movs	r3, #8
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	f7fe febe 	bl	8008c1e <aci_gatt_add_service>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 8009ea6:	f642 2337 	movw	r3, #10807	; 0x2a37
 8009eaa:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <HRS_Init+0xc8>)
 8009eae:	8818      	ldrh	r0, [r3, #0]
 8009eb0:	1d3a      	adds	r2, r7, #4
 8009eb2:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <HRS_Init+0xcc>)
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	230a      	movs	r3, #10
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9302      	str	r3, [sp, #8]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	2310      	movs	r3, #16
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	2307      	movs	r3, #7
 8009ecc:	2101      	movs	r1, #1
 8009ece:	f7fe ff7c 	bl	8008dca <aci_gatt_add_char>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 8009ed6:	f642 2338 	movw	r3, #10808	; 0x2a38
 8009eda:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8009edc:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <HRS_Init+0xc8>)
 8009ede:	8818      	ldrh	r0, [r3, #0]
 8009ee0:	1d3a      	adds	r2, r7, #4
 8009ee2:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <HRS_Init+0xd0>)
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	230a      	movs	r3, #10
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	2301      	movs	r3, #1
 8009efc:	2101      	movs	r1, #1
 8009efe:	f7fe ff64 	bl	8008dca <aci_gatt_add_char>
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 8009f06:	f642 2339 	movw	r3, #10809	; 0x2a39
 8009f0a:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <HRS_Init+0xc8>)
 8009f0e:	8818      	ldrh	r0, [r3, #0]
 8009f10:	1d3a      	adds	r2, r7, #4
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <HRS_Init+0xd4>)
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	230a      	movs	r3, #10
 8009f1c:	9303      	str	r3, [sp, #12]
 8009f1e:	2302      	movs	r3, #2
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	2308      	movs	r3, #8
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	f7fe ff4c 	bl	8008dca <aci_gatt_add_char>
 8009f32:	4603      	mov	r3, r0
 8009f34:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 8009f36:	bf00      	nop
}
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	08009bc1 	.word	0x08009bc1
 8009f44:	20000050 	.word	0x20000050
 8009f48:	20000052 	.word	0x20000052
 8009f4c:	20000054 	.word	0x20000054
 8009f50:	20000056 	.word	0x20000056

08009f54 <HRS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HRS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
 {
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	f642 2237 	movw	r2, #10807	; 0x2a37
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d009      	beq.n	8009f82 <HRS_UpdateChar+0x2e>
 8009f6e:	f642 2238 	movw	r2, #10808	; 0x2a38
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d10b      	bne.n	8009f8e <HRS_UpdateChar+0x3a>
  {
#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
    case SENSOR_LOCATION_UUID:
      return_value = Update_Char_BodySensorLocation((HRS_BodySensorLocation_t*)pPayload);
 8009f76:	6838      	ldr	r0, [r7, #0]
 8009f78:	f7ff feae 	bl	8009cd8 <Update_Char_BodySensorLocation>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f80:	e006      	b.n	8009f90 <HRS_UpdateChar+0x3c>
#endif
    case HEART_RATE_MEASURMENT_UUID:
      return_value = Update_Char_Measurement((HRS_MeasVal_t*)pPayload);
 8009f82:	6838      	ldr	r0, [r7, #0]
 8009f84:	f7ff fec2 	bl	8009d0c <Update_Char_Measurement>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8c:	e000      	b.n	8009f90 <HRS_UpdateChar+0x3c>

    default:
      break;
 8009f8e:	bf00      	nop
  }

  return return_value;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}/* end HRS_UpdateChar() */
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <HumiditySensing_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HumiditySensing_Event_Handler(void *Event)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HSS_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3301      	adds	r3, #1
 8009fae:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2bff      	cmp	r3, #255	; 0xff
 8009fb6:	d133      	bne.n	800a020 <HumiditySensing_Event_Handler+0x84>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	3302      	adds	r3, #2
 8009fbc:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f640 4301 	movw	r3, #3073	; 0xc01
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d124      	bne.n	800a018 <HumiditySensing_Event_Handler+0x7c>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	3302      	adds	r3, #2
 8009fd2:	61bb      	str	r3, [r7, #24]
          if(attribute_modified->Attr_Handle == (HSS_Context.HumidityCharHdle + 2))
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	885b      	ldrh	r3, [r3, #2]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	4b14      	ldr	r3, [pc, #80]	; (800a030 <HumiditySensing_Event_Handler+0x94>)
 8009fde:	885b      	ldrh	r3, [r3, #2]
 8009fe0:	3302      	adds	r3, #2
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d11a      	bne.n	800a01c <HumiditySensing_Event_Handler+0x80>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	7a1b      	ldrb	r3, [r3, #8]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d007      	beq.n	800a008 <HumiditySensing_Event_Handler+0x6c>
            {
            	APP_DBG_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HSS_NOTIFICATION_ENABLED\n");
              Notification.HSS_Evt_Opcode = HSS_NOTIFICATION_ENABLED;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	723b      	strb	r3, [r7, #8]
              HSS_Notification(&Notification);
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	4618      	mov	r0, r3
 800a002:	f7f8 fe13 	bl	8002c2c <HSS_Notification>
              Notification.HSS_Evt_Opcode =HSS_NOTIFICATION_DISABLED;
              HSS_Notification(&Notification);
            }
          }
        }
        break;
 800a006:	e009      	b.n	800a01c <HumiditySensing_Event_Handler+0x80>
              Notification.HSS_Evt_Opcode =HSS_NOTIFICATION_DISABLED;
 800a008:	2301      	movs	r3, #1
 800a00a:	723b      	strb	r3, [r7, #8]
              HSS_Notification(&Notification);
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4618      	mov	r0, r3
 800a012:	f7f8 fe0b 	bl	8002c2c <HSS_Notification>
        break;
 800a016:	e001      	b.n	800a01c <HumiditySensing_Event_Handler+0x80>
        default:
        break;
 800a018:	bf00      	nop
 800a01a:	e002      	b.n	800a022 <HumiditySensing_Event_Handler+0x86>
        break;
 800a01c:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a01e:	e000      	b.n	800a022 <HumiditySensing_Event_Handler+0x86>

    default:
    break;
 800a020:	bf00      	nop
  }

  return(return_value);
 800a022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end EnvironmentalSensing_Event_Handler */
 800a026:	4618      	mov	r0, r3
 800a028:	3728      	adds	r7, #40	; 0x28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000058 	.word	0x20000058

0800a034 <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HSS_MeasVal_t *pMeasurement )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af02      	add	r7, sp, #8
 800a03a:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HSS_Context.HumiditySvcHdle,
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <Update_Char_Measurement+0x30>)
 800a042:	8818      	ldrh	r0, [r3, #0]
 800a044:	4b07      	ldr	r3, [pc, #28]	; (800a064 <Update_Char_Measurement+0x30>)
 800a046:	8859      	ldrh	r1, [r3, #2]
                                            HSS_Context.HumidityCharHdle,
                                            0, /* charValOffset */
                                            2, /* charValueLen */
											(uint8_t *) &pMeasurement->MeasurementValue);
 800a048:	687b      	ldr	r3, [r7, #4]
  return_value = aci_gatt_update_char_value(HSS_Context.HumiditySvcHdle,
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2302      	movs	r3, #2
 800a04e:	2200      	movs	r2, #0
 800a050:	f7fe ffc3 	bl	8008fda <aci_gatt_update_char_value>
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]

  return return_value;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_Measurement() */
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000058 	.word	0x20000058

0800a068 <HSS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HSS_Init(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08c      	sub	sp, #48	; 0x30
 800a06c:	af06      	add	r7, sp, #24
	Char_UUID_t  uuid;
	tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a06e:	2392      	movs	r3, #146	; 0x92
 800a070:	75fb      	strb	r3, [r7, #23]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HumiditySensing_Event_Handler);
 800a072:	4833      	ldr	r0, [pc, #204]	; (800a140 <HSS_Init+0xd8>)
 800a074:	f000 fc52 	bl	800a91c <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  COPY_MY_HUMIDTY_SERVICE_UUID(uuid.Char_UUID_128);
 800a078:	235a      	movs	r3, #90	; 0x5a
 800a07a:	713b      	strb	r3, [r7, #4]
 800a07c:	23aa      	movs	r3, #170	; 0xaa
 800a07e:	717b      	strb	r3, [r7, #5]
 800a080:	232d      	movs	r3, #45	; 0x2d
 800a082:	71bb      	strb	r3, [r7, #6]
 800a084:	231e      	movs	r3, #30
 800a086:	71fb      	strb	r3, [r7, #7]
 800a088:	2331      	movs	r3, #49	; 0x31
 800a08a:	723b      	strb	r3, [r7, #8]
 800a08c:	23d4      	movs	r3, #212	; 0xd4
 800a08e:	727b      	strb	r3, [r7, #9]
 800a090:	23f7      	movs	r3, #247	; 0xf7
 800a092:	72bb      	strb	r3, [r7, #10]
 800a094:	2381      	movs	r3, #129	; 0x81
 800a096:	72fb      	strb	r3, [r7, #11]
 800a098:	23ae      	movs	r3, #174	; 0xae
 800a09a:	733b      	strb	r3, [r7, #12]
 800a09c:	2348      	movs	r3, #72	; 0x48
 800a09e:	737b      	strb	r3, [r7, #13]
 800a0a0:	23b5      	movs	r3, #181	; 0xb5
 800a0a2:	73bb      	strb	r3, [r7, #14]
 800a0a4:	237f      	movs	r3, #127	; 0x7f
 800a0a6:	73fb      	strb	r3, [r7, #15]
 800a0a8:	232c      	movs	r3, #44	; 0x2c
 800a0aa:	743b      	strb	r3, [r7, #16]
 800a0ac:	232b      	movs	r3, #43	; 0x2b
 800a0ae:	747b      	strb	r3, [r7, #17]
 800a0b0:	232b      	movs	r3, #43	; 0x2b
 800a0b2:	74bb      	strb	r3, [r7, #18]
 800a0b4:	23b9      	movs	r3, #185	; 0xb9
 800a0b6:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_add_service(UUID_TYPE_128,
 800a0b8:	1d39      	adds	r1, r7, #4
 800a0ba:	4b22      	ldr	r3, [pc, #136]	; (800a144 <HSS_Init+0xdc>)
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2306      	movs	r3, #6
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	2002      	movs	r0, #2
 800a0c4:	f7fe fdab 	bl	8008c1e <aci_gatt_add_service>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  COPY_MY_HUMIDTY_CHAR_UUID(uuid.Char_UUID_128);
 800a0cc:	2358      	movs	r3, #88	; 0x58
 800a0ce:	713b      	strb	r3, [r7, #4]
 800a0d0:	2327      	movs	r3, #39	; 0x27
 800a0d2:	717b      	strb	r3, [r7, #5]
 800a0d4:	23f1      	movs	r3, #241	; 0xf1
 800a0d6:	71bb      	strb	r3, [r7, #6]
 800a0d8:	237f      	movs	r3, #127	; 0x7f
 800a0da:	71fb      	strb	r3, [r7, #7]
 800a0dc:	234b      	movs	r3, #75	; 0x4b
 800a0de:	723b      	strb	r3, [r7, #8]
 800a0e0:	23fb      	movs	r3, #251	; 0xfb
 800a0e2:	727b      	strb	r3, [r7, #9]
 800a0e4:	23cf      	movs	r3, #207	; 0xcf
 800a0e6:	72bb      	strb	r3, [r7, #10]
 800a0e8:	23a1      	movs	r3, #161	; 0xa1
 800a0ea:	72fb      	strb	r3, [r7, #11]
 800a0ec:	23f8      	movs	r3, #248	; 0xf8
 800a0ee:	733b      	strb	r3, [r7, #12]
 800a0f0:	234c      	movs	r3, #76	; 0x4c
 800a0f2:	737b      	strb	r3, [r7, #13]
 800a0f4:	23f2      	movs	r3, #242	; 0xf2
 800a0f6:	73bb      	strb	r3, [r7, #14]
 800a0f8:	2387      	movs	r3, #135	; 0x87
 800a0fa:	73fb      	strb	r3, [r7, #15]
 800a0fc:	236e      	movs	r3, #110	; 0x6e
 800a0fe:	743b      	strb	r3, [r7, #16]
 800a100:	2355      	movs	r3, #85	; 0x55
 800a102:	747b      	strb	r3, [r7, #17]
 800a104:	2364      	movs	r3, #100	; 0x64
 800a106:	74bb      	strb	r3, [r7, #18]
 800a108:	2373      	movs	r3, #115	; 0x73
 800a10a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(HSS_Context.HumiditySvcHdle,
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <HSS_Init+0xdc>)
 800a10e:	8818      	ldrh	r0, [r3, #0]
 800a110:	1d3a      	adds	r2, r7, #4
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <HSS_Init+0xe0>)
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	2300      	movs	r3, #0
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	230a      	movs	r3, #10
 800a11c:	9303      	str	r3, [sp, #12]
 800a11e:	2300      	movs	r3, #0
 800a120:	9302      	str	r3, [sp, #8]
 800a122:	2300      	movs	r3, #0
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	2302      	movs	r3, #2
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	2302      	movs	r3, #2
 800a12c:	2102      	movs	r1, #2
 800a12e:	f7fe fe4c 	bl	8008dca <aci_gatt_add_char>
 800a132:	4603      	mov	r3, r0
 800a134:	75fb      	strb	r3, [r7, #23]
    BLE_DBG_HRS_MSG ("FAILED to add Humidity Measurement Characteristic, Error: %02X !!\n",
                        ret);
  }


  return;
 800a136:	bf00      	nop
}
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	08009f9d 	.word	0x08009f9d
 800a144:	20000058 	.word	0x20000058
 800a148:	2000005a 	.word	0x2000005a

0800a14c <HSS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HSS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	6039      	str	r1, [r7, #0]
 800a156:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  return_value = Update_Char_Measurement((HSS_MeasVal_t*)pPayload);
 800a15c:	6838      	ldr	r0, [r7, #0]
 800a15e:	f7ff ff69 	bl	800a034 <Update_Char_Measurement>
 800a162:	4603      	mov	r3, r0
 800a164:	73fb      	strb	r3, [r7, #15]

  return return_value;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}/* end HSS_UpdateChar() */
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f001 f95b 	bl	800b43c <memcpy>
 800a186:	4603      	mov	r3, r0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f001 f959 	bl	800b458 <memset>
 800a1a6:	4603      	mov	r3, r0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a1ba:	4b0f      	ldr	r3, [pc, #60]	; (800a1f8 <OTP_Read+0x48>)
 800a1bc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1be:	e002      	b.n	800a1c6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3b08      	subs	r3, #8
 800a1c4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3307      	adds	r3, #7
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	79fa      	ldrb	r2, [r7, #7]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d003      	beq.n	800a1da <OTP_Read+0x2a>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4a09      	ldr	r2, [pc, #36]	; (800a1fc <OTP_Read+0x4c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d1f2      	bne.n	800a1c0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3307      	adds	r3, #7
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	79fa      	ldrb	r2, [r7, #7]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d001      	beq.n	800a1ea <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	1fff73f8 	.word	0x1fff73f8
 800a1fc:	1fff7000 	.word	0x1fff7000

0800a200 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a208:	f107 030c 	add.w	r3, r7, #12
 800a20c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	212e      	movs	r1, #46	; 0x2e
 800a218:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a21c:	f000 f94c 	bl	800a4b8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	330b      	adds	r3, #11
 800a224:	78db      	ldrb	r3, [r3, #3]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b088      	sub	sp, #32
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a236:	f107 030c 	add.w	r3, r7, #12
 800a23a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	210f      	movs	r1, #15
 800a246:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a24a:	f000 f935 	bl	800a4b8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	330b      	adds	r3, #11
 800a252:	78db      	ldrb	r3, [r3, #3]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3720      	adds	r7, #32
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	2110      	movs	r1, #16
 800a270:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a274:	f000 f920 	bl	800a4b8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	330b      	adds	r3, #11
 800a27c:	78db      	ldrb	r3, [r3, #3]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3720      	adds	r7, #32
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a288:	b480      	push	{r7}
 800a28a:	b08b      	sub	sp, #44	; 0x2c
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a2b0:	4b4a      	ldr	r3, [pc, #296]	; (800a3dc <SHCI_GetWirelessFwInfo+0x154>)
 800a2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a2b8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a2c2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a44      	ldr	r2, [pc, #272]	; (800a3e0 <SHCI_GetWirelessFwInfo+0x158>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d10f      	bne.n	800a2f4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	e01a      	b.n	800a32a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a2fc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a300:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	0e1b      	lsrs	r3, r3, #24
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	0c1b      	lsrs	r3, r3, #16
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	0a1b      	lsrs	r3, r3, #8
 800a342:	b2da      	uxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	091b      	lsrs	r3, r3, #4
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	b2da      	uxtb	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	0e1b      	lsrs	r3, r3, #24
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	0c1b      	lsrs	r3, r3, #16
 800a374:	b2da      	uxtb	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	b2da      	uxtb	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	0e1b      	lsrs	r3, r3, #24
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	0c1b      	lsrs	r3, r3, #16
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	0a1b      	lsrs	r3, r3, #8
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	0e1b      	lsrs	r3, r3, #24
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	372c      	adds	r7, #44	; 0x2c
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	58004000 	.word	0x58004000
 800a3e0:	a94656b9 	.word	0xa94656b9

0800a3e4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	4a08      	ldr	r2, [pc, #32]	; (800a414 <shci_init+0x30>)
 800a3f4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a3f6:	4a08      	ldr	r2, [pc, #32]	; (800a418 <shci_init+0x34>)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a3fc:	4806      	ldr	r0, [pc, #24]	; (800a418 <shci_init+0x34>)
 800a3fe:	f000 f911 	bl	800a624 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f894 	bl	800a534 <TlInit>

  return;
 800a40c:	bf00      	nop
}
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	20000624 	.word	0x20000624
 800a418:	20000604 	.word	0x20000604

0800a41c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a422:	4822      	ldr	r0, [pc, #136]	; (800a4ac <shci_user_evt_proc+0x90>)
 800a424:	f000 f922 	bl	800a66c <LST_is_empty>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d12b      	bne.n	800a486 <shci_user_evt_proc+0x6a>
 800a42e:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <shci_user_evt_proc+0x94>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d027      	beq.n	800a486 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a436:	f107 030c 	add.w	r3, r7, #12
 800a43a:	4619      	mov	r1, r3
 800a43c:	481b      	ldr	r0, [pc, #108]	; (800a4ac <shci_user_evt_proc+0x90>)
 800a43e:	f000 f9a4 	bl	800a78a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a442:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <shci_user_evt_proc+0x98>)
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a44e:	2301      	movs	r3, #1
 800a450:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a452:	4b18      	ldr	r3, [pc, #96]	; (800a4b4 <shci_user_evt_proc+0x98>)
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	1d3a      	adds	r2, r7, #4
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a45c:	793a      	ldrb	r2, [r7, #4]
 800a45e:	4b14      	ldr	r3, [pc, #80]	; (800a4b0 <shci_user_evt_proc+0x94>)
 800a460:	701a      	strb	r2, [r3, #0]
 800a462:	e002      	b.n	800a46a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a464:	4b12      	ldr	r3, [pc, #72]	; (800a4b0 <shci_user_evt_proc+0x94>)
 800a466:	2201      	movs	r2, #1
 800a468:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a46a:	4b11      	ldr	r3, [pc, #68]	; (800a4b0 <shci_user_evt_proc+0x94>)
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fc43 	bl	800ad00 <TL_MM_EvtDone>
 800a47a:	e004      	b.n	800a486 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4619      	mov	r1, r3
 800a480:	480a      	ldr	r0, [pc, #40]	; (800a4ac <shci_user_evt_proc+0x90>)
 800a482:	f000 f915 	bl	800a6b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a486:	4809      	ldr	r0, [pc, #36]	; (800a4ac <shci_user_evt_proc+0x90>)
 800a488:	f000 f8f0 	bl	800a66c <LST_is_empty>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d107      	bne.n	800a4a2 <shci_user_evt_proc+0x86>
 800a492:	4b07      	ldr	r3, [pc, #28]	; (800a4b0 <shci_user_evt_proc+0x94>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a49a:	4804      	ldr	r0, [pc, #16]	; (800a4ac <shci_user_evt_proc+0x90>)
 800a49c:	f7f6 f9f8 	bl	8000890 <shci_notify_asynch_evt>
  }


  return;
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
}
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000080 	.word	0x20000080
 800a4b0:	20000090 	.word	0x20000090
 800a4b4:	20000604 	.word	0x20000604

0800a4b8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60ba      	str	r2, [r7, #8]
 800a4c0:	607b      	str	r3, [r7, #4]
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	81fb      	strh	r3, [r7, #14]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f000 f864 	bl	800a598 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a4d0:	4b16      	ldr	r3, [pc, #88]	; (800a52c <shci_send+0x74>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	89fa      	ldrh	r2, [r7, #14]
 800a4d6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a4da:	4b14      	ldr	r3, [pc, #80]	; (800a52c <shci_send+0x74>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	7b7a      	ldrb	r2, [r7, #13]
 800a4e0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <shci_send+0x74>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	330c      	adds	r3, #12
 800a4e8:	7b7a      	ldrb	r2, [r7, #13]
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 ffa5 	bl	800b43c <memcpy>

  shciContext.io.Send(0,0);
 800a4f2:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <shci_send+0x78>)
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a4fc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a500:	f7f6 f9dd 	bl	80008be <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f103 0008 	add.w	r0, r3, #8
 800a50a:	4b08      	ldr	r3, [pc, #32]	; (800a52c <shci_send+0x74>)
 800a50c:	6819      	ldr	r1, [r3, #0]
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <shci_send+0x74>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	789b      	ldrb	r3, [r3, #2]
 800a514:	3303      	adds	r3, #3
 800a516:	461a      	mov	r2, r3
 800a518:	f000 ff90 	bl	800b43c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a51c:	2001      	movs	r0, #1
 800a51e:	f000 f83b 	bl	800a598 <Cmd_SetStatus>

  return;
 800a522:	bf00      	nop
}
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	2000008c 	.word	0x2000008c
 800a530:	20000604 	.word	0x20000604

0800a534 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a53c:	4a10      	ldr	r2, [pc, #64]	; (800a580 <TlInit+0x4c>)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a542:	4810      	ldr	r0, [pc, #64]	; (800a584 <TlInit+0x50>)
 800a544:	f000 f882 	bl	800a64c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a548:	2001      	movs	r0, #1
 800a54a:	f000 f825 	bl	800a598 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a54e:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <TlInit+0x54>)
 800a550:	2201      	movs	r2, #1
 800a552:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a554:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <TlInit+0x58>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00c      	beq.n	800a576 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a560:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <TlInit+0x5c>)
 800a562:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a564:	4b0b      	ldr	r3, [pc, #44]	; (800a594 <TlInit+0x60>)
 800a566:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a568:	4b08      	ldr	r3, [pc, #32]	; (800a58c <TlInit+0x58>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f107 020c 	add.w	r2, r7, #12
 800a570:	4610      	mov	r0, r2
 800a572:	4798      	blx	r3
  }

  return;
 800a574:	bf00      	nop
 800a576:	bf00      	nop
}
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	2000008c 	.word	0x2000008c
 800a584:	20000080 	.word	0x20000080
 800a588:	20000090 	.word	0x20000090
 800a58c:	20000604 	.word	0x20000604
 800a590:	0800a5e9 	.word	0x0800a5e9
 800a594:	0800a601 	.word	0x0800a601

0800a598 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a5a8:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <Cmd_SetStatus+0x48>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <Cmd_SetStatus+0x48>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <Cmd_SetStatus+0x4c>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a5be:	e00b      	b.n	800a5d8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a5c0:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <Cmd_SetStatus+0x4c>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a5c6:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <Cmd_SetStatus+0x48>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a5ce:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <Cmd_SetStatus+0x48>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	4798      	blx	r3
  return;
 800a5d6:	bf00      	nop
 800a5d8:	bf00      	nop
}
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000624 	.word	0x20000624
 800a5e4:	20000088 	.word	0x20000088

0800a5e8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f7f6 f959 	bl	80008a8 <shci_cmd_resp_release>

  return;
 800a5f6:	bf00      	nop
}
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	4805      	ldr	r0, [pc, #20]	; (800a620 <TlUserEvtReceived+0x20>)
 800a60c:	f000 f876 	bl	800a6fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a610:	4803      	ldr	r0, [pc, #12]	; (800a620 <TlUserEvtReceived+0x20>)
 800a612:	f7f6 f93d 	bl	8000890 <shci_notify_asynch_evt>

  return;
 800a616:	bf00      	nop
}
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20000080 	.word	0x20000080

0800a624 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a05      	ldr	r2, [pc, #20]	; (800a644 <shci_register_io_bus+0x20>)
 800a630:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a04      	ldr	r2, [pc, #16]	; (800a648 <shci_register_io_bus+0x24>)
 800a636:	611a      	str	r2, [r3, #16]

  return;
 800a638:	bf00      	nop
}
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	0800ab8d 	.word	0x0800ab8d
 800a648:	0800abe1 	.word	0x0800abe1

0800a64c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	605a      	str	r2, [r3, #4]
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a674:	f3ef 8310 	mrs	r3, PRIMASK
 800a678:	60fb      	str	r3, [r7, #12]
  return(result);
 800a67a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a67c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a67e:	b672      	cpsid	i
}
 800a680:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d102      	bne.n	800a692 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a68c:	2301      	movs	r3, #1
 800a68e:	75fb      	strb	r3, [r7, #23]
 800a690:	e001      	b.n	800a696 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a692:	2300      	movs	r3, #0
 800a694:	75fb      	strb	r3, [r7, #23]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f383 8810 	msr	PRIMASK, r3
}
 800a6a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	371c      	adds	r7, #28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a6be:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a6c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6c4:	b672      	cpsid	i
}
 800a6c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	605a      	str	r2, [r3, #4]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f383 8810 	msr	PRIMASK, r3
}
 800a6ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a6f0:	bf00      	nop
 800a6f2:	371c      	adds	r7, #28
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a706:	f3ef 8310 	mrs	r3, PRIMASK
 800a70a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a70c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a70e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a710:	b672      	cpsid	i
}
 800a712:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f383 8810 	msr	PRIMASK, r3
}
 800a73a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a73c:	bf00      	nop
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a750:	f3ef 8310 	mrs	r3, PRIMASK
 800a754:	60fb      	str	r3, [r7, #12]
  return(result);
 800a756:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a758:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a75a:	b672      	cpsid	i
}
 800a75c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6852      	ldr	r2, [r2, #4]
 800a770:	605a      	str	r2, [r3, #4]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f383 8810 	msr	PRIMASK, r3
}
 800a77c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a77e:	bf00      	nop
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b086      	sub	sp, #24
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a794:	f3ef 8310 	mrs	r3, PRIMASK
 800a798:	60fb      	str	r3, [r7, #12]
  return(result);
 800a79a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a79c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a79e:	b672      	cpsid	i
}
 800a7a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff ffca 	bl	800a748 <LST_remove_node>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f383 8810 	msr	PRIMASK, r3
}
 800a7be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a7c0:	bf00      	nop
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0
  return;
 800a7cc:	bf00      	nop
}
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	af00      	add	r7, sp, #0
  return;
 800a7da:	bf00      	nop
}
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  return;
 800a7e8:	bf00      	nop
}
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	af00      	add	r7, sp, #0
  return;
 800a7f6:	bf00      	nop
}
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a800:	b480      	push	{r7}
 800a802:	af00      	add	r7, sp, #0
  return;
 800a804:	bf00      	nop
}
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <HTS_Init>:
__WEAK void HSS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 800a80e:	b480      	push	{r7}
 800a810:	af00      	add	r7, sp, #0
  return;
 800a812:	bf00      	nop
}
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
  return;
 800a820:	bf00      	nop
}
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a82a:	b480      	push	{r7}
 800a82c:	af00      	add	r7, sp, #0
  return;
 800a82e:	bf00      	nop
}
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
  return;
 800a83c:	bf00      	nop
}
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a846:	b480      	push	{r7}
 800a848:	af00      	add	r7, sp, #0
  return;
 800a84a:	bf00      	nop
}
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
  return;
 800a858:	bf00      	nop
}
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a862:	b480      	push	{r7}
 800a864:	af00      	add	r7, sp, #0
  return;
 800a866:	bf00      	nop
}
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a870:	b480      	push	{r7}
 800a872:	af00      	add	r7, sp, #0
  return;
 800a874:	bf00      	nop
}
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a87e:	b480      	push	{r7}
 800a880:	af00      	add	r7, sp, #0
  return;
 800a882:	bf00      	nop
}
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
  return;
 800a890:	bf00      	nop
}
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800a89a:	b480      	push	{r7}
 800a89c:	af00      	add	r7, sp, #0
  return;
 800a89e:	bf00      	nop
}
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <SVCCTL_Init+0x18>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a8b2:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <SVCCTL_Init+0x1c>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a8b8:	f000 f806 	bl	800a8c8 <SVCCTL_SvcInit>

  return;
 800a8bc:	bf00      	nop
}
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	2000005c 	.word	0x2000005c
 800a8c4:	2000007c 	.word	0x2000007c

0800a8c8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  BAS_Init();
 800a8cc:	f7ff ff7c 	bl	800a7c8 <BAS_Init>

  BLS_Init();
 800a8d0:	f7ff ff81 	bl	800a7d6 <BLS_Init>

  CRS_STM_Init();
 800a8d4:	f7ff ff86 	bl	800a7e4 <CRS_STM_Init>

  DIS_Init();
 800a8d8:	f7fe ff80 	bl	80097dc <DIS_Init>

  EDS_STM_Init();
 800a8dc:	f7ff ff89 	bl	800a7f2 <EDS_STM_Init>

  HIDS_Init();
 800a8e0:	f7ff ff8e 	bl	800a800 <HIDS_Init>

  HRS_Init();
 800a8e4:	f7ff faca 	bl	8009e7c <HRS_Init>

  HSS_Init();
 800a8e8:	f7ff fbbe 	bl	800a068 <HSS_Init>

  HTS_Init();
 800a8ec:	f7ff ff8f 	bl	800a80e <HTS_Init>

  IAS_Init();
 800a8f0:	f7ff ff94 	bl	800a81c <IAS_Init>

  LLS_Init();
 800a8f4:	f7ff ff99 	bl	800a82a <LLS_Init>

  TPS_Init();
 800a8f8:	f7ff ff9e 	bl	800a838 <TPS_Init>

  MOTENV_STM_Init();
 800a8fc:	f7ff ffa3 	bl	800a846 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a900:	f7ff ffa8 	bl	800a854 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a904:	f7ff ffad 	bl	800a862 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a908:	f7ff ffb2 	bl	800a870 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a90c:	f7ff ffbe 	bl	800a88c <BVOPUS_STM_Init>

  MESH_Init();
 800a910:	f7ff ffb5 	bl	800a87e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a914:	f7ff ffc1 	bl	800a89a <SVCCTL_InitCustomSvc>
  
  return;
 800a918:	bf00      	nop
}
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a924:	4b09      	ldr	r3, [pc, #36]	; (800a94c <SVCCTL_RegisterSvcHandler+0x30>)
 800a926:	7f1b      	ldrb	r3, [r3, #28]
 800a928:	4619      	mov	r1, r3
 800a92a:	4a08      	ldr	r2, [pc, #32]	; (800a94c <SVCCTL_RegisterSvcHandler+0x30>)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <SVCCTL_RegisterSvcHandler+0x30>)
 800a934:	7f1b      	ldrb	r3, [r3, #28]
 800a936:	3301      	adds	r3, #1
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	4b04      	ldr	r3, [pc, #16]	; (800a94c <SVCCTL_RegisterSvcHandler+0x30>)
 800a93c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a93e:	bf00      	nop
}
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	2000005c 	.word	0x2000005c

0800a950 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3301      	adds	r3, #1
 800a95c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2bff      	cmp	r3, #255	; 0xff
 800a968:	d125      	bne.n	800a9b6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3302      	adds	r3, #2
 800a96e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b29b      	uxth	r3, r3
 800a976:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a97a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a97e:	d118      	bne.n	800a9b2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a980:	2300      	movs	r3, #0
 800a982:	757b      	strb	r3, [r7, #21]
 800a984:	e00d      	b.n	800a9a2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a986:	7d7b      	ldrb	r3, [r7, #21]
 800a988:	4a1a      	ldr	r2, [pc, #104]	; (800a9f4 <SVCCTL_UserEvtRx+0xa4>)
 800a98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a996:	7dfb      	ldrb	r3, [r7, #23]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a99c:	7d7b      	ldrb	r3, [r7, #21]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	757b      	strb	r3, [r7, #21]
 800a9a2:	4b14      	ldr	r3, [pc, #80]	; (800a9f4 <SVCCTL_UserEvtRx+0xa4>)
 800a9a4:	7f1b      	ldrb	r3, [r3, #28]
 800a9a6:	7d7a      	ldrb	r2, [r7, #21]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d3ec      	bcc.n	800a986 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a9ac:	e002      	b.n	800a9b4 <SVCCTL_UserEvtRx+0x64>
              break;
 800a9ae:	bf00      	nop
          break;
 800a9b0:	e000      	b.n	800a9b4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a9b2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a9b4:	e000      	b.n	800a9b8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a9b6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d00f      	beq.n	800a9de <SVCCTL_UserEvtRx+0x8e>
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	dc10      	bgt.n	800a9e4 <SVCCTL_UserEvtRx+0x94>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <SVCCTL_UserEvtRx+0x7c>
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d006      	beq.n	800a9d8 <SVCCTL_UserEvtRx+0x88>
 800a9ca:	e00b      	b.n	800a9e4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7f7 fd11 	bl	80023f4 <SVCCTL_App_Notification>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75bb      	strb	r3, [r7, #22]
      break;
 800a9d6:	e008      	b.n	800a9ea <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	75bb      	strb	r3, [r7, #22]
      break;
 800a9dc:	e005      	b.n	800a9ea <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75bb      	strb	r3, [r7, #22]
      break;
 800a9e2:	e002      	b.n	800a9ea <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	75bb      	strb	r3, [r7, #22]
      break;
 800a9e8:	bf00      	nop
  }

  return (return_status);
 800a9ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	2000005c 	.word	0x2000005c

0800a9f8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a9fc:	f7f8 fafa 	bl	8002ff4 <HW_IPCC_Enable>

  return;
 800aa00:	bf00      	nop
}
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <TL_Init>:


void TL_Init( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800aa08:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <TL_Init+0x48>)
 800aa0a:	4a11      	ldr	r2, [pc, #68]	; (800aa50 <TL_Init+0x4c>)
 800aa0c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800aa0e:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <TL_Init+0x48>)
 800aa10:	4a10      	ldr	r2, [pc, #64]	; (800aa54 <TL_Init+0x50>)
 800aa12:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800aa14:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <TL_Init+0x48>)
 800aa16:	4a10      	ldr	r2, [pc, #64]	; (800aa58 <TL_Init+0x54>)
 800aa18:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <TL_Init+0x48>)
 800aa1c:	4a0f      	ldr	r2, [pc, #60]	; (800aa5c <TL_Init+0x58>)
 800aa1e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800aa20:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <TL_Init+0x48>)
 800aa22:	4a0f      	ldr	r2, [pc, #60]	; (800aa60 <TL_Init+0x5c>)
 800aa24:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <TL_Init+0x48>)
 800aa28:	4a0e      	ldr	r2, [pc, #56]	; (800aa64 <TL_Init+0x60>)
 800aa2a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <TL_Init+0x48>)
 800aa2e:	4a0e      	ldr	r2, [pc, #56]	; (800aa68 <TL_Init+0x64>)
 800aa30:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800aa32:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <TL_Init+0x48>)
 800aa34:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <TL_Init+0x68>)
 800aa36:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <TL_Init+0x48>)
 800aa3a:	4a0d      	ldr	r2, [pc, #52]	; (800aa70 <TL_Init+0x6c>)
 800aa3c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800aa3e:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <TL_Init+0x48>)
 800aa40:	4a0c      	ldr	r2, [pc, #48]	; (800aa74 <TL_Init+0x70>)
 800aa42:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800aa44:	f7f8 faea 	bl	800301c <HW_IPCC_Init>

  return;
 800aa48:	bf00      	nop
}
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20030000 	.word	0x20030000
 800aa50:	20030134 	.word	0x20030134
 800aa54:	20030154 	.word	0x20030154
 800aa58:	20030164 	.word	0x20030164
 800aa5c:	20030174 	.word	0x20030174
 800aa60:	2003017c 	.word	0x2003017c
 800aa64:	20030184 	.word	0x20030184
 800aa68:	2003018c 	.word	0x2003018c
 800aa6c:	200301a8 	.word	0x200301a8
 800aa70:	200301ac 	.word	0x200301ac
 800aa74:	200301b8 	.word	0x200301b8

0800aa78 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aa84:	4811      	ldr	r0, [pc, #68]	; (800aacc <TL_BLE_Init+0x54>)
 800aa86:	f7ff fde1 	bl	800a64c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800aa8a:	4b11      	ldr	r3, [pc, #68]	; (800aad0 <TL_BLE_Init+0x58>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68da      	ldr	r2, [r3, #12]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4a0c      	ldr	r2, [pc, #48]	; (800aad4 <TL_BLE_Init+0x5c>)
 800aaa4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4a08      	ldr	r2, [pc, #32]	; (800aacc <TL_BLE_Init+0x54>)
 800aaaa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800aaac:	f7f8 facc 	bl	8003048 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a08      	ldr	r2, [pc, #32]	; (800aad8 <TL_BLE_Init+0x60>)
 800aab6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4a07      	ldr	r2, [pc, #28]	; (800aadc <TL_BLE_Init+0x64>)
 800aabe:	6013      	str	r3, [r2, #0]

  return 0;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	200301d4 	.word	0x200301d4
 800aad0:	20030000 	.word	0x20030000
 800aad4:	20030a58 	.word	0x20030a58
 800aad8:	20000630 	.word	0x20000630
 800aadc:	20000634 	.word	0x20000634

0800aae0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800aaec:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <TL_BLE_SendCmd+0x34>)
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800aaf6:	4b07      	ldr	r3, [pc, #28]	; (800ab14 <TL_BLE_SendCmd+0x34>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4619      	mov	r1, r3
 800aafe:	2001      	movs	r0, #1
 800ab00:	f000 f96c 	bl	800addc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ab04:	f7f8 faaa 	bl	800305c <HW_IPCC_BLE_SendCmd>

  return 0;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20030000 	.word	0x20030000

0800ab18 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ab1e:	e01c      	b.n	800ab5a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ab20:	1d3b      	adds	r3, r7, #4
 800ab22:	4619      	mov	r1, r3
 800ab24:	4812      	ldr	r0, [pc, #72]	; (800ab70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ab26:	f7ff fe30 	bl	800a78a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	7a5b      	ldrb	r3, [r3, #9]
 800ab2e:	2b0f      	cmp	r3, #15
 800ab30:	d003      	beq.n	800ab3a <HW_IPCC_BLE_RxEvtNot+0x22>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7a5b      	ldrb	r3, [r3, #9]
 800ab36:	2b0e      	cmp	r3, #14
 800ab38:	d105      	bne.n	800ab46 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	2002      	movs	r0, #2
 800ab40:	f000 f94c 	bl	800addc <OutputDbgTrace>
 800ab44:	e004      	b.n	800ab50 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	2003      	movs	r0, #3
 800ab4c:	f000 f946 	bl	800addc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ab50:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	4610      	mov	r0, r2
 800ab58:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ab5a:	4805      	ldr	r0, [pc, #20]	; (800ab70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ab5c:	f7ff fd86 	bl	800a66c <LST_is_empty>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0dc      	beq.n	800ab20 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ab66:	bf00      	nop
}
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	200301d4 	.word	0x200301d4
 800ab74:	20000630 	.word	0x20000630

0800ab78 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ab7c:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4798      	blx	r3

  return;
 800ab82:	bf00      	nop
}
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000634 	.word	0x20000634

0800ab8c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ab98:	480d      	ldr	r0, [pc, #52]	; (800abd0 <TL_SYS_Init+0x44>)
 800ab9a:	f7ff fd57 	bl	800a64c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ab9e:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <TL_SYS_Init+0x48>)
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	689a      	ldr	r2, [r3, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	4a08      	ldr	r2, [pc, #32]	; (800abd0 <TL_SYS_Init+0x44>)
 800abb0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800abb2:	f7f8 fa75 	bl	80030a0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a07      	ldr	r2, [pc, #28]	; (800abd8 <TL_SYS_Init+0x4c>)
 800abbc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4a06      	ldr	r2, [pc, #24]	; (800abdc <TL_SYS_Init+0x50>)
 800abc4:	6013      	str	r3, [r2, #0]

  return 0;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	200301dc 	.word	0x200301dc
 800abd4:	20030000 	.word	0x20030000
 800abd8:	20000638 	.word	0x20000638
 800abdc:	2000063c 	.word	0x2000063c

0800abe0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800abec:	4b09      	ldr	r3, [pc, #36]	; (800ac14 <TL_SYS_SendCmd+0x34>)
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2210      	movs	r2, #16
 800abf4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <TL_SYS_SendCmd+0x34>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4619      	mov	r1, r3
 800abfe:	2004      	movs	r0, #4
 800ac00:	f000 f8ec 	bl	800addc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ac04:	f7f8 fa56 	bl	80030b4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20030000 	.word	0x20030000

0800ac18 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ac1c:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4619      	mov	r1, r3
 800ac24:	2005      	movs	r0, #5
 800ac26:	f000 f8d9 	bl	800addc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ac2a:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ac30:	68d2      	ldr	r2, [r2, #12]
 800ac32:	6812      	ldr	r2, [r2, #0]
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3

  return;
 800ac38:	bf00      	nop
}
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20030000 	.word	0x20030000
 800ac40:	20000638 	.word	0x20000638

0800ac44 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ac4a:	e00e      	b.n	800ac6a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ac4c:	1d3b      	adds	r3, r7, #4
 800ac4e:	4619      	mov	r1, r3
 800ac50:	480b      	ldr	r0, [pc, #44]	; (800ac80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ac52:	f7ff fd9a 	bl	800a78a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	2006      	movs	r0, #6
 800ac5c:	f000 f8be 	bl	800addc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <HW_IPCC_SYS_EvtNot+0x40>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ac6a:	4805      	ldr	r0, [pc, #20]	; (800ac80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ac6c:	f7ff fcfe 	bl	800a66c <LST_is_empty>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0ea      	beq.n	800ac4c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ac76:	bf00      	nop
}
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	200301dc 	.word	0x200301dc
 800ac84:	2000063c 	.word	0x2000063c

0800ac88 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ac90:	4817      	ldr	r0, [pc, #92]	; (800acf0 <TL_MM_Init+0x68>)
 800ac92:	f7ff fcdb 	bl	800a64c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ac96:	4817      	ldr	r0, [pc, #92]	; (800acf4 <TL_MM_Init+0x6c>)
 800ac98:	f7ff fcd8 	bl	800a64c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ac9c:	4b16      	ldr	r3, [pc, #88]	; (800acf8 <TL_MM_Init+0x70>)
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	4a16      	ldr	r2, [pc, #88]	; (800acfc <TL_MM_Init+0x74>)
 800aca2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aca4:	4b15      	ldr	r3, [pc, #84]	; (800acfc <TL_MM_Init+0x74>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	6892      	ldr	r2, [r2, #8]
 800acac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <TL_MM_Init+0x74>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68d2      	ldr	r2, [r2, #12]
 800acb6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800acb8:	4b10      	ldr	r3, [pc, #64]	; (800acfc <TL_MM_Init+0x74>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a0c      	ldr	r2, [pc, #48]	; (800acf0 <TL_MM_Init+0x68>)
 800acbe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800acc0:	4b0e      	ldr	r3, [pc, #56]	; (800acfc <TL_MM_Init+0x74>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	6812      	ldr	r2, [r2, #0]
 800acc8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800acca:	4b0c      	ldr	r3, [pc, #48]	; (800acfc <TL_MM_Init+0x74>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	6852      	ldr	r2, [r2, #4]
 800acd2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800acd4:	4b09      	ldr	r3, [pc, #36]	; (800acfc <TL_MM_Init+0x74>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6912      	ldr	r2, [r2, #16]
 800acdc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800acde:	4b07      	ldr	r3, [pc, #28]	; (800acfc <TL_MM_Init+0x74>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	6952      	ldr	r2, [r2, #20]
 800ace6:	619a      	str	r2, [r3, #24]

  return;
 800ace8:	bf00      	nop
}
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	200301c4 	.word	0x200301c4
 800acf4:	20000628 	.word	0x20000628
 800acf8:	20030000 	.word	0x20030000
 800acfc:	20000640 	.word	0x20000640

0800ad00 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4807      	ldr	r0, [pc, #28]	; (800ad28 <TL_MM_EvtDone+0x28>)
 800ad0c:	f7ff fcf6 	bl	800a6fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	2000      	movs	r0, #0
 800ad14:	f000 f862 	bl	800addc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ad18:	4804      	ldr	r0, [pc, #16]	; (800ad2c <TL_MM_EvtDone+0x2c>)
 800ad1a:	f7f8 f9f1 	bl	8003100 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ad1e:	bf00      	nop
}
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000628 	.word	0x20000628
 800ad2c:	0800ad31 	.word	0x0800ad31

0800ad30 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ad36:	e00c      	b.n	800ad52 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ad38:	1d3b      	adds	r3, r7, #4
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	480a      	ldr	r0, [pc, #40]	; (800ad68 <SendFreeBuf+0x38>)
 800ad3e:	f7ff fd24 	bl	800a78a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ad42:	4b0a      	ldr	r3, [pc, #40]	; (800ad6c <SendFreeBuf+0x3c>)
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7ff fcd5 	bl	800a6fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ad52:	4805      	ldr	r0, [pc, #20]	; (800ad68 <SendFreeBuf+0x38>)
 800ad54:	f7ff fc8a 	bl	800a66c <LST_is_empty>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0ec      	beq.n	800ad38 <SendFreeBuf+0x8>
  }

  return;
 800ad5e:	bf00      	nop
}
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000628 	.word	0x20000628
 800ad6c:	20030000 	.word	0x20030000

0800ad70 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ad74:	4805      	ldr	r0, [pc, #20]	; (800ad8c <TL_TRACES_Init+0x1c>)
 800ad76:	f7ff fc69 	bl	800a64c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ad7a:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <TL_TRACES_Init+0x20>)
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	4a03      	ldr	r2, [pc, #12]	; (800ad8c <TL_TRACES_Init+0x1c>)
 800ad80:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ad82:	f7f8 f9f3 	bl	800316c <HW_IPCC_TRACES_Init>

  return;
 800ad86:	bf00      	nop
}
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200301cc 	.word	0x200301cc
 800ad90:	20030000 	.word	0x20030000

0800ad94 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ad9a:	e008      	b.n	800adae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ad9c:	1d3b      	adds	r3, r7, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4808      	ldr	r0, [pc, #32]	; (800adc4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ada2:	f7ff fcf2 	bl	800a78a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f80d 	bl	800adc8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800adae:	4805      	ldr	r0, [pc, #20]	; (800adc4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800adb0:	f7ff fc5c 	bl	800a66c <LST_is_empty>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f0      	beq.n	800ad9c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800adba:	bf00      	nop
}
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	200301cc 	.word	0x200301cc

0800adc8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	2b06      	cmp	r3, #6
 800adec:	d845      	bhi.n	800ae7a <OutputDbgTrace+0x9e>
 800adee:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <OutputDbgTrace+0x18>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae11 	.word	0x0800ae11
 800adf8:	0800ae35 	.word	0x0800ae35
 800adfc:	0800ae3b 	.word	0x0800ae3b
 800ae00:	0800ae4f 	.word	0x0800ae4f
 800ae04:	0800ae5b 	.word	0x0800ae5b
 800ae08:	0800ae61 	.word	0x0800ae61
 800ae0c:	0800ae6f 	.word	0x0800ae6f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	7a5b      	ldrb	r3, [r3, #9]
 800ae18:	2bff      	cmp	r3, #255	; 0xff
 800ae1a:	d005      	beq.n	800ae28 <OutputDbgTrace+0x4c>
 800ae1c:	2bff      	cmp	r3, #255	; 0xff
 800ae1e:	dc05      	bgt.n	800ae2c <OutputDbgTrace+0x50>
 800ae20:	2b0e      	cmp	r3, #14
 800ae22:	d005      	beq.n	800ae30 <OutputDbgTrace+0x54>
 800ae24:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ae26:	e001      	b.n	800ae2c <OutputDbgTrace+0x50>
          break;
 800ae28:	bf00      	nop
 800ae2a:	e027      	b.n	800ae7c <OutputDbgTrace+0xa0>
          break;
 800ae2c:	bf00      	nop
 800ae2e:	e025      	b.n	800ae7c <OutputDbgTrace+0xa0>
          break;
 800ae30:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ae32:	e023      	b.n	800ae7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ae38:	e020      	b.n	800ae7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	7a5b      	ldrb	r3, [r3, #9]
 800ae42:	2b0e      	cmp	r3, #14
 800ae44:	d001      	beq.n	800ae4a <OutputDbgTrace+0x6e>
 800ae46:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ae48:	e000      	b.n	800ae4c <OutputDbgTrace+0x70>
          break;
 800ae4a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae4c:	e016      	b.n	800ae7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	7a5b      	ldrb	r3, [r3, #9]
 800ae56:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae58:	e010      	b.n	800ae7c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ae5e:	e00d      	b.n	800ae7c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	7a5b      	ldrb	r3, [r3, #9]
 800ae68:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ae6a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae6c:	e006      	b.n	800ae7c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	7a5b      	ldrb	r3, [r3, #9]
 800ae76:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae78:	e000      	b.n	800ae7c <OutputDbgTrace+0xa0>

    default:
      break;
 800ae7a:	bf00      	nop
  }

  return;
 800ae7c:	bf00      	nop
}
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <UTIL_LPM_Init+0x1c>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <UTIL_LPM_Init+0x20>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ae98:	bf00      	nop
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	20000644 	.word	0x20000644
 800aea8:	20000648 	.word	0x20000648

0800aeac <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeb8:	f3ef 8310 	mrs	r3, PRIMASK
 800aebc:	613b      	str	r3, [r7, #16]
  return(result);
 800aebe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800aec0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aec2:	b672      	cpsid	i
}
 800aec4:	bf00      	nop
  
  switch(state)
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <UTIL_LPM_SetOffMode+0x32>
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d10e      	bne.n	800aeee <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800aed0:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <UTIL_LPM_SetOffMode+0x5c>)
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <UTIL_LPM_SetOffMode+0x5c>)
 800aeda:	6013      	str	r3, [r2, #0]
      break;
 800aedc:	e008      	b.n	800aef0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	43da      	mvns	r2, r3
 800aee2:	4b09      	ldr	r3, [pc, #36]	; (800af08 <UTIL_LPM_SetOffMode+0x5c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4013      	ands	r3, r2
 800aee8:	4a07      	ldr	r2, [pc, #28]	; (800af08 <UTIL_LPM_SetOffMode+0x5c>)
 800aeea:	6013      	str	r3, [r2, #0]
      break;
 800aeec:	e000      	b.n	800aef0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800aeee:	bf00      	nop
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f383 8810 	msr	PRIMASK, r3
}
 800aefa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aefc:	bf00      	nop
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	20000648 	.word	0x20000648

0800af0c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af12:	f3ef 8310 	mrs	r3, PRIMASK
 800af16:	60bb      	str	r3, [r7, #8]
  return(result);
 800af18:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800af1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800af1c:	b672      	cpsid	i
}
 800af1e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800af20:	4b12      	ldr	r3, [pc, #72]	; (800af6c <UTIL_LPM_EnterLowPower+0x60>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800af28:	4b11      	ldr	r3, [pc, #68]	; (800af70 <UTIL_LPM_EnterLowPower+0x64>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800af2e:	4b10      	ldr	r3, [pc, #64]	; (800af70 <UTIL_LPM_EnterLowPower+0x64>)
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	4798      	blx	r3
 800af34:	e010      	b.n	800af58 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800af36:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <UTIL_LPM_EnterLowPower+0x68>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d006      	beq.n	800af4c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800af3e:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <UTIL_LPM_EnterLowPower+0x64>)
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800af44:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <UTIL_LPM_EnterLowPower+0x64>)
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	4798      	blx	r3
 800af4a:	e005      	b.n	800af58 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800af4c:	4b08      	ldr	r3, [pc, #32]	; (800af70 <UTIL_LPM_EnterLowPower+0x64>)
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800af52:	4b07      	ldr	r3, [pc, #28]	; (800af70 <UTIL_LPM_EnterLowPower+0x64>)
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	4798      	blx	r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f383 8810 	msr	PRIMASK, r3
}
 800af62:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20000644 	.word	0x20000644
 800af70:	0800b64c 	.word	0x0800b64c
 800af74:	20000648 	.word	0x20000648

0800af78 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b090      	sub	sp, #64	; 0x40
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800af80:	4b73      	ldr	r3, [pc, #460]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800af86:	4b72      	ldr	r3, [pc, #456]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4013      	ands	r3, r2
 800af8e:	4a70      	ldr	r2, [pc, #448]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800af90:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800af92:	4b70      	ldr	r3, [pc, #448]	; (800b154 <UTIL_SEQ_Run+0x1dc>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800af98:	4b6f      	ldr	r3, [pc, #444]	; (800b158 <UTIL_SEQ_Run+0x1e0>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800af9e:	4b6f      	ldr	r3, [pc, #444]	; (800b15c <UTIL_SEQ_Run+0x1e4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800afa4:	4b6e      	ldr	r3, [pc, #440]	; (800b160 <UTIL_SEQ_Run+0x1e8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800afaa:	e08d      	b.n	800b0c8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800afb0:	e002      	b.n	800afb8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800afb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb4:	3301      	adds	r3, #1
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800afb8:	4a6a      	ldr	r2, [pc, #424]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800afba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	401a      	ands	r2, r3
 800afc4:	4b62      	ldr	r3, [pc, #392]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4013      	ands	r3, r2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f1      	beq.n	800afb2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800afce:	4a65      	ldr	r2, [pc, #404]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800afd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	401a      	ands	r2, r3
 800afda:	4b5d      	ldr	r3, [pc, #372]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4013      	ands	r3, r2
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800afe2:	4a60      	ldr	r2, [pc, #384]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	4413      	add	r3, r2
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	4013      	ands	r3, r2
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d106      	bne.n	800b002 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800aff4:	4a5b      	ldr	r2, [pc, #364]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800aff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	4413      	add	r3, r2
 800affc:	f04f 32ff 	mov.w	r2, #4294967295
 800b000:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b002:	4a58      	ldr	r2, [pc, #352]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800b004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	4413      	add	r3, r2
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	4013      	ands	r3, r2
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f9b3 	bl	800b37c <SEQ_BitPosition>
 800b016:	4603      	mov	r3, r0
 800b018:	461a      	mov	r2, r3
 800b01a:	4b53      	ldr	r3, [pc, #332]	; (800b168 <UTIL_SEQ_Run+0x1f0>)
 800b01c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b01e:	4a51      	ldr	r2, [pc, #324]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	4413      	add	r3, r2
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	4b4f      	ldr	r3, [pc, #316]	; (800b168 <UTIL_SEQ_Run+0x1f0>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2101      	movs	r1, #1
 800b02e:	fa01 f303 	lsl.w	r3, r1, r3
 800b032:	43db      	mvns	r3, r3
 800b034:	401a      	ands	r2, r3
 800b036:	494b      	ldr	r1, [pc, #300]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800b038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	440b      	add	r3, r1
 800b03e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b040:	f3ef 8310 	mrs	r3, PRIMASK
 800b044:	61bb      	str	r3, [r7, #24]
  return(result);
 800b046:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b04a:	b672      	cpsid	i
}
 800b04c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b04e:	4b46      	ldr	r3, [pc, #280]	; (800b168 <UTIL_SEQ_Run+0x1f0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2201      	movs	r2, #1
 800b054:	fa02 f303 	lsl.w	r3, r2, r3
 800b058:	43da      	mvns	r2, r3
 800b05a:	4b3e      	ldr	r3, [pc, #248]	; (800b154 <UTIL_SEQ_Run+0x1dc>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4013      	ands	r3, r2
 800b060:	4a3c      	ldr	r2, [pc, #240]	; (800b154 <UTIL_SEQ_Run+0x1dc>)
 800b062:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b064:	2302      	movs	r3, #2
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b068:	e013      	b.n	800b092 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06c:	3b01      	subs	r3, #1
 800b06e:	4a3d      	ldr	r2, [pc, #244]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800b070:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b074:	4b3c      	ldr	r3, [pc, #240]	; (800b168 <UTIL_SEQ_Run+0x1f0>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2201      	movs	r2, #1
 800b07a:	fa02 f303 	lsl.w	r3, r2, r3
 800b07e:	43da      	mvns	r2, r3
 800b080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b082:	3b01      	subs	r3, #1
 800b084:	400a      	ands	r2, r1
 800b086:	4937      	ldr	r1, [pc, #220]	; (800b164 <UTIL_SEQ_Run+0x1ec>)
 800b088:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b08e:	3b01      	subs	r3, #1
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e8      	bne.n	800b06a <UTIL_SEQ_Run+0xf2>
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f383 8810 	msr	PRIMASK, r3
}
 800b0a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b0a4:	4b30      	ldr	r3, [pc, #192]	; (800b168 <UTIL_SEQ_Run+0x1f0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a30      	ldr	r2, [pc, #192]	; (800b16c <UTIL_SEQ_Run+0x1f4>)
 800b0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ae:	4798      	blx	r3

    local_taskset = TaskSet;
 800b0b0:	4b28      	ldr	r3, [pc, #160]	; (800b154 <UTIL_SEQ_Run+0x1dc>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b0b6:	4b28      	ldr	r3, [pc, #160]	; (800b158 <UTIL_SEQ_Run+0x1e0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b0bc:	4b27      	ldr	r3, [pc, #156]	; (800b15c <UTIL_SEQ_Run+0x1e4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b0c2:	4b27      	ldr	r3, [pc, #156]	; (800b160 <UTIL_SEQ_Run+0x1e8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	401a      	ands	r2, r3
 800b0ce:	4b20      	ldr	r3, [pc, #128]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <UTIL_SEQ_Run+0x16c>
 800b0d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	4013      	ands	r3, r2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f43f af64 	beq.w	800afac <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b0e4:	4b20      	ldr	r3, [pc, #128]	; (800b168 <UTIL_SEQ_Run+0x1f0>)
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ea:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b0ec:	f000 f938 	bl	800b360 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f4:	613b      	str	r3, [r7, #16]
  return(result);
 800b0f6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b0f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0fa:	b672      	cpsid	i
}
 800b0fc:	bf00      	nop
  local_taskset = TaskSet;
 800b0fe:	4b15      	ldr	r3, [pc, #84]	; (800b154 <UTIL_SEQ_Run+0x1dc>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b104:	4b14      	ldr	r3, [pc, #80]	; (800b158 <UTIL_SEQ_Run+0x1e0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b10a:	4b14      	ldr	r3, [pc, #80]	; (800b15c <UTIL_SEQ_Run+0x1e4>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	401a      	ands	r2, r3
 800b116:	4b0e      	ldr	r3, [pc, #56]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4013      	ands	r3, r2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d107      	bne.n	800b130 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b120:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <UTIL_SEQ_Run+0x1e8>)
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b126:	4013      	ands	r3, r2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b12c:	f7f5 fb9d 	bl	800086a <UTIL_SEQ_Idle>
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f383 8810 	msr	PRIMASK, r3
}
 800b13a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b13c:	f000 f917 	bl	800b36e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b140:	4a03      	ldr	r2, [pc, #12]	; (800b150 <UTIL_SEQ_Run+0x1d8>)
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	6013      	str	r3, [r2, #0]

  return;
 800b146:	bf00      	nop
}
 800b148:	3740      	adds	r7, #64	; 0x40
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20000034 	.word	0x20000034
 800b154:	2000064c 	.word	0x2000064c
 800b158:	20000650 	.word	0x20000650
 800b15c:	20000030 	.word	0x20000030
 800b160:	20000654 	.word	0x20000654
 800b164:	200006dc 	.word	0x200006dc
 800b168:	20000658 	.word	0x20000658
 800b16c:	2000065c 	.word	0x2000065c

0800b170 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b088      	sub	sp, #32
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b17c:	f3ef 8310 	mrs	r3, PRIMASK
 800b180:	617b      	str	r3, [r7, #20]
  return(result);
 800b182:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b186:	b672      	cpsid	i
}
 800b188:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f000 f8f6 	bl	800b37c <SEQ_BitPosition>
 800b190:	4603      	mov	r3, r0
 800b192:	4619      	mov	r1, r3
 800b194:	4a06      	ldr	r2, [pc, #24]	; (800b1b0 <UTIL_SEQ_RegTask+0x40>)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	f383 8810 	msr	PRIMASK, r3
}
 800b1a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b1a8:	bf00      	nop
}
 800b1aa:	3720      	adds	r7, #32
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	2000065c 	.word	0x2000065c

0800b1b4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1be:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b1c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1c8:	b672      	cpsid	i
}
 800b1ca:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <UTIL_SEQ_SetTask+0x50>)
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	4a0b      	ldr	r2, [pc, #44]	; (800b204 <UTIL_SEQ_SetTask+0x50>)
 800b1d6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b1d8:	4a0b      	ldr	r2, [pc, #44]	; (800b208 <UTIL_SEQ_SetTask+0x54>)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	4908      	ldr	r1, [pc, #32]	; (800b208 <UTIL_SEQ_SetTask+0x54>)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f383 8810 	msr	PRIMASK, r3
}
 800b1f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b1f8:	bf00      	nop
}
 800b1fa:	371c      	adds	r7, #28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	2000064c 	.word	0x2000064c
 800b208:	200006dc 	.word	0x200006dc

0800b20c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b214:	f3ef 8310 	mrs	r3, PRIMASK
 800b218:	60fb      	str	r3, [r7, #12]
  return(result);
 800b21a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b21c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b21e:	b672      	cpsid	i
}
 800b220:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	43da      	mvns	r2, r3
 800b226:	4b08      	ldr	r3, [pc, #32]	; (800b248 <UTIL_SEQ_PauseTask+0x3c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4013      	ands	r3, r2
 800b22c:	4a06      	ldr	r2, [pc, #24]	; (800b248 <UTIL_SEQ_PauseTask+0x3c>)
 800b22e:	6013      	str	r3, [r2, #0]
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f383 8810 	msr	PRIMASK, r3
}
 800b23a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b23c:	bf00      	nop
}
 800b23e:	371c      	adds	r7, #28
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	20000030 	.word	0x20000030

0800b24c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b254:	f3ef 8310 	mrs	r3, PRIMASK
 800b258:	60fb      	str	r3, [r7, #12]
  return(result);
 800b25a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b25e:	b672      	cpsid	i
}
 800b260:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b262:	4b09      	ldr	r3, [pc, #36]	; (800b288 <UTIL_SEQ_ResumeTask+0x3c>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4313      	orrs	r3, r2
 800b26a:	4a07      	ldr	r2, [pc, #28]	; (800b288 <UTIL_SEQ_ResumeTask+0x3c>)
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f383 8810 	msr	PRIMASK, r3
}
 800b278:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b27a:	bf00      	nop
}
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	20000030 	.word	0x20000030

0800b28c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b087      	sub	sp, #28
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b294:	f3ef 8310 	mrs	r3, PRIMASK
 800b298:	60fb      	str	r3, [r7, #12]
  return(result);
 800b29a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b29c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b29e:	b672      	cpsid	i
}
 800b2a0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <UTIL_SEQ_SetEvt+0x3c>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	4a07      	ldr	r2, [pc, #28]	; (800b2c8 <UTIL_SEQ_SetEvt+0x3c>)
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f383 8810 	msr	PRIMASK, r3
}
 800b2b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b2ba:	bf00      	nop
}
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	20000650 	.word	0x20000650

0800b2cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b088      	sub	sp, #32
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b2d4:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <UTIL_SEQ_WaitEvt+0x88>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b2da:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <UTIL_SEQ_WaitEvt+0x88>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e2:	d102      	bne.n	800b2ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]
 800b2e8:	e005      	b.n	800b2f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b2ea:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <UTIL_SEQ_WaitEvt+0x88>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <UTIL_SEQ_WaitEvt+0x8c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b2fc:	4a16      	ldr	r2, [pc, #88]	; (800b358 <UTIL_SEQ_WaitEvt+0x8c>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b302:	e003      	b.n	800b30c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	69f8      	ldr	r0, [r7, #28]
 800b308:	f7f5 fab5 	bl	8000876 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b30c:	4b13      	ldr	r3, [pc, #76]	; (800b35c <UTIL_SEQ_WaitEvt+0x90>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4013      	ands	r3, r2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d0f5      	beq.n	800b304 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b318:	4a0e      	ldr	r2, [pc, #56]	; (800b354 <UTIL_SEQ_WaitEvt+0x88>)
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b31e:	f3ef 8310 	mrs	r3, PRIMASK
 800b322:	60bb      	str	r3, [r7, #8]
  return(result);
 800b324:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b328:	b672      	cpsid	i
}
 800b32a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	43da      	mvns	r2, r3
 800b330:	4b0a      	ldr	r3, [pc, #40]	; (800b35c <UTIL_SEQ_WaitEvt+0x90>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4013      	ands	r3, r2
 800b336:	4a09      	ldr	r2, [pc, #36]	; (800b35c <UTIL_SEQ_WaitEvt+0x90>)
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f383 8810 	msr	PRIMASK, r3
}
 800b344:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b346:	4a04      	ldr	r2, [pc, #16]	; (800b358 <UTIL_SEQ_WaitEvt+0x8c>)
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	6013      	str	r3, [r2, #0]
  return;
 800b34c:	bf00      	nop
}
 800b34e:	3720      	adds	r7, #32
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20000658 	.word	0x20000658
 800b358:	20000654 	.word	0x20000654
 800b35c:	20000650 	.word	0x20000650

0800b360 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b364:	bf00      	nop
}
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b36e:	b480      	push	{r7}
 800b370:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b372:	bf00      	nop
}
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	0c1b      	lsrs	r3, r3, #16
 800b390:	041b      	lsls	r3, r3, #16
 800b392:	2b00      	cmp	r3, #0
 800b394:	d104      	bne.n	800b3a0 <SEQ_BitPosition+0x24>
 800b396:	2310      	movs	r3, #16
 800b398:	73fb      	strb	r3, [r7, #15]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <SEQ_BitPosition+0x3a>
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	73fb      	strb	r3, [r7, #15]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <SEQ_BitPosition+0x50>
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	73fb      	strb	r3, [r7, #15]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	0f1b      	lsrs	r3, r3, #28
 800b3d0:	4a07      	ldr	r2, [pc, #28]	; (800b3f0 <SEQ_BitPosition+0x74>)
 800b3d2:	5cd2      	ldrb	r2, [r2, r3]
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	f1c3 031f 	rsb	r3, r3, #31
 800b3e0:	b2db      	uxtb	r3, r3
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	0800b720 	.word	0x0800b720

0800b3f4 <__libc_init_array>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	4d0d      	ldr	r5, [pc, #52]	; (800b42c <__libc_init_array+0x38>)
 800b3f8:	4c0d      	ldr	r4, [pc, #52]	; (800b430 <__libc_init_array+0x3c>)
 800b3fa:	1b64      	subs	r4, r4, r5
 800b3fc:	10a4      	asrs	r4, r4, #2
 800b3fe:	2600      	movs	r6, #0
 800b400:	42a6      	cmp	r6, r4
 800b402:	d109      	bne.n	800b418 <__libc_init_array+0x24>
 800b404:	4d0b      	ldr	r5, [pc, #44]	; (800b434 <__libc_init_array+0x40>)
 800b406:	4c0c      	ldr	r4, [pc, #48]	; (800b438 <__libc_init_array+0x44>)
 800b408:	f000 f82e 	bl	800b468 <_init>
 800b40c:	1b64      	subs	r4, r4, r5
 800b40e:	10a4      	asrs	r4, r4, #2
 800b410:	2600      	movs	r6, #0
 800b412:	42a6      	cmp	r6, r4
 800b414:	d105      	bne.n	800b422 <__libc_init_array+0x2e>
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41c:	4798      	blx	r3
 800b41e:	3601      	adds	r6, #1
 800b420:	e7ee      	b.n	800b400 <__libc_init_array+0xc>
 800b422:	f855 3b04 	ldr.w	r3, [r5], #4
 800b426:	4798      	blx	r3
 800b428:	3601      	adds	r6, #1
 800b42a:	e7f2      	b.n	800b412 <__libc_init_array+0x1e>
 800b42c:	0800b730 	.word	0x0800b730
 800b430:	0800b730 	.word	0x0800b730
 800b434:	0800b730 	.word	0x0800b730
 800b438:	0800b734 	.word	0x0800b734

0800b43c <memcpy>:
 800b43c:	440a      	add	r2, r1
 800b43e:	4291      	cmp	r1, r2
 800b440:	f100 33ff 	add.w	r3, r0, #4294967295
 800b444:	d100      	bne.n	800b448 <memcpy+0xc>
 800b446:	4770      	bx	lr
 800b448:	b510      	push	{r4, lr}
 800b44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b452:	4291      	cmp	r1, r2
 800b454:	d1f9      	bne.n	800b44a <memcpy+0xe>
 800b456:	bd10      	pop	{r4, pc}

0800b458 <memset>:
 800b458:	4402      	add	r2, r0
 800b45a:	4603      	mov	r3, r0
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d100      	bne.n	800b462 <memset+0xa>
 800b460:	4770      	bx	lr
 800b462:	f803 1b01 	strb.w	r1, [r3], #1
 800b466:	e7f9      	b.n	800b45c <memset+0x4>

0800b468 <_init>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr

0800b474 <_fini>:
 800b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b476:	bf00      	nop
 800b478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b47a:	bc08      	pop	{r3}
 800b47c:	469e      	mov	lr, r3
 800b47e:	4770      	bx	lr
