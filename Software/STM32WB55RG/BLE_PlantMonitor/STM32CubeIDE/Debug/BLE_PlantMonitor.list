
BLE_PlantMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b098  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800b1d4  0800b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000008  0800b484  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000041  20000038  0800b4b4  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000007c  0800b4f5  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000654  20000090  0800b506  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00001404  200006e4  0800b506  000206e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .debug_info   0003402f  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006818  00000000  00000000  000540ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c00  00000000  00000000  0005a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002930  00000000  00000000  0005d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f6bf  00000000  00000000  0005fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a1f9  00000000  00000000  0008f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00107787  00000000  00000000  000c96f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d0e77  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b674  00000000  00000000  001d0ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000090 	.word	0x20000090
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b1bc 	.word	0x0800b1bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000094 	.word	0x20000094
 8000178:	0800b1bc 	.word	0x0800b1bc

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80001aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001ae:	4905      	ldr	r1, [pc, #20]	; (80001c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4313      	orrs	r3, r2
 80001b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001b8:	bf00      	nop
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c2:	4770      	bx	lr
 80001c4:	58000800 	.word	0x58000800

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4313      	orrs	r3, r2
 80001de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4013      	ands	r3, r2
 80001ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ec:	68fb      	ldr	r3, [r7, #12]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr

080001fa <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001fa:	b480      	push	{r7}
 80001fc:	b085      	sub	sp, #20
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000224:	68fb      	ldr	r3, [r7, #12]
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000236:	f003 f92d 	bl	8003494 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800023a:	f003 f931 	bl	80034a0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800023e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000242:	f7ff ffad 	bl	80001a0 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000246:	f000 f821 	bl	800028c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800024a:	f000 f8c3 	bl	80003d4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800024e:	bf00      	nop
}
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <APPD_EnableCPU2+0x34>)
 800025c:	1d3c      	adds	r4, r7, #4
 800025e:	461d      	mov	r5, r3
 8000260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000268:	c403      	stmia	r4!, {r0, r1}
 800026a:	8022      	strh	r2, [r4, #0]
 800026c:	3402      	adds	r4, #2
 800026e:	0c13      	lsrs	r3, r2, #16
 8000270:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000272:	f00a fc27 	bl	800aac4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f009 fe84 	bl	8009f86 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800027e:	bf00      	nop
}
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bdb0      	pop	{r4, r5, r7, pc}
 8000286:	bf00      	nop
 8000288:	0800b1d4 	.word	0x0800b1d4

0800028c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]
 80002b0:	e038      	b.n	8000324 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80002b2:	7ffb      	ldrb	r3, [r7, #31]
 80002b4:	4a44      	ldr	r2, [pc, #272]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4413      	add	r3, r2
 80002ba:	799b      	ldrb	r3, [r3, #6]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d02b      	beq.n	8000318 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002c0:	7ffb      	ldrb	r3, [r7, #31]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002c8:	4a40      	ldr	r2, [pc, #256]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d01b      	beq.n	8000306 <APPD_SetCPU2GpioConfig+0x7a>
 80002ce:	4a3f      	ldr	r2, [pc, #252]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d823      	bhi.n	800031c <APPD_SetCPU2GpioConfig+0x90>
 80002d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002d8:	d003      	beq.n	80002e2 <APPD_SetCPU2GpioConfig+0x56>
 80002da:	4a3d      	ldr	r2, [pc, #244]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d009      	beq.n	80002f4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002e0:	e01c      	b.n	800031c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002e2:	7ffb      	ldrb	r3, [r7, #31]
 80002e4:	4a38      	ldr	r2, [pc, #224]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4413      	add	r3, r2
 80002ea:	889a      	ldrh	r2, [r3, #4]
 80002ec:	8bbb      	ldrh	r3, [r7, #28]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	83bb      	strh	r3, [r7, #28]
          break;
 80002f2:	e014      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002f4:	7ffb      	ldrb	r3, [r7, #31]
 80002f6:	4a34      	ldr	r2, [pc, #208]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	4413      	add	r3, r2
 80002fc:	889a      	ldrh	r2, [r3, #4]
 80002fe:	8b7b      	ldrh	r3, [r7, #26]
 8000300:	4313      	orrs	r3, r2
 8000302:	837b      	strh	r3, [r7, #26]
          break;
 8000304:	e00b      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	4413      	add	r3, r2
 800030e:	889a      	ldrh	r2, [r3, #4]
 8000310:	8b3b      	ldrh	r3, [r7, #24]
 8000312:	4313      	orrs	r3, r2
 8000314:	833b      	strh	r3, [r7, #24]
          break;
 8000316:	e002      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000318:	bf00      	nop
 800031a:	e000      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800031c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800031e:	7ffb      	ldrb	r3, [r7, #31]
 8000320:	3301      	adds	r3, #1
 8000322:	77fb      	strb	r3, [r7, #31]
 8000324:	7ffb      	ldrb	r3, [r7, #31]
 8000326:	2b25      	cmp	r3, #37	; 0x25
 8000328:	d9c3      	bls.n	80002b2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000336:	8bbb      	ldrh	r3, [r7, #28]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d014      	beq.n	8000366 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800033c:	8bbb      	ldrh	r3, [r7, #28]
 800033e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ff41 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff57 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f004 fa70 	bl	8004838 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000358:	8bbb      	ldrh	r3, [r7, #28]
 800035a:	2200      	movs	r2, #0
 800035c:	4619      	mov	r1, r3
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f004 fbd9 	bl	8004b18 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000366:	8b7b      	ldrh	r3, [r7, #26]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d012      	beq.n	8000392 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800036c:	8b7b      	ldrh	r3, [r7, #26]
 800036e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	2002      	movs	r0, #2
 8000372:	f7ff ff29 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000376:	2002      	movs	r0, #2
 8000378:	f7ff ff3f 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 8000382:	f004 fa59 	bl	8004838 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000386:	8b7b      	ldrh	r3, [r7, #26]
 8000388:	2200      	movs	r2, #0
 800038a:	4619      	mov	r1, r3
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 800038e:	f004 fbc3 	bl	8004b18 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000392:	8b3b      	ldrh	r3, [r7, #24]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d013      	beq.n	80003c0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000398:	8b3b      	ldrh	r3, [r7, #24]
 800039a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	2004      	movs	r0, #4
 800039e:	f7ff ff13 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003a2:	2004      	movs	r0, #4
 80003a4:	f7ff ff29 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ae:	f004 fa43 	bl	8004838 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ba:	f004 fbad 	bl	8004b18 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
}
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	0800b26c 	.word	0x0800b26c
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400

080003d4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003d8:	bf00      	nop
}
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <LL_C2_PWR_SetPowerMode+0x28>)
 80003ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f2:	f023 0207 	bic.w	r2, r3, #7
 80003f6:	4905      	ldr	r1, [pc, #20]	; (800040c <LL_C2_PWR_SetPowerMode+0x28>)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	58000400 	.word	0x58000400

08000410 <LL_EXTI_EnableIT_32_63>:
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <LL_EXTI_EnableIT_32_63+0x24>)
 800041a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800041e:	4905      	ldr	r1, [pc, #20]	; (8000434 <LL_EXTI_EnableIT_32_63+0x24>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4313      	orrs	r3, r2
 8000424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	58000800 	.word	0x58000800

08000438 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000446:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800044a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000452:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800045e:	4313      	orrs	r3, r2
 8000460:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	cafecafe 	.word	0xcafecafe

08000474 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	608b      	str	r3, [r1, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <LL_DBGMCU_GetDeviceID+0x18>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e0042000 	.word	0xe0042000

080004b8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <LL_DBGMCU_GetRevisionID+0x18>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	0c1b      	lsrs	r3, r3, #16
 80004c2:	b29b      	uxth	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e0042000 	.word	0xe0042000

080004d4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LL_LPM_EnableSleep+0x1c>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <LL_LPM_EnableSleep+0x1c>)
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	6113      	str	r3, [r2, #16]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	22ff      	movs	r2, #255	; 0xff
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	22ca      	movs	r2, #202	; 0xca
 800051a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2253      	movs	r2, #83	; 0x53
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f023 0207 	bic.w	r2, r3, #7
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	609a      	str	r2, [r3, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <MX_APPE_Config+0x18>)
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000560:	f000 f830 	bl	80005c4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000564:	f000 f835 	bl	80005d2 <Config_HSE>

  return;
 8000568:	bf00      	nop
}
 800056a:	bd80      	pop	{r7, pc}
 800056c:	58004000 	.word	0x58004000

08000570 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000574:	f000 f841 	bl	80005fa <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000578:	f000 f85a 	bl	8000630 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800057c:	4909      	ldr	r1, [pc, #36]	; (80005a4 <MX_APPE_Init+0x34>)
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fe56 	bl	8001230 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000584:	f7ff fe55 	bl	8000232 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000588:	2101      	movs	r1, #1
 800058a:	2001      	movs	r0, #1
 800058c:	f00a fb38 	bl	800ac00 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000590:	f000 f927 	bl	80007e2 <Led_Init>

  Button_Init();
 8000594:	f000 f92c 	bl	80007f0 <Button_Init>
  
  RxUART_Init();
 8000598:	f000 f9ba 	bl	8000910 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800059c:	f000 f856 	bl	800064c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80005a0:	bf00      	nop
}
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000504 	.word	0x20000504

080005a8 <Init_Smps>:

void Init_Smps(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005ac:	bf00      	nop
}
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <Init_Exti>:

void Init_Exti(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80005ba:	2050      	movs	r0, #80	; 0x50
 80005bc:	f7ff ff28 	bl	8000410 <LL_EXTI_EnableIT_32_63>

  return;
 80005c0:	bf00      	nop
}
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80005c8:	bf00      	nop
}
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f009 fc95 	bl	8009f08 <OTP_Read>
 80005de:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	799b      	ldrb	r3, [r3, #6]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff24 	bl	8000438 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
}
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <System_Init>:

static void System_Init(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  Init_Smps();
 80005fe:	f7ff ffd3 	bl	80005a8 <Init_Smps>

  Init_Exti();
 8000602:	f7ff ffd8 	bl	80005b6 <Init_Exti>

  Init_Rtc();
 8000606:	f000 f803 	bl	8000610 <Init_Rtc>

  return;
 800060a:	bf00      	nop
}
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <Init_Rtc+0x1c>)
 8000616:	f7ff ff7a 	bl	800050e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800061a:	2100      	movs	r1, #0
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <Init_Rtc+0x1c>)
 800061e:	f7ff ff86 	bl	800052e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000622:	4802      	ldr	r0, [pc, #8]	; (800062c <Init_Rtc+0x1c>)
 8000624:	f7ff ff66 	bl	80004f4 <LL_RTC_EnableWriteProtection>

  return;
 8000628:	bf00      	nop
}
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40002800 	.word	0x40002800

08000630 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000634:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000638:	f7ff ff1c 	bl	8000474 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800063c:	f00a face 	bl	800abdc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000640:	2004      	movs	r0, #4
 8000642:	f7ff fecf 	bl	80003e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000646:	bf00      	nop
}
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000652:	f00a f881 	bl	800a758 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <appe_Tl_Init+0x50>)
 8000658:	2100      	movs	r1, #0
 800065a:	2040      	movs	r0, #64	; 0x40
 800065c:	f00a fc32 	bl	800aec4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <appe_Tl_Init+0x54>)
 8000662:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <appe_Tl_Init+0x58>)
 8000666:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	480e      	ldr	r0, [pc, #56]	; (80006a8 <appe_Tl_Init+0x5c>)
 800066e:	f009 fd65 	bl	800a13c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <appe_Tl_Init+0x60>)
 8000674:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <appe_Tl_Init+0x64>)
 8000678:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <appe_Tl_Init+0x68>)
 800067c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800067e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000682:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4618      	mov	r0, r3
 800068a:	f00a f9a7 	bl	800a9dc <TL_MM_Init>

  TL_Enable();
 800068e:	f00a f85d 	bl	800a74c <TL_Enable>

  return;
 8000692:	bf00      	nop
}
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	0800a175 	.word	0x0800a175
 80006a0:	20030734 	.word	0x20030734
 80006a4:	080006b9 	.word	0x080006b9
 80006a8:	080006d1 	.word	0x080006d1
 80006ac:	2003094c 	.word	0x2003094c
 80006b0:	20030840 	.word	0x20030840
 80006b4:	200301f8 	.word	0x200301f8

080006b8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80006c2:	bf00      	nop
}
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	330b      	adds	r3, #11
 80006de:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d81f      	bhi.n	800072e <APPE_SysUserEvtRx+0x5e>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <APPE_SysUserEvtRx+0x24>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000715 	.word	0x08000715
 80006f8:	08000727 	.word	0x08000727
 80006fc:	0800072f 	.word	0x0800072f
 8000700:	0800072f 	.word	0x0800072f
 8000704:	0800072f 	.word	0x0800072f
 8000708:	0800072f 	.word	0x0800072f
 800070c:	0800072f 	.word	0x0800072f
 8000710:	0800072f 	.word	0x0800072f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4618      	mov	r0, r3
 800071a:	f009 fc61 	bl	8009fe0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f81b 	bl	800075a <APPE_SysEvtReadyProcessing>
    break;
 8000724:	e004      	b.n	8000730 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f806 	bl	8000738 <APPE_SysEvtError>
    break;
 800072c:	e000      	b.n	8000730 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800072e:	bf00      	nop
  }

  return;
 8000730:	bf00      	nop
}
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	330b      	adds	r3, #11
 8000746:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3302      	adds	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800074e:	bf00      	nop
}
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b08a      	sub	sp, #40	; 0x28
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	330b      	adds	r3, #11
 800077e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	3302      	adds	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d11d      	bne.n	80007ca <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800078e:	f7ff fd61 	bl	8000254 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000792:	230f      	movs	r3, #15
 8000794:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000796:	237f      	movs	r3, #127	; 0x7f
 8000798:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800079a:	f7ff fe8d 	bl	80004b8 <LL_DBGMCU_GetRevisionID>
 800079e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80007a6:	f7ff fe79 	bl	800049c <LL_DBGMCU_GetDeviceID>
 80007aa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f009 fbfc 	bl	8009fb4 <SHCI_C2_Config>

    APP_BLE_Init();
 80007bc:	f001 fdae 	bl	800231c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2001      	movs	r0, #1
 80007c4:	f00a fa1c 	bl	800ac00 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80007c8:	e007      	b.n	80007da <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d103      	bne.n	80007da <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  return;
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
}
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 80007e6:	bf00      	nop
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <Button_Init>:

static void Button_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 fcb4 	bl	8003164 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2001      	movs	r0, #1
 8000800:	f002 fcb0 	bl	8003164 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000804:	2101      	movs	r1, #1
 8000806:	2002      	movs	r0, #2
 8000808:	f002 fcac 	bl	8003164 <BSP_PB_Init>
#endif

  return;
 800080c:	bf00      	nop
}
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f002 fdf8 	bl	800340c <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d00a      	beq.n	8000840 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800082a:	f002 fe07 	bl	800343c <HAL_GetTickFreq>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000838:	e002      	b.n	8000840 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800083a:	f7ff fe4b 	bl	80004d4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800083e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000840:	f002 fde4 	bl	800340c <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f4      	bhi.n	800083a <HAL_Delay+0x2a>
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
 8000862:	f00a fa33 	bl	800accc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800086e:	f00a f9f7 	bl	800ac60 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000872:	bf00      	nop
}
 8000874:	bd80      	pop	{r7, pc}

08000876 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f00a fa22 	bl	800accc <UTIL_SEQ_Run>

  return;
 8000888:	bf00      	nop
}
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000898:	2100      	movs	r1, #0
 800089a:	2040      	movs	r0, #64	; 0x40
 800089c:	f00a fb34 	bl	800af08 <UTIL_SEQ_SetTask>
  return;
 80008a0:	bf00      	nop
}
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f00a fb95 	bl	800afe0 <UTIL_SEQ_SetEvt>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f00a fbaa 	bl	800b020 <UTIL_SEQ_WaitEvt>
  return;
 80008cc:	bf00      	nop
}
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	2b10      	cmp	r3, #16
 80008e2:	d006      	beq.n	80008f2 <HAL_GPIO_EXTI_Callback+0x1e>
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	dc0d      	bgt.n	8000904 <HAL_GPIO_EXTI_Callback+0x30>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0x24>
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80008f0:	e008      	b.n	8000904 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80008f2:	f001 fe41 	bl	8002578 <APP_BLE_Key_Button1_Action>
      break; 
 80008f6:	e006      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80008f8:	f001 fe4c 	bl	8002594 <APP_BLE_Key_Button2_Action>
      break; 
 80008fc:	e003      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80008fe:	f001 fe5b 	bl	80025b8 <APP_BLE_Key_Button3_Action>
      break;
 8000902:	e000      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000904:	bf00      	nop

  }
  return;
 8000906:	bf00      	nop
}
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <RxUART_Init>:

static void RxUART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <RxUART_Init+0x14>)
 8000916:	2201      	movs	r2, #1
 8000918:	4903      	ldr	r1, [pc, #12]	; (8000928 <RxUART_Init+0x18>)
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fef4 	bl	8001708 <HW_UART_Receive_IT>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800092d 	.word	0x0800092d
 8000928:	200000b4 	.word	0x200000b4

0800092c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <RxCpltCallback+0x54>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d81a      	bhi.n	800096e <RxCpltCallback+0x42>
  {
    if (aRxBuffer[0] == '\r')
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <RxCpltCallback+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b0d      	cmp	r3, #13
 800093e:	d10b      	bne.n	8000958 <RxCpltCallback+0x2c>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      UartCmdExecute();
 8000940:	f000 f826 	bl	8000990 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <RxCpltCallback+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <RxCpltCallback+0x5c>)
 8000952:	f00a fc2b 	bl	800b1ac <memset>
 8000956:	e00a      	b.n	800096e <RxCpltCallback+0x42>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <RxCpltCallback+0x54>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	b291      	uxth	r1, r2
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <RxCpltCallback+0x54>)
 8000962:	8011      	strh	r1, [r2, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <RxCpltCallback+0x58>)
 8000968:	7819      	ldrb	r1, [r3, #0]
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <RxCpltCallback+0x5c>)
 800096c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <RxCpltCallback+0x60>)
 8000970:	2201      	movs	r2, #1
 8000972:	4904      	ldr	r1, [pc, #16]	; (8000984 <RxCpltCallback+0x58>)
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fec7 	bl	8001708 <HW_UART_Receive_IT>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001bc 	.word	0x200001bc
 8000984:	200000b4 	.word	0x200000b4
 8000988:	200000bc 	.word	0x200000bc
 800098c:	0800092d 	.word	0x0800092d

08000990 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8000994:	4915      	ldr	r1, [pc, #84]	; (80009ec <UartCmdExecute+0x5c>)
 8000996:	4816      	ldr	r0, [pc, #88]	; (80009f0 <UartCmdExecute+0x60>)
 8000998:	f7ff fbf0 	bl	800017c <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d106      	bne.n	80009b0 <UartCmdExecute+0x20>
  {
    APP_DBG_MSG("SW1 OK\n");
    exti_handle.Line = EXTI_LINE_4;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <UartCmdExecute+0x64>)
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <UartCmdExecute+0x68>)
 80009a6:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <UartCmdExecute+0x64>)
 80009aa:	f003 ff23 	bl	80047f4 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80009ae:	e01b      	b.n	80009e8 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80009b0:	4912      	ldr	r1, [pc, #72]	; (80009fc <UartCmdExecute+0x6c>)
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <UartCmdExecute+0x60>)
 80009b4:	f7ff fbe2 	bl	800017c <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d107      	bne.n	80009ce <UartCmdExecute+0x3e>
    exti_handle.Line = EXTI_LINE_0;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <UartCmdExecute+0x64>)
 80009c0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80009c4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <UartCmdExecute+0x64>)
 80009c8:	f003 ff14 	bl	80047f4 <HAL_EXTI_GenerateSWI>
}
 80009cc:	e00c      	b.n	80009e8 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80009ce:	490c      	ldr	r1, [pc, #48]	; (8000a00 <UartCmdExecute+0x70>)
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <UartCmdExecute+0x60>)
 80009d2:	f7ff fbd3 	bl	800017c <strcmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <UartCmdExecute+0x58>
    exti_handle.Line = EXTI_LINE_1;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <UartCmdExecute+0x64>)
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <UartCmdExecute+0x74>)
 80009e0:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <UartCmdExecute+0x64>)
 80009e4:	f003 ff06 	bl	80047f4 <HAL_EXTI_GenerateSWI>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800b1f0 	.word	0x0800b1f0
 80009f0:	200000bc 	.word	0x200000bc
 80009f4:	200000ac 	.word	0x200000ac
 80009f8:	16000004 	.word	0x16000004
 80009fc:	0800b1f4 	.word	0x0800b1f4
 8000a00:	0800b1f8 	.word	0x0800b1f8
 8000a04:	16000001 	.word	0x16000001

08000a08 <LL_EXTI_EnableIT_0_31>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a16:	4905      	ldr	r1, [pc, #20]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58000800 	.word	0x58000800

08000a30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]

}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000800 	.word	0x58000800

08000a54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a6a:	e005      	b.n	8000a78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d1f5      	bne.n	8000a6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a80:	683b      	ldr	r3, [r7, #0]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40002800 	.word	0x40002800

08000a94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3315      	adds	r3, #21
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d009      	beq.n	8000ad2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	4916      	ldr	r1, [pc, #88]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	7bfa      	ldrb	r2, [r7, #15]
 8000ae4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	3314      	adds	r3, #20
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <LinkTimerAfter+0x88>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	440b      	add	r3, r1
 8000b08:	3315      	adds	r3, #21
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	701a      	strb	r2, [r3, #0]

  return;
 8000b0e:	bf00      	nop
}
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200001c0 	.word	0x200001c0

08000b20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <LinkTimerBefore+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d032      	beq.n	8000ba2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4927      	ldr	r1, [pc, #156]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	4922      	ldr	r1, [pc, #136]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3315      	adds	r3, #21
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3315      	adds	r3, #21
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	4918      	ldr	r1, [pc, #96]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	3314      	adds	r3, #20
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ba0:	e014      	b.n	8000bcc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	3315      	adds	r3, #21
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	701a      	strb	r2, [r3, #0]
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000250 	.word	0x20000250
 8000bdc:	200001c0 	.word	0x200001c0

08000be0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <linkTimer+0x144>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d118      	bne.n	8000c26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <linkTimer+0x148>)
 8000bfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <linkTimer+0x144>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	4949      	ldr	r1, [pc, #292]	; (8000d2c <linkTimer+0x14c>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	2206      	movs	r2, #6
 8000c16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <linkTimer+0x150>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	e078      	b.n	8000d18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c26:	f000 f909 	bl	8000e3c <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	493e      	ldr	r1, [pc, #248]	; (8000d2c <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	4419      	add	r1, r3
 8000c46:	4839      	ldr	r0, [pc, #228]	; (8000d2c <linkTimer+0x14c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4403      	add	r3, r0
 8000c52:	3308      	adds	r3, #8
 8000c54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4934      	ldr	r1, [pc, #208]	; (8000d2c <linkTimer+0x14c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <linkTimer+0x144>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <linkTimer+0x14c>)
 8000c74:	460b      	mov	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3308      	adds	r3, #8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d337      	bcc.n	8000cf8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <linkTimer+0x144>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca2:	e013      	b.n	8000ccc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ca4:	7b7a      	ldrb	r2, [r7, #13]
 8000ca6:	4921      	ldr	r1, [pc, #132]	; (8000d2c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3315      	adds	r3, #21
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cb8:	7b7a      	ldrb	r2, [r7, #13]
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <linkTimer+0x14c>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3315      	adds	r3, #21
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d00b      	beq.n	8000cea <linkTimer+0x10a>
 8000cd2:	7b3a      	ldrb	r2, [r7, #12]
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <linkTimer+0x14c>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d2dc      	bcs.n	8000ca4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cea:	7b7a      	ldrb	r2, [r7, #13]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fecf 	bl	8000a94 <LinkTimerAfter>
 8000cf6:	e00f      	b.n	8000d18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <linkTimer+0x144>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff0c 	bl	8000b20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <linkTimer+0x144>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <linkTimer+0x148>)
 8000d10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <linkTimer+0x144>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000250 	.word	0x20000250
 8000d28:	20000251 	.word	0x20000251
 8000d2c:	200001c0 	.word	0x200001c0
 8000d30:	20000254 	.word	0x20000254

08000d34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d111      	bne.n	8000d74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <UnlinkTimer+0xfc>)
 8000d58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <UnlinkTimer+0x100>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3315      	adds	r3, #21
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e03e      	b.n	8000df2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	492f      	ldr	r1, [pc, #188]	; (8000e34 <UnlinkTimer+0x100>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3314      	adds	r3, #20
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	492a      	ldr	r1, [pc, #168]	; (8000e34 <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <UnlinkTimer+0x100>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3315      	adds	r3, #21
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <UnlinkTimer+0x100>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3315      	adds	r3, #21
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d013      	beq.n	8000df2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <UnlinkTimer+0x100>)
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3314      	adds	r3, #20
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <UnlinkTimer+0x100>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3314      	adds	r3, #20
 8000dee:	4602      	mov	r2, r0
 8000df0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	490f      	ldr	r1, [pc, #60]	; (8000e34 <UnlinkTimer+0x100>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	330c      	adds	r3, #12
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <UnlinkTimer+0xf8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b06      	cmp	r3, #6
 8000e0e:	d107      	bne.n	8000e20 <UnlinkTimer+0xec>
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <UnlinkTimer+0x104>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
}
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000250 	.word	0x20000250
 8000e30:	20000251 	.word	0x20000251
 8000e34:	200001c0 	.word	0x200001c0
 8000e38:	20000254 	.word	0x20000254

08000e3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d026      	beq.n	8000e9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e4c:	f7ff fe02 	bl	8000a54 <ReadRtcSsrValue>
 8000e50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d805      	bhi.n	8000e68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	e00a      	b.n	8000e7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ReturnTimeElapsed+0x74>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <ReturnTimeElapsed+0x78>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <ReturnTimeElapsed+0x7c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	40d3      	lsrs	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	b29b      	uxth	r3, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000254 	.word	0x20000254
 8000eb0:	2000025c 	.word	0x2000025c
 8000eb4:	2000025a 	.word	0x2000025a
 8000eb8:	20000259 	.word	0x20000259

08000ebc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d108      	bne.n	8000ede <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ecc:	f7ff fdc2 	bl	8000a54 <ReadRtcSsrValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <RestartWakeupCounter+0x9c>)
 8000ed4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f003 fb03 	bl	80044e2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000edc:	e039      	b.n	8000f52 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d803      	bhi.n	8000eec <RestartWakeupCounter+0x30>
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <RestartWakeupCounter+0xa0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d002      	beq.n	8000ef2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000ef2:	bf00      	nop
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f8      	beq.n	8000ef4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f12:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000f16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f1a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f003 faee 	bl	80044fe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	0c1b      	lsrs	r3, r3, #16
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	88fa      	ldrh	r2, [r7, #6]
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f32:	f7ff fd8f 	bl	8000a54 <ReadRtcSsrValue>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <RestartWakeupCounter+0x9c>)
 8000f3a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f4c:	f3af 8000 	nop.w
  return ;
 8000f50:	bf00      	nop
}
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000254 	.word	0x20000254
 8000f5c:	20000259 	.word	0x20000259
 8000f60:	20000504 	.word	0x20000504
 8000f64:	58000800 	.word	0x58000800
 8000f68:	40002800 	.word	0x40002800

08000f6c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <RescheduleTimerList+0x11c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d107      	bne.n	8000f90 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f80:	bf00      	nop
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <RescheduleTimerList+0x120>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f8      	bne.n	8000f82 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f90:	4b3e      	ldr	r3, [pc, #248]	; (800108c <RescheduleTimerList+0x120>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <RescheduleTimerList+0x120>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f9e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <RescheduleTimerList+0x124>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	493a      	ldr	r1, [pc, #232]	; (8001094 <RescheduleTimerList+0x128>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fba:	f7ff ff3f 	bl	8000e3c <ReturnTimeElapsed>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d205      	bcs.n	8000fd6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <RescheduleTimerList+0x12c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e04d      	b.n	8001072 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <RescheduleTimerList+0x130>)
 8000fda:	8812      	ldrh	r2, [r2, #0]
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d906      	bls.n	8000ff6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <RescheduleTimerList+0x130>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <RescheduleTimerList+0x12c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e03d      	b.n	8001072 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <RescheduleTimerList+0x12c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001006:	e034      	b.n	8001072 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	4922      	ldr	r1, [pc, #136]	; (8001094 <RescheduleTimerList+0x128>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3308      	adds	r3, #8
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	429a      	cmp	r2, r3
 800101e:	d20a      	bcs.n	8001036 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	491c      	ldr	r1, [pc, #112]	; (8001094 <RescheduleTimerList+0x128>)
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e013      	b.n	800105e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3308      	adds	r3, #8
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	1ac9      	subs	r1, r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <RescheduleTimerList+0x128>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4403      	add	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <RescheduleTimerList+0x128>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3315      	adds	r3, #21
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b06      	cmp	r3, #6
 8001076:	d1c7      	bne.n	8001008 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001078:	89bb      	ldrh	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff1e 	bl	8000ebc <RestartWakeupCounter>

  return ;
 8001080:	bf00      	nop
}
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40002800 	.word	0x40002800
 800108c:	20000504 	.word	0x20000504
 8001090:	20000250 	.word	0x20000250
 8001094:	200001c0 	.word	0x200001c0
 8001098:	20000258 	.word	0x20000258
 800109c:	2000025e 	.word	0x2000025e

080010a0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010a6:	f3ef 8310 	mrs	r3, PRIMASK
 80010aa:	617b      	str	r3, [r7, #20]
  return(result);
 80010ac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	; 0xca
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	; 0x53
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	4b54      	ldr	r3, [pc, #336]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010d4:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010e0:	4950      	ldr	r1, [pc, #320]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	330c      	adds	r3, #12
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d16e      	bne.n	80011d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fa:	494a      	ldr	r1, [pc, #296]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800110a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800110e:	4945      	ldr	r1, [pc, #276]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	3310      	adds	r3, #16
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d04c      	beq.n	80011c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800112a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800112e:	493d      	ldr	r1, [pc, #244]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	330d      	adds	r3, #13
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d124      	bne.n	800118e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdf2 	bl	8000d34 <UnlinkTimer>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f383 8810 	msr	PRIMASK, r3
}
 800115a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800115c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001160:	4930      	ldr	r1, [pc, #192]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	3304      	adds	r3, #4
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fa32 	bl	80015e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	; 0xca
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	; 0x53
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
 800118c:	e012      	b.n	80011b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f383 8810 	msr	PRIMASK, r3
}
 8001198:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800119a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f99a 	bl	80014d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	22ca      	movs	r2, #202	; 0xca
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2253      	movs	r2, #83	; 0x53
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	4619      	mov	r1, r3
 80011bc:	69b8      	ldr	r0, [r7, #24]
 80011be:	f000 fa95 	bl	80016ec <HW_TS_RTC_Int_AppNot>
 80011c2:	e022      	b.n	800120a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80011c4:	f7ff fed2 	bl	8000f6c <RescheduleTimerList>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f383 8810 	msr	PRIMASK, r3
}
 80011d2:	e01a      	b.n	800120a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011d4:	bf00      	nop
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f8      	beq.n	80011d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f383 8810 	msr	PRIMASK, r3
}
 8001208:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001212:	bf00      	nop
}
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000504 	.word	0x20000504
 8001220:	20000250 	.word	0x20000250
 8001224:	200001c0 	.word	0x200001c0
 8001228:	20000258 	.word	0x20000258
 800122c:	58000800 	.word	0x58000800

08001230 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	22ca      	movs	r2, #202	; 0xca
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
 8001244:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HW_TS_Init+0x188>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2253      	movs	r2, #83	; 0x53
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HW_TS_Init+0x18c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <HW_TS_Init+0x18c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HW_TS_Init+0x18c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f1c3 0304 	rsb	r3, r3, #4
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HW_TS_Init+0x190>)
 800126c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HW_TS_Init+0x18c>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001276:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800127a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	2a00      	cmp	r2, #0
 800128c:	d101      	bne.n	8001292 <HW_TS_Init+0x62>
  {
    return 32U;
 800128e:	2220      	movs	r2, #32
 8001290:	e003      	b.n	800129a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	fab2 f282 	clz	r2, r2
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	40d3      	lsrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HW_TS_Init+0x194>)
 80012a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <HW_TS_Init+0x18c>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HW_TS_Init+0x198>)
 80012b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HW_TS_Init+0x198>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <HW_TS_Init+0x194>)
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HW_TS_Init+0x190>)
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	40d3      	lsrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012da:	4293      	cmp	r3, r2
 80012dc:	d904      	bls.n	80012e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HW_TS_Init+0x19c>)
 80012e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e003      	b.n	80012f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HW_TS_Init+0x19c>)
 80012ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012f4:	f7ff fb9c 	bl	8000a30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012fc:	f7ff fb84 	bl	8000a08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13d      	bne.n	8001382 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Init+0x1a0>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HW_TS_Init+0x1a4>)
 800130e:	f04f 32ff 	mov.w	r2, #4294967295
 8001312:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e00c      	b.n	8001334 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	492e      	ldr	r1, [pc, #184]	; (80013d8 <HW_TS_Init+0x1a8>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	330c      	adds	r3, #12
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	3301      	adds	r3, #1
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b05      	cmp	r3, #5
 8001338:	d9ef      	bls.n	800131a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HW_TS_Init+0x1ac>)
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HW_TS_Init+0x188>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HW_TS_Init+0x188>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HW_TS_Init+0x188>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HW_TS_Init+0x188>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001360:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HW_TS_Init+0x1b0>)
 8001364:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001368:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800136a:	2003      	movs	r0, #3
 800136c:	f003 f8c7 	bl	80044fe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HW_TS_Init+0x188>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HW_TS_Init+0x188>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e009      	b.n	8001396 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HW_TS_Init+0x188>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001390:	2003      	movs	r0, #3
 8001392:	f003 f8a6 	bl	80044e2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HW_TS_Init+0x188>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800139e:	2200      	movs	r2, #0
 80013a0:	2103      	movs	r1, #3
 80013a2:	2003      	movs	r0, #3
 80013a4:	f003 f85b 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f003 f872 	bl	8004492 <HAL_NVIC_EnableIRQ>

  return;
 80013ae:	bf00      	nop
}
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000504 	.word	0x20000504
 80013bc:	40002800 	.word	0x40002800
 80013c0:	20000259 	.word	0x20000259
 80013c4:	2000025a 	.word	0x2000025a
 80013c8:	2000025c 	.word	0x2000025c
 80013cc:	2000025e 	.word	0x2000025e
 80013d0:	20000258 	.word	0x20000258
 80013d4:	20000254 	.word	0x20000254
 80013d8:	200001c0 	.word	0x200001c0
 80013dc:	20000250 	.word	0x20000250
 80013e0:	58000800 	.word	0x58000800

080013e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fa:	f3ef 8310 	mrs	r3, PRIMASK
 80013fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8001400:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001408:	e004      	b.n	8001414 <HW_TS_Create+0x30>
  {
    loop++;
 800140a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140e:	3301      	adds	r3, #1
 8001410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001418:	2b05      	cmp	r3, #5
 800141a:	d80c      	bhi.n	8001436 <HW_TS_Create+0x52>
 800141c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001420:	492c      	ldr	r1, [pc, #176]	; (80014d4 <HW_TS_Create+0xf0>)
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	330c      	adds	r3, #12
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e9      	bne.n	800140a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800143a:	2b06      	cmp	r3, #6
 800143c:	d038      	beq.n	80014b0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800143e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001442:	4924      	ldr	r1, [pc, #144]	; (80014d4 <HW_TS_Create+0xf0>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	330c      	adds	r3, #12
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f383 8810 	msr	PRIMASK, r3
}
 800145e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001464:	491b      	ldr	r1, [pc, #108]	; (80014d4 <HW_TS_Create+0xf0>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3310      	adds	r3, #16
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001476:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800147a:	4916      	ldr	r1, [pc, #88]	; (80014d4 <HW_TS_Create+0xf0>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	330d      	adds	r3, #13
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800148c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001490:	4910      	ldr	r1, [pc, #64]	; (80014d4 <HW_TS_Create+0xf0>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014a6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ae:	e008      	b.n	80014c2 <HW_TS_Create+0xde>
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f383 8810 	msr	PRIMASK, r3
}
 80014ba:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200001c0 	.word	0x200001c0

080014d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014e2:	f3ef 8310 	mrs	r3, PRIMASK
 80014e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80014e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014f0:	2003      	movs	r0, #3
 80014f2:	f002 ffdc 	bl	80044ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HW_TS_Stop+0xf0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22ca      	movs	r2, #202	; 0xca
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2253      	movs	r2, #83	; 0x53
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	4930      	ldr	r1, [pc, #192]	; (80015cc <HW_TS_Stop+0xf4>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	330c      	adds	r3, #12
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d142      	bne.n	80015a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc06 	bl	8000d34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HW_TS_Stop+0xf8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	2b06      	cmp	r3, #6
 8001532:	d12f      	bne.n	8001594 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HW_TS_Stop+0xfc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001540:	d107      	bne.n	8001552 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001542:	bf00      	nop
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f8      	bne.n	8001544 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HW_TS_Stop+0xf0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001560:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001562:	bf00      	nop
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f8      	beq.n	8001564 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HW_TS_Stop+0xf0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001582:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HW_TS_Stop+0x100>)
 8001586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800158a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800158c:	2003      	movs	r0, #3
 800158e:	f002 ffb6 	bl	80044fe <HAL_NVIC_ClearPendingIRQ>
 8001592:	e007      	b.n	80015a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HW_TS_Stop+0x104>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	7cfa      	ldrb	r2, [r7, #19]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80015a0:	f7ff fce4 	bl	8000f6c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HW_TS_Stop+0xf0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	22ff      	movs	r2, #255	; 0xff
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015ac:	2003      	movs	r0, #3
 80015ae:	f002 ff70 	bl	8004492 <HAL_NVIC_EnableIRQ>
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f383 8810 	msr	PRIMASK, r3
}
 80015bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015be:	bf00      	nop
}
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000504 	.word	0x20000504
 80015cc:	200001c0 	.word	0x200001c0
 80015d0:	20000250 	.word	0x20000250
 80015d4:	40002800 	.word	0x40002800
 80015d8:	58000800 	.word	0x58000800
 80015dc:	20000251 	.word	0x20000251

080015e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	493b      	ldr	r1, [pc, #236]	; (80016dc <HW_TS_Start+0xfc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	330c      	adds	r3, #12
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d103      	bne.n	800160c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff66 	bl	80014d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800160c:	f3ef 8310 	mrs	r3, PRIMASK
 8001610:	60fb      	str	r3, [r7, #12]
  return(result);
 8001612:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800161a:	2003      	movs	r0, #3
 800161c:	f002 ff47 	bl	80044ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HW_TS_Start+0x100>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22ca      	movs	r2, #202	; 0xca
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HW_TS_Start+0x100>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2253      	movs	r2, #83	; 0x53
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	492a      	ldr	r1, [pc, #168]	; (80016dc <HW_TS_Start+0xfc>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	4925      	ldr	r1, [pc, #148]	; (80016dc <HW_TS_Start+0xfc>)
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3308      	adds	r3, #8
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	4920      	ldr	r1, [pc, #128]	; (80016dc <HW_TS_Start+0xfc>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3304      	adds	r3, #4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fab6 	bl	8000be0 <linkTimer>
 8001674:	4603      	mov	r3, r0
 8001676:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HW_TS_Start+0x104>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HW_TS_Start+0x108>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	7c7a      	ldrb	r2, [r7, #17]
 8001686:	429a      	cmp	r2, r3
 8001688:	d002      	beq.n	8001690 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800168a:	f7ff fc6f 	bl	8000f6c <RescheduleTimerList>
 800168e:	e013      	b.n	80016b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4912      	ldr	r1, [pc, #72]	; (80016dc <HW_TS_Start+0xfc>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3308      	adds	r3, #8
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	1ac9      	subs	r1, r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <HW_TS_Start+0xfc>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4403      	add	r3, r0
 80016b4:	3308      	adds	r3, #8
 80016b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HW_TS_Start+0x100>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c0:	2003      	movs	r0, #3
 80016c2:	f002 fee6 	bl	8004492 <HAL_NVIC_EnableIRQ>
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f383 8810 	msr	PRIMASK, r3
}
 80016d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d2:	bf00      	nop
}
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001c0 	.word	0x200001c0
 80016e0:	20000504 	.word	0x20000504
 80016e4:	20000250 	.word	0x20000250
 80016e8:	20000251 	.word	0x20000251

080016ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4798      	blx	r3

  return;
 80016fe:	bf00      	nop
}
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	4613      	mov	r3, r2
 8001718:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10c      	bne.n	800173a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HW_UART_Receive_IT+0x3c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HW_UART_Receive_IT+0x40>)
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HW_UART_Receive_IT+0x44>)
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	89bb      	ldrh	r3, [r7, #12]
 800172e:	461a      	mov	r2, r3
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HW_UART_Receive_IT+0x40>)
 8001734:	f005 fa44 	bl	8006bc0 <HAL_UART_Receive_IT>
            break;
 8001738:	e000      	b.n	800173c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800173a:	bf00      	nop
    }

    return;
 800173c:	bf00      	nop
}
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000260 	.word	0x20000260
 8001748:	2000039c 	.word	0x2000039c
 800174c:	40013800 	.word	0x40013800

08001750 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_UART_RxCpltCallback+0x34>)
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_UART_RxCpltCallback+0x38>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_UART_RxCpltCallback+0x38>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4798      	blx	r3
            }
            break;
 8001772:	e001      	b.n	8001778 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001778:	bf00      	nop
    }

    return;
 800177a:	bf00      	nop
}
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40013800 	.word	0x40013800
 8001788:	20000260 	.word	0x20000260

0800178c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_UART_TxCpltCallback+0x34>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_UART_TxCpltCallback+0x38>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_UART_TxCpltCallback+0x38>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4798      	blx	r3
            }
            break;
 80017ae:	e001      	b.n	80017b4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80017b4:	bf00      	nop
    }

    return;
 80017b6:	bf00      	nop
}
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40013800 	.word	0x40013800
 80017c4:	20000264 	.word	0x20000264

080017c8 <LL_RCC_LSE_SetDriveCapability>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	f023 0218 	bic.w	r2, r3, #24
 80017dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_AHB2_GRP1_EnableClock>:
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 fd68 	bl	8003330 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001860:	f7fe fe78 	bl	8000554 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f816 	bl	8001894 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001868:	f000 f884 	bl	8001974 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800186c:	f000 f906 	bl	8001a7c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 f987 	bl	8001b82 <MX_GPIO_Init>
  MX_DMA_Init();
 8001874:	f000 f968 	bl	8001b48 <MX_DMA_Init>
  MX_RTC_Init();
 8001878:	f000 f932 	bl	8001ae0 <MX_RTC_Init>
  MX_RNG_Init();
 800187c:	f000 f91a 	bl	8001ab4 <MX_RNG_Init>
  MX_ADC1_Init();
 8001880:	f000 f898 	bl	80019b4 <MX_ADC1_Init>
  MX_RF_Init();
 8001884:	f000 f90e 	bl	8001aa4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001888:	f7fe fe72 	bl	8000570 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800188c:	f7fe ffe5 	bl	800085a <MX_APPE_Process>
 8001890:	e7fc      	b.n	800188c <main+0x34>
	...

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09a      	sub	sp, #104	; 0x68
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2248      	movs	r2, #72	; 0x48
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 fc82 	bl	800b1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f023 0303 	bic.w	r3, r3, #3
 80018d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018de:	f003 f9f5 	bl	8004ccc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff70 	bl	80017c8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <SystemClock_Config+0xdc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <SystemClock_Config+0xdc>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <SystemClock_Config+0xdc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001904:	2347      	movs	r3, #71	; 0x47
 8001906:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fd4b 	bl	80053c4 <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001934:	f000 f932 	bl	8001b9c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001938:	236f      	movs	r3, #111	; 0x6f
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800193c:	2302      	movs	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f004 f8a7 	bl	8005aac <HAL_RCC_ClockConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001964:	f000 f91a 	bl	8001b9c <Error_Handler>
  }
}
 8001968:	bf00      	nop
 800196a:	3768      	adds	r7, #104	; 0x68
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58000400 	.word	0x58000400

08001974 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2250      	movs	r2, #80	; 0x50
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f009 fc13 	bl	800b1ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001986:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800198a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800198c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001992:	2302      	movs	r3, #2
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001996:	2310      	movs	r3, #16
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fc96 	bl	80062ce <HAL_RCCEx_PeriphCLKConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019a8:	f000 f8f8 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	; 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <MX_ADC1_Init+0xc0>)
 80019ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019ea:	2204      	movs	r2, #4
 80019ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <MX_ADC1_Init+0xbc>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a2c:	f001 feca 	bl	80037c4 <HAL_ADC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001a36:	f000 f8b1 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_ADC1_Init+0xc4>)
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a46:	237f      	movs	r3, #127	; 0x7f
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_ADC1_Init+0xbc>)
 8001a58:	f002 f800 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a62:	f000 f89b 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000268 	.word	0x20000268
 8001a74:	50040000 	.word	0x50040000
 8001a78:	04300002 	.word	0x04300002

08001a7c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_IPCC_Init+0x20>)
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <MX_IPCC_Init+0x24>)
 8001a84:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_IPCC_Init+0x20>)
 8001a88:	f003 f89a 	bl	8004bc0 <HAL_IPCC_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a92:	f000 f883 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002cc 	.word	0x200002cc
 8001aa0:	58000c00 	.word	0x58000c00

08001aa4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_RNG_Init+0x24>)
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <MX_RNG_Init+0x28>)
 8001abc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_RNG_Init+0x24>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_RNG_Init+0x24>)
 8001ac6:	f004 fe89 	bl	80067dc <HAL_RNG_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001ad0:	f000 f864 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200004f0 	.word	0x200004f0
 8001adc:	58001000 	.word	0x58001000

08001ae0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_RTC_Init+0x60>)
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <MX_RTC_Init+0x64>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_RTC_Init+0x60>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_RTC_Init+0x60>)
 8001af2:	220f      	movs	r2, #15
 8001af4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_RTC_Init+0x60>)
 8001af8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001afc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b16:	480a      	ldr	r0, [pc, #40]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b18:	f004 fe96 	bl	8006848 <HAL_RTC_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f83b 	bl	8001b9c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_RTC_Init+0x60>)
 8001b2c:	f004 ff8c 	bl	8006a48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001b36:	f000 f831 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000504 	.word	0x20000504
 8001b44:	40002800 	.word	0x40002800

08001b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f7ff fe51 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fe4e 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7ff fe4b 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	210f      	movs	r1, #15
 8001b62:	200e      	movs	r0, #14
 8001b64:	f002 fc7b 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b68:	200e      	movs	r0, #14
 8001b6a:	f002 fc92 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	203a      	movs	r0, #58	; 0x3a
 8001b74:	f002 fc73 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001b78:	203a      	movs	r0, #58	; 0x3a
 8001b7a:	f002 fc8a 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2004      	movs	r0, #4
 8001b88:	f7ff fe4d 	bl	8001826 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fe4a 	bl	8001826 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2002      	movs	r0, #2
 8001b94:	f7ff fe47 	bl	8001826 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <LL_PWR_SetPowerMode>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <LL_PWR_SetPowerMode+0x24>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <LL_PWR_SetPowerMode+0x24>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	58000400 	.word	0x58000400

08001bd4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <LL_PWR_ClearFlag_WU+0x14>)
 8001bda:	221f      	movs	r2, #31
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	58000400 	.word	0x58000400

08001bec <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d101      	bne.n	8001c04 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	58000400 	.word	0x58000400

08001c14 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c26:	d101      	bne.n	8001c2c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	58000400 	.word	0x58000400

08001c3c <LL_RCC_HSE_Enable>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_RCC_HSE_IsReady>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c6c:	d101      	bne.n	8001c72 <LL_RCC_HSE_IsReady+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_RCC_HSE_IsReady+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_HSI_Enable>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_HSI_IsReady>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d101      	bne.n	8001cb4 <LL_RCC_HSI_IsReady+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_RCC_HSI_IsReady+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_RCC_SetSysClkSource>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_GetSysClkSource>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_LPM_EnableSleep>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <LL_LPM_EnableSleep+0x1c>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <LL_LPM_EnableSleep+0x1c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	6113      	str	r3, [r2, #16]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <LL_LPM_EnableDeepSleep+0x1c>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <LL_LPM_EnableDeepSleep+0x1c>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6113      	str	r3, [r2, #16]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	3220      	adds	r2, #32
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <LL_HSEM_1StepLock+0x2c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d001      	beq.n	8001d86 <LL_HSEM_1StepLock+0x1e>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_HSEM_1StepLock+0x20>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	80000400 	.word	0x80000400

08001d98 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001dc2:	f001 fb47 	bl	8003454 <HAL_SuspendTick>

  EnterLowPower();
 8001dc6:	f000 f835 	bl	8001e34 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001dca:	f7ff ff03 	bl	8001bd4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f7ff feec 	bl	8001bac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001dd4:	f7ff ffb8 	bl	8001d48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001dd8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001dda:	bf00      	nop
}
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8001de2:	f001 fb47 	bl	8003474 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001de6:	bf00      	nop
}
 8001de8:	bd80      	pop	{r7, pc}

08001dea <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001dee:	f001 fb31 	bl	8003454 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001df2:	f000 f81f 	bl	8001e34 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f7ff fed8 	bl	8001bac <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001dfc:	f7ff ffa4 	bl	8001d48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001e00:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001e02:	bf00      	nop
}
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001e0a:	f000 f84f 	bl	8001eac <ExitLowPower>

  HAL_ResumeTick();
 8001e0e:	f001 fb31 	bl	8003474 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001e12:	bf00      	nop
}
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001e1a:	f001 fb1b 	bl	8003454 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001e1e:	f7ff ff83 	bl	8001d28 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001e22:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001e24:	bf00      	nop
}
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001e2c:	f001 fb22 	bl	8003474 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001e30:	bf00      	nop
}
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001e38:	bf00      	nop
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4819      	ldr	r0, [pc, #100]	; (8001ea4 <EnterLowPower+0x70>)
 8001e3e:	f7ff ff93 	bl	8001d68 <LL_HSEM_1StepLock>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f8      	bne.n	8001e3a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001e48:	2104      	movs	r1, #4
 8001e4a:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <EnterLowPower+0x70>)
 8001e4c:	f7ff ff8c 	bl	8001d68 <LL_HSEM_1StepLock>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d117      	bne.n	8001e86 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001e56:	f7ff fedd 	bl	8001c14 <LL_PWR_IsActiveFlag_C2DS>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <EnterLowPower+0x36>
 8001e60:	f7ff fec4 	bl	8001bec <LL_PWR_IsActiveFlag_C2SB>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d015      	beq.n	8001e96 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <EnterLowPower+0x70>)
 8001e70:	f7ff ff92 	bl	8001d98 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001e74:	f000 f852 	bl	8001f1c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <EnterLowPower+0x74>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <EnterLowPower+0x74>)
 8001e7e:	f023 0307 	bic.w	r3, r3, #7
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e007      	b.n	8001e96 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001e86:	f000 f849 	bl	8001f1c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <EnterLowPower+0x74>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <EnterLowPower+0x74>)
 8001e90:	f023 0307 	bic.w	r3, r3, #7
 8001e94:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2103      	movs	r1, #3
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <EnterLowPower+0x70>)
 8001e9c:	f7ff ff7c 	bl	8001d98 <LL_HSEM_ReleaseLock>

  return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58001400 	.word	0x58001400
 8001ea8:	58004000 	.word	0x58004000

08001eac <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4817      	ldr	r0, [pc, #92]	; (8001f14 <ExitLowPower+0x68>)
 8001eb6:	f7ff ff6f 	bl	8001d98 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001eba:	bf00      	nop
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	4815      	ldr	r0, [pc, #84]	; (8001f14 <ExitLowPower+0x68>)
 8001ec0:	f7ff ff52 	bl	8001d68 <LL_HSEM_1StepLock>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f8      	bne.n	8001ebc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001eca:	f7ff ff0d 	bl	8001ce8 <LL_RCC_GetSysClkSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d118      	bne.n	8001f06 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8001ed4:	f7ff feb2 	bl	8001c3c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <ExitLowPower+0x6c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0307 	bic.w	r3, r3, #7
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <ExitLowPower+0x6c>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8001ee8:	bf00      	nop
 8001eea:	f7ff feb6 	bl	8001c5a <LL_RCC_HSE_IsReady>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0fa      	beq.n	8001eea <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff fee3 	bl	8001cc0 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001efa:	bf00      	nop
 8001efc:	f7ff fef4 	bl	8001ce8 <LL_RCC_GetSysClkSource>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d1fa      	bne.n	8001efc <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <ExitLowPower+0x68>)
 8001f0c:	f7ff ff44 	bl	8001d98 <LL_HSEM_ReleaseLock>

  return;
 8001f10:	bf00      	nop
}
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58001400 	.word	0x58001400
 8001f18:	58004000 	.word	0x58004000

08001f1c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001f20:	f7ff fead 	bl	8001c7e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001f24:	bf00      	nop
 8001f26:	f7ff feb9 	bl	8001c9c <LL_RCC_HSI_IsReady>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0fa      	beq.n	8001f26 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff fec5 	bl	8001cc0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fee2 	bl	8001d00 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001f3c:	bf00      	nop
 8001f3e:	f7ff fed3 	bl	8001ce8 <LL_RCC_GetSysClkSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d1fa      	bne.n	8001f3e <Switch_On_HSI+0x22>
  return;
 8001f48:	bf00      	nop
}
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_AHB2_GRP1_EnableClock>:
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_AHB3_GRP1_EnableClock>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_APB1_GRP1_EnableClock>:
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002008:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800200c:	f7ff ffc8 	bl	8001fa0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	202e      	movs	r0, #46	; 0x2e
 8002016:	f002 fa22 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800201a:	202e      	movs	r0, #46	; 0x2e
 800201c:	f002 fa39 	bl	8004492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b09c      	sub	sp, #112	; 0x70
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	2250      	movs	r2, #80	; 0x50
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f009 f8b1 	bl	800b1ac <memset>
  if(hadc->Instance==ADC1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_ADC_MspInit+0x9c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d130      	bne.n	80020b6 <HAL_ADC_MspInit+0x92>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002058:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 800205a:	2308      	movs	r3, #8
 800205c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800205e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002062:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002068:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800206a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800206e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8002070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002074:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f004 f924 	bl	80062ce <HAL_RCCEx_PeriphCLKConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800208c:	f7ff fd86 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002090:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002094:	f7ff ff6b 	bl	8001f6e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002098:	2004      	movs	r0, #4
 800209a:	f7ff ff68 	bl	8001f6e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800209e:	2301      	movs	r3, #1
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	2303      	movs	r3, #3
 80020a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020ae:	4619      	mov	r1, r3
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <HAL_ADC_MspInit+0xa0>)
 80020b2:	f002 fbc1 	bl	8004838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3770      	adds	r7, #112	; 0x70
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	50040000 	.word	0x50040000
 80020c4:	48000800 	.word	0x48000800

080020c8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_IPCC_MspInit+0x44>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d113      	bne.n	8002102 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80020da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80020de:	f7ff ff5f 	bl	8001fa0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	202c      	movs	r0, #44	; 0x2c
 80020e8:	f002 f9b9 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80020ec:	202c      	movs	r0, #44	; 0x2c
 80020ee:	f002 f9d0 	bl	8004492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	202d      	movs	r0, #45	; 0x2d
 80020f8:	f002 f9b1 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020fc:	202d      	movs	r0, #45	; 0x2d
 80020fe:	f002 f9c8 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58000c00 	.word	0x58000c00

08002110 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b096      	sub	sp, #88	; 0x58
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	2250      	movs	r2, #80	; 0x50
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f009 f843 	bl	800b1ac <memset>
  if(hrng->Instance==RNG)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_RNG_MspInit+0x50>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d113      	bne.n	8002158 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4618      	mov	r0, r3
 8002142:	f004 f8c4 	bl	80062ce <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800214c:	f7ff fd26 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002150:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002154:	f7ff ff24 	bl	8001fa0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3758      	adds	r7, #88	; 0x58
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	58001000 	.word	0x58001000

08002164 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b096      	sub	sp, #88	; 0x58
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	2250      	movs	r2, #80	; 0x50
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f009 f819 	bl	800b1ac <memset>
  if(hrtc->Instance==RTC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_RTC_MspInit+0x64>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d11d      	bne.n	80021c0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002188:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f004 f89a 	bl	80062ce <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021a0:	f7ff fcfc 	bl	8001b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a4:	f7ff fed2 	bl	8001f4c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ac:	f7ff ff11 	bl	8001fd2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2003      	movs	r0, #3
 80021b6:	f002 f952 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f002 f969 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3758      	adds	r7, #88	; 0x58
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40002800 	.word	0x40002800

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f001 f8e0 	bl	80033e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800222c:	f7fe ff38 	bl	80010a0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA1_Channel4_IRQHandler+0x10>)
 800223a:	f002 fa2c 	bl	8004696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000430 	.word	0x20000430

08002248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <USART1_IRQHandler+0x10>)
 800224e:	f004 fd03 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000039c 	.word	0x2000039c

0800225c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <LPUART1_IRQHandler+0x10>)
 8002262:	f004 fcf9 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000308 	.word	0x20000308

08002270 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002274:	f000 fde2 	bl	8002e3c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002280:	f000 fe14 	bl	8002eac <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800228c:	f002 fc74 	bl	8004b78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA2_Channel4_IRQHandler+0x10>)
 800229a:	f002 f9fc 	bl	8004696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000490 	.word	0x20000490

080022a8 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80022ac:	2010      	movs	r0, #16
 80022ae:	f002 fc4b 	bl	8004b48 <HAL_GPIO_EXTI_IRQHandler>
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f002 fc44 	bl	8004b48 <HAL_GPIO_EXTI_IRQHandler>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80022c8:	2002      	movs	r0, #2
 80022ca:	f002 fc3d 	bl	8004b48 <HAL_GPIO_EXTI_IRQHandler>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LL_FLASH_GetUDN+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	1fff7580 	.word	0x1fff7580

080022ec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <LL_FLASH_GetDeviceID+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	1fff7584 	.word	0x1fff7584

08002304 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <LL_FLASH_GetSTCompanyID+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0a1b      	lsrs	r3, r3, #8
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	1fff7584 	.word	0x1fff7584

0800231c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b090      	sub	sp, #64	; 0x40
 8002320:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <APP_BLE_Init+0xb4>)
 8002324:	1d3c      	adds	r4, r7, #4
 8002326:	461d      	mov	r5, r3
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002338:	c403      	stmia	r4!, {r0, r1}
 800233a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800233c:	f000 f972 	bl	8002624 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002340:	2101      	movs	r1, #1
 8002342:	2002      	movs	r0, #2
 8002344:	f008 fc5c 	bl	800ac00 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <APP_BLE_Init+0xb8>)
 800234a:	2100      	movs	r1, #0
 800234c:	2004      	movs	r0, #4
 800234e:	f008 fdb9 	bl	800aec4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f007 fdff 	bl	8009f58 <SHCI_C2_BLE_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8002360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <APP_BLE_Init+0x50>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002368:	f7ff fc18 	bl	8001b9c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800236c:	f000 f970 	bl	8002650 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002370:	f008 f946 	bl	800a600 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <APP_BLE_Init+0xbc>)
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <APP_BLE_Init+0xbc>)
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <APP_BLE_Init+0xc0>)
 8002386:	2100      	movs	r1, #0
 8002388:	2001      	movs	r0, #1
 800238a:	f008 fd9b 	bl	800aec4 <UTIL_SEQ_RegTask>
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800238e:	f000 fb75 	bl	8002a7c <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 8002392:	f000 fbb7 	bl	8002b04 <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <APP_BLE_Init+0xc4>)
 8002398:	2200      	movs	r2, #0
 800239a:	4912      	ldr	r1, [pc, #72]	; (80023e4 <APP_BLE_Init+0xc8>)
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff f821 	bl	80013e4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <APP_BLE_Init+0xbc>)
 80023a4:	2202      	movs	r2, #2
 80023a6:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <APP_BLE_Init+0xbc>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 80023ae:	f641 000d 	movw	r0, #6157	; 0x180d
 80023b2:	f000 facf 	bl	8002954 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <APP_BLE_Init+0xcc>)
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <APP_BLE_Init+0xd0>)
 80023be:	22a0      	movs	r2, #160	; 0xa0
 80023c0:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 fa12 	bl	80027ec <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80023c8:	bf00      	nop
}
 80023ca:	3740      	adds	r7, #64	; 0x40
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	0800b1fc 	.word	0x0800b1fc
 80023d4:	080097f9 	.word	0x080097f9
 80023d8:	20000530 	.word	0x20000530
 80023dc:	080029bd 	.word	0x080029bd
 80023e0:	080029ad 	.word	0x080029ad
 80023e4:	200005b1 	.word	0x200005b1
 80023e8:	200005b4 	.word	0x200005b4
 80023ec:	200005b6 	.word	0x200005b6

080023f0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80023f8:	2392      	movs	r3, #146	; 0x92
 80023fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3301      	adds	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d062      	beq.n	80024d2 <SVCCTL_App_Notification+0xe2>
 800240c:	2bff      	cmp	r3, #255	; 0xff
 800240e:	f300 80a6 	bgt.w	800255e <SVCCTL_App_Notification+0x16e>
 8002412:	2b05      	cmp	r3, #5
 8002414:	d002      	beq.n	800241c <SVCCTL_App_Notification+0x2c>
 8002416:	2b3e      	cmp	r3, #62	; 0x3e
 8002418:	d016      	beq.n	8002448 <SVCCTL_App_Notification+0x58>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800241a:	e0a0      	b.n	800255e <SVCCTL_App_Notification+0x16e>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	3302      	adds	r3, #2
 8002420:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002428:	b29a      	uxth	r2, r3
 800242a:	4b51      	ldr	r3, [pc, #324]	; (8002570 <SVCCTL_App_Notification+0x180>)
 800242c:	8adb      	ldrh	r3, [r3, #22]
 800242e:	429a      	cmp	r2, r3
 8002430:	d106      	bne.n	8002440 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002432:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <SVCCTL_App_Notification+0x180>)
 8002434:	2200      	movs	r2, #0
 8002436:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002438:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <SVCCTL_App_Notification+0x180>)
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8002440:	2001      	movs	r0, #1
 8002442:	f000 f9d3 	bl	80027ec <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002446:	e08d      	b.n	8002564 <SVCCTL_App_Notification+0x174>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	3302      	adds	r3, #2
 800244c:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d005      	beq.n	8002462 <SVCCTL_App_Notification+0x72>
 8002456:	2b0c      	cmp	r3, #12
 8002458:	dc37      	bgt.n	80024ca <SVCCTL_App_Notification+0xda>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d017      	beq.n	800248e <SVCCTL_App_Notification+0x9e>
 800245e:	2b03      	cmp	r3, #3
          break;
 8002460:	e033      	b.n	80024ca <SVCCTL_App_Notification+0xda>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8002468:	4b41      	ldr	r3, [pc, #260]	; (8002570 <SVCCTL_App_Notification+0x180>)
 800246a:	8adb      	ldrh	r3, [r3, #22]
 800246c:	f107 020e 	add.w	r2, r7, #14
 8002470:	f107 010f 	add.w	r1, r7, #15
 8002474:	4618      	mov	r0, r3
 8002476:	f006 ffac 	bl	80093d2 <hci_le_read_phy>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8002480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002484:	2b00      	cmp	r3, #0
 8002486:	d122      	bne.n	80024ce <SVCCTL_App_Notification+0xde>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b02      	cmp	r3, #2
          break;
 800248c:	e01f      	b.n	80024ce <SVCCTL_App_Notification+0xde>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <SVCCTL_App_Notification+0x180>)
 8002496:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f81c 	bl	80014d8 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <SVCCTL_App_Notification+0x180>)
 80024a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d104      	bne.n	80024b4 <SVCCTL_App_Notification+0xc4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <SVCCTL_App_Notification+0x180>)
 80024ac:	2206      	movs	r2, #6
 80024ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80024b2:	e003      	b.n	80024bc <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <SVCCTL_App_Notification+0x180>)
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <SVCCTL_App_Notification+0x180>)
 80024c6:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80024c8:	e002      	b.n	80024d0 <SVCCTL_App_Notification+0xe0>
          break;
 80024ca:	bf00      	nop
 80024cc:	e04a      	b.n	8002564 <SVCCTL_App_Notification+0x174>
          break;
 80024ce:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80024d0:	e048      	b.n	8002564 <SVCCTL_App_Notification+0x174>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	3302      	adds	r3, #2
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	d83d      	bhi.n	8002562 <SVCCTL_App_Notification+0x172>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <SVCCTL_App_Notification+0xfc>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	0800255b 	.word	0x0800255b
 80024f0:	08002553 	.word	0x08002553
 80024f4:	08002519 	.word	0x08002519
 80024f8:	0800255b 	.word	0x0800255b
 80024fc:	0800255b 	.word	0x0800255b
 8002500:	0800252d 	.word	0x0800252d
 8002504:	08002563 	.word	0x08002563
 8002508:	0800255b 	.word	0x0800255b
 800250c:	0800255b 	.word	0x0800255b
 8002510:	0800253f 	.word	0x0800253f
 8002514:	0800255b 	.word	0x0800255b
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <SVCCTL_App_Notification+0x180>)
 800251a:	8adb      	ldrh	r3, [r3, #22]
 800251c:	4915      	ldr	r1, [pc, #84]	; (8002574 <SVCCTL_App_Notification+0x184>)
 800251e:	4618      	mov	r0, r3
 8002520:	f006 f80e 	bl	8008540 <aci_gap_pass_key_resp>
 8002524:	4603      	mov	r3, r0
 8002526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800252a:	e017      	b.n	800255c <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <SVCCTL_App_Notification+0x180>)
 800252e:	8adb      	ldrh	r3, [r3, #22]
 8002530:	4618      	mov	r0, r3
 8002532:	f006 fa2a 	bl	800898a <aci_gap_allow_rebond>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800253c:	e00e      	b.n	800255c <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <SVCCTL_App_Notification+0x180>)
 8002540:	8adb      	ldrh	r3, [r3, #22]
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f006 fa74 	bl	8008a32 <aci_gap_numeric_comparison_value_confirm_yesno>
 800254a:	4603      	mov	r3, r0
 800254c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 8002550:	e004      	b.n	800255c <SVCCTL_App_Notification+0x16c>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3302      	adds	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
          break;    
 8002558:	e000      	b.n	800255c <SVCCTL_App_Notification+0x16c>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800255a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800255c:	e001      	b.n	8002562 <SVCCTL_App_Notification+0x172>
      break;
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <SVCCTL_App_Notification+0x174>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002562:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	3730      	adds	r7, #48	; 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000530 	.word	0x20000530
 8002574:	0001e240 	.word	0x0001e240

08002578 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800257e:	2392      	movs	r3, #146	; 0x92
 8002580:	71fb      	strb	r3, [r7, #7]

  ret = aci_gap_clear_security_db();
 8002582:	f006 f9de 	bl	8008942 <aci_gap_clear_security_db>
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
  }
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800259a:	2392      	movs	r3, #146	; 0x92
 800259c:	71fb      	strb	r3, [r7, #7]
  
  ret = aci_gap_slave_security_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle); 
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <APP_BLE_Key_Button2_Action+0x20>)
 80025a0:	8adb      	ldrh	r3, [r3, #22]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 f8e0 	bl	8008768 <aci_gap_slave_security_req>
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("===>> aci_gap_slave_security_req - Success\n");
  }
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000530 	.word	0x20000530

080025b8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af02      	add	r7, sp, #8
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80025be:	2392      	movs	r3, #146	; 0x92
 80025c0:	71fb      	strb	r3, [r7, #7]

  ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <APP_BLE_Key_Button3_Action+0x68>)
 80025c4:	8adb      	ldrh	r3, [r3, #22]
 80025c6:	1d7a      	adds	r2, r7, #5
 80025c8:	1db9      	adds	r1, r7, #6
 80025ca:	4618      	mov	r0, r3
 80025cc:	f006 ff01 	bl	80093d2 <hci_le_read_phy>
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <APP_BLE_Key_Button3_Action+0x5e>
  }
  else
  {
    APP_DBG_MSG("==>> hci_le_read_phy - Success\n");
    APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
    if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d10f      	bne.n	8002600 <APP_BLE_Key_Button3_Action+0x48>
 80025e0:	797b      	ldrb	r3, [r7, #5]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d10c      	bne.n	8002600 <APP_BLE_Key_Button3_Action+0x48>
    {
      APP_DBG_MSG("==>> hci_le_set_phy PHY Param  TX= %d, RX= %d - ", TX_1M, RX_1M);
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_1M,RX_1M,0);
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <APP_BLE_Key_Button3_Action+0x68>)
 80025e8:	8ad8      	ldrh	r0, [r3, #22]
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	2201      	movs	r2, #1
 80025f2:	2100      	movs	r1, #0
 80025f4:	f006 ffe8 	bl	80095c8 <hci_le_set_phy>
 80025f8:	4603      	mov	r3, r0
 80025fa:	71fb      	strb	r3, [r7, #7]
      if (ret != BLE_STATUS_SUCCESS)
 80025fc:	bf00      	nop
      {
        APP_DBG_MSG("Success\n\r");
      }
    } 
  }
}
 80025fe:	e00a      	b.n	8002616 <APP_BLE_Key_Button3_Action+0x5e>
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED,0);
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <APP_BLE_Key_Button3_Action+0x68>)
 8002602:	8ad8      	ldrh	r0, [r3, #22]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2302      	movs	r3, #2
 800260a:	2202      	movs	r2, #2
 800260c:	2100      	movs	r1, #0
 800260e:	f006 ffdb 	bl	80095c8 <hci_le_set_phy>
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000530 	.word	0x20000530

08002624 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <Ble_Tl_Init+0x20>)
 800262c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <Ble_Tl_Init+0x24>)
 8002630:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <Ble_Tl_Init+0x28>)
 8002638:	f007 f8c2 	bl	80097c0 <hci_init>

  return;
 800263c:	bf00      	nop
}
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20030028 	.word	0x20030028
 8002648:	08002a47 	.word	0x08002a47
 800264c:	08002a0f 	.word	0x08002a0f

08002650 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b08d      	sub	sp, #52	; 0x34
 8002654:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8002656:	f44f 7350 	mov.w	r3, #832	; 0x340
 800265a:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800265c:	2392      	movs	r3, #146	; 0x92
 800265e:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002660:	f006 fe93 	bl	800938a <hci_reset>
 8002664:	4603      	mov	r3, r0
 8002666:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8002668:	f000 f930 	bl	80028cc <BleGetBdAddress>
 800266c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	2106      	movs	r1, #6
 8002672:	2000      	movs	r0, #0
 8002674:	f006 fd9d 	bl	80091b2 <aci_hal_write_config_data>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	795a      	ldrb	r2, [r3, #5]
 8002680:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002682:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	791a      	ldrb	r2, [r3, #4]
 8002688:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800268a:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	78da      	ldrb	r2, [r3, #3]
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <Ble_Hci_Gap_Gatt_Init+0x184>)
 8002692:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	789a      	ldrb	r2, [r3, #2]
 8002698:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <Ble_Hci_Gap_Gatt_Init+0x184>)
 800269a:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	785a      	ldrb	r2, [r3, #1]
 80026a0:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80026a2:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80026aa:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80026ac:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <Ble_Hci_Gap_Gatt_Init+0x188>)
 80026ae:	2110      	movs	r1, #16
 80026b0:	2018      	movs	r0, #24
 80026b2:	f006 fd7e 	bl	80091b2 <aci_hal_write_config_data>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80026ba:	4a48      	ldr	r2, [pc, #288]	; (80027dc <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80026bc:	2110      	movs	r1, #16
 80026be:	2008      	movs	r0, #8
 80026c0:	f006 fd77 	bl	80091b2 <aci_hal_write_config_data>
 80026c4:	4603      	mov	r3, r0
 80026c6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80026c8:	2118      	movs	r1, #24
 80026ca:	2001      	movs	r0, #1
 80026cc:	f006 fdf6 	bl	80092bc <aci_hal_set_tx_power_level>
 80026d0:	4603      	mov	r3, r0
 80026d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80026d4:	f006 fa14 	bl	8008b00 <aci_gatt_init>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01f      	beq.n	800272e <Ble_Hci_Gap_Gatt_Init+0xde>
  {
    const char *name = "PM";
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80026f0:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80026f2:	1dba      	adds	r2, r7, #6
 80026f4:	7bf8      	ldrb	r0, [r7, #15]
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	2207      	movs	r2, #7
 8002702:	2100      	movs	r1, #0
 8002704:	f005 ff83 	bl	800860e <aci_gap_init>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800270c:	88fc      	ldrh	r4, [r7, #6]
 800270e:	88bd      	ldrh	r5, [r7, #4]
 8002710:	68b8      	ldr	r0, [r7, #8]
 8002712:	f7fd fd3d 	bl	8000190 <strlen>
 8002716:	4603      	mov	r3, r0
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4613      	mov	r3, r2
 8002720:	2200      	movs	r2, #0
 8002722:	4629      	mov	r1, r5
 8002724:	4620      	mov	r0, r4
 8002726:	f006 fbee 	bl	8008f06 <aci_gatt_update_char_value>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800272e:	88f8      	ldrh	r0, [r7, #6]
 8002730:	8879      	ldrh	r1, [r7, #2]
 8002732:	463b      	mov	r3, r7
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2302      	movs	r3, #2
 8002738:	2200      	movs	r2, #0
 800273a:	f006 fbe4 	bl	8008f06 <aci_gatt_update_char_value>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002742:	2202      	movs	r2, #2
 8002744:	2102      	movs	r1, #2
 8002746:	2000      	movs	r0, #0
 8002748:	f006 fec1 	bl	80094ce <hci_le_set_default_phy>
 800274c:	4603      	mov	r3, r0
 800274e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f005 fdd8 	bl	8008310 <aci_gap_set_io_capability>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002766:	2201      	movs	r2, #1
 8002768:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800276c:	2208      	movs	r2, #8
 800276e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002772:	2210      	movs	r2, #16
 8002774:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002778:	2200      	movs	r2, #0
 800277a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8002780:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002784:	2201      	movs	r2, #1
 8002786:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800278a:	789c      	ldrb	r4, [r3, #2]
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800278e:	785d      	ldrb	r5, [r3, #1]
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002792:	791b      	ldrb	r3, [r3, #4]
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002796:	7952      	ldrb	r2, [r2, #5]
 8002798:	4912      	ldr	r1, [pc, #72]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800279a:	78c9      	ldrb	r1, [r1, #3]
 800279c:	4811      	ldr	r0, [pc, #68]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800279e:	6880      	ldr	r0, [r0, #8]
 80027a0:	2600      	movs	r6, #0
 80027a2:	9604      	str	r6, [sp, #16]
 80027a4:	9003      	str	r0, [sp, #12]
 80027a6:	9102      	str	r1, [sp, #8]
 80027a8:	9201      	str	r2, [sp, #4]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	2201      	movs	r2, #1
 80027b0:	4629      	mov	r1, r5
 80027b2:	4620      	mov	r0, r4
 80027b4:	f005 fe00 	bl	80083b8 <aci_gap_set_authentication_requirement>
 80027b8:	4603      	mov	r3, r0
 80027ba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80027be:	789b      	ldrb	r3, [r3, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <Ble_Hci_Gap_Gatt_Init+0x17c>
  {
    ret = aci_gap_configure_whitelist();
 80027c4:	f006 f899 	bl	80088fa <aci_gap_configure_whitelist>
 80027c8:	4603      	mov	r3, r0
 80027ca:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d4:	20000008 	.word	0x20000008
 80027d8:	0800b3bc 	.word	0x0800b3bc
 80027dc:	0800b3cc 	.word	0x0800b3cc
 80027e0:	0800b238 	.word	0x0800b238
 80027e4:	20000530 	.word	0x20000530
 80027e8:	0001b207 	.word	0x0001b207

080027ec <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af08      	add	r7, sp, #32
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80027f6:	2392      	movs	r3, #146	; 0x92
 80027f8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <Adv_Request+0xc4>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <Adv_Request+0xc8>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	81bb      	strh	r3, [r7, #12]
 800280c:	e005      	b.n	800281a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800280e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002812:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002814:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002818:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <Adv_Request+0xcc>)
 800281c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fe59 	bl	80014d8 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d10d      	bne.n	8002848 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <Adv_Request+0xcc>)
 800282e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002832:	2b01      	cmp	r3, #1
 8002834:	d004      	beq.n	8002840 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <Adv_Request+0xcc>)
 8002838:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800283c:	2b02      	cmp	r3, #2
 800283e:	d103      	bne.n	8002848 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8002840:	f005 fc48 	bl	80080d4 <aci_gap_set_non_discoverable>
 8002844:	4603      	mov	r3, r0
 8002846:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <Adv_Request+0xcc>)
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <Adv_Request+0xcc>)
 8002852:	7e1b      	ldrb	r3, [r3, #24]
 8002854:	89ba      	ldrh	r2, [r7, #12]
 8002856:	89f9      	ldrh	r1, [r7, #14]
 8002858:	2000      	movs	r0, #0
 800285a:	9006      	str	r0, [sp, #24]
 800285c:	2000      	movs	r0, #0
 800285e:	9005      	str	r0, [sp, #20]
 8002860:	4816      	ldr	r0, [pc, #88]	; (80028bc <Adv_Request+0xd0>)
 8002862:	9004      	str	r0, [sp, #16]
 8002864:	9303      	str	r3, [sp, #12]
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <Adv_Request+0xd4>)
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2303      	movs	r3, #3
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	2000      	movs	r0, #0
 8002876:	f005 fc51 	bl	800811c <aci_gap_set_discoverable>
 800287a:	4603      	mov	r3, r0
 800287c:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800287e:	4911      	ldr	r1, [pc, #68]	; (80028c4 <Adv_Request+0xd8>)
 8002880:	200e      	movs	r0, #14
 8002882:	f005 ffc8 	bl	8008816 <aci_gap_update_adv_data>
 8002886:	4603      	mov	r3, r0
 8002888:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <Adv_Request+0xcc>)
 8002898:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800289c:	490a      	ldr	r1, [pc, #40]	; (80028c8 <Adv_Request+0xdc>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fe9e 	bl	80015e0 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
}
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200005b4 	.word	0x200005b4
 80028b4:	200005b6 	.word	0x200005b6
 80028b8:	20000530 	.word	0x20000530
 80028bc:	20000549 	.word	0x20000549
 80028c0:	0800b3dc 	.word	0x0800b3dc
 80028c4:	20000008 	.word	0x20000008
 80028c8:	0001e046 	.word	0x0001e046

080028cc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80028d2:	f7ff fcff 	bl	80022d4 <LL_FLASH_GetUDN>
 80028d6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d023      	beq.n	8002928 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80028e0:	f7ff fd10 	bl	8002304 <LL_FLASH_GetSTCompanyID>
 80028e4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80028e6:	f7ff fd01 	bl	80022ec <LL_FLASH_GetDeviceID>
 80028ea:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <BleGetBdAddress+0x80>)
 80028f2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <BleGetBdAddress+0x80>)
 80028fc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <BleGetBdAddress+0x80>)
 8002904:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <BleGetBdAddress+0x80>)
 800290c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <BleGetBdAddress+0x80>)
 8002916:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0c1b      	lsrs	r3, r3, #16
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <BleGetBdAddress+0x80>)
 8002920:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <BleGetBdAddress+0x80>)
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e00b      	b.n	8002940 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8002928:	2000      	movs	r0, #0
 800292a:	f007 faed 	bl	8009f08 <OTP_Read>
 800292e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e001      	b.n	8002940 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <BleGetBdAddress+0x84>)
 800293e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8002940:	697b      	ldr	r3, [r7, #20]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000528 	.word	0x20000528
 8002950:	0800b3b4 	.word	0x0800b3b4

08002954 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 8002960:	7e1b      	ldrb	r3, [r3, #24]
 8002962:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 800296a:	440b      	add	r3, r1
 800296c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 8002970:	7e1b      	ldrb	r3, [r3, #24]
 8002972:	3301      	adds	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 8002978:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 8002982:	7e1b      	ldrb	r3, [r3, #24]
 8002984:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 8002986:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 800298a:	440b      	add	r3, r1
 800298c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 8002990:	7e1b      	ldrb	r3, [r3, #24]
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <Add_Advertisment_Service_UUID+0x54>)
 8002998:	761a      	strb	r2, [r3, #24]

  return;
 800299a:	bf00      	nop
}
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000530 	.word	0x20000530

080029ac <Adv_Mgr>:

static void Adv_Mgr(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 80029b0:	2100      	movs	r1, #0
 80029b2:	2001      	movs	r0, #1
 80029b4:	f008 faa8 	bl	800af08 <UTIL_SEQ_SetTask>

  return;
 80029b8:	bf00      	nop
}
 80029ba:	bd80      	pop	{r7, pc}

080029bc <Adv_Update>:

static void Adv_Update(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7ff ff13 	bl	80027ec <Adv_Request>

  return;
 80029c6:	bf00      	nop
}
 80029c8:	bd80      	pop	{r7, pc}

080029ca <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80029d2:	2100      	movs	r1, #0
 80029d4:	2004      	movs	r0, #4
 80029d6:	f008 fa97 	bl	800af08 <UTIL_SEQ_SetTask>

  return;
 80029da:	bf00      	nop
}
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f008 faf8 	bl	800afe0 <UTIL_SEQ_SetEvt>

  return;
 80029f0:	bf00      	nop
}
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002a00:	2001      	movs	r0, #1
 8002a02:	f008 fb0d 	bl	800b020 <UTIL_SEQ_WaitEvt>

  return;
 8002a06:	bf00      	nop
}
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	4618      	mov	r0, r3
 8002a22:	f007 fe3f 	bl	800a6a4 <SVCCTL_UserEvtRx>
 8002a26:	4603      	mov	r3, r0
 8002a28:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002a36:	e003      	b.n	8002a40 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
  return;
 8002a3e:	bf00      	nop
}
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <BLE_StatusNot+0x16>
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d006      	beq.n	8002a68 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8002a5a:	e00b      	b.n	8002a74 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002a5c:	233f      	movs	r3, #63	; 0x3f
 8002a5e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f008 fa7d 	bl	800af60 <UTIL_SEQ_PauseTask>
      break;
 8002a66:	e005      	b.n	8002a74 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002a68:	233f      	movs	r3, #63	; 0x3f
 8002a6a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f008 fa97 	bl	800afa0 <UTIL_SEQ_ResumeTask>
      break;
 8002a72:	bf00      	nop
  }

  return;
 8002a74:	bf00      	nop
}
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
   *
   * @param UUID
   * @param pPData
   * @return
   */
  dis_information_data.pPayload = (uint8_t*)DISAPP_MANUFACTURER_NAME;
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <DISAPP_Init+0x24>)
 8002a84:	603b      	str	r3, [r7, #0]
  dis_information_data.Length = sizeof(DISAPP_MANUFACTURER_NAME);
 8002a86:	2304      	movs	r3, #4
 8002a88:	713b      	strb	r3, [r7, #4]
  DIS_UpdateChar(MANUFACTURER_NAME_UUID, &dis_information_data);
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f642 2029 	movw	r0, #10793	; 0x2a29
 8002a92:	f006 fe6f 	bl	8009774 <DIS_UpdateChar>
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	0800b23c 	.word	0x0800b23c

08002aa4 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d01a      	beq.n	8002aea <HRS_Notification+0x46>
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	dc1e      	bgt.n	8002af6 <HRS_Notification+0x52>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HRS_Notification+0x1e>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d007      	beq.n	8002ad0 <HRS_Notification+0x2c>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 8002ac0:	e019      	b.n	8002af6 <HRS_Notification+0x52>
      HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 0;
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HRS_Notification+0x5c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	809a      	strh	r2, [r3, #4]
      HRSAPP_Context.ResetEnergyExpended = 1;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HRS_Notification+0x5c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	731a      	strb	r2, [r3, #12]
      break;
 8002ace:	e013      	b.n	8002af8 <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HRS_Notification+0x5c>)
 8002ad2:	7b5b      	ldrb	r3, [r3, #13]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fcff 	bl	80014d8 <HW_TS_Stop>
      HW_TS_Start(HRSAPP_Context.TimerMeasurement_Id, HRSAPP_MEASUREMENT_INTERVAL);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HRS_Notification+0x5c>)
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	f640 0101 	movw	r1, #2049	; 0x801
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fd7c 	bl	80015e0 <HW_TS_Start>
      break;
 8002ae8:	e006      	b.n	8002af8 <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HRS_Notification+0x5c>)
 8002aec:	7b5b      	ldrb	r3, [r3, #13]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fcf2 	bl	80014d8 <HW_TS_Stop>
      break;
 8002af4:	e000      	b.n	8002af8 <HRS_Notification+0x54>
      break;
 8002af6:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 8002af8:	bf00      	nop
}
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200005b8 	.word	0x200005b8

08002b04 <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HRSAPP_Measurement );
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HRSAPP_Init+0x84>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f008 f9d8 	bl	800aec4 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN HRSAPP_Init */
  /**
   * Set Body Sensor Location
   */
  HRSAPP_Context.ResetEnergyExpended = 0;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	731a      	strb	r2, [r3, #12]
  HRSAPP_Context.BodySensorLocationChar = HRS_BODY_SENSOR_LOCATION_HAND;
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	701a      	strb	r2, [r3, #0]
  HRS_UpdateChar(SENSOR_LOCATION_UUID, (uint8_t *)&HRSAPP_Context.BodySensorLocationChar);
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b22:	f642 2038 	movw	r0, #10808	; 0x2a38
 8002b26:	f007 f9ab 	bl	8009e80 <HRS_UpdateChar>

  /**
   * Set Flags for measurement value
   */

  HRSAPP_Context.MeasurementvalueChar.Flags = ( HRS_HRM_VALUE_FORMAT_UINT16      | 
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b2c:	221f      	movs	r2, #31
 8002b2e:	72da      	strb	r2, [r3, #11]
                                                  HRS_HRM_SENSOR_CONTACTS_SUPPORTED |
                                                  HRS_HRM_ENERGY_EXPENDED_PRESENT  |
                                                  HRS_HRM_RR_INTERVAL_PRESENT );

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b32:	7adb      	ldrb	r3, [r3, #11]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HRSAPP_Init+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 10;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b3e:	220a      	movs	r2, #10
 8002b40:	809a      	strh	r2, [r3, #4]
#endif
  
#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_RR_INTERVAL_PRESENT)
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b44:	7adb      	ldrb	r3, [r3, #11]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HRSAPP_Init+0x70>
  {
    uint8_t i;
    
    HRSAPP_Context.MeasurementvalueChar.NbreOfValidRRIntervalValues = BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG;
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	729a      	strb	r2, [r3, #10]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	e009      	b.n	8002b6e <HRSAPP_Init+0x6a>
      HRSAPP_Context.MeasurementvalueChar.aRRIntervalValues[i] = 1024;
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <HRSAPP_Init+0x88>)
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b66:	80da      	strh	r2, [r3, #6]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f2      	beq.n	8002b5a <HRSAPP_Init+0x56>
#endif
  
  /**
   * Create timer for Heart Rate Measurement
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HRSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HrMeas);
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HRSAPP_Init+0x8c>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <HRSAPP_Init+0x90>)
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe fc32 	bl	80013e4 <HW_TS_Create>

/* USER CODE END HRSAPP_Init */
  return;
 8002b80:	bf00      	nop
}
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	200005b8 	.word	0x200005b8
 8002b90:	08002c01 	.word	0x08002c01
 8002b94:	200005c5 	.word	0x200005c5

08002b98 <HRSAPP_Measurement>:

static void HRSAPP_Measurement(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */
  uint32_t measurement;

  measurement = ((HRSAPP_Read_RTC_SSR_SS()) & 0x07) + 65;
 8002b9e:	f000 f837 	bl	8002c10 <HRSAPP_Read_RTC_SSR_SS>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	3341      	adds	r3, #65	; 0x41
 8002baa:	607b      	str	r3, [r7, #4]

  HRSAPP_Context.MeasurementvalueChar.MeasurementValue = measurement;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002bb2:	805a      	strh	r2, [r3, #2]
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002bb6:	7adb      	ldrb	r3, [r3, #11]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HRSAPP_Measurement+0x3e>
     (HRSAPP_Context.ResetEnergyExpended == 0))
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002bc2:	7b1b      	ldrb	r3, [r3, #12]
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HRSAPP_Measurement+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended += 5;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002bca:	889b      	ldrh	r3, [r3, #4]
 8002bcc:	3305      	adds	r3, #5
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002bd2:	809a      	strh	r2, [r3, #4]
 8002bd4:	e006      	b.n	8002be4 <HRSAPP_Measurement+0x4c>
  else if(HRSAPP_Context.ResetEnergyExpended == 1)
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002bd8:	7b1b      	ldrb	r3, [r3, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <HRSAPP_Measurement+0x4c>
    HRSAPP_Context.ResetEnergyExpended = 0;
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HRSAPP_Measurement+0x60>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	731a      	strb	r2, [r3, #12]
#endif

  HRS_UpdateChar(HEART_RATE_MEASURMENT_UUID, (uint8_t *)&HRSAPP_Context.MeasurementvalueChar);
 8002be4:	4905      	ldr	r1, [pc, #20]	; (8002bfc <HRSAPP_Measurement+0x64>)
 8002be6:	f642 2037 	movw	r0, #10807	; 0x2a37
 8002bea:	f007 f949 	bl	8009e80 <HRS_UpdateChar>

/* USER CODE END HRSAPP_Measurement */
  return;
 8002bee:	bf00      	nop
}
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200005b8 	.word	0x200005b8
 8002bfc:	200005ba 	.word	0x200005ba

08002c00 <HrMeas>:

static void HrMeas( void )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8002c04:	2100      	movs	r1, #0
 8002c06:	2002      	movs	r0, #2
 8002c08:	f008 f97e 	bl	800af08 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 8002c0c:	bf00      	nop
}
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HRSAPP_Read_RTC_SSR_SS>:

static uint32_t HRSAPP_Read_RTC_SSR_SS ( void )
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HRSAPP_Read_RTC_SSR_SS+0x14>)
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	b29b      	uxth	r3, r3
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40002800 	.word	0x40002800

08002c28 <LL_PWR_EnableBootC2>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <LL_PWR_EnableBootC2+0x1c>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <LL_PWR_EnableBootC2+0x1c>)
 8002c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	58000400 	.word	0x58000400

08002c48 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002c52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002c56:	4905      	ldr	r1, [pc, #20]	; (8002c6c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	58000800 	.word	0x58000800

08002c70 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	4904      	ldr	r1, [pc, #16]	; (8002c90 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	620b      	str	r3, [r1, #32]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	58000800 	.word	0x58000800

08002c94 <LL_AHB3_GRP1_EnableClock>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	601a      	str	r2, [r3, #0]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	605a      	str	r2, [r3, #4]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	605a      	str	r2, [r3, #4]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4013      	ands	r3, r2
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d101      	bne.n	8002e02 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4013      	ands	r3, r2
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d101      	bne.n	8002e2c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002e40:	2102      	movs	r1, #2
 8002e42:	4819      	ldr	r0, [pc, #100]	; (8002ea8 <HW_IPCC_Rx_Handler+0x6c>)
 8002e44:	f7ff ffe4 	bl	8002e10 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HW_IPCC_Rx_Handler+0x26>
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HW_IPCC_Rx_Handler+0x6c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002e5c:	f000 f8da 	bl	8003014 <HW_IPCC_SYS_EvtHandler>
 8002e60:	e01f      	b.n	8002ea2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8002e62:	2101      	movs	r1, #1
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <HW_IPCC_Rx_Handler+0x6c>)
 8002e66:	f7ff ffd3 	bl	8002e10 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HW_IPCC_Rx_Handler+0x46>
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HW_IPCC_Rx_Handler+0x6c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8002e7c:	f000 f88e 	bl	8002f9c <HW_IPCC_BLE_EvtHandler>
 8002e80:	e00f      	b.n	8002ea2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8002e82:	2108      	movs	r1, #8
 8002e84:	4808      	ldr	r0, [pc, #32]	; (8002ea8 <HW_IPCC_Rx_Handler+0x6c>)
 8002e86:	f7ff ffc3 	bl	8002e10 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HW_IPCC_Rx_Handler+0x68>
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HW_IPCC_Rx_Handler+0x6c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8002e9e:	f000 f905 	bl	80030ac <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
}
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	58000c00 	.word	0x58000c00

08002eac <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	481a      	ldr	r0, [pc, #104]	; (8002f1c <HW_IPCC_Tx_Handler+0x70>)
 8002eb4:	f7ff ff97 	bl	8002de6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HW_IPCC_Tx_Handler+0x26>
 8002ebe:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <HW_IPCC_Tx_Handler+0x70>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002ecc:	f000 f896 	bl	8002ffc <HW_IPCC_SYS_CmdEvtHandler>
 8002ed0:	e020      	b.n	8002f14 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	4811      	ldr	r0, [pc, #68]	; (8002f1c <HW_IPCC_Tx_Handler+0x70>)
 8002ed6:	f7ff ff86 	bl	8002de6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HW_IPCC_Tx_Handler+0x48>
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HW_IPCC_Tx_Handler+0x70>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002eee:	f000 f8bf 	bl	8003070 <HW_IPCC_MM_FreeBufHandler>
 8002ef2:	e00f      	b.n	8002f14 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	4809      	ldr	r0, [pc, #36]	; (8002f1c <HW_IPCC_Tx_Handler+0x70>)
 8002ef8:	f7ff ff75 	bl	8002de6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HW_IPCC_Tx_Handler+0x6a>
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HW_IPCC_Tx_Handler+0x70>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002f10:	f000 f850 	bl	8002fb4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
}
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	58000c00 	.word	0x58000c00

08002f20 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002f24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f28:	f7ff fecd 	bl	8002cc6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8002f2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f30:	f7ff fe9e 	bl	8002c70 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8002f34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f38:	f7ff fe86 	bl	8002c48 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8002f3c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8002f3e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8002f40:	f7ff fe72 	bl	8002c28 <LL_PWR_EnableBootC2>

  return;
 8002f44:	bf00      	nop
}
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8002f4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f50:	f7ff fea0 	bl	8002c94 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8002f54:	4806      	ldr	r0, [pc, #24]	; (8002f70 <HW_IPCC_Init+0x28>)
 8002f56:	f7ff fee2 	bl	8002d1e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <HW_IPCC_Init+0x28>)
 8002f5c:	f7ff fecf 	bl	8002cfe <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002f60:	202c      	movs	r0, #44	; 0x2c
 8002f62:	f001 fa96 	bl	8004492 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002f66:	202d      	movs	r0, #45	; 0x2d
 8002f68:	f001 fa93 	bl	8004492 <HAL_NVIC_EnableIRQ>

  return;
 8002f6c:	bf00      	nop
}
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58000c00 	.word	0x58000c00

08002f74 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4802      	ldr	r0, [pc, #8]	; (8002f84 <HW_IPCC_BLE_Init+0x10>)
 8002f7c:	f7ff ff04 	bl	8002d88 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002f80:	bf00      	nop
}
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	58000c00 	.word	0x58000c00

08002f88 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4802      	ldr	r0, [pc, #8]	; (8002f98 <HW_IPCC_BLE_SendCmd+0x10>)
 8002f90:	f7ff ff1a 	bl	8002dc8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002f94:	bf00      	nop
}
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	58000c00 	.word	0x58000c00

08002f9c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8002fa0:	f007 fc64 	bl	800a86c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8002fa8:	f7ff ff00 	bl	8002dac <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002fac:	bf00      	nop
}
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	58000c00 	.word	0x58000c00

08002fb4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002fb8:	2120      	movs	r1, #32
 8002fba:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002fbc:	f7ff fed2 	bl	8002d64 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002fc0:	f007 fc84 	bl	800a8cc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8002fc4:	bf00      	nop
}
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	58000c00 	.word	0x58000c00

08002fcc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4802      	ldr	r0, [pc, #8]	; (8002fdc <HW_IPCC_SYS_Init+0x10>)
 8002fd4:	f7ff fed8 	bl	8002d88 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002fd8:	bf00      	nop
}
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	58000c00 	.word	0x58000c00

08002fe0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <HW_IPCC_SYS_SendCmd+0x18>)
 8002fe8:	f7ff feee 	bl	8002dc8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002fec:	2102      	movs	r1, #2
 8002fee:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <HW_IPCC_SYS_SendCmd+0x18>)
 8002ff0:	f7ff fea5 	bl	8002d3e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8002ff4:	bf00      	nop
}
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58000c00 	.word	0x58000c00

08002ffc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003000:	2102      	movs	r1, #2
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003004:	f7ff feae 	bl	8002d64 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003008:	f007 fcb0 	bl	800a96c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800300c:	bf00      	nop
}
 800300e:	bd80      	pop	{r7, pc}
 8003010:	58000c00 	.word	0x58000c00

08003014 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003018:	f007 fcbe 	bl	800a998 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800301c:	2102      	movs	r1, #2
 800301e:	4802      	ldr	r0, [pc, #8]	; (8003028 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003020:	f7ff fec4 	bl	8002dac <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003024:	bf00      	nop
}
 8003026:	bd80      	pop	{r7, pc}
 8003028:	58000c00 	.word	0x58000c00

0800302c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003034:	2108      	movs	r1, #8
 8003036:	480c      	ldr	r0, [pc, #48]	; (8003068 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003038:	f7ff fed5 	bl	8002de6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003048:	2108      	movs	r1, #8
 800304a:	4807      	ldr	r0, [pc, #28]	; (8003068 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800304c:	f7ff fe77 	bl	8002d3e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003050:	e006      	b.n	8003060 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003056:	2108      	movs	r1, #8
 8003058:	4803      	ldr	r0, [pc, #12]	; (8003068 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800305a:	f7ff feb5 	bl	8002dc8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800305e:	bf00      	nop
}
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58000c00 	.word	0x58000c00
 800306c:	200005c8 	.word	0x200005c8

08003070 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003074:	2108      	movs	r1, #8
 8003076:	4806      	ldr	r0, [pc, #24]	; (8003090 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003078:	f7ff fe74 	bl	8002d64 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003082:	2108      	movs	r1, #8
 8003084:	4802      	ldr	r0, [pc, #8]	; (8003090 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003086:	f7ff fe9f 	bl	8002dc8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800308a:	bf00      	nop
}
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58000c00 	.word	0x58000c00
 8003094:	200005c8 	.word	0x200005c8

08003098 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800309c:	2108      	movs	r1, #8
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <HW_IPCC_TRACES_Init+0x10>)
 80030a0:	f7ff fe72 	bl	8002d88 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80030a4:	bf00      	nop
}
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	58000c00 	.word	0x58000c00

080030ac <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80030b0:	f007 fd1a 	bl	800aae8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80030b4:	2108      	movs	r1, #8
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80030b8:	f7ff fe78 	bl	8002dac <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80030bc:	bf00      	nop
}
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58000c00 	.word	0x58000c00

080030c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80030c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c8:	3304      	adds	r3, #4

080030ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80030ce:	d3f9      	bcc.n	80030c4 <CopyDataInit>
  bx lr
 80030d0:	4770      	bx	lr

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80030d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80030d4:	3004      	adds	r0, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80030d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>
  bx lr
 80030da:	4770      	bx	lr

080030dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80030de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030e0:	f000 f8b0 	bl	8003244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <LoopForever+0x8>)
 80030e6:	490c      	ldr	r1, [pc, #48]	; (8003118 <LoopForever+0xc>)
 80030e8:	4a0c      	ldr	r2, [pc, #48]	; (800311c <LoopForever+0x10>)
 80030ea:	2300      	movs	r3, #0
 80030ec:	f7ff ffed 	bl	80030ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <LoopForever+0x14>)
 80030f2:	490c      	ldr	r1, [pc, #48]	; (8003124 <LoopForever+0x18>)
 80030f4:	2300      	movs	r3, #0
 80030f6:	f7ff ffee 	bl	80030d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80030fa:	480b      	ldr	r0, [pc, #44]	; (8003128 <LoopForever+0x1c>)
 80030fc:	490b      	ldr	r1, [pc, #44]	; (800312c <LoopForever+0x20>)
 80030fe:	2300      	movs	r3, #0
 8003100:	f7ff ffe9 	bl	80030d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003104:	f008 f820 	bl	800b148 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003108:	f7fe fba6 	bl	8001858 <main>

0800310c <LoopForever>:

LoopForever:
  b LoopForever
 800310c:	e7fe      	b.n	800310c <LoopForever>
 800310e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003110:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003114:	20000008 	.word	0x20000008
 8003118:	20000038 	.word	0x20000038
 800311c:	0800b484 	.word	0x0800b484
  INIT_BSS _sbss, _ebss
 8003120:	20000090 	.word	0x20000090
 8003124:	200006e4 	.word	0x200006e4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003128:	200301e4 	.word	0x200301e4
 800312c:	20030a67 	.word	0x20030a67

08003130 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003130:	e7fe      	b.n	8003130 <ADC1_IRQHandler>

08003132 <LL_AHB2_GRP1_EnableClock>:
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800313a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4013      	ands	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	460a      	mov	r2, r1
 800316e:	71fb      	strb	r3, [r7, #7]
 8003170:	4613      	mov	r3, r2
 8003172:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <BSP_PB_Init+0x2e>
 800318a:	2004      	movs	r0, #4
 800318c:	f7ff ffd1 	bl	8003132 <LL_AHB2_GRP1_EnableClock>
 8003190:	e00c      	b.n	80031ac <BSP_PB_Init+0x48>
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d103      	bne.n	80031a0 <BSP_PB_Init+0x3c>
 8003198:	2008      	movs	r0, #8
 800319a:	f7ff ffca 	bl	8003132 <LL_AHB2_GRP1_EnableClock>
 800319e:	e005      	b.n	80031ac <BSP_PB_Init+0x48>
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d102      	bne.n	80031ac <BSP_PB_Init+0x48>
 80031a6:	2008      	movs	r0, #8
 80031a8:	f7ff ffc3 	bl	8003132 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d117      	bne.n	80031e2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	4a20      	ldr	r2, [pc, #128]	; (8003238 <BSP_PB_Init+0xd4>)
 80031b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ba:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80031c0:	2301      	movs	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c4:	2302      	movs	r3, #2
 80031c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <BSP_PB_Init+0xd8>)
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	f107 020c 	add.w	r2, r7, #12
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fb2e 	bl	8004838 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80031dc:	2001      	movs	r0, #1
 80031de:	f7fd fb17 	bl	8000810 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80031e2:	79bb      	ldrb	r3, [r7, #6]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d123      	bne.n	8003230 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <BSP_PB_Init+0xd4>)
 80031ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80031f2:	2301      	movs	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80031f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031fa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	4a0f      	ldr	r2, [pc, #60]	; (800323c <BSP_PB_Init+0xd8>)
 8003200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003204:	f107 020c 	add.w	r2, r7, #12
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fb14 	bl	8004838 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <BSP_PB_Init+0xdc>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	b25b      	sxtb	r3, r3
 8003218:	2200      	movs	r2, #0
 800321a:	210f      	movs	r1, #15
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f91e 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	4a06      	ldr	r2, [pc, #24]	; (8003240 <BSP_PB_Init+0xdc>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	b25b      	sxtb	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f001 f931 	bl	8004492 <HAL_NVIC_EnableIRQ>
  }
}
 8003230:	bf00      	nop
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	0800b3e0 	.word	0x0800b3e0
 800323c:	20000018 	.word	0x20000018
 8003240:	0800b3e8 	.word	0x0800b3e8

08003244 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <SystemInit+0xa0>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <SystemInit+0xa0>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <SystemInit+0xa0>)
 8003256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800325a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003276:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <SystemInit+0xa4>)
 8003284:	4013      	ands	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003294:	f023 0305 	bic.w	r3, r3, #5
 8003298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <SystemInit+0xa8>)
 80032b6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <SystemInit+0xa8>)
 80032be:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00
 80032e8:	faf6fefb 	.word	0xfaf6fefb
 80032ec:	22041000 	.word	0x22041000

080032f0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6053      	str	r3, [r2, #4]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e0042000 	.word	0xe0042000

08003310 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800331a:	f043 0302 	orr.w	r3, r3, #2
 800331e:	6053      	str	r3, [r2, #4]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e0042000 	.word	0xe0042000

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_Init+0x3c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <HAL_Init+0x3c>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003346:	2003      	movs	r0, #3
 8003348:	f001 f87e 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800334c:	2000      	movs	r0, #0
 800334e:	f000 f80f 	bl	8003370 <HAL_InitTick>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	71fb      	strb	r3, [r7, #7]
 800335c:	e001      	b.n	8003362 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800335e:	f7fe fe51 	bl	8002004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003362:	79fb      	ldrb	r3, [r7, #7]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58004000 	.word	0x58004000

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_InitTick+0x6c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d024      	beq.n	80033ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003384:	f002 fd3e 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_InitTick+0x6c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003394:	fbb3 f3f1 	udiv	r3, r3, r1
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	4618      	mov	r0, r3
 800339e:	f001 f894 	bl	80044ca <HAL_SYSTICK_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d809      	bhi.n	80033c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ae:	2200      	movs	r2, #0
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	f04f 30ff 	mov.w	r0, #4294967295
 80033b6:	f001 f852 	bl	800445e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_InitTick+0x70>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e007      	b.n	80033d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
 80033c6:	e004      	b.n	80033d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e001      	b.n	80033d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2000002c 	.word	0x2000002c
 80033e0:	20000028 	.word	0x20000028

080033e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_IncTick+0x20>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_IncTick+0x24>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_IncTick+0x24>)
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	2000002c 	.word	0x2000002c
 8003408:	200005cc 	.word	0x200005cc

0800340c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return uwTick;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_GetTick+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	200005cc 	.word	0x200005cc

08003424 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_GetTickPrio+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000028 	.word	0x20000028

0800343c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_GetTickFreq+0x14>)
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000002c 	.word	0x2000002c

08003454 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_SuspendTick+0x1c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_SuspendTick+0x1c>)
 800345e:	f023 0302 	bic.w	r3, r3, #2
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e010 	.word	0xe000e010

08003474 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_ResumeTick+0x1c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_ResumeTick+0x1c>)
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	6013      	str	r3, [r2, #0]
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003498:	f7ff ff2a 	bl	80032f0 <LL_DBGMCU_EnableDBGSleepMode>
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80034a4:	f7ff ff34 	bl	8003310 <LL_DBGMCU_EnableDBGStopMode>
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}

080034ac <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <LL_ADC_SetOffset+0x44>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	03fff000 	.word	0x03fff000

0800355c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	461a      	mov	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3360      	adds	r3, #96	; 0x60
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035be:	b480      	push	{r7}
 80035c0:	b087      	sub	sp, #28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3330      	adds	r3, #48	; 0x30
 80035ce:	461a      	mov	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	4413      	add	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	211f      	movs	r1, #31
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	401a      	ands	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	f003 011f 	and.w	r1, r3, #31
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	431a      	orrs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3314      	adds	r3, #20
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	0e5b      	lsrs	r3, r3, #25
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0d1b      	lsrs	r3, r3, #20
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2107      	movs	r1, #7
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	0d1b      	lsrs	r3, r3, #20
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	431a      	orrs	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003684:	43db      	mvns	r3, r3
 8003686:	401a      	ands	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0318 	and.w	r3, r3, #24
 800368e:	4908      	ldr	r1, [pc, #32]	; (80036b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003690:	40d9      	lsrs	r1, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	400b      	ands	r3, r1
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	431a      	orrs	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	0007ffff 	.word	0x0007ffff

080036b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6093      	str	r3, [r2, #8]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ec:	d101      	bne.n	80036f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373c:	d101      	bne.n	8003742 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <LL_ADC_IsEnabled+0x18>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <LL_ADC_IsEnabled+0x1a>
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d101      	bne.n	800378e <LL_ADC_REG_IsConversionOngoing+0x18>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d101      	bne.n	80037b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e12e      	b.n	8003a40 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fe fc17 	bl	8002024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff65 	bl	80036d8 <LL_ADC_IsDeepPowerDownEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff4b 	bl	80036b4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff80 	bl	8003728 <LL_ADC_IsInternalRegulatorEnabled>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff64 	bl	8003700 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003838:	4b83      	ldr	r3, [pc, #524]	; (8003a48 <HAL_ADC_Init+0x284>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	4a83      	ldr	r2, [pc, #524]	; (8003a4c <HAL_ADC_Init+0x288>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	3301      	adds	r3, #1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800384c:	e002      	b.n	8003854 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3b01      	subs	r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f9      	bne.n	800384e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff62 	bl	8003728 <LL_ADC_IsInternalRegulatorEnabled>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff73 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 8003890:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 80c7 	bne.w	8003a2e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 80c3 	bne.w	8003a2e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038b0:	f043 0202 	orr.w	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff47 	bl	8003750 <LL_ADC_IsEnabled>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c8:	4861      	ldr	r0, [pc, #388]	; (8003a50 <HAL_ADC_Init+0x28c>)
 80038ca:	f7ff ff41 	bl	8003750 <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	485e      	ldr	r0, [pc, #376]	; (8003a54 <HAL_ADC_Init+0x290>)
 80038dc:	f7ff fde6 	bl	80034ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e5b      	ldrb	r3, [r3, #25]
 80038e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80038f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80038f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fe:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003900:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d106      	bne.n	8003920 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	3b01      	subs	r3, #1
 8003918:	045b      	lsls	r3, r3, #17
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_ADC_Init+0x294>)
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	430b      	orrs	r3, r1
 800394e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff0e 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 800395a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff1b 	bl	800379c <LL_ADC_INJ_IsConversionOngoing>
 8003966:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d13d      	bne.n	80039ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13a      	bne.n	80039ea <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003978:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003980:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003990:	f023 0302 	bic.w	r3, r3, #2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	69b9      	ldr	r1, [r7, #24]
 800399a:	430b      	orrs	r3, r1
 800399c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d118      	bne.n	80039da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80039b2:	f023 0304 	bic.w	r3, r3, #4
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039ca:	430a      	orrs	r2, r1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	611a      	str	r2, [r3, #16]
 80039d8:	e007      	b.n	80039ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10c      	bne.n	8003a0c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f023 010f 	bic.w	r1, r3, #15
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
 8003a0a:	e007      	b.n	8003a1c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 020f 	bic.w	r2, r2, #15
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f023 0303 	bic.w	r3, r3, #3
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
 8003a2c:	e007      	b.n	8003a3e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000024 	.word	0x20000024
 8003a4c:	053e2d63 	.word	0x053e2d63
 8003a50:	50040000 	.word	0x50040000
 8003a54:	50040300 	.word	0x50040300
 8003a58:	fff0c007 	.word	0xfff0c007

08003a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0b6      	sub	sp, #216	; 0xd8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x22>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e39f      	b.n	80041be <HAL_ADC_ConfigChannel+0x762>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fe73 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8384 	bne.w	80041a0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f7ff fd8a 	bl	80035be <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fe61 	bl	8003776 <LL_ADC_REG_IsConversionOngoing>
 8003ab4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fe6d 	bl	800379c <LL_ADC_INJ_IsConversionOngoing>
 8003ac2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 81a6 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f040 81a1 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f7ff fd95 	bl	8003616 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	08db      	lsrs	r3, r3, #3
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d00a      	beq.n	8003b24 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6919      	ldr	r1, [r3, #16]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b1e:	f7ff fcf9 	bl	8003514 <LL_ADC_SetOffset>
 8003b22:	e17b      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fd16 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0xf4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fd0b 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003b46:	4603      	mov	r3, r0
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	f003 021f 	and.w	r2, r3, #31
 8003b4e:	e01e      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x132>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fd00 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003b7e:	2320      	movs	r3, #32
 8003b80:	e004      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x14a>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0e9b      	lsrs	r3, r3, #26
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	e018      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x17c>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003bca:	2320      	movs	r3, #32
 8003bcc:	e004      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d106      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fccf 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fcb3 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x1ba>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fca8 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	0e9b      	lsrs	r3, r3, #26
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	e01e      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x1f8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fc9d 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e004      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x210>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	e018      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x242>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e004      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d106      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fc6c 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fc50 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x280>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fc45 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	f003 021f 	and.w	r2, r3, #31
 8003cda:	e01e      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x2be>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fc3a 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	e004      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x2d6>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	e016      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x304>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e004      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fc0b 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2103      	movs	r1, #3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fbef 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x342>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fbe4 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	0e9b      	lsrs	r3, r3, #26
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	e017      	b.n	8003dce <HAL_ADC_ConfigChannel+0x372>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2103      	movs	r1, #3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fbd9 	bl	800355c <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	e003      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x38a>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	0e9b      	lsrs	r3, r3, #26
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	e011      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x3ae>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	e003      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d106      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	2103      	movs	r1, #3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fbb6 	bl	8003588 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fc95 	bl	8003750 <LL_ADC_IsEnabled>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 81c2 	bne.w	80041b2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f7ff fc16 	bl	800366c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a8e      	ldr	r2, [pc, #568]	; (8004080 <HAL_ADC_ConfigChannel+0x624>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f040 8130 	bne.w	80040ac <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x418>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	3301      	adds	r3, #1
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	bf94      	ite	ls
 8003e6c:	2301      	movls	r3, #1
 8003e6e:	2300      	movhi	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e019      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x44c>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	e003      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	bf94      	ite	ls
 8003ea2:	2301      	movls	r3, #1
 8003ea4:	2300      	movhi	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d079      	beq.n	8003fa0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x46c>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	069b      	lsls	r3, r3, #26
 8003ec2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ec6:	e015      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x498>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	e003      	b.n	8003eec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	069b      	lsls	r3, r3, #26
 8003ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x4b8>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	3301      	adds	r3, #1
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	e017      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x4e8>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	e003      	b.n	8003f38 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	ea42 0103 	orr.w	r1, r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x50e>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	051b      	lsls	r3, r3, #20
 8003f68:	e018      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x540>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f82:	2320      	movs	r3, #32
 8003f84:	e003      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f003 021f 	and.w	r2, r3, #31
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	e080      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x560>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0e9b      	lsrs	r3, r3, #26
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	069b      	lsls	r3, r3, #26
 8003fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fba:	e015      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x58c>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e003      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	069b      	lsls	r3, r3, #26
 8003fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x5ac>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0e9b      	lsrs	r3, r3, #26
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2101      	movs	r1, #1
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	e017      	b.n	8004038 <HAL_ADC_ConfigChannel+0x5dc>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	61fb      	str	r3, [r7, #28]
  return result;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8004020:	2320      	movs	r3, #32
 8004022:	e003      	b.n	800402c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	ea42 0103 	orr.w	r1, r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10d      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x608>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	3301      	adds	r3, #1
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	3b1e      	subs	r3, #30
 800405c:	051b      	lsls	r3, r3, #20
 800405e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004062:	e01d      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x644>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	613b      	str	r3, [r7, #16]
  return result;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e005      	b.n	800408c <HAL_ADC_ConfigChannel+0x630>
 8004080:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	f003 021f 	and.w	r2, r3, #31
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	3b1e      	subs	r3, #30
 800409a:	051b      	lsls	r3, r3, #20
 800409c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040a0:	430b      	orrs	r3, r1
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	4619      	mov	r1, r3
 80040a8:	f7ff fab5 	bl	8003616 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b45      	ldr	r3, [pc, #276]	; (80041c8 <HAL_ADC_ConfigChannel+0x76c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d07c      	beq.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040b8:	4844      	ldr	r0, [pc, #272]	; (80041cc <HAL_ADC_ConfigChannel+0x770>)
 80040ba:	f7ff fa1d 	bl	80034f8 <LL_ADC_GetCommonPathInternalCh>
 80040be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040c2:	4843      	ldr	r0, [pc, #268]	; (80041d0 <HAL_ADC_ConfigChannel+0x774>)
 80040c4:	f7ff fb44 	bl	8003750 <LL_ADC_IsEnabled>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d15e      	bne.n	800418c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_ADC_ConfigChannel+0x778>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d127      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x6cc>
 80040d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d121      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a39      	ldr	r2, [pc, #228]	; (80041d0 <HAL_ADC_ConfigChannel+0x774>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d161      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80040ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040f6:	4619      	mov	r1, r3
 80040f8:	4834      	ldr	r0, [pc, #208]	; (80041cc <HAL_ADC_ConfigChannel+0x770>)
 80040fa:	f7ff f9ea 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040fe:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_ADC_ConfigChannel+0x77c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	4a35      	ldr	r2, [pc, #212]	; (80041dc <HAL_ADC_ConfigChannel+0x780>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004118:	e002      	b.n	8004120 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3b01      	subs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f9      	bne.n	800411a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004126:	e044      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <HAL_ADC_ConfigChannel+0x784>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d113      	bne.n	800415a <HAL_ADC_ConfigChannel+0x6fe>
 8004132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10d      	bne.n	800415a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <HAL_ADC_ConfigChannel+0x774>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d134      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800414c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004150:	4619      	mov	r1, r3
 8004152:	481e      	ldr	r0, [pc, #120]	; (80041cc <HAL_ADC_ConfigChannel+0x770>)
 8004154:	f7ff f9bd 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004158:	e02b      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <HAL_ADC_ConfigChannel+0x788>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d126      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
 8004164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d120      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_ADC_ConfigChannel+0x774>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d11b      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800417a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800417e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004182:	4619      	mov	r1, r3
 8004184:	4811      	ldr	r0, [pc, #68]	; (80041cc <HAL_ADC_ConfigChannel+0x770>)
 8004186:	f7ff f9a4 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
 800418a:	e012      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800419e:	e008      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80041ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041be:	4618      	mov	r0, r3
 80041c0:	37d8      	adds	r7, #216	; 0xd8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	80080000 	.word	0x80080000
 80041cc:	50040300 	.word	0x50040300
 80041d0:	50040000 	.word	0x50040000
 80041d4:	c7520000 	.word	0xc7520000
 80041d8:	20000024 	.word	0x20000024
 80041dc:	053e2d63 	.word	0x053e2d63
 80041e0:	cb840000 	.word	0xcb840000
 80041e4:	80000001 	.word	0x80000001

080041e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <__NVIC_SetPriorityGrouping+0x44>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004204:	4013      	ands	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421a:	4a04      	ldr	r2, [pc, #16]	; (800422c <__NVIC_SetPriorityGrouping+0x44>)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60d3      	str	r3, [r2, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <__NVIC_GetPriorityGrouping+0x18>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 0307 	and.w	r3, r3, #7
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	2b00      	cmp	r3, #0
 800425c:	db0b      	blt.n	8004276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	f003 021f 	and.w	r2, r3, #31
 8004264:	4907      	ldr	r1, [pc, #28]	; (8004284 <__NVIC_EnableIRQ+0x38>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2001      	movs	r0, #1
 800426e:	fa00 f202 	lsl.w	r2, r0, r2
 8004272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	e000e100 	.word	0xe000e100

08004288 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db12      	blt.n	80042c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	490a      	ldr	r1, [pc, #40]	; (80042cc <__NVIC_DisableIRQ+0x44>)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2001      	movs	r0, #1
 80042aa:	fa00 f202 	lsl.w	r2, r0, r2
 80042ae:	3320      	adds	r3, #32
 80042b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042b4:	f3bf 8f4f 	dsb	sy
}
 80042b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042ba:	f3bf 8f6f 	isb	sy
}
 80042be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db0c      	blt.n	80042fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4907      	ldr	r1, [pc, #28]	; (8004308 <__NVIC_SetPendingIRQ+0x38>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2001      	movs	r0, #1
 80042f2:	fa00 f202 	lsl.w	r2, r0, r2
 80042f6:	3340      	adds	r3, #64	; 0x40
 80042f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100

0800430c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	2b00      	cmp	r3, #0
 800431c:	db0c      	blt.n	8004338 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	4907      	ldr	r1, [pc, #28]	; (8004344 <__NVIC_ClearPendingIRQ+0x38>)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2001      	movs	r0, #1
 800432e:	fa00 f202 	lsl.w	r2, r0, r2
 8004332:	3360      	adds	r3, #96	; 0x60
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100

08004348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db0a      	blt.n	8004372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	490c      	ldr	r1, [pc, #48]	; (8004394 <__NVIC_SetPriority+0x4c>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	440b      	add	r3, r1
 800436c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004370:	e00a      	b.n	8004388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4908      	ldr	r1, [pc, #32]	; (8004398 <__NVIC_SetPriority+0x50>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3b04      	subs	r3, #4
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	440b      	add	r3, r1
 8004386:	761a      	strb	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f1c3 0307 	rsb	r3, r3, #7
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf28      	it	cs
 80043ba:	2304      	movcs	r3, #4
 80043bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d902      	bls.n	80043cc <NVIC_EncodePriority+0x30>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3b03      	subs	r3, #3
 80043ca:	e000      	b.n	80043ce <NVIC_EncodePriority+0x32>
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	401a      	ands	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43d9      	mvns	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	4313      	orrs	r3, r2
         );
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	; 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004414:	d301      	bcc.n	800441a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004416:	2301      	movs	r3, #1
 8004418:	e00f      	b.n	800443a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <SysTick_Config+0x40>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004422:	210f      	movs	r1, #15
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	f7ff ff8e 	bl	8004348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <SysTick_Config+0x40>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <SysTick_Config+0x40>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000e010 	.word	0xe000e010

08004448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fec9 	bl	80041e8 <__NVIC_SetPriorityGrouping>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff fee0 	bl	8004230 <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff90 	bl	800439c <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5f 	bl	8004348 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fed3 	bl	800424c <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fee3 	bl	8004288 <__NVIC_DisableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff96 	bl	8004404 <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff feed 	bl	80042d0 <__NVIC_SetPendingIRQ>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fefd 	bl	800430c <__NVIC_ClearPendingIRQ>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e04f      	b.n	80045cc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d008      	beq.n	800454a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2204      	movs	r2, #4
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e040      	b.n	80045cc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 020e 	bic.w	r2, r2, #14
 8004558:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f003 021c 	and.w	r2, r3, #28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f202 	lsl.w	r2, r1, r2
 800458c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004596:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d005      	beq.n	80045fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2204      	movs	r2, #4
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	e047      	b.n	800468c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 020e 	bic.w	r2, r2, #14
 800460a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f003 021c 	and.w	r2, r3, #28
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004648:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800466a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
    }
  }
  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f003 031c 	and.w	r3, r3, #28
 80046b6:	2204      	movs	r2, #4
 80046b8:	409a      	lsls	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d026      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7a>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d021      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0204 	bic.w	r2, r2, #4
 80046e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 021c 	and.w	r2, r3, #28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2104      	movs	r1, #4
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	2b00      	cmp	r3, #0
 8004704:	d071      	beq.n	80047ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800470e:	e06c      	b.n	80047ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f003 031c 	and.w	r3, r3, #28
 8004718:	2202      	movs	r2, #2
 800471a:	409a      	lsls	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02e      	beq.n	8004782 <HAL_DMA_IRQHandler+0xec>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d029      	beq.n	8004782 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 020a 	bic.w	r2, r2, #10
 800474a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 021c 	and.w	r2, r3, #28
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2102      	movs	r1, #2
 8004762:	fa01 f202 	lsl.w	r2, r1, r2
 8004766:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d038      	beq.n	80047ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004780:	e033      	b.n	80047ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 031c 	and.w	r3, r3, #28
 800478a:	2208      	movs	r2, #8
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d02a      	beq.n	80047ec <HAL_DMA_IRQHandler+0x156>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d025      	beq.n	80047ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 020e 	bic.w	r2, r2, #14
 80047ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	f003 021c 	and.w	r2, r3, #28
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f202 	lsl.w	r2, r1, r2
 80047c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
}
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	2201      	movs	r2, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8004820:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004824:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004846:	e14c      	b.n	8004ae2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	2101      	movs	r1, #1
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 813e 	beq.w	8004adc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d005      	beq.n	8004878 <HAL_GPIO_Init+0x40>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d130      	bne.n	80048da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	2203      	movs	r2, #3
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4013      	ands	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ae:	2201      	movs	r2, #1
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	091b      	lsrs	r3, r3, #4
 80048c4:	f003 0201 	and.w	r2, r3, #1
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d017      	beq.n	8004916 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2203      	movs	r2, #3
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d123      	bne.n	800496a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	08da      	lsrs	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3208      	adds	r2, #8
 800492a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4013      	ands	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	08da      	lsrs	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3208      	adds	r2, #8
 8004964:	6939      	ldr	r1, [r7, #16]
 8004966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2203      	movs	r2, #3
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0203 	and.w	r2, r3, #3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8098 	beq.w	8004adc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80049ac:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_GPIO_Init+0x2c8>)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	3302      	adds	r3, #2
 80049b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	220f      	movs	r2, #15
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4013      	ands	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049d6:	d019      	beq.n	8004a0c <HAL_GPIO_Init+0x1d4>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a4a      	ldr	r2, [pc, #296]	; (8004b04 <HAL_GPIO_Init+0x2cc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_GPIO_Init+0x1d0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a49      	ldr	r2, [pc, #292]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00d      	beq.n	8004a04 <HAL_GPIO_Init+0x1cc>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a48      	ldr	r2, [pc, #288]	; (8004b0c <HAL_GPIO_Init+0x2d4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <HAL_GPIO_Init+0x1c8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a47      	ldr	r2, [pc, #284]	; (8004b10 <HAL_GPIO_Init+0x2d8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <HAL_GPIO_Init+0x1c4>
 80049f8:	2304      	movs	r3, #4
 80049fa:	e008      	b.n	8004a0e <HAL_GPIO_Init+0x1d6>
 80049fc:	2307      	movs	r3, #7
 80049fe:	e006      	b.n	8004a0e <HAL_GPIO_Init+0x1d6>
 8004a00:	2303      	movs	r3, #3
 8004a02:	e004      	b.n	8004a0e <HAL_GPIO_Init+0x1d6>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e002      	b.n	8004a0e <HAL_GPIO_Init+0x1d6>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_GPIO_Init+0x1d6>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	f002 0203 	and.w	r2, r2, #3
 8004a14:	0092      	lsls	r2, r2, #2
 8004a16:	4093      	lsls	r3, r2
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a1e:	4938      	ldr	r1, [pc, #224]	; (8004b00 <HAL_GPIO_Init+0x2c8>)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	3302      	adds	r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a2c:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a50:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a7a:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004aae:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ad4:	4a0f      	ldr	r2, [pc, #60]	; (8004b14 <HAL_GPIO_Init+0x2dc>)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f47f aeab 	bne.w	8004848 <HAL_GPIO_Init+0x10>
  }
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40010000 	.word	0x40010000
 8004b04:	48000400 	.word	0x48000400
 8004b08:	48000800 	.word	0x48000800
 8004b0c:	48000c00 	.word	0x48000c00
 8004b10:	48001000 	.word	0x48001000
 8004b14:	58000800 	.word	0x58000800

08004b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
 8004b24:	4613      	mov	r3, r2
 8004b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b28:	787b      	ldrb	r3, [r7, #1]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b34:	e002      	b.n	8004b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b5e:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fb feb4 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	58000800 	.word	0x58000800

08004b78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_HSEM_IRQHandler+0x30>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004b84:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <HAL_HSEM_IRQHandler+0x30>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <HAL_HSEM_IRQHandler+0x30>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004b92:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <HAL_HSEM_IRQHandler+0x30>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f807 	bl	8004bac <HAL_HSEM_FreeCallback>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	58001500 	.word	0x58001500

08004bac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01e      	beq.n	8004c10 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_IPCC_Init+0x60>)
 8004bd4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fd fa70 	bl	80020c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004be8:	68b8      	ldr	r0, [r7, #8]
 8004bea:	f000 f85b 	bl	8004ca4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f82c 	bl	8004c58 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004c0e:	e001      	b.n	8004c14 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58000c00 	.word	0x58000c00

08004c24 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e00f      	b.n	8004c86 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <IPCC_SetDefaultCallbacks+0x44>)
 8004c70:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3306      	adds	r3, #6
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <IPCC_SetDefaultCallbacks+0x48>)
 8004c7e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	d9ec      	bls.n	8004c66 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	08004c25 	.word	0x08004c25
 8004ca0:	08004c3f 	.word	0x08004c3f

08004ca4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004cb8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223f      	movs	r2, #63	; 0x3f
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	58000400 	.word	0x58000400

08004cec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	58000400 	.word	0x58000400

08004d08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1a:	d101      	bne.n	8004d20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_HSE_Enable>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_RCC_HSE_Disable>:
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_RCC_HSE_IsReady>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d7a:	d101      	bne.n	8004d80 <LL_RCC_HSE_IsReady+0x18>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <LL_RCC_HSE_IsReady+0x1a>
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_HSI_Enable>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9e:	6013      	str	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <LL_RCC_HSI_Disable>:
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	6013      	str	r3, [r2, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_HSI_IsReady>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d101      	bne.n	8004de0 <LL_RCC_HSI_IsReady+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <LL_RCC_HSI_IsReady+0x1a>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_RCC_HSI_SetCalibTrimming>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <LL_RCC_HSI48_Enable>:
{
 8004e16:	b480      	push	{r7}
 8004e18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_RCC_HSI48_Disable>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e50:	bf00      	nop
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_HSI48_IsReady>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d101      	bne.n	8004e72 <LL_RCC_HSI48_IsReady+0x18>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <LL_RCC_HSI48_IsReady+0x1a>
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_RCC_LSE_Enable>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e96:	bf00      	nop
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_LSE_Disable>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_RCC_LSE_EnableBypass>:
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed2:	f043 0304 	orr.w	r3, r3, #4
 8004ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004eda:	bf00      	nop
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_RCC_LSE_DisableBypass>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <LL_RCC_LSE_IsReady>:
{
 8004f06:	b480      	push	{r7}
 8004f08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d101      	bne.n	8004f1e <LL_RCC_LSE_IsReady+0x18>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <LL_RCC_LSE_IsReady+0x1a>
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_RCC_LSI1_Enable>:
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_RCC_LSI1_Disable>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_RCC_LSI1_IsReady>:
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d101      	bne.n	8004f86 <LL_RCC_LSI1_IsReady+0x18>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <LL_RCC_LSI1_IsReady+0x1a>
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_RCC_LSI2_Enable>:
{
 8004f92:	b480      	push	{r7}
 8004f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa2:	f043 0304 	orr.w	r3, r3, #4
 8004fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_RCC_LSI2_Disable>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <LL_RCC_LSI2_IsReady>:
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d101      	bne.n	8004fee <LL_RCC_LSI2_IsReady+0x18>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <LL_RCC_LSI2_IsReady+0x1a>
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <LL_RCC_LSI2_SetTrimming>:
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_RCC_MSI_Enable>:
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_RCC_MSI_Disable>:
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6013      	str	r3, [r2, #0]
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <LL_RCC_MSI_IsReady>:
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d101      	bne.n	800507a <LL_RCC_MSI_IsReady+0x16>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <LL_RCC_MSI_IsReady+0x18>
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_RCC_MSI_SetRange>:
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_RCC_MSI_GetRange>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2bb0      	cmp	r3, #176	; 0xb0
 80050c4:	d901      	bls.n	80050ca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80050c6:	23b0      	movs	r3, #176	; 0xb0
 80050c8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80050ca:	687b      	ldr	r3, [r7, #4]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f2:	4313      	orrs	r3, r2
 80050f4:	604b      	str	r3, [r1, #4]
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <LL_RCC_SetSysClkSource>:
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 0203 	bic.w	r2, r3, #3
 8005114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_GetSysClkSource>:
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 030c 	and.w	r3, r3, #12
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_RCC_SetAHBPrescaler>:
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_C2_RCC_SetAHBPrescaler>:
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800517a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_RCC_SetAHB4Prescaler>:
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051a6:	f023 020f 	bic.w	r2, r3, #15
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <LL_RCC_SetAPB1Prescaler>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4313      	orrs	r3, r2
 80051de:	608b      	str	r3, [r1, #8]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_RCC_SetAPB2Prescaler>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_RCC_GetAHBPrescaler>:
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_GetAHB4Prescaler>:
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005234:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005266:	b480      	push	{r7}
 8005268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800526a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005278:	6013      	str	r3, [r2, #0]
}
 800527a:	bf00      	nop
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005296:	d101      	bne.n	800529c <LL_RCC_PLL_IsReady+0x18>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <LL_RCC_PLL_IsReady+0x1a>
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0303 	and.w	r3, r3, #3
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531c:	d101      	bne.n	8005322 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005342:	d101      	bne.n	8005348 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d101      	bne.n	800536e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800537a:	b480      	push	{r7}
 800537c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538c:	d101      	bne.n	8005392 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800539e:	b480      	push	{r7}
 80053a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053b0:	d101      	bne.n	80053b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b08d      	sub	sp, #52	; 0x34
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e363      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808d 	beq.w	80054fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e4:	f7ff fea1 	bl	800512a <LL_RCC_GetSysClkSource>
 80053e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ea:	f7ff ff82 	bl	80052f2 <LL_RCC_PLL_GetMainSource>
 80053ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_RCC_OscConfig+0x3e>
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d147      	bne.n	800548c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d144      	bne.n	800548c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e347      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005412:	f7ff fe4c 	bl	80050ae <LL_RCC_MSI_GetRange>
 8005416:	4603      	mov	r3, r0
 8005418:	429c      	cmp	r4, r3
 800541a:	d914      	bls.n	8005446 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fd03 	bl	8005e2c <RCC_SetFlashLatencyFromMSIRange>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e336      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fe26 	bl	8005086 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fe4a 	bl	80050d8 <LL_RCC_MSI_SetCalibTrimming>
 8005444:	e013      	b.n	800546e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fe1b 	bl	8005086 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fe3f 	bl	80050d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fce4 	bl	8005e2c <RCC_SetFlashLatencyFromMSIRange>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e317      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800546e:	f000 fcc9 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8005472:	4603      	mov	r3, r0
 8005474:	4aa4      	ldr	r2, [pc, #656]	; (8005708 <HAL_RCC_OscConfig+0x344>)
 8005476:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005478:	4ba4      	ldr	r3, [pc, #656]	; (800570c <HAL_RCC_OscConfig+0x348>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd ff77 	bl	8003370 <HAL_InitTick>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d039      	beq.n	80054fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e308      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01e      	beq.n	80054d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005494:	f7ff fdc8 	bl	8005028 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005498:	f7fd ffb8 	bl	800340c <HAL_GetTick>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054a0:	f7fd ffb4 	bl	800340c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e2f5      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80054b2:	f7ff fdd7 	bl	8005064 <LL_RCC_MSI_IsReady>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f1      	beq.n	80054a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fde0 	bl	8005086 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fe04 	bl	80050d8 <LL_RCC_MSI_SetCalibTrimming>
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054d2:	f7ff fdb8 	bl	8005046 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054d6:	f7fd ff99 	bl	800340c <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054de:	f7fd ff95 	bl	800340c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e2d6      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80054f0:	f7ff fdb8 	bl	8005064 <LL_RCC_MSI_IsReady>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f1      	bne.n	80054de <HAL_RCC_OscConfig+0x11a>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d047      	beq.n	800559a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550a:	f7ff fe0e 	bl	800512a <LL_RCC_GetSysClkSource>
 800550e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005510:	f7ff feef 	bl	80052f2 <LL_RCC_PLL_GetMainSource>
 8005514:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d005      	beq.n	8005528 <HAL_RCC_OscConfig+0x164>
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d108      	bne.n	8005534 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d105      	bne.n	8005534 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d134      	bne.n	800559a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e2b4      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553c:	d102      	bne.n	8005544 <HAL_RCC_OscConfig+0x180>
 800553e:	f7ff fbf5 	bl	8004d2c <LL_RCC_HSE_Enable>
 8005542:	e001      	b.n	8005548 <HAL_RCC_OscConfig+0x184>
 8005544:	f7ff fc01 	bl	8004d4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d012      	beq.n	8005576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd ff5c 	bl	800340c <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005558:	f7fd ff58 	bl	800340c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	; 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e299      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800556a:	f7ff fbfd 	bl	8004d68 <LL_RCC_HSE_IsReady>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f1      	beq.n	8005558 <HAL_RCC_OscConfig+0x194>
 8005574:	e011      	b.n	800559a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fd ff49 	bl	800340c <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800557e:	f7fd ff45 	bl	800340c <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b64      	cmp	r3, #100	; 0x64
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e286      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005590:	f7ff fbea 	bl	8004d68 <LL_RCC_HSE_IsReady>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f1      	bne.n	800557e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d04c      	beq.n	8005640 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055a6:	f7ff fdc0 	bl	800512a <LL_RCC_GetSysClkSource>
 80055aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ac:	f7ff fea1 	bl	80052f2 <LL_RCC_PLL_GetMainSource>
 80055b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_OscConfig+0x200>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d10e      	bne.n	80055dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d10b      	bne.n	80055dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e266      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fc09 	bl	8004dec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055da:	e031      	b.n	8005640 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d019      	beq.n	8005618 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	f7ff fbd2 	bl	8004d8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fd ff10 	bl	800340c <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f0:	f7fd ff0c 	bl	800340c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e24d      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005602:	f7ff fbe1 	bl	8004dc8 <LL_RCC_HSI_IsReady>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f1      	beq.n	80055f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fbeb 	bl	8004dec <LL_RCC_HSI_SetCalibTrimming>
 8005616:	e013      	b.n	8005640 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005618:	f7ff fbc7 	bl	8004daa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fd fef6 	bl	800340c <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005624:	f7fd fef2 	bl	800340c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e233      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005636:	f7ff fbc7 	bl	8004dc8 <LL_RCC_HSI_IsReady>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f1      	bne.n	8005624 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80a3 	beq.w	80057a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d076      	beq.n	8005750 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	d046      	beq.n	80056fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800566e:	f7ff fc7e 	bl	8004f6e <LL_RCC_LSI1_IsReady>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d113      	bne.n	80056a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005678:	f7ff fc57 	bl	8004f2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800567c:	f7fd fec6 	bl	800340c <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005684:	f7fd fec2 	bl	800340c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e203      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005696:	f7ff fc6a 	bl	8004f6e <LL_RCC_LSI1_IsReady>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f1      	beq.n	8005684 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80056a0:	f7ff fc77 	bl	8004f92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fd feb2 	bl	800340c <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056ac:	f7fd feae 	bl	800340c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e1ef      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80056be:	f7ff fc8a 	bl	8004fd6 <LL_RCC_LSI2_IsReady>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f1      	beq.n	80056ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fc94 	bl	8004ffa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80056d2:	f7ff fc3b 	bl	8004f4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d6:	f7fd fe99 	bl	800340c <HAL_GetTick>
 80056da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056de:	f7fd fe95 	bl	800340c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1d6      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056f0:	f7ff fc3d 	bl	8004f6e <LL_RCC_LSI1_IsReady>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f1      	bne.n	80056de <HAL_RCC_OscConfig+0x31a>
 80056fa:	e051      	b.n	80057a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80056fc:	f7ff fc15 	bl	8004f2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd fe84 	bl	800340c <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005706:	e00c      	b.n	8005722 <HAL_RCC_OscConfig+0x35e>
 8005708:	20000024 	.word	0x20000024
 800570c:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005710:	f7fd fe7c 	bl	800340c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e1bd      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005722:	f7ff fc24 	bl	8004f6e <LL_RCC_LSI1_IsReady>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f1      	beq.n	8005710 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800572c:	f7ff fc42 	bl	8004fb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005732:	f7fd fe6b 	bl	800340c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b03      	cmp	r3, #3
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1ac      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005744:	f7ff fc47 	bl	8004fd6 <LL_RCC_LSI2_IsReady>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f1      	bne.n	8005732 <HAL_RCC_OscConfig+0x36e>
 800574e:	e027      	b.n	80057a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005750:	f7ff fc30 	bl	8004fb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005754:	f7fd fe5a 	bl	800340c <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800575c:	f7fd fe56 	bl	800340c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b03      	cmp	r3, #3
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e197      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800576e:	f7ff fc32 	bl	8004fd6 <LL_RCC_LSI2_IsReady>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f1      	bne.n	800575c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005778:	f7ff fbe8 	bl	8004f4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fd fe46 	bl	800340c <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005784:	f7fd fe42 	bl	800340c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e183      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005796:	f7ff fbea 	bl	8004f6e <LL_RCC_LSI1_IsReady>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f1      	bne.n	8005784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05b      	beq.n	8005864 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ac:	4ba7      	ldr	r3, [pc, #668]	; (8005a4c <HAL_RCC_OscConfig+0x688>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d114      	bne.n	80057e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80057b8:	f7ff fa88 	bl	8004ccc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057bc:	f7fd fe26 	bl	800340c <HAL_GetTick>
 80057c0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c4:	f7fd fe22 	bl	800340c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e163      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d6:	4b9d      	ldr	r3, [pc, #628]	; (8005a4c <HAL_RCC_OscConfig+0x688>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d102      	bne.n	80057f0 <HAL_RCC_OscConfig+0x42c>
 80057ea:	f7ff fb48 	bl	8004e7e <LL_RCC_LSE_Enable>
 80057ee:	e00c      	b.n	800580a <HAL_RCC_OscConfig+0x446>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d104      	bne.n	8005802 <HAL_RCC_OscConfig+0x43e>
 80057f8:	f7ff fb63 	bl	8004ec2 <LL_RCC_LSE_EnableBypass>
 80057fc:	f7ff fb3f 	bl	8004e7e <LL_RCC_LSE_Enable>
 8005800:	e003      	b.n	800580a <HAL_RCC_OscConfig+0x446>
 8005802:	f7ff fb4d 	bl	8004ea0 <LL_RCC_LSE_Disable>
 8005806:	f7ff fb6d 	bl	8004ee4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d014      	beq.n	800583c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fd fdfb 	bl	800340c <HAL_GetTick>
 8005816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581a:	f7fd fdf7 	bl	800340c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e136      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005830:	f7ff fb69 	bl	8004f06 <LL_RCC_LSE_IsReady>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ef      	beq.n	800581a <HAL_RCC_OscConfig+0x456>
 800583a:	e013      	b.n	8005864 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd fde6 	bl	800340c <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7fd fde2 	bl	800340c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e121      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800585a:	f7ff fb54 	bl	8004f06 <LL_RCC_LSE_IsReady>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ef      	bne.n	8005844 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d02c      	beq.n	80058ca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d014      	beq.n	80058a2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005878:	f7ff facd 	bl	8004e16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587c:	f7fd fdc6 	bl	800340c <HAL_GetTick>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005884:	f7fd fdc2 	bl	800340c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e103      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005896:	f7ff fae0 	bl	8004e5a <LL_RCC_HSI48_IsReady>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f1      	beq.n	8005884 <HAL_RCC_OscConfig+0x4c0>
 80058a0:	e013      	b.n	80058ca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058a2:	f7ff fac9 	bl	8004e38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a6:	f7fd fdb1 	bl	800340c <HAL_GetTick>
 80058aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ae:	f7fd fdad 	bl	800340c <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e0ee      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80058c0:	f7ff facb 	bl	8004e5a <LL_RCC_HSI48_IsReady>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f1      	bne.n	80058ae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80e4 	beq.w	8005a9c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d4:	f7ff fc29 	bl	800512a <LL_RCC_GetSysClkSource>
 80058d8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	f040 80b4 	bne.w	8005a54 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0203 	and.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d123      	bne.n	8005942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d11c      	bne.n	8005942 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d114      	bne.n	8005942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d10d      	bne.n	8005942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d05d      	beq.n	80059fe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d058      	beq.n	80059fa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e0a1      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800595a:	f7ff fc84 	bl	8005266 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800595e:	f7fd fd55 	bl	800340c <HAL_GetTick>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005966:	f7fd fd51 	bl	800340c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e092      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ef      	bne.n	8005966 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	4b30      	ldr	r3, [pc, #192]	; (8005a50 <HAL_RCC_OscConfig+0x68c>)
 800598e:	4013      	ands	r3, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005998:	4311      	orrs	r1, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800599e:	0212      	lsls	r2, r2, #8
 80059a0:	4311      	orrs	r1, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059a6:	4311      	orrs	r1, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059ac:	4311      	orrs	r1, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80059b2:	430a      	orrs	r2, r1
 80059b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059bc:	f7ff fc44 	bl	8005248 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059d0:	f7fd fd1c 	bl	800340c <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fd fd18 	bl	800340c <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e059      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ef      	beq.n	80059d8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059f8:	e050      	b.n	8005a9c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e04f      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d147      	bne.n	8005a9c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a0c:	f7ff fc1c 	bl	8005248 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a20:	f7fd fcf4 	bl	800340c <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fd fcf0 	bl	800340c <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e031      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ef      	beq.n	8005a28 <HAL_RCC_OscConfig+0x664>
 8005a48:	e028      	b.n	8005a9c <HAL_RCC_OscConfig+0x6d8>
 8005a4a:	bf00      	nop
 8005a4c:	58000400 	.word	0x58000400
 8005a50:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d01e      	beq.n	8005a98 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	f7ff fc04 	bl	8005266 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fd fcd5 	bl	800340c <HAL_GetTick>
 8005a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fd fcd1 	bl	800340c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e012      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ef      	bne.n	8005a66 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_OscConfig+0x6e4>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	60cb      	str	r3, [r1, #12]
 8005a96:	e001      	b.n	8005a9c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3734      	adds	r7, #52	; 0x34
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	eefefffc 	.word	0xeefefffc

08005aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e12d      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b98      	ldr	r3, [pc, #608]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d91b      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b95      	ldr	r3, [pc, #596]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 0207 	bic.w	r2, r3, #7
 8005ad6:	4993      	ldr	r1, [pc, #588]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ade:	f7fd fc95 	bl	800340c <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ae6:	f7fd fc91 	bl	800340c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e111      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af8:	4b8a      	ldr	r3, [pc, #552]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d1ef      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fb13 	bl	8005142 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b1c:	f7fd fc76 	bl	800340c <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b24:	f7fd fc72 	bl	800340c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e0f2      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b36:	f7ff fbe8 	bl	800530a <LL_RCC_IsActiveFlag_HPRE>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f1      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d016      	beq.n	8005b7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fb0a 	bl	800516a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b56:	f7fd fc59 	bl	800340c <HAL_GetTick>
 8005b5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b5e:	f7fd fc55 	bl	800340c <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e0d5      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b70:	f7ff fbdd 	bl	800532e <LL_RCC_IsActiveFlag_C2HPRE>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f1      	beq.n	8005b5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fb03 	bl	8005196 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b90:	f7fd fc3c 	bl	800340c <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b98:	f7fd fc38 	bl	800340c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e0b8      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005baa:	f7ff fbd3 	bl	8005354 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f1      	beq.n	8005b98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d016      	beq.n	8005bee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fafd 	bl	80051c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bca:	f7fd fc1f 	bl	800340c <HAL_GetTick>
 8005bce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bd2:	f7fd fc1b 	bl	800340c <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e09b      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005be4:	f7ff fbc9 	bl	800537a <LL_RCC_IsActiveFlag_PPRE1>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f1      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d017      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff faf3 	bl	80051ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c06:	f7fd fc01 	bl	800340c <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c0e:	f7fd fbfd 	bl	800340c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e07d      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c20:	f7ff fbbd 	bl	800539e <LL_RCC_IsActiveFlag_PPRE2>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f1      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d043      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d106      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c3e:	f7ff f893 	bl	8004d68 <LL_RCC_HSE_IsReady>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11e      	bne.n	8005c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e067      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c54:	f7ff fb16 	bl	8005284 <LL_RCC_PLL_IsReady>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d113      	bne.n	8005c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e05c      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005c6a:	f7ff f9fb 	bl	8005064 <LL_RCC_MSI_IsReady>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d108      	bne.n	8005c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e051      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005c78:	f7ff f8a6 	bl	8004dc8 <LL_RCC_HSI_IsReady>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e04a      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fa39 	bl	8005102 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c90:	f7fd fbbc 	bl	800340c <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fd fbb8 	bl	800340c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e036      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	f7ff fa3c 	bl	800512a <LL_RCC_GetSysClkSource>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d1ec      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cbe:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d21b      	bcs.n	8005d04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 0207 	bic.w	r2, r3, #7
 8005cd4:	4913      	ldr	r1, [pc, #76]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cdc:	f7fd fb96 	bl	800340c <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ce4:	f7fd fb92 	bl	800340c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e012      	b.n	8005d1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_ClockConfig+0x278>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d1ef      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d04:	f000 f87e 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_RCC_ClockConfig+0x27c>)
 8005d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005d0e:	f7fd fb89 	bl	8003424 <HAL_GetTickPrio>
 8005d12:	4603      	mov	r3, r0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fd fb2b 	bl	8003370 <HAL_InitTick>
 8005d1a:	4603      	mov	r3, r0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	58004000 	.word	0x58004000
 8005d28:	20000024 	.word	0x20000024

08005d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d32:	f7ff f9fa 	bl	800512a <LL_RCC_GetSysClkSource>
 8005d36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d3e:	f7ff f9b6 	bl	80050ae <LL_RCC_MSI_GetRange>
 8005d42:	4603      	mov	r3, r0
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e04b      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d102      	bne.n	8005d60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d5a:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e045      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d10a      	bne.n	8005d7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d66:	f7fe ffcf 	bl	8004d08 <LL_RCC_HSE_IsEnabledDiv2>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005d70:	4b22      	ldr	r3, [pc, #136]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e03a      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d76:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e037      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d7c:	f7ff fab9 	bl	80052f2 <LL_RCC_PLL_GetMainSource>
 8005d80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d003      	beq.n	8005d90 <HAL_RCC_GetSysClockFreq+0x64>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d003      	beq.n	8005d96 <HAL_RCC_GetSysClockFreq+0x6a>
 8005d8e:	e00d      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005d90:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d92:	60bb      	str	r3, [r7, #8]
        break;
 8005d94:	e015      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d96:	f7fe ffb7 	bl	8004d08 <LL_RCC_HSE_IsEnabledDiv2>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d102      	bne.n	8005da6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005da0:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005da2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005da4:	e00d      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005da6:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005da8:	60bb      	str	r3, [r7, #8]
        break;
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dac:	f7ff f97f 	bl	80050ae <LL_RCC_MSI_GetRange>
 8005db0:	4603      	mov	r3, r0
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	4a0f      	ldr	r2, [pc, #60]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	60bb      	str	r3, [r7, #8]
        break;
 8005dc0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005dc2:	f7ff fa71 	bl	80052a8 <LL_RCC_PLL_GetN>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	fb03 f402 	mul.w	r4, r3, r2
 8005dce:	f7ff fa84 	bl	80052da <LL_RCC_PLL_GetDivider>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ddc:	f7ff fa71 	bl	80052c2 <LL_RCC_PLL_GetR>
 8005de0:	4603      	mov	r3, r0
 8005de2:	0f5b      	lsrs	r3, r3, #29
 8005de4:	3301      	adds	r3, #1
 8005de6:	fbb4 f3f3 	udiv	r3, r4, r3
 8005dea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd90      	pop	{r4, r7, pc}
 8005df6:	bf00      	nop
 8005df8:	0800b42c 	.word	0x0800b42c
 8005dfc:	00f42400 	.word	0x00f42400
 8005e00:	01e84800 	.word	0x01e84800

08005e04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e04:	b598      	push	{r3, r4, r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005e08:	f7ff ff90 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	f7ff fa01 	bl	8005214 <LL_RCC_GetAHBPrescaler>
 8005e12:	4603      	mov	r3, r0
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	4a03      	ldr	r2, [pc, #12]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x24>)
 8005e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd98      	pop	{r3, r4, r7, pc}
 8005e28:	0800b3ec 	.word	0x0800b3ec

08005e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2bb0      	cmp	r3, #176	; 0xb0
 8005e38:	d903      	bls.n	8005e42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005e3a:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e007      	b.n	8005e52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	091b      	lsrs	r3, r3, #4
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e52:	f7ff f9eb 	bl	800522c <LL_RCC_GetAHB4Prescaler>
 8005e56:	4603      	mov	r3, r0
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	0c9c      	lsrs	r4, r3, #18
 8005e76:	f7fe ff39 	bl	8004cec <HAL_PWREx_GetVoltageRange>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 f80c 	bl	8005e9c <RCC_SetFlashLatency>
 8005e84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd90      	pop	{r4, r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	0800b42c 	.word	0x0800b42c
 8005e94:	0800b3ec 	.word	0x0800b3ec
 8005e98:	431bde83 	.word	0x431bde83

08005e9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b093      	sub	sp, #76	; 0x4c
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005ea6:	4b37      	ldr	r3, [pc, #220]	; (8005f84 <RCC_SetFlashLatency+0xe8>)
 8005ea8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005eb2:	4a35      	ldr	r2, [pc, #212]	; (8005f88 <RCC_SetFlashLatency+0xec>)
 8005eb4:	f107 031c 	add.w	r3, r7, #28
 8005eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ebe:	4b33      	ldr	r3, [pc, #204]	; (8005f8c <RCC_SetFlashLatency+0xf0>)
 8005ec0:	f107 040c 	add.w	r4, r7, #12
 8005ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005eca:	2300      	movs	r3, #0
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed4:	d11a      	bne.n	8005f0c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	e013      	b.n	8005f04 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	3348      	adds	r3, #72	; 0x48
 8005ee2:	443b      	add	r3, r7
 8005ee4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d807      	bhi.n	8005efe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3348      	adds	r3, #72	; 0x48
 8005ef4:	443b      	add	r3, r7
 8005ef6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005efa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005efc:	e020      	b.n	8005f40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f00:	3301      	adds	r3, #1
 8005f02:	643b      	str	r3, [r7, #64]	; 0x40
 8005f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d9e8      	bls.n	8005edc <RCC_SetFlashLatency+0x40>
 8005f0a:	e019      	b.n	8005f40 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	e013      	b.n	8005f3a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	3348      	adds	r3, #72	; 0x48
 8005f18:	443b      	add	r3, r7
 8005f1a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d807      	bhi.n	8005f34 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	3348      	adds	r3, #72	; 0x48
 8005f2a:	443b      	add	r3, r7
 8005f2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005f32:	e005      	b.n	8005f40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f36:	3301      	adds	r3, #1
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d9e8      	bls.n	8005f12 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005f40:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <RCC_SetFlashLatency+0xf4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f023 0207 	bic.w	r2, r3, #7
 8005f48:	4911      	ldr	r1, [pc, #68]	; (8005f90 <RCC_SetFlashLatency+0xf4>)
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f50:	f7fd fa5c 	bl	800340c <HAL_GetTick>
 8005f54:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f56:	e008      	b.n	8005f6a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f58:	f7fd fa58 	bl	800340c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e007      	b.n	8005f7a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f6a:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <RCC_SetFlashLatency+0xf4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d1ef      	bne.n	8005f58 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	374c      	adds	r7, #76	; 0x4c
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd90      	pop	{r4, r7, pc}
 8005f82:	bf00      	nop
 8005f84:	0800b240 	.word	0x0800b240
 8005f88:	0800b250 	.word	0x0800b250
 8005f8c:	0800b25c 	.word	0x0800b25c
 8005f90:	58004000 	.word	0x58004000

08005f94 <LL_RCC_LSE_IsEnabled>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <LL_RCC_LSE_IsEnabled+0x18>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <LL_RCC_LSE_IsEnabled+0x1a>
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LL_RCC_LSE_IsReady>:
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d101      	bne.n	8005fd0 <LL_RCC_LSE_IsReady+0x18>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <LL_RCC_LSE_IsReady+0x1a>
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <LL_RCC_SetRFWKPClockSource>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_RCC_SetSMPSClockSource>:
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	f023 0203 	bic.w	r2, r3, #3
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_RCC_SetSMPSPrescaler>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4313      	orrs	r3, r2
 800604a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_RCC_SetUSARTClockSource>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f023 0203 	bic.w	r2, r3, #3
 800606c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <LL_RCC_SetLPUARTClockSource>:
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800608c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_RCC_SetI2CClockSource>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80060d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_RCC_SetLPTIMClockSource>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	43db      	mvns	r3, r3
 8006102:	401a      	ands	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_RCC_SetSAIClockSource>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <LL_RCC_SetRNGClockSource>:
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800615e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_RCC_SetCLK48ClockSource>:
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800617e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800618a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <LL_RCC_SetUSBClockSource>:
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ffe3 	bl	8006176 <LL_RCC_SetCLK48ClockSource>
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <LL_RCC_SetADCClockSource>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <LL_RCC_SetRTCClockSource>:
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <LL_RCC_GetRTCClockSource>:
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006220:	4618      	mov	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <LL_RCC_ForceBackupDomainReset>:
{
 800622a:	b480      	push	{r7}
 800622c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800623a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006242:	bf00      	nop
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LL_RCC_ReleaseBackupDomainReset>:
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800625c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <LL_RCC_PLLSAI1_Enable>:
{
 800626e:	b480      	push	{r7}
 8006270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800627c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006280:	6013      	str	r3, [r2, #0]
}
 8006282:	bf00      	nop
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <LL_RCC_PLLSAI1_Disable>:
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800629e:	6013      	str	r3, [r2, #0]
}
 80062a0:	bf00      	nop
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_RCC_PLLSAI1_IsReady>:
{
 80062aa:	b480      	push	{r7}
 80062ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80062ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062bc:	d101      	bne.n	80062c2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80062d6:	2300      	movs	r3, #0
 80062d8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80062da:	2300      	movs	r3, #0
 80062dc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d034      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062f2:	d021      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80062f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062f8:	d81b      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062fe:	d01d      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006304:	d815      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d110      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800631a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006320:	e00d      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f000 f947 	bl	80065ba <RCCEx_PLLSAI1_ConfigNP>
 800632c:	4603      	mov	r3, r0
 800632e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006330:	e005      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	77fb      	strb	r3, [r7, #31]
        break;
 8006336:	e002      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	7ffb      	ldrb	r3, [r7, #31]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fee8 	bl	800611e <LL_RCC_SetSAIClockSource>
 800634e:	e001      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	7ffb      	ldrb	r3, [r7, #31]
 8006352:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635c:	2b00      	cmp	r3, #0
 800635e:	d046      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006360:	f7ff ff56 	bl	8006210 <LL_RCC_GetRTCClockSource>
 8006364:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	429a      	cmp	r2, r3
 800636e:	d03c      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006370:	f7fe fcac 	bl	8004ccc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff ff30 	bl	80061e4 <LL_RCC_SetRTCClockSource>
 8006384:	e02e      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006390:	f7ff ff4b 	bl	800622a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006394:	f7ff ff5a 	bl	800624c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80063a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063b0:	f7ff fdf0 	bl	8005f94 <LL_RCC_LSE_IsEnabled>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d114      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063ba:	f7fd f827 	bl	800340c <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063c0:	e00b      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fd f823 	bl	800340c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d902      	bls.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	77fb      	strb	r3, [r7, #31]
              break;
 80063d8:	e004      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80063da:	f7ff fded 	bl	8005fb8 <LL_RCC_LSE_IsReady>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d1ee      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80063e4:	7ffb      	ldrb	r3, [r7, #31]
 80063e6:	77bb      	strb	r3, [r7, #30]
 80063e8:	e001      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ea:	7ffb      	ldrb	r3, [r7, #31]
 80063ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fe2a 	bl	8006058 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d004      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fe35 	bl	8006084 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fe5d 	bl	80060ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff fe52 	bl	80060ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fe2a 	bl	80060b0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fe1f 	bl	80060b0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d022      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fe8d 	bl	80061a2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006490:	d107      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800649c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f8dd 	bl	8006670 <RCCEx_PLLSAI1_ConfigNQ>
 80064b6:	4603      	mov	r3, r0
 80064b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80064c0:	7ffb      	ldrb	r3, [r7, #31]
 80064c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02b      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d008      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e2:	d003      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d105      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fe2a 	bl	800614a <LL_RCC_SetRNGClockSource>
 80064f6:	e00a      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x240>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	2000      	movs	r0, #0
 8006504:	f7ff fe21 	bl	800614a <LL_RCC_SetRNGClockSource>
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff fe34 	bl	8006176 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006516:	d107      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d022      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fe3d 	bl	80061b8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006546:	d107      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006556:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006560:	d10b      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3304      	adds	r3, #4
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f8dd 	bl	8006726 <RCCEx_PLLSAI1_ConfigNR>
 800656c:	4603      	mov	r3, r0
 800656e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006570:	7ffb      	ldrb	r3, [r7, #31]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fd26 	bl	8005fdc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fd45 	bl	8006030 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fd2c 	bl	8006008 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80065b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065c6:	f7ff fe61 	bl	800628c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065ca:	f7fc ff1f 	bl	800340c <HAL_GetTick>
 80065ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065d0:	e009      	b.n	80065e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065d2:	f7fc ff1b 	bl	800340c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d902      	bls.n	80065e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	73fb      	strb	r3, [r7, #15]
      break;
 80065e4:	e004      	b.n	80065f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065e6:	f7ff fe60 	bl	80062aa <LL_RCC_PLLSAI1_IsReady>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d137      	bne.n	8006666 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80065f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800660a:	4313      	orrs	r3, r2
 800660c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006620:	4313      	orrs	r3, r2
 8006622:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006624:	f7ff fe23 	bl	800626e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006628:	f7fc fef0 	bl	800340c <HAL_GetTick>
 800662c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800662e:	e009      	b.n	8006644 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006630:	f7fc feec 	bl	800340c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d902      	bls.n	8006644 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	73fb      	strb	r3, [r7, #15]
        break;
 8006642:	e004      	b.n	800664e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006644:	f7ff fe31 	bl	80062aa <LL_RCC_PLLSAI1_IsReady>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d1f0      	bne.n	8006630 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d108      	bne.n	8006666 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006662:	4313      	orrs	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800667c:	f7ff fe06 	bl	800628c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006680:	f7fc fec4 	bl	800340c <HAL_GetTick>
 8006684:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006686:	e009      	b.n	800669c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006688:	f7fc fec0 	bl	800340c <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d902      	bls.n	800669c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	73fb      	strb	r3, [r7, #15]
      break;
 800669a:	e004      	b.n	80066a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800669c:	f7ff fe05 	bl	80062aa <LL_RCC_PLLSAI1_IsReady>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d137      	bne.n	800671c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066c0:	4313      	orrs	r3, r2
 80066c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80066c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d6:	4313      	orrs	r3, r2
 80066d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80066da:	f7ff fdc8 	bl	800626e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066de:	f7fc fe95 	bl	800340c <HAL_GetTick>
 80066e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80066e4:	e009      	b.n	80066fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066e6:	f7fc fe91 	bl	800340c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d902      	bls.n	80066fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	73fb      	strb	r3, [r7, #15]
        break;
 80066f8:	e004      	b.n	8006704 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80066fa:	f7ff fdd6 	bl	80062aa <LL_RCC_PLLSAI1_IsReady>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b01      	cmp	r3, #1
 8006702:	d1f0      	bne.n	80066e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006718:	4313      	orrs	r3, r2
 800671a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006732:	f7ff fdab 	bl	800628c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006736:	f7fc fe69 	bl	800340c <HAL_GetTick>
 800673a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800673c:	e009      	b.n	8006752 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800673e:	f7fc fe65 	bl	800340c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d902      	bls.n	8006752 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e004      	b.n	800675c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006752:	f7ff fdaa 	bl	80062aa <LL_RCC_PLLSAI1_IsReady>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d137      	bne.n	80067d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006776:	4313      	orrs	r3, r2
 8006778:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800677a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800678c:	4313      	orrs	r3, r2
 800678e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006790:	f7ff fd6d 	bl	800626e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006794:	f7fc fe3a 	bl	800340c <HAL_GetTick>
 8006798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800679a:	e009      	b.n	80067b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800679c:	f7fc fe36 	bl	800340c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d902      	bls.n	80067b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	73fb      	strb	r3, [r7, #15]
        break;
 80067ae:	e004      	b.n	80067ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067b0:	f7ff fd7b 	bl	80062aa <LL_RCC_PLLSAI1_IsReady>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d1f0      	bne.n	800679c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80067c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067ce:	4313      	orrs	r3, r2
 80067d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e027      	b.n	800683e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7a5b      	ldrb	r3, [r3, #9]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fb fc86 	bl	8002110 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f023 0120 	bic.w	r1, r3, #32
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0204 	orr.w	r2, r2, #4
 800682e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e09f      	b.n	800699a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb fc78 	bl	8002164 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800687c:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <HAL_RTC_Init+0x15c>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b10      	cmp	r3, #16
 8006886:	d07e      	beq.n	8006986 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	22ca      	movs	r2, #202	; 0xca
 800688e:	625a      	str	r2, [r3, #36]	; 0x24
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2253      	movs	r2, #83	; 0x53
 8006896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f8ab 	bl	80069f4 <RTC_EnterInitMode>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2204      	movs	r2, #4
 80068b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e067      	b.n	800698a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6899      	ldr	r1, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	68d2      	ldr	r2, [r2, #12]
 80068f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6919      	ldr	r1, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	041a      	lsls	r2, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006918:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0203 	bic.w	r2, r2, #3
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f829 	bl	80069a8 <HAL_RTC_WaitForSynchro>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00d      	beq.n	8006978 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2204      	movs	r2, #4
 8006968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e010      	b.n	800699a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
 8006984:	e001      	b.n	800698a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d103      	bne.n	8006998 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40002800 	.word	0x40002800

080069a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069c0:	f7fc fd24 	bl	800340c <HAL_GetTick>
 80069c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069c6:	e009      	b.n	80069dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069c8:	f7fc fd20 	bl	800340c <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069d6:	d901      	bls.n	80069dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e007      	b.n	80069ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ee      	beq.n	80069c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d119      	bne.n	8006a3e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a14:	f7fc fcfa 	bl	800340c <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a1a:	e009      	b.n	8006a30 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a1c:	f7fc fcf6 	bl	800340c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2a:	d901      	bls.n	8006a30 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e007      	b.n	8006a40 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0ee      	beq.n	8006a1c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0a8      	b.n	8006bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	22ca      	movs	r2, #202	; 0xca
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2253      	movs	r2, #83	; 0x53
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d020      	beq.n	8006ad2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006a90:	f7fc fcbc 	bl	800340c <HAL_GetTick>
 8006a94:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006a96:	e015      	b.n	8006ac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a98:	f7fc fcb8 	bl	800340c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa6:	d90d      	bls.n	8006ac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	22ff      	movs	r2, #255	; 0xff
 8006aae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e077      	b.n	8006bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e2      	bne.n	8006a98 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006af2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006af4:	f7fc fc8a 	bl	800340c <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006afa:	e015      	b.n	8006b28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006afc:	f7fc fc86 	bl	800340c <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b0a:	d90d      	bls.n	8006b28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	22ff      	movs	r2, #255	; 0xff
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2203      	movs	r2, #3
 8006b18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e045      	b.n	8006bb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0e2      	beq.n	8006afc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0207 	bic.w	r2, r2, #7
 8006b4c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6899      	ldr	r1, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006b5e:	4b17      	ldr	r3, [pc, #92]	; (8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b78:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b88:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b98:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	22ff      	movs	r2, #255	; 0xff
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	58000800 	.word	0x58000800

08006bc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	; 0x28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d137      	bne.n	8006c48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_UART_Receive_IT+0x24>
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e030      	b.n	8006c4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_UART_Receive_IT+0x94>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01f      	beq.n	8006c38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	613b      	str	r3, [r7, #16]
   return(result);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fb44 	bl	80072cc <UART_Start_Receive_IT>
 8006c44:	4603      	mov	r3, r0
 8006c46:	e000      	b.n	8006c4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3728      	adds	r7, #40	; 0x28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40008000 	.word	0x40008000

08006c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b0ba      	sub	sp, #232	; 0xe8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c86:	4013      	ands	r3, r2
 8006c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11b      	bne.n	8006ccc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d015      	beq.n	8006ccc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d105      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 82e3 	beq.w	8007288 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
      }
      return;
 8006cca:	e2dd      	b.n	8007288 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8123 	beq.w	8006f1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cda:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_UART_IRQHandler+0x2b8>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ce6:	4b8b      	ldr	r3, [pc, #556]	; (8006f14 <HAL_UART_IRQHandler+0x2bc>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8116 	beq.w	8006f1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d011      	beq.n	8006d20 <HAL_UART_IRQHandler+0xc8>
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	f043 0201 	orr.w	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <HAL_UART_IRQHandler+0xf8>
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f043 0204 	orr.w	r2, r3, #4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d011      	beq.n	8006d80 <HAL_UART_IRQHandler+0x128>
 8006d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f043 0202 	orr.w	r2, r3, #2
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d017      	beq.n	8006dbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d9c:	4b5c      	ldr	r3, [pc, #368]	; (8006f10 <HAL_UART_IRQHandler+0x2b8>)
 8006d9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2208      	movs	r2, #8
 8006daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f043 0208 	orr.w	r2, r3, #8
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d012      	beq.n	8006dee <HAL_UART_IRQHandler+0x196>
 8006dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00c      	beq.n	8006dee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8249 	beq.w	800728c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d013      	beq.n	8006e2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d005      	beq.n	8006e52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d054      	beq.n	8006efc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fb5c 	bl	8007510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	d146      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1d9      	bne.n	8006e66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d017      	beq.n	8006eec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec2:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <HAL_UART_IRQHandler+0x2c0>)
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fd fb83 	bl	80045d8 <HAL_DMA_Abort_IT>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	e00f      	b.n	8006f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f9d7 	bl	80072a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef2:	e00b      	b.n	8006f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f9d3 	bl	80072a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efa:	e007      	b.n	8006f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9cf 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006f0a:	e1bf      	b.n	800728c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0c:	bf00      	nop
    return;
 8006f0e:	e1bd      	b.n	800728c <HAL_UART_IRQHandler+0x634>
 8006f10:	10000001 	.word	0x10000001
 8006f14:	04000120 	.word	0x04000120
 8006f18:	080075dd 	.word	0x080075dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 8153 	bne.w	80071cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 814c 	beq.w	80071cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8145 	beq.w	80071cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2210      	movs	r2, #16
 8006f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	f040 80bb 	bne.w	80070d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 818f 	beq.w	8007290 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	f080 8187 	bcs.w	8007290 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 8087 	bne.w	80070ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1da      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800700e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007012:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e1      	bne.n	8006fea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800704a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800704c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e3      	bne.n	8007026 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800707a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707c:	f023 0310 	bic.w	r3, r3, #16
 8007080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800708e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007090:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800709c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e4      	bne.n	800706c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd fa36 	bl	800451a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8f3 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070ce:	e0df      	b.n	8007290 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80d1 	beq.w	8007294 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80cc 	beq.w	8007294 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
 8007120:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e4      	bne.n	80070fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	623b      	str	r3, [r7, #32]
   return(result);
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800715a:	633a      	str	r2, [r7, #48]	; 0x30
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e1      	bne.n	8007132 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0310 	bic.w	r3, r3, #16
 8007196:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	617b      	str	r3, [r7, #20]
   return(result);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e4      	bne.n	8007182 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f875 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071ca:	e063      	b.n	8007294 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00e      	beq.n	80071f6 <HAL_UART_IRQHandler+0x59e>
 80071d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 ff52 	bl	8008098 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f4:	e051      	b.n	800729a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d014      	beq.n	800722c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800720e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721e:	2b00      	cmp	r3, #0
 8007220:	d03a      	beq.n	8007298 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
    }
    return;
 800722a:	e035      	b.n	8007298 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <HAL_UART_IRQHandler+0x5f4>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f9df 	bl	8007608 <UART_EndTransmit_IT>
    return;
 800724a:	e026      	b.n	800729a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d009      	beq.n	800726c <HAL_UART_IRQHandler+0x614>
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 ff2b 	bl	80080c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800726a:	e016      	b.n	800729a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800726c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <HAL_UART_IRQHandler+0x642>
 8007278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727c:	2b00      	cmp	r3, #0
 800727e:	da0c      	bge.n	800729a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 ff13 	bl	80080ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007286:	e008      	b.n	800729a <HAL_UART_IRQHandler+0x642>
      return;
 8007288:	bf00      	nop
 800728a:	e006      	b.n	800729a <HAL_UART_IRQHandler+0x642>
    return;
 800728c:	bf00      	nop
 800728e:	e004      	b.n	800729a <HAL_UART_IRQHandler+0x642>
      return;
 8007290:	bf00      	nop
 8007292:	e002      	b.n	800729a <HAL_UART_IRQHandler+0x642>
      return;
 8007294:	bf00      	nop
 8007296:	e000      	b.n	800729a <HAL_UART_IRQHandler+0x642>
    return;
 8007298:	bf00      	nop
  }
}
 800729a:	37e8      	adds	r7, #232	; 0xe8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b0a3      	sub	sp, #140	; 0x8c
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d10e      	bne.n	800731e <UART_Start_Receive_IT+0x52>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <UART_Start_Receive_IT+0x48>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800730e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007312:	e02d      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	22ff      	movs	r2, #255	; 0xff
 8007318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800731c:	e028      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <UART_Start_Receive_IT+0x76>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <UART_Start_Receive_IT+0x6c>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007336:	e01b      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	227f      	movs	r2, #127	; 0x7f
 800733c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007340:	e016      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800734a:	d10d      	bne.n	8007368 <UART_Start_Receive_IT+0x9c>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <UART_Start_Receive_IT+0x92>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	227f      	movs	r2, #127	; 0x7f
 8007358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800735c:	e008      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	223f      	movs	r2, #63	; 0x3f
 8007362:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007366:	e003      	b.n	8007370 <UART_Start_Receive_IT+0xa4>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2222      	movs	r2, #34	; 0x22
 800737c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80073a4:	673a      	str	r2, [r7, #112]	; 0x70
 80073a6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80073aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80073b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e3      	bne.n	8007380 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c0:	d14f      	bne.n	8007462 <UART_Start_Receive_IT+0x196>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d349      	bcc.n	8007462 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d107      	bne.n	80073e8 <UART_Start_Receive_IT+0x11c>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a47      	ldr	r2, [pc, #284]	; (8007500 <UART_Start_Receive_IT+0x234>)
 80073e4:	675a      	str	r2, [r3, #116]	; 0x74
 80073e6:	e002      	b.n	80073ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a46      	ldr	r2, [pc, #280]	; (8007504 <UART_Start_Receive_IT+0x238>)
 80073ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01a      	beq.n	800742c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800740a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800741a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800741e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e4      	bne.n	80073f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800744c:	64ba      	str	r2, [r7, #72]	; 0x48
 800744e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800745a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e5      	bne.n	800742c <UART_Start_Receive_IT+0x160>
 8007460:	e046      	b.n	80074f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d107      	bne.n	800747c <UART_Start_Receive_IT+0x1b0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a24      	ldr	r2, [pc, #144]	; (8007508 <UART_Start_Receive_IT+0x23c>)
 8007478:	675a      	str	r2, [r3, #116]	; 0x74
 800747a:	e002      	b.n	8007482 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a23      	ldr	r2, [pc, #140]	; (800750c <UART_Start_Receive_IT+0x240>)
 8007480:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d019      	beq.n	80074be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800749e:	677b      	str	r3, [r7, #116]	; 0x74
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
 80074aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_Start_Receive_IT+0x1be>
 80074bc:	e018      	b.n	80074f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f043 0320 	orr.w	r3, r3, #32
 80074d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	69f9      	ldr	r1, [r7, #28]
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e6      	bne.n	80074be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	378c      	adds	r7, #140	; 0x8c
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	08007d31 	.word	0x08007d31
 8007504:	080079d1 	.word	0x080079d1
 8007508:	08007819 	.word	0x08007819
 800750c:	08007661 	.word	0x08007661

08007510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007510:	b480      	push	{r7}
 8007512:	b095      	sub	sp, #84	; 0x54
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800752c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007536:	643b      	str	r3, [r7, #64]	; 0x40
 8007538:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800753c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e6      	bne.n	8007518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	61fb      	str	r3, [r7, #28]
   return(result);
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	64bb      	str	r3, [r7, #72]	; 0x48
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800756e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e3      	bne.n	800754a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007586:	2b01      	cmp	r3, #1
 8007588:	d118      	bne.n	80075bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	60bb      	str	r3, [r7, #8]
   return(result);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f023 0310 	bic.w	r3, r3, #16
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6979      	ldr	r1, [r7, #20]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	613b      	str	r3, [r7, #16]
   return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075d0:	bf00      	nop
 80075d2:	3754      	adds	r7, #84	; 0x54
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fe50 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	60bb      	str	r3, [r7, #8]
   return(result);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6979      	ldr	r1, [r7, #20]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	613b      	str	r3, [r7, #16]
   return(result);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7fa f89b 	bl	800178c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007656:	bf00      	nop
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	; 0x70
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800766e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007678:	2b22      	cmp	r3, #34	; 0x22
 800767a:	f040 80be 	bne.w	80077fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800768c:	b2d9      	uxtb	r1, r3
 800768e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007692:	b2da      	uxtb	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007698:	400a      	ands	r2, r1
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f040 80a1 	bne.w	800780a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80076e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e6      	bne.n	80076c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	667b      	str	r3, [r7, #100]	; 0x64
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800771a:	647a      	str	r2, [r7, #68]	; 0x44
 800771c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a33      	ldr	r2, [pc, #204]	; (8007814 <UART_RxISR_8BIT+0x1b4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d01f      	beq.n	800778c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	623b      	str	r3, [r7, #32]
   return(result);
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800776e:	663b      	str	r3, [r7, #96]	; 0x60
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
 800777a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e6      	bne.n	800775a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d12e      	bne.n	80077f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	69b9      	ldr	r1, [r7, #24]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	617b      	str	r3, [r7, #20]
   return(result);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d103      	bne.n	80077e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2210      	movs	r2, #16
 80077e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fd62 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077f0:	e00b      	b.n	800780a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f9 ffac 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 80077f8:	e007      	b.n	800780a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0208 	orr.w	r2, r2, #8
 8007808:	619a      	str	r2, [r3, #24]
}
 800780a:	bf00      	nop
 800780c:	3770      	adds	r7, #112	; 0x70
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40008000 	.word	0x40008000

08007818 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b09c      	sub	sp, #112	; 0x70
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007826:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007830:	2b22      	cmp	r3, #34	; 0x22
 8007832:	f040 80be 	bne.w	80079b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800784a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800784e:	4013      	ands	r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007854:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	1c9a      	adds	r2, r3, #2
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	f040 80a1 	bne.w	80079c2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800788e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007894:	667b      	str	r3, [r7, #100]	; 0x64
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800789e:	657b      	str	r3, [r7, #84]	; 0x54
 80078a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	663b      	str	r3, [r7, #96]	; 0x60
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078d2:	643a      	str	r2, [r7, #64]	; 0x40
 80078d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a33      	ldr	r2, [pc, #204]	; (80079cc <UART_RxISR_16BIT+0x1b4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d01f      	beq.n	8007944 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d018      	beq.n	8007944 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007932:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d12e      	bne.n	80079aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f023 0310 	bic.w	r3, r3, #16
 8007966:	65bb      	str	r3, [r7, #88]	; 0x58
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6979      	ldr	r1, [r7, #20]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	613b      	str	r3, [r7, #16]
   return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e6      	bne.n	8007952 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	2b10      	cmp	r3, #16
 8007990:	d103      	bne.n	800799a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2210      	movs	r2, #16
 8007998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fc86 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079a8:	e00b      	b.n	80079c2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7f9 fed0 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 80079b0:	e007      	b.n	80079c2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0208 	orr.w	r2, r2, #8
 80079c0:	619a      	str	r2, [r3, #24]
}
 80079c2:	bf00      	nop
 80079c4:	3770      	adds	r7, #112	; 0x70
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40008000 	.word	0x40008000

080079d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b0ac      	sub	sp, #176	; 0xb0
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a06:	2b22      	cmp	r3, #34	; 0x22
 8007a08:	f040 8182 	bne.w	8007d10 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a12:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a16:	e125      	b.n	8007c64 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a22:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007a26:	b2d9      	uxtb	r1, r3
 8007a28:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a32:	400a      	ands	r2, r1
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d053      	beq.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d011      	beq.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2201      	movs	r2, #1
 8007a88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	f043 0201 	orr.w	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d011      	beq.n	8007aca <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac0:	f043 0204 	orr.w	r2, r3, #4
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d011      	beq.n	8007afa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af0:	f043 0202 	orr.w	r2, r3, #2
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d006      	beq.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fbcb 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 80a2 	bne.w	8007c64 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b44:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007b48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e4      	bne.n	8007b20 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b7e:	66ba      	str	r2, [r7, #104]	; 0x68
 8007b80:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007b84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e1      	bne.n	8007b56 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a5f      	ldr	r2, [pc, #380]	; (8007d28 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d021      	beq.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01a      	beq.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007be0:	657b      	str	r3, [r7, #84]	; 0x54
 8007be2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e4      	bne.n	8007bbe <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d130      	bne.n	8007c5e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	f023 0310 	bic.w	r3, r3, #16
 8007c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c24:	643b      	str	r3, [r7, #64]	; 0x40
 8007c26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e4      	bne.n	8007c02 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	d103      	bne.n	8007c4e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fb2c 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
 8007c5c:	e002      	b.n	8007c64 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7f9 fd76 	bl	8001750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c64:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d006      	beq.n	8007c7a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c70:	f003 0320 	and.w	r3, r3, #32
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f47f aecf 	bne.w	8007a18 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d049      	beq.n	8007d20 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c92:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d242      	bcs.n	8007d20 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e3      	bne.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007cd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f043 0320 	orr.w	r3, r3, #32
 8007cec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	613b      	str	r3, [r7, #16]
   return(result);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e4      	bne.n	8007cd8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d0e:	e007      	b.n	8007d20 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0208 	orr.w	r2, r2, #8
 8007d1e:	619a      	str	r2, [r3, #24]
}
 8007d20:	bf00      	nop
 8007d22:	37b0      	adds	r7, #176	; 0xb0
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40008000 	.word	0x40008000
 8007d2c:	08007661 	.word	0x08007661

08007d30 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b0ae      	sub	sp, #184	; 0xb8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d3e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d66:	2b22      	cmp	r3, #34	; 0x22
 8007d68:	f040 8186 	bne.w	8008078 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d72:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d76:	e129      	b.n	8007fcc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d8a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007d8e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007d92:	4013      	ands	r3, r2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da0:	1c9a      	adds	r2, r3, #2
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d053      	beq.n	8007e76 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d011      	beq.n	8007dfe <UART_RxISR_16BIT_FIFOEN+0xce>
 8007dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2201      	movs	r2, #1
 8007dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df4:	f043 0201 	orr.w	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d011      	beq.n	8007e2e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	f043 0204 	orr.w	r2, r3, #4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e32:	f003 0304 	and.w	r3, r3, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d011      	beq.n	8007e5e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e54:	f043 0202 	orr.w	r2, r3, #2
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d006      	beq.n	8007e76 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff fa19 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 80a4 	bne.w	8007fcc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e2      	bne.n	8007e84 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	f023 0301 	bic.w	r3, r3, #1
 8007ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007ee6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ee8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007eec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e1      	bne.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a5f      	ldr	r2, [pc, #380]	; (8008090 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d021      	beq.n	8007f5c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01a      	beq.n	8007f5c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e4      	bne.n	8007f26 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d130      	bne.n	8007fc6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7a:	f023 0310 	bic.w	r3, r3, #16
 8007f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e4      	bne.n	8007f6a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f003 0310 	and.w	r3, r3, #16
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d103      	bne.n	8007fb6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2210      	movs	r2, #16
 8007fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff f978 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
 8007fc4:	e002      	b.n	8007fcc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7f9 fbc2 	bl	8001750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fcc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f aecb 	bne.w	8007d78 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fe8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d049      	beq.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ffa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d242      	bcs.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	623b      	str	r3, [r7, #32]
   return(result);
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008026:	633a      	str	r2, [r7, #48]	; 0x30
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800802c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e3      	bne.n	8008002 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a15      	ldr	r2, [pc, #84]	; (8008094 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800803e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	60fb      	str	r3, [r7, #12]
   return(result);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f043 0320 	orr.w	r3, r3, #32
 8008054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008062:	61fb      	str	r3, [r7, #28]
 8008064:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	69b9      	ldr	r1, [r7, #24]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	617b      	str	r3, [r7, #20]
   return(result);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e4      	bne.n	8008040 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008076:	e007      	b.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0208 	orr.w	r2, r2, #8
 8008086:	619a      	str	r2, [r3, #24]
}
 8008088:	bf00      	nop
 800808a:	37b8      	adds	r7, #184	; 0xb8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40008000 	.word	0x40008000
 8008094:	08007819 	.word	0x08007819

08008098 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080de:	f107 0308 	add.w	r3, r7, #8
 80080e2:	2218      	movs	r2, #24
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fefd 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080ec:	233f      	movs	r3, #63	; 0x3f
 80080ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80080f0:	2381      	movs	r3, #129	; 0x81
 80080f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80080f4:	1dfb      	adds	r3, r7, #7
 80080f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80080f8:	2301      	movs	r3, #1
 80080fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f001 fbc6 	bl	8009894 <hci_send_req>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	da01      	bge.n	8008112 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800810e:	23ff      	movs	r3, #255	; 0xff
 8008110:	e000      	b.n	8008114 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008112:	79fb      	ldrb	r3, [r7, #7]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800811c:	b5b0      	push	{r4, r5, r7, lr}
 800811e:	b0ce      	sub	sp, #312	; 0x138
 8008120:	af00      	add	r7, sp, #0
 8008122:	4605      	mov	r5, r0
 8008124:	460c      	mov	r4, r1
 8008126:	4610      	mov	r0, r2
 8008128:	4619      	mov	r1, r3
 800812a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800812e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008132:	462a      	mov	r2, r5
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800813a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800813e:	4622      	mov	r2, r4
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008146:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800814a:	4602      	mov	r2, r0
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008152:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008156:	460a      	mov	r2, r1
 8008158:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800815a:	f107 0310 	add.w	r3, r7, #16
 800815e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008162:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008166:	3308      	adds	r3, #8
 8008168:	f107 0210 	add.w	r2, r7, #16
 800816c:	4413      	add	r3, r2
 800816e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008172:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008176:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800817a:	4413      	add	r3, r2
 800817c:	3309      	adds	r3, #9
 800817e:	f107 0210 	add.w	r2, r7, #16
 8008182:	4413      	add	r3, r2
 8008184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008188:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800818c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008190:	2200      	movs	r2, #0
 8008192:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800819a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800819e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80081a2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ae:	3301      	adds	r3, #1
 80081b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80081b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80081bc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80081c0:	8812      	ldrh	r2, [r2, #0]
 80081c2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80081c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ca:	3302      	adds	r3, #2
 80081cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80081d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80081d8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80081dc:	8812      	ldrh	r2, [r2, #0]
 80081de:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80081e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081e6:	3302      	adds	r3, #2
 80081e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80081ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80081f4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80081fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008200:	3301      	adds	r3, #1
 8008202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008206:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800820a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800820e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008214:	3301      	adds	r3, #1
 8008216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800821a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800821e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008222:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008228:	3301      	adds	r3, #1
 800822a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800822e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008232:	3308      	adds	r3, #8
 8008234:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008238:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fe42 	bl	8009ec6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008242:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800824a:	4413      	add	r3, r2
 800824c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008250:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008254:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008258:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800825a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800825e:	3301      	adds	r3, #1
 8008260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008264:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008268:	3301      	adds	r3, #1
 800826a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800826e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fe27 	bl	8009ec6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008278:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800827c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008280:	4413      	add	r3, r2
 8008282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800828e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008290:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008294:	3302      	adds	r3, #2
 8008296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800829a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80082a2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80082a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082a8:	3302      	adds	r3, #2
 80082aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082b2:	2218      	movs	r2, #24
 80082b4:	2100      	movs	r1, #0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fe15 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082bc:	233f      	movs	r3, #63	; 0x3f
 80082be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80082c2:	2383      	movs	r3, #131	; 0x83
 80082c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082c8:	f107 0310 	add.w	r3, r7, #16
 80082cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082d8:	f107 030f 	add.w	r3, r7, #15
 80082dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082ea:	2100      	movs	r1, #0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 fad1 	bl	8009894 <hci_send_req>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da01      	bge.n	80082fc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80082f8:	23ff      	movs	r3, #255	; 0xff
 80082fa:	e004      	b.n	8008306 <aci_gap_set_discoverable+0x1ea>
  return status;
 80082fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008300:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008304:	781b      	ldrb	r3, [r3, #0]
}
 8008306:	4618      	mov	r0, r3
 8008308:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800830c:	46bd      	mov	sp, r7
 800830e:	bdb0      	pop	{r4, r5, r7, pc}

08008310 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b0cc      	sub	sp, #304	; 0x130
 8008314:	af00      	add	r7, sp, #0
 8008316:	4602      	mov	r2, r0
 8008318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008320:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008322:	f107 0310 	add.w	r3, r7, #16
 8008326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800832a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800833c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008344:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008348:	7812      	ldrb	r2, [r2, #0]
 800834a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800834c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008350:	3301      	adds	r3, #1
 8008352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800835a:	2218      	movs	r2, #24
 800835c:	2100      	movs	r1, #0
 800835e:	4618      	mov	r0, r3
 8008360:	f001 fdc1 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008364:	233f      	movs	r3, #63	; 0x3f
 8008366:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800836a:	2385      	movs	r3, #133	; 0x85
 800836c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800837c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008380:	f107 030f 	add.w	r3, r7, #15
 8008384:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008388:	2301      	movs	r3, #1
 800838a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800838e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008392:	2100      	movs	r1, #0
 8008394:	4618      	mov	r0, r3
 8008396:	f001 fa7d 	bl	8009894 <hci_send_req>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	da01      	bge.n	80083a4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80083a0:	23ff      	movs	r3, #255	; 0xff
 80083a2:	e004      	b.n	80083ae <aci_gap_set_io_capability+0x9e>
  return status;
 80083a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083ac:	781b      	ldrb	r3, [r3, #0]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80083b8:	b5b0      	push	{r4, r5, r7, lr}
 80083ba:	b0cc      	sub	sp, #304	; 0x130
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4605      	mov	r5, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80083ce:	462a      	mov	r2, r5
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083da:	4622      	mov	r2, r4
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80083e6:	4602      	mov	r2, r0
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083f2:	460a      	mov	r2, r1
 80083f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80083f6:	f107 0310 	add.w	r3, r7, #16
 80083fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008414:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008418:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008424:	3301      	adds	r3, #1
 8008426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008432:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800843a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800843e:	3301      	adds	r3, #1
 8008440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008448:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800844c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008458:	3301      	adds	r3, #1
 800845a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800845e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008462:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008466:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800846e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008472:	3301      	adds	r3, #1
 8008474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008480:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008486:	3301      	adds	r3, #1
 8008488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800848c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008490:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008494:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800849a:	3301      	adds	r3, #1
 800849c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80084a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80084a8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80084aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084ae:	3301      	adds	r3, #1
 80084b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80084b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80084bc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80084c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084c4:	3304      	adds	r3, #4
 80084c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80084ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80084d2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80084d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084d8:	3301      	adds	r3, #1
 80084da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084e2:	2218      	movs	r2, #24
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 fcfd 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084ec:	233f      	movs	r3, #63	; 0x3f
 80084ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80084f2:	2386      	movs	r3, #134	; 0x86
 80084f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008508:	f107 030f 	add.w	r3, r7, #15
 800850c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008510:	2301      	movs	r3, #1
 8008512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f001 f9b9 	bl	8009894 <hci_send_req>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	da01      	bge.n	800852c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008528:	23ff      	movs	r3, #255	; 0xff
 800852a:	e004      	b.n	8008536 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800852c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008530:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008534:	781b      	ldrb	r3, [r3, #0]
}
 8008536:	4618      	mov	r0, r3
 8008538:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800853c:	46bd      	mov	sp, r7
 800853e:	bdb0      	pop	{r4, r5, r7, pc}

08008540 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b0cc      	sub	sp, #304	; 0x130
 8008544:	af00      	add	r7, sp, #0
 8008546:	4602      	mov	r2, r0
 8008548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800854c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008550:	6019      	str	r1, [r3, #0]
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800855a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008568:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800857e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008582:	8812      	ldrh	r2, [r2, #0]
 8008584:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800858a:	3302      	adds	r3, #2
 800858c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008594:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008598:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80085a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085a6:	3304      	adds	r3, #4
 80085a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085b0:	2218      	movs	r2, #24
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fc96 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085ba:	233f      	movs	r3, #63	; 0x3f
 80085bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80085c0:	2388      	movs	r3, #136	; 0x88
 80085c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80085c6:	f107 0310 	add.w	r3, r7, #16
 80085ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80085d6:	f107 030f 	add.w	r3, r7, #15
 80085da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f952 	bl	8009894 <hci_send_req>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da01      	bge.n	80085fa <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80085f6:	23ff      	movs	r3, #255	; 0xff
 80085f8:	e004      	b.n	8008604 <aci_gap_pass_key_resp+0xc4>
  return status;
 80085fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008602:	781b      	ldrb	r3, [r3, #0]
}
 8008604:	4618      	mov	r0, r3
 8008606:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800860e:	b590      	push	{r4, r7, lr}
 8008610:	b0cd      	sub	sp, #308	; 0x134
 8008612:	af00      	add	r7, sp, #0
 8008614:	4604      	mov	r4, r0
 8008616:	4608      	mov	r0, r1
 8008618:	4611      	mov	r1, r2
 800861a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800861e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008628:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800862c:	4622      	mov	r2, r4
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008634:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008638:	4602      	mov	r2, r0
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008640:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008644:	460a      	mov	r2, r1
 8008646:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008648:	f107 0310 	add.w	r3, r7, #16
 800864c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008650:	f107 0308 	add.w	r3, r7, #8
 8008654:	2207      	movs	r2, #7
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f001 fc44 	bl	8009ee6 <Osal_MemSet>
  int index_input = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008668:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800866c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008670:	7812      	ldrb	r2, [r2, #0]
 8008672:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008678:	3301      	adds	r3, #1
 800867a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800867e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008682:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008686:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800868a:	7812      	ldrb	r2, [r2, #0]
 800868c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800868e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008692:	3301      	adds	r3, #1
 8008694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086a0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80086a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ac:	3301      	adds	r3, #1
 80086ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086b6:	2218      	movs	r2, #24
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fc13 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086c0:	233f      	movs	r3, #63	; 0x3f
 80086c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80086c6:	238a      	movs	r3, #138	; 0x8a
 80086c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086cc:	f107 0310 	add.w	r3, r7, #16
 80086d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80086e4:	2307      	movs	r3, #7
 80086e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 f8cf 	bl	8009894 <hci_send_req>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da01      	bge.n	8008700 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80086fc:	23ff      	movs	r3, #255	; 0xff
 80086fe:	e02e      	b.n	800875e <aci_gap_init+0x150>
  if ( resp.Status )
 8008700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008704:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <aci_gap_init+0x10c>
    return resp.Status;
 800870e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008712:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	e021      	b.n	800875e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008722:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008726:	b29a      	uxth	r2, r3
 8008728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008738:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800873c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008740:	b29a      	uxth	r2, r3
 8008742:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008746:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008750:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008754:	b29a      	uxth	r2, r3
 8008756:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800875a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008764:	46bd      	mov	sp, r7
 8008766:	bd90      	pop	{r4, r7, pc}

08008768 <aci_gap_slave_security_req>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_slave_security_req( uint16_t Connection_Handle )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b0cc      	sub	sp, #304	; 0x130
 800876c:	af00      	add	r7, sp, #0
 800876e:	4602      	mov	r2, r0
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008778:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 800877a:	f107 0310 	add.w	r3, r7, #16
 800877e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008786:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008798:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800879c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087a0:	8812      	ldrh	r2, [r2, #0]
 80087a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087a8:	3302      	adds	r3, #2
 80087aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087b2:	2218      	movs	r2, #24
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 fb95 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087bc:	233f      	movs	r3, #63	; 0x3f
 80087be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08d;
 80087c2:	238d      	movs	r3, #141	; 0x8d
 80087c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80087c8:	230f      	movs	r3, #15
 80087ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80087ce:	f107 0310 	add.w	r3, r7, #16
 80087d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087de:	f107 030f 	add.w	r3, r7, #15
 80087e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 f84e 	bl	8009894 <hci_send_req>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da01      	bge.n	8008802 <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 80087fe:	23ff      	movs	r3, #255	; 0xff
 8008800:	e004      	b.n	800880c <aci_gap_slave_security_req+0xa4>
  return status;
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800880a:	781b      	ldrb	r3, [r3, #0]
}
 800880c:	4618      	mov	r0, r3
 800880e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <aci_gap_update_adv_data>:

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b0cc      	sub	sp, #304	; 0x130
 800881a:	af00      	add	r7, sp, #0
 800881c:	4602      	mov	r2, r0
 800881e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008826:	6019      	str	r1, [r3, #0]
 8008828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008830:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008832:	f107 0310 	add.w	r3, r7, #16
 8008836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800884c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008850:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008854:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008858:	7812      	ldrb	r2, [r2, #0]
 800885a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800885c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008860:	3301      	adds	r3, #1
 8008862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886a:	1c58      	adds	r0, r3, #1
 800886c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008870:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	f001 fb21 	bl	8009ec6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008888:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008892:	4413      	add	r3, r2
 8008894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800889c:	2218      	movs	r2, #24
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fb20 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088a6:	233f      	movs	r3, #63	; 0x3f
 80088a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80088ac:	238e      	movs	r3, #142	; 0x8e
 80088ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088b2:	f107 0310 	add.w	r3, r7, #16
 80088b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088c2:	f107 030f 	add.w	r3, r7, #15
 80088c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 ffdc 	bl	8009894 <hci_send_req>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da01      	bge.n	80088e6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80088e2:	23ff      	movs	r3, #255	; 0xff
 80088e4:	e004      	b.n	80088f0 <aci_gap_update_adv_data+0xda>
  return status;
 80088e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088ee:	781b      	ldrb	r3, [r3, #0]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008904:	f107 0308 	add.w	r3, r7, #8
 8008908:	2218      	movs	r2, #24
 800890a:	2100      	movs	r1, #0
 800890c:	4618      	mov	r0, r3
 800890e:	f001 faea 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008912:	233f      	movs	r3, #63	; 0x3f
 8008914:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008916:	2392      	movs	r3, #146	; 0x92
 8008918:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800891a:	1dfb      	adds	r3, r7, #7
 800891c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800891e:	2301      	movs	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f000 ffb3 	bl	8009894 <hci_send_req>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	da01      	bge.n	8008938 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008934:	23ff      	movs	r3, #255	; 0xff
 8008936:	e000      	b.n	800893a <aci_gap_configure_whitelist+0x40>
  return status;
 8008938:	79fb      	ldrb	r3, [r7, #7]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3720      	adds	r7, #32
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b088      	sub	sp, #32
 8008946:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800894c:	f107 0308 	add.w	r3, r7, #8
 8008950:	2218      	movs	r2, #24
 8008952:	2100      	movs	r1, #0
 8008954:	4618      	mov	r0, r3
 8008956:	f001 fac6 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800895a:	233f      	movs	r3, #63	; 0x3f
 800895c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 800895e:	2394      	movs	r3, #148	; 0x94
 8008960:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008962:	1dfb      	adds	r3, r7, #7
 8008964:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008966:	2301      	movs	r3, #1
 8008968:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f000 ff8f 	bl	8009894 <hci_send_req>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	da01      	bge.n	8008980 <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 800897c:	23ff      	movs	r3, #255	; 0xff
 800897e:	e000      	b.n	8008982 <aci_gap_clear_security_db+0x40>
  return status;
 8008980:	79fb      	ldrb	r3, [r7, #7]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <aci_gap_allow_rebond>:

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b0cc      	sub	sp, #304	; 0x130
 800898e:	af00      	add	r7, sp, #0
 8008990:	4602      	mov	r2, r0
 8008992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008996:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800899a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800899c:	f107 0310 	add.w	r3, r7, #16
 80089a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80089a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80089b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80089c2:	8812      	ldrh	r2, [r2, #0]
 80089c4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ca:	3302      	adds	r3, #2
 80089cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089d4:	2218      	movs	r2, #24
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fa84 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089de:	233f      	movs	r3, #63	; 0x3f
 80089e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 80089e4:	2395      	movs	r3, #149	; 0x95
 80089e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089ea:	f107 0310 	add.w	r3, r7, #16
 80089ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089fa:	f107 030f 	add.w	r3, r7, #15
 80089fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 ff40 	bl	8009894 <hci_send_req>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da01      	bge.n	8008a1e <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8008a1a:	23ff      	movs	r3, #255	; 0xff
 8008a1c:	e004      	b.n	8008a28 <aci_gap_allow_rebond+0x9e>
  return status;
 8008a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a26:	781b      	ldrb	r3, [r3, #0]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b0cc      	sub	sp, #304	; 0x130
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	4602      	mov	r2, r0
 8008a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a48:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a4c:	460a      	mov	r2, r1
 8008a4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008a50:	f107 0310 	add.w	r3, r7, #16
 8008a54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a76:	8812      	ldrh	r2, [r2, #0]
 8008a78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a7e:	3302      	adds	r3, #2
 8008a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a8c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aa2:	2218      	movs	r2, #24
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 fa1d 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aac:	233f      	movs	r3, #63	; 0x3f
 8008aae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008ab2:	23a5      	movs	r3, #165	; 0xa5
 8008ab4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ab8:	f107 0310 	add.w	r3, r7, #16
 8008abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ac8:	f107 030f 	add.w	r3, r7, #15
 8008acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fed9 	bl	8009894 <hci_send_req>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da01      	bge.n	8008aec <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ae8:	23ff      	movs	r3, #255	; 0xff
 8008aea:	e004      	b.n	8008af6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008af4:	781b      	ldrb	r3, [r3, #0]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	2218      	movs	r2, #24
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 f9e7 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b18:	233f      	movs	r3, #63	; 0x3f
 8008b1a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008b1c:	f240 1301 	movw	r3, #257	; 0x101
 8008b20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b26:	2301      	movs	r3, #1
 8008b28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 feaf 	bl	8009894 <hci_send_req>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da01      	bge.n	8008b40 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008b3c:	23ff      	movs	r3, #255	; 0xff
 8008b3e:	e000      	b.n	8008b42 <aci_gatt_init+0x42>
  return status;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008b4a:	b590      	push	{r4, r7, lr}
 8008b4c:	b0cf      	sub	sp, #316	; 0x13c
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	4604      	mov	r4, r0
 8008b52:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008b56:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008b5a:	6001      	str	r1, [r0, #0]
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4619      	mov	r1, r3
 8008b60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b64:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008b68:	4622      	mov	r2, r4
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b70:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008b74:	4602      	mov	r2, r0
 8008b76:	701a      	strb	r2, [r3, #0]
 8008b78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b7c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008b80:	460a      	mov	r2, r1
 8008b82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008b84:	f107 0310 	add.w	r3, r7, #16
 8008b88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008b8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b90:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d00a      	beq.n	8008bb0 <aci_gatt_add_service+0x66>
 8008b9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b9e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d101      	bne.n	8008bac <aci_gatt_add_service+0x62>
 8008ba8:	2311      	movs	r3, #17
 8008baa:	e002      	b.n	8008bb2 <aci_gatt_add_service+0x68>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e000      	b.n	8008bb2 <aci_gatt_add_service+0x68>
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	f107 0210 	add.w	r2, r7, #16
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008bbc:	f107 030c 	add.w	r3, r7, #12
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 f98e 	bl	8009ee6 <Osal_MemSet>
  int index_input = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008bd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bd4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bd8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008bdc:	7812      	ldrb	r2, [r2, #0]
 8008bde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008be0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008be4:	3301      	adds	r3, #1
 8008be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008bea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d002      	beq.n	8008bfe <aci_gatt_add_service+0xb4>
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d004      	beq.n	8008c06 <aci_gatt_add_service+0xbc>
 8008bfc:	e007      	b.n	8008c0e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008c04:	e005      	b.n	8008c12 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008c06:	2310      	movs	r3, #16
 8008c08:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008c0c:	e001      	b.n	8008c12 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008c0e:	2397      	movs	r3, #151	; 0x97
 8008c10:	e06c      	b.n	8008cec <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008c12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c16:	1c58      	adds	r0, r3, #1
 8008c18:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008c1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008c24:	6819      	ldr	r1, [r3, #0]
 8008c26:	f001 f94e 	bl	8009ec6 <Osal_MemCpy>
    index_input += size;
 8008c2a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008c2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c32:	4413      	add	r3, r2
 8008c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c40:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c56:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c5a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008c5e:	7812      	ldrb	r2, [r2, #0]
 8008c60:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008c62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c66:	3301      	adds	r3, #1
 8008c68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c70:	2218      	movs	r2, #24
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f936 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c7a:	233f      	movs	r3, #63	; 0x3f
 8008c7c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008c80:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008c84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c88:	f107 0310 	add.w	r3, r7, #16
 8008c8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008caa:	2100      	movs	r1, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fdf1 	bl	8009894 <hci_send_req>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da01      	bge.n	8008cbc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008cb8:	23ff      	movs	r3, #255	; 0xff
 8008cba:	e017      	b.n	8008cec <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008cbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008cca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	e00a      	b.n	8008cec <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008cd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ce8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd90      	pop	{r4, r7, pc}

08008cf6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008cf6:	b590      	push	{r4, r7, lr}
 8008cf8:	b0d1      	sub	sp, #324	; 0x144
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	4608      	mov	r0, r1
 8008d00:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008d04:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008d08:	600a      	str	r2, [r1, #0]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d10:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008d14:	4622      	mov	r2, r4
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d1c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008d20:	4602      	mov	r2, r0
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d28:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008d2c:	460a      	mov	r2, r1
 8008d2e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008d30:	f107 0318 	add.w	r3, r7, #24
 8008d34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008d38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d3c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d00a      	beq.n	8008d5c <aci_gatt_add_char+0x66>
 8008d46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d4a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d101      	bne.n	8008d58 <aci_gatt_add_char+0x62>
 8008d54:	2313      	movs	r3, #19
 8008d56:	e002      	b.n	8008d5e <aci_gatt_add_char+0x68>
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e000      	b.n	8008d5e <aci_gatt_add_char+0x68>
 8008d5c:	2305      	movs	r3, #5
 8008d5e:	f107 0218 	add.w	r2, r7, #24
 8008d62:	4413      	add	r3, r2
 8008d64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 f8b8 	bl	8009ee6 <Osal_MemSet>
  int index_input = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008d7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008d80:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008d84:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008d88:	8812      	ldrh	r2, [r2, #0]
 8008d8a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d90:	3302      	adds	r3, #2
 8008d92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008d96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008d9a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008d9e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008da6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008daa:	3301      	adds	r3, #1
 8008dac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008db0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008db4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d002      	beq.n	8008dc4 <aci_gatt_add_char+0xce>
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d004      	beq.n	8008dcc <aci_gatt_add_char+0xd6>
 8008dc2:	e007      	b.n	8008dd4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008dca:	e005      	b.n	8008dd8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008dcc:	2310      	movs	r3, #16
 8008dce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008dd2:	e001      	b.n	8008dd8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008dd4:	2397      	movs	r3, #151	; 0x97
 8008dd6:	e091      	b.n	8008efc <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008dd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008ddc:	1cd8      	adds	r0, r3, #3
 8008dde:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008de2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008de6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008dea:	6819      	ldr	r1, [r3, #0]
 8008dec:	f001 f86b 	bl	8009ec6 <Osal_MemCpy>
    index_input += size;
 8008df0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008df4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008df8:	4413      	add	r3, r2
 8008dfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008dfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e02:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008e06:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008e0a:	8812      	ldrh	r2, [r2, #0]
 8008e0c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008e0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e12:	3302      	adds	r3, #2
 8008e14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e1c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008e20:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008e22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e26:	3301      	adds	r3, #1
 8008e28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e30:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008e34:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e44:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008e48:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e4e:	3301      	adds	r3, #1
 8008e50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e58:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008e5c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008e5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e62:	3301      	adds	r3, #1
 8008e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e6c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008e70:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008e72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e76:	3301      	adds	r3, #1
 8008e78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e80:	2218      	movs	r2, #24
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 f82e 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e8a:	233f      	movs	r3, #63	; 0x3f
 8008e8c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008e90:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008e94:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008e98:	f107 0318 	add.w	r3, r7, #24
 8008e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008ea0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008eb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fce9 	bl	8009894 <hci_send_req>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da01      	bge.n	8008ecc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008ec8:	23ff      	movs	r3, #255	; 0xff
 8008eca:	e017      	b.n	8008efc <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008ecc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008eda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	e00a      	b.n	8008efc <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008ee6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008ef8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd90      	pop	{r4, r7, pc}

08008f06 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008f06:	b5b0      	push	{r4, r5, r7, lr}
 8008f08:	b0cc      	sub	sp, #304	; 0x130
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4610      	mov	r0, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f18:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	801a      	strh	r2, [r3, #0]
 8008f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f28:	4622      	mov	r2, r4
 8008f2a:	801a      	strh	r2, [r3, #0]
 8008f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f30:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008f34:	4602      	mov	r2, r0
 8008f36:	701a      	strb	r2, [r3, #0]
 8008f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008f40:	460a      	mov	r2, r1
 8008f42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008f44:	f107 0310 	add.w	r3, r7, #16
 8008f48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f50:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f66:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f6a:	8812      	ldrh	r2, [r2, #0]
 8008f6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f72:	3302      	adds	r3, #2
 8008f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f80:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008f84:	8812      	ldrh	r2, [r2, #0]
 8008f86:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f9a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008f9e:	7812      	ldrb	r2, [r2, #0]
 8008fa0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fb4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008fb8:	7812      	ldrb	r2, [r2, #0]
 8008fba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fca:	1d98      	adds	r0, r3, #6
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008fdc:	f000 ff73 	bl	8009ec6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008fee:	4413      	add	r3, r2
 8008ff0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ff4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ff8:	2218      	movs	r2, #24
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 ff72 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009002:	233f      	movs	r3, #63	; 0x3f
 8009004:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009008:	f44f 7383 	mov.w	r3, #262	; 0x106
 800900c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009010:	f107 0310 	add.w	r3, r7, #16
 8009014:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009018:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800901c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009020:	f107 030f 	add.w	r3, r7, #15
 8009024:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009028:	2301      	movs	r3, #1
 800902a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800902e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fc2d 	bl	8009894 <hci_send_req>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	da01      	bge.n	8009044 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009040:	23ff      	movs	r3, #255	; 0xff
 8009042:	e004      	b.n	800904e <aci_gatt_update_char_value+0x148>
  return status;
 8009044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009048:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800904c:	781b      	ldrb	r3, [r3, #0]
}
 800904e:	4618      	mov	r0, r3
 8009050:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009054:	46bd      	mov	sp, r7
 8009056:	bdb0      	pop	{r4, r5, r7, pc}

08009058 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8009058:	b5b0      	push	{r4, r5, r7, lr}
 800905a:	b0cc      	sub	sp, #304	; 0x130
 800905c:	af00      	add	r7, sp, #0
 800905e:	4605      	mov	r5, r0
 8009060:	460c      	mov	r4, r1
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800906a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800906e:	462a      	mov	r2, r5
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800907a:	4622      	mov	r2, r4
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009082:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009086:	4602      	mov	r2, r0
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009092:	460a      	mov	r2, r1
 8009094:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8009096:	f107 0310 	add.w	r3, r7, #16
 800909a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800909e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80090b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090b8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090bc:	8812      	ldrh	r2, [r2, #0]
 80090be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c4:	3302      	adds	r3, #2
 80090c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 80090ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80090d6:	8812      	ldrh	r2, [r2, #0]
 80090d8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80090da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090de:	3302      	adds	r3, #2
 80090e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 80090e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090ec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80090f0:	7812      	ldrb	r2, [r2, #0]
 80090f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80090f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090f8:	3301      	adds	r3, #1
 80090fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 80090fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009106:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800910a:	7812      	ldrb	r2, [r2, #0]
 800910c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800910e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009112:	3301      	adds	r3, #1
 8009114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8009118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009120:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009126:	3301      	adds	r3, #1
 8009128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	3307      	adds	r3, #7
 8009132:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009136:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fec3 	bl	8009ec6 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009140:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8009144:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009148:	4413      	add	r3, r2
 800914a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800914e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009152:	2218      	movs	r2, #24
 8009154:	2100      	movs	r1, #0
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fec5 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800915c:	233f      	movs	r3, #63	; 0x3f
 800915e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8009162:	f44f 7393 	mov.w	r3, #294	; 0x126
 8009166:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800916a:	f107 0310 	add.w	r3, r7, #16
 800916e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009176:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800917a:	f107 030f 	add.w	r3, r7, #15
 800917e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009182:	2301      	movs	r3, #1
 8009184:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009188:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800918c:	2100      	movs	r1, #0
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fb80 	bl	8009894 <hci_send_req>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	da01      	bge.n	800919e <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800919a:	23ff      	movs	r3, #255	; 0xff
 800919c:	e004      	b.n	80091a8 <aci_gatt_write_resp+0x150>
  return status;
 800919e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091a6:	781b      	ldrb	r3, [r3, #0]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bdb0      	pop	{r4, r5, r7, pc}

080091b2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b0cc      	sub	sp, #304	; 0x130
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091ca:	4602      	mov	r2, r0
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80091d6:	460a      	mov	r2, r1
 80091d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80091da:	f107 0310 	add.w	r3, r7, #16
 80091de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80091e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80091f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091fc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009204:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009208:	3301      	adds	r3, #1
 800920a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800920e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009212:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009216:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800921e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009222:	3301      	adds	r3, #1
 8009224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922c:	1c98      	adds	r0, r3, #2
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009240:	6819      	ldr	r1, [r3, #0]
 8009242:	f000 fe40 	bl	8009ec6 <Osal_MemCpy>
  index_input += Length;
 8009246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009254:	4413      	add	r3, r2
 8009256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800925a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800925e:	2218      	movs	r2, #24
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fe3f 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009268:	233f      	movs	r3, #63	; 0x3f
 800926a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800926e:	230c      	movs	r3, #12
 8009270:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009274:	f107 0310 	add.w	r3, r7, #16
 8009278:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800927c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009280:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009284:	f107 030f 	add.w	r3, r7, #15
 8009288:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800928c:	2301      	movs	r3, #1
 800928e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009292:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fafb 	bl	8009894 <hci_send_req>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	da01      	bge.n	80092a8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80092a4:	23ff      	movs	r3, #255	; 0xff
 80092a6:	e004      	b.n	80092b2 <aci_hal_write_config_data+0x100>
  return status;
 80092a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092b0:	781b      	ldrb	r3, [r3, #0]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b0cc      	sub	sp, #304	; 0x130
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4602      	mov	r2, r0
 80092c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80092d6:	460a      	mov	r2, r1
 80092d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80092da:	f107 0310 	add.w	r3, r7, #16
 80092de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80092f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092fc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009300:	7812      	ldrb	r2, [r2, #0]
 8009302:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009308:	3301      	adds	r3, #1
 800930a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800930e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009312:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009316:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800931e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009322:	3301      	adds	r3, #1
 8009324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009328:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800932c:	2218      	movs	r2, #24
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fdd8 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009336:	233f      	movs	r3, #63	; 0x3f
 8009338:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800933c:	230f      	movs	r3, #15
 800933e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009342:	f107 0310 	add.w	r3, r7, #16
 8009346:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800934a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800934e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009352:	f107 030f 	add.w	r3, r7, #15
 8009356:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009360:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fa94 	bl	8009894 <hci_send_req>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	da01      	bge.n	8009376 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009372:	23ff      	movs	r3, #255	; 0xff
 8009374:	e004      	b.n	8009380 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800937e:	781b      	ldrb	r3, [r3, #0]
}
 8009380:	4618      	mov	r0, r3
 8009382:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b088      	sub	sp, #32
 800938e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	2218      	movs	r2, #24
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fda2 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x03;
 80093a2:	2303      	movs	r3, #3
 80093a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80093a6:	2303      	movs	r3, #3
 80093a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093aa:	1dfb      	adds	r3, r7, #7
 80093ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093ae:	2301      	movs	r3, #1
 80093b0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093b2:	f107 0308 	add.w	r3, r7, #8
 80093b6:	2100      	movs	r1, #0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fa6b 	bl	8009894 <hci_send_req>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	da01      	bge.n	80093c8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80093c4:	23ff      	movs	r3, #255	; 0xff
 80093c6:	e000      	b.n	80093ca <hci_reset+0x40>
  return status;
 80093c8:	79fb      	ldrb	r3, [r7, #7]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3720      	adds	r7, #32
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b0ce      	sub	sp, #312	; 0x138
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093e0:	6019      	str	r1, [r3, #0]
 80093e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093f4:	4602      	mov	r2, r0
 80093f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80093f8:	f107 0318 	add.w	r3, r7, #24
 80093fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009400:	f107 0310 	add.w	r3, r7, #16
 8009404:	2205      	movs	r2, #5
 8009406:	2100      	movs	r1, #0
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fd6c 	bl	8009ee6 <Osal_MemSet>
  int index_input = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009414:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009418:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800941c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009420:	8812      	ldrh	r2, [r2, #0]
 8009422:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009424:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009428:	3302      	adds	r3, #2
 800942a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800942e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009432:	2218      	movs	r2, #24
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fd55 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x08;
 800943c:	2308      	movs	r3, #8
 800943e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009442:	2330      	movs	r3, #48	; 0x30
 8009444:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009448:	f107 0318 	add.w	r3, r7, #24
 800944c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009450:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009454:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009458:	f107 0310 	add.w	r3, r7, #16
 800945c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009460:	2305      	movs	r3, #5
 8009462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fa11 	bl	8009894 <hci_send_req>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	da01      	bge.n	800947c <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8009478:	23ff      	movs	r3, #255	; 0xff
 800947a:	e023      	b.n	80094c4 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800947c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009480:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d005      	beq.n	8009496 <hci_le_read_phy+0xc4>
    return resp.Status;
 800948a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800948e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	e016      	b.n	80094c4 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8009496:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800949a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800949e:	78da      	ldrb	r2, [r3, #3]
 80094a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80094ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80094b4:	791a      	ldrb	r2, [r3, #4]
 80094b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b0cd      	sub	sp, #308	; 0x134
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094e2:	4622      	mov	r2, r4
 80094e4:	701a      	strb	r2, [r3, #0]
 80094e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094ee:	4602      	mov	r2, r0
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80094fa:	460a      	mov	r2, r1
 80094fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80094fe:	f107 0310 	add.w	r3, r7, #16
 8009502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009520:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009524:	7812      	ldrb	r2, [r2, #0]
 8009526:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800952c:	3301      	adds	r3, #1
 800952e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009536:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800953a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800953e:	7812      	ldrb	r2, [r2, #0]
 8009540:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009546:	3301      	adds	r3, #1
 8009548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800954c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009550:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009554:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009558:	7812      	ldrb	r2, [r2, #0]
 800955a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800955c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009560:	3301      	adds	r3, #1
 8009562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800956a:	2218      	movs	r2, #24
 800956c:	2100      	movs	r1, #0
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fcb9 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x08;
 8009574:	2308      	movs	r3, #8
 8009576:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800957a:	2331      	movs	r3, #49	; 0x31
 800957c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009580:	f107 0310 	add.w	r3, r7, #16
 8009584:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800958c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009590:	f107 030f 	add.w	r3, r7, #15
 8009594:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009598:	2301      	movs	r3, #1
 800959a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800959e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095a2:	2100      	movs	r1, #0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 f975 	bl	8009894 <hci_send_req>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da01      	bge.n	80095b4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80095b0:	23ff      	movs	r3, #255	; 0xff
 80095b2:	e004      	b.n	80095be <hci_le_set_default_phy+0xf0>
  return status;
 80095b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095bc:	781b      	ldrb	r3, [r3, #0]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd90      	pop	{r4, r7, pc}

080095c8 <hci_le_set_phy>:
tBleStatus hci_le_set_phy( uint16_t Connection_Handle,
                           uint8_t ALL_PHYS,
                           uint8_t TX_PHYS,
                           uint8_t RX_PHYS,
                           uint16_t PHY_options )
{
 80095c8:	b5b0      	push	{r4, r5, r7, lr}
 80095ca:	b0cc      	sub	sp, #304	; 0x130
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4605      	mov	r5, r0
 80095d0:	460c      	mov	r4, r1
 80095d2:	4610      	mov	r0, r2
 80095d4:	4619      	mov	r1, r3
 80095d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095de:	462a      	mov	r2, r5
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80095ea:	4622      	mov	r2, r4
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095f6:	4602      	mov	r2, r0
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fe:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009602:	460a      	mov	r2, r1
 8009604:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_phy_cp0 *cp0 = (hci_le_set_phy_cp0*)(cmd_buffer);
 8009606:	f107 0310 	add.w	r3, r7, #16
 800960a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800960e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009612:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009624:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009628:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800962c:	8812      	ldrh	r2, [r2, #0]
 800962e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009634:	3302      	adds	r3, #2
 8009636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800963a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009642:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009646:	7812      	ldrb	r2, [r2, #0]
 8009648:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800964a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800964e:	3301      	adds	r3, #1
 8009650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009658:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800965c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009660:	7812      	ldrb	r2, [r2, #0]
 8009662:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009668:	3301      	adds	r3, #1
 800966a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800966e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009676:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800967e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009682:	3301      	adds	r3, #1
 8009684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PHY_options = PHY_options;
 8009688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009690:	f8a3 2005 	strh.w	r2, [r3, #5]
  index_input += 2;
 8009694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009698:	3302      	adds	r3, #2
 800969a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800969e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096a2:	2218      	movs	r2, #24
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fc1d 	bl	8009ee6 <Osal_MemSet>
  rq.ogf = 0x08;
 80096ac:	2308      	movs	r3, #8
 80096ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x032;
 80096b2:	2332      	movs	r3, #50	; 0x32
 80096b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80096b8:	230f      	movs	r3, #15
 80096ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096ce:	f107 030f 	add.w	r3, r7, #15
 80096d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096e0:	2100      	movs	r1, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f8d6 	bl	8009894 <hci_send_req>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	da01      	bge.n	80096f2 <hci_le_set_phy+0x12a>
    return BLE_STATUS_TIMEOUT;
 80096ee:	23ff      	movs	r3, #255	; 0xff
 80096f0:	e004      	b.n	80096fc <hci_le_set_phy+0x134>
  return status;
 80096f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096fa:	781b      	ldrb	r3, [r3, #0]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009702:	46bd      	mov	sp, r7
 8009704:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009708 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800970e:	2204      	movs	r2, #4
 8009710:	2100      	movs	r1, #0
 8009712:	4816      	ldr	r0, [pc, #88]	; (800976c <DIS_Init+0x64>)
 8009714:	f001 fd4a 	bl	800b1ac <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8009718:	f641 030a 	movw	r3, #6154	; 0x180a
 800971c:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800971e:	1d39      	adds	r1, r7, #4
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <DIS_Init+0x64>)
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2303      	movs	r3, #3
 8009726:	2201      	movs	r2, #1
 8009728:	2001      	movs	r0, #1
 800972a:	f7ff fa0e 	bl	8008b4a <aci_gatt_add_service>
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8009732:	f642 2329 	movw	r3, #10793	; 0x2a29
 8009736:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <DIS_Init+0x64>)
 800973a:	8818      	ldrh	r0, [r3, #0]
 800973c:	1d3a      	adds	r2, r7, #4
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <DIS_Init+0x68>)
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	2301      	movs	r3, #1
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	230a      	movs	r3, #10
 8009748:	9303      	str	r3, [sp, #12]
 800974a:	2300      	movs	r3, #0
 800974c:	9302      	str	r3, [sp, #8]
 800974e:	2300      	movs	r3, #0
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	2302      	movs	r3, #2
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2320      	movs	r3, #32
 8009758:	2101      	movs	r1, #1
 800975a:	f7ff facc 	bl	8008cf6 <aci_gatt_add_char>
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8009762:	bf00      	nop
}
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000038 	.word	0x20000038
 8009770:	2000003a 	.word	0x2000003a

08009774 <DIS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval None
 */
tBleStatus DIS_UpdateChar(uint16_t UUID, DIS_Data_t *pPData)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af02      	add	r7, sp, #8
 800977a:	4603      	mov	r3, r0
 800977c:	6039      	str	r1, [r7, #0]
 800977e:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value;

  switch(UUID)
 8009780:	88fb      	ldrh	r3, [r7, #6]
 8009782:	f642 2229 	movw	r2, #10793	; 0x2a29
 8009786:	4293      	cmp	r3, r2
 8009788:	d10f      	bne.n	80097aa <DIS_UpdateChar+0x36>
  {
#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
    case MANUFACTURER_NAME_UUID:
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800978a:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <DIS_UpdateChar+0x48>)
 800978c:	8818      	ldrh	r0, [r3, #0]
 800978e:	4b0b      	ldr	r3, [pc, #44]	; (80097bc <DIS_UpdateChar+0x48>)
 8009790:	8859      	ldrh	r1, [r3, #2]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	791a      	ldrb	r2, [r3, #4]
                                                DIS_Context.ManufacturerNameStringCharHdle,
                                                0,
                                                pPData->Length,
                                                (uint8_t *)pPData->pPayload);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4613      	mov	r3, r2
 800979e:	2200      	movs	r2, #0
 80097a0:	f7ff fbb1 	bl	8008f06 <aci_gatt_update_char_value>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
      break;
 80097a8:	e002      	b.n	80097b0 <DIS_UpdateChar+0x3c>
                                                (uint8_t *)pPData->pPayload);
      break;
#endif

    default:
      return_value = BLE_STATUS_ERROR;
 80097aa:	2397      	movs	r3, #151	; 0x97
 80097ac:	73fb      	strb	r3, [r7, #15]
      break;
 80097ae:	bf00      	nop
  }

  return return_value;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}/* end DIS_UpdateChar() */
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000038 	.word	0x20000038

080097c0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	4a08      	ldr	r2, [pc, #32]	; (80097f0 <hci_init+0x30>)
 80097d0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80097d2:	4a08      	ldr	r2, [pc, #32]	; (80097f4 <hci_init+0x34>)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80097d8:	4806      	ldr	r0, [pc, #24]	; (80097f4 <hci_init+0x34>)
 80097da:	f000 f973 	bl	8009ac4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f8d4 	bl	8009990 <TlInit>

  return;
 80097e8:	bf00      	nop
}
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	200005f8 	.word	0x200005f8
 80097f4:	200005d0 	.word	0x200005d0

080097f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80097fe:	4822      	ldr	r0, [pc, #136]	; (8009888 <hci_user_evt_proc+0x90>)
 8009800:	f000 fde0 	bl	800a3c4 <LST_is_empty>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d12b      	bne.n	8009862 <hci_user_evt_proc+0x6a>
 800980a:	4b20      	ldr	r3, [pc, #128]	; (800988c <hci_user_evt_proc+0x94>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d027      	beq.n	8009862 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	4619      	mov	r1, r3
 8009818:	481b      	ldr	r0, [pc, #108]	; (8009888 <hci_user_evt_proc+0x90>)
 800981a:	f000 fe62 	bl	800a4e2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800981e:	4b1c      	ldr	r3, [pc, #112]	; (8009890 <hci_user_evt_proc+0x98>)
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00c      	beq.n	8009840 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800982a:	2301      	movs	r3, #1
 800982c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800982e:	4b18      	ldr	r3, [pc, #96]	; (8009890 <hci_user_evt_proc+0x98>)
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	1d3a      	adds	r2, r7, #4
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009838:	793a      	ldrb	r2, [r7, #4]
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <hci_user_evt_proc+0x94>)
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e002      	b.n	8009846 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009840:	4b12      	ldr	r3, [pc, #72]	; (800988c <hci_user_evt_proc+0x94>)
 8009842:	2201      	movs	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <hci_user_evt_proc+0x94>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4618      	mov	r0, r3
 8009852:	f001 f8ff 	bl	800aa54 <TL_MM_EvtDone>
 8009856:	e004      	b.n	8009862 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4619      	mov	r1, r3
 800985c:	480a      	ldr	r0, [pc, #40]	; (8009888 <hci_user_evt_proc+0x90>)
 800985e:	f000 fdd3 	bl	800a408 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009862:	4809      	ldr	r0, [pc, #36]	; (8009888 <hci_user_evt_proc+0x90>)
 8009864:	f000 fdae 	bl	800a3c4 <LST_is_empty>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d107      	bne.n	800987e <hci_user_evt_proc+0x86>
 800986e:	4b07      	ldr	r3, [pc, #28]	; (800988c <hci_user_evt_proc+0x94>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009876:	4804      	ldr	r0, [pc, #16]	; (8009888 <hci_user_evt_proc+0x90>)
 8009878:	f7f9 f8a7 	bl	80029ca <hci_notify_asynch_evt>
  }


  return;
 800987c:	bf00      	nop
 800987e:	bf00      	nop
}
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000040 	.word	0x20000040
 800988c:	2000004c 	.word	0x2000004c
 8009890:	200005d0 	.word	0x200005d0

08009894 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80098a0:	2000      	movs	r0, #0
 80098a2:	f000 f8cb 	bl	8009a3c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80098a6:	2300      	movs	r3, #0
 80098a8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	885b      	ldrh	r3, [r3, #2]
 80098ae:	b21b      	sxth	r3, r3
 80098b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098b4:	b21a      	sxth	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b21b      	sxth	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	b2d9      	uxtb	r1, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	8bbb      	ldrh	r3, [r7, #28]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f88d 	bl	80099f0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80098d6:	e04e      	b.n	8009976 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80098d8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80098dc:	f7f9 f88c 	bl	80029f8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80098e0:	e043      	b.n	800996a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80098e2:	f107 030c 	add.w	r3, r7, #12
 80098e6:	4619      	mov	r1, r3
 80098e8:	4828      	ldr	r0, [pc, #160]	; (800998c <hci_send_req+0xf8>)
 80098ea:	f000 fdfa 	bl	800a4e2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	7a5b      	ldrb	r3, [r3, #9]
 80098f2:	2b0f      	cmp	r3, #15
 80098f4:	d114      	bne.n	8009920 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	330b      	adds	r3, #11
 80098fa:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	885b      	ldrh	r3, [r3, #2]
 8009900:	b29b      	uxth	r3, r3
 8009902:	8bba      	ldrh	r2, [r7, #28]
 8009904:	429a      	cmp	r2, r3
 8009906:	d104      	bne.n	8009912 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	785b      	ldrb	r3, [r3, #1]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d027      	beq.n	800996a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800991a:	2301      	movs	r3, #1
 800991c:	77fb      	strb	r3, [r7, #31]
 800991e:	e024      	b.n	800996a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	330b      	adds	r3, #11
 8009924:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800992c:	b29b      	uxth	r3, r3
 800992e:	8bba      	ldrh	r2, [r7, #28]
 8009930:	429a      	cmp	r2, r3
 8009932:	d114      	bne.n	800995e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	7a9b      	ldrb	r3, [r3, #10]
 8009938:	3b03      	subs	r3, #3
 800993a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	695a      	ldr	r2, [r3, #20]
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	429a      	cmp	r2, r3
 8009944:	bfa8      	it	ge
 8009946:	461a      	movge	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6918      	ldr	r0, [r3, #16]
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	1cd9      	adds	r1, r3, #3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	461a      	mov	r2, r3
 800995a:	f001 fc19 	bl	800b190 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009966:	2301      	movs	r3, #1
 8009968:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800996a:	4808      	ldr	r0, [pc, #32]	; (800998c <hci_send_req+0xf8>)
 800996c:	f000 fd2a 	bl	800a3c4 <LST_is_empty>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0b5      	beq.n	80098e2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009976:	7ffb      	ldrb	r3, [r7, #31]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0ad      	beq.n	80098d8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800997c:	2001      	movs	r0, #1
 800997e:	f000 f85d 	bl	8009a3c <NotifyCmdStatus>

  return 0;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	200005f0 	.word	0x200005f0

08009990 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009998:	480f      	ldr	r0, [pc, #60]	; (80099d8 <TlInit+0x48>)
 800999a:	f000 fd03 	bl	800a3a4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800999e:	4a0f      	ldr	r2, [pc, #60]	; (80099dc <TlInit+0x4c>)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80099a4:	480e      	ldr	r0, [pc, #56]	; (80099e0 <TlInit+0x50>)
 80099a6:	f000 fcfd 	bl	800a3a4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80099aa:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <TlInit+0x54>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <TlInit+0x58>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00a      	beq.n	80099ce <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80099bc:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <TlInit+0x5c>)
 80099be:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <TlInit+0x58>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f107 0208 	add.w	r2, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
  }

  return;
 80099cc:	bf00      	nop
 80099ce:	bf00      	nop
}
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	200005f0 	.word	0x200005f0
 80099dc:	20000048 	.word	0x20000048
 80099e0:	20000040 	.word	0x20000040
 80099e4:	2000004c 	.word	0x2000004c
 80099e8:	200005d0 	.word	0x200005d0
 80099ec:	08009a7d 	.word	0x08009a7d

080099f0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	603a      	str	r2, [r7, #0]
 80099fa:	80fb      	strh	r3, [r7, #6]
 80099fc:	460b      	mov	r3, r1
 80099fe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009a00:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <SendCmd+0x44>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	88fa      	ldrh	r2, [r7, #6]
 8009a06:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <SendCmd+0x44>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	797a      	ldrb	r2, [r7, #5]
 8009a10:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009a12:	4b08      	ldr	r3, [pc, #32]	; (8009a34 <SendCmd+0x44>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	330c      	adds	r3, #12
 8009a18:	797a      	ldrb	r2, [r7, #5]
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 fbb7 	bl	800b190 <memcpy>

  hciContext.io.Send(0,0);
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <SendCmd+0x48>)
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	2100      	movs	r1, #0
 8009a28:	2000      	movs	r0, #0
 8009a2a:	4798      	blx	r3

  return;
 8009a2c:	bf00      	nop
}
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000048 	.word	0x20000048
 8009a38:	200005d0 	.word	0x200005d0

08009a3c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d108      	bne.n	8009a5e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <NotifyCmdStatus+0x3c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00d      	beq.n	8009a70 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009a54:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <NotifyCmdStatus+0x3c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009a5c:	e008      	b.n	8009a70 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009a5e:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <NotifyCmdStatus+0x3c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009a66:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <NotifyCmdStatus+0x3c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	4798      	blx	r3
  return;
 8009a6e:	bf00      	nop
 8009a70:	bf00      	nop
}
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	200005f8 	.word	0x200005f8

08009a7c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	7a5b      	ldrb	r3, [r3, #9]
 8009a88:	2b0f      	cmp	r3, #15
 8009a8a:	d003      	beq.n	8009a94 <TlEvtReceived+0x18>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7a5b      	ldrb	r3, [r3, #9]
 8009a90:	2b0e      	cmp	r3, #14
 8009a92:	d107      	bne.n	8009aa4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	4809      	ldr	r0, [pc, #36]	; (8009abc <TlEvtReceived+0x40>)
 8009a98:	f000 fcdc 	bl	800a454 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7f8 ffa0 	bl	80029e2 <hci_cmd_resp_release>
 8009aa2:	e006      	b.n	8009ab2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4806      	ldr	r0, [pc, #24]	; (8009ac0 <TlEvtReceived+0x44>)
 8009aa8:	f000 fcd4 	bl	800a454 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009aac:	4804      	ldr	r0, [pc, #16]	; (8009ac0 <TlEvtReceived+0x44>)
 8009aae:	f7f8 ff8c 	bl	80029ca <hci_notify_asynch_evt>
  }

  return;
 8009ab2:	bf00      	nop
}
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	200005f0 	.word	0x200005f0
 8009ac0:	20000040 	.word	0x20000040

08009ac4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a05      	ldr	r2, [pc, #20]	; (8009ae4 <hci_register_io_bus+0x20>)
 8009ad0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a04      	ldr	r2, [pc, #16]	; (8009ae8 <hci_register_io_bus+0x24>)
 8009ad6:	611a      	str	r2, [r3, #16]

  return;
 8009ad8:	bf00      	nop
}
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	0800a7cd 	.word	0x0800a7cd
 8009ae8:	0800a835 	.word	0x0800a835

08009aec <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08e      	sub	sp, #56	; 0x38
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3301      	adds	r3, #1
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2bff      	cmp	r3, #255	; 0xff
 8009b06:	d174      	bne.n	8009bf2 <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	3302      	adds	r3, #2
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	f640 4201 	movw	r2, #3073	; 0xc01
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d03f      	beq.n	8009b9c <HeartRate_Event_Handler+0xb0>
 8009b1c:	f640 4213 	movw	r2, #3091	; 0xc13
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d160      	bne.n	8009be6 <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	3302      	adds	r3, #2
 8009b28:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b33      	ldr	r3, [pc, #204]	; (8009c00 <HeartRate_Event_Handler+0x114>)
 8009b34:	88db      	ldrh	r3, [r3, #6]
 8009b36:	3301      	adds	r3, #1
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d156      	bne.n	8009bea <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	795b      	ldrb	r3, [r3, #5]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d117      	bne.n	8009b7a <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b298      	uxth	r0, r3
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	885b      	ldrh	r3, [r3, #2]
 8009b54:	b299      	uxth	r1, r3
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 8009b5a:	6a3a      	ldr	r2, [r7, #32]
 8009b5c:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009b5e:	9201      	str	r2, [sp, #4]
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	2300      	movs	r3, #0
 8009b64:	2200      	movs	r2, #0
 8009b66:	f7ff fa77 	bl	8009058 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8009b6e:	f107 030c 	add.w	r3, r7, #12
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f8 ff96 	bl	8002aa4 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 8009b78:	e037      	b.n	8009bea <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b298      	uxth	r0, r3
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	885b      	ldrh	r3, [r3, #2]
 8009b84:	b299      	uxth	r1, r3
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 8009b8a:	6a3a      	ldr	r2, [r7, #32]
 8009b8c:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8009b8e:	9201      	str	r2, [sp, #4]
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2380      	movs	r3, #128	; 0x80
 8009b94:	2201      	movs	r2, #1
 8009b96:	f7ff fa5f 	bl	8009058 <aci_gatt_write_resp>
        break;
 8009b9a:	e026      	b.n	8009bea <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	885b      	ldrh	r3, [r3, #2]
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4b15      	ldr	r3, [pc, #84]	; (8009c00 <HeartRate_Event_Handler+0x114>)
 8009bac:	885b      	ldrh	r3, [r3, #2]
 8009bae:	3302      	adds	r3, #2
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d11c      	bne.n	8009bee <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	7a1b      	ldrb	r3, [r3, #8]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8009bca:	f107 030c 	add.w	r3, r7, #12
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f8 ff68 	bl	8002aa4 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 8009bd4:	e00b      	b.n	8009bee <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8009bda:	f107 030c 	add.w	r3, r7, #12
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f8 ff60 	bl	8002aa4 <HRS_Notification>
        break;
 8009be4:	e003      	b.n	8009bee <HeartRate_Event_Handler+0x102>

        default:
          break;
 8009be6:	bf00      	nop
 8009be8:	e004      	b.n	8009bf4 <HeartRate_Event_Handler+0x108>
        break;
 8009bea:	bf00      	nop
 8009bec:	e002      	b.n	8009bf4 <HeartRate_Event_Handler+0x108>
        break;
 8009bee:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009bf0:	e000      	b.n	8009bf4 <HeartRate_Event_Handler+0x108>

    default:
      break;
 8009bf2:	bf00      	nop
  }

  return(return_value);
 8009bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3730      	adds	r7, #48	; 0x30
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20000050 	.word	0x20000050

08009c04 <Update_Char_BodySensorLocation>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_BodySensorLocation(HRS_BodySensorLocation_t *pBodySensorLocationValue)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	6078      	str	r0, [r7, #4]
  tBleStatus return_value = BLE_STATUS_SUCCESS;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8009c10:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <Update_Char_BodySensorLocation+0x30>)
 8009c12:	8818      	ldrh	r0, [r3, #0]
 8009c14:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <Update_Char_BodySensorLocation+0x30>)
 8009c16:	8899      	ldrh	r1, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f7ff f971 	bl	8008f06 <aci_gatt_update_char_value>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
                                            HRS_Context.BodySensorLocationCharHdle,
                                            0, /* charValOffset */
                                            1, /* charValueLen */
                                            (uint8_t *) pBodySensorLocationValue);
  return return_value;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_BodySensorLocation() */
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20000050 	.word	0x20000050

08009c38 <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HRS_MeasVal_t *pMeasurement )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 8009c40:	2300      	movs	r3, #0
 8009c42:	753b      	strb	r3, [r7, #20]
  uint8_t hrm_char_length;

  /**
   * Flags update
   */
  ahrm_value[0] = (uint8_t)pMeasurement->Flags;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7a5b      	ldrb	r3, [r3, #9]
 8009c48:	733b      	strb	r3, [r7, #12]
  hrm_char_length = 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]

  /**
   *  Heart Rate Measurement Value
   */
  if ( (pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16 )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7a5b      	ldrb	r3, [r3, #9]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d018      	beq.n	8009c8c <Update_Char_Measurement+0x54>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue & 0xFF);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	3318      	adds	r3, #24
 8009c64:	443b      	add	r3, r7
 8009c66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue >> 8);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	0a1b      	lsrs	r3, r3, #8
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	3318      	adds	r3, #24
 8009c7e:	443b      	add	r3, r7
 8009c80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	3301      	adds	r3, #1
 8009c88:	75fb      	strb	r3, [r7, #23]
 8009c8a:	e00a      	b.n	8009ca2 <Update_Char_Measurement+0x6a>
  }
  else
  {
    ahrm_value[hrm_char_length] = (uint8_t)pMeasurement->MeasurementValue;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	881a      	ldrh	r2, [r3, #0]
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	3318      	adds	r3, #24
 8009c96:	443b      	add	r3, r7
 8009c98:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  /**
   *  Energy Expended
   */
  if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7a5b      	ldrb	r3, [r3, #9]
 8009ca6:	f003 0308 	and.w	r3, r3, #8
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d017      	beq.n	8009cde <Update_Char_Measurement+0xa6>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended & 0xFF);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	885a      	ldrh	r2, [r3, #2]
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	b2d2      	uxtb	r2, r2
 8009cb6:	3318      	adds	r3, #24
 8009cb8:	443b      	add	r3, r7
 8009cba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended >> 8);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	3318      	adds	r3, #24
 8009cd2:	443b      	add	r3, r7
 8009cd4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  /**
   *  RR Interval Values
   */
  if ((pMeasurement->Flags) &  HRS_HRM_RR_INTERVAL_PRESENT)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7a5b      	ldrb	r3, [r3, #9]
 8009ce2:	f003 0310 	and.w	r3, r3, #16
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d048      	beq.n	8009d7c <Update_Char_Measurement+0x144>
  {
    uint8_t index;
    uint8_t rr_interval_number;

    if((pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	7a5b      	ldrb	r3, [r3, #9]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00d      	beq.n	8009d12 <Update_Char_Measurement+0xda>
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	7a5b      	ldrb	r3, [r3, #9]
 8009cfa:	f003 0308 	and.w	r3, r3, #8
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <Update_Char_Measurement+0xd2>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-2);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	7a1b      	ldrb	r3, [r3, #8]
 8009d06:	757b      	strb	r3, [r7, #21]
 8009d08:	e010      	b.n	8009d2c <Update_Char_Measurement+0xf4>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	7a1b      	ldrb	r3, [r3, #8]
 8009d0e:	757b      	strb	r3, [r7, #21]
 8009d10:	e00c      	b.n	8009d2c <Update_Char_Measurement+0xf4>
#endif
    }
    else
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7a5b      	ldrb	r3, [r3, #9]
 8009d16:	f003 0308 	and.w	r3, r3, #8
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <Update_Char_Measurement+0xee>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7a1b      	ldrb	r3, [r3, #8]
 8009d22:	757b      	strb	r3, [r7, #21]
 8009d24:	e002      	b.n	8009d2c <Update_Char_Measurement+0xf4>
        }
      }
      else
      {
        rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	7a1b      	ldrb	r3, [r3, #8]
 8009d2a:	757b      	strb	r3, [r7, #21]
#else /**< (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0) */
      rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
#endif
    }

    for ( index = 0 ; index < rr_interval_number ; index++ )
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75bb      	strb	r3, [r7, #22]
 8009d30:	e020      	b.n	8009d74 <Update_Char_Measurement+0x13c>
    {
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] & 0xFF);
 8009d32:	7dbb      	ldrb	r3, [r7, #22]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	4413      	add	r3, r2
 8009d3a:	889a      	ldrh	r2, [r3, #4]
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	3318      	adds	r3, #24
 8009d42:	443b      	add	r3, r7
 8009d44:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] >> 8);
 8009d4e:	7dbb      	ldrb	r3, [r7, #22]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	4413      	add	r3, r2
 8009d56:	889b      	ldrh	r3, [r3, #4]
 8009d58:	0a1b      	lsrs	r3, r3, #8
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	3318      	adds	r3, #24
 8009d62:	443b      	add	r3, r7
 8009d64:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	75fb      	strb	r3, [r7, #23]
    for ( index = 0 ; index < rr_interval_number ; index++ )
 8009d6e:	7dbb      	ldrb	r3, [r7, #22]
 8009d70:	3301      	adds	r3, #1
 8009d72:	75bb      	strb	r3, [r7, #22]
 8009d74:	7dba      	ldrb	r2, [r7, #22]
 8009d76:	7d7b      	ldrb	r3, [r7, #21]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d3da      	bcc.n	8009d32 <Update_Char_Measurement+0xfa>
    }
  }

#endif  /**< (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0) */

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8009d7c:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <Update_Char_Measurement+0x16c>)
 8009d7e:	8818      	ldrh	r0, [r3, #0]
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <Update_Char_Measurement+0x16c>)
 8009d82:	8859      	ldrh	r1, [r3, #2]
 8009d84:	7dfa      	ldrb	r2, [r7, #23]
 8009d86:	f107 030c 	add.w	r3, r7, #12
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7ff f8b9 	bl	8008f06 <aci_gatt_update_char_value>
 8009d94:	4603      	mov	r3, r0
 8009d96:	753b      	strb	r3, [r7, #20]
                                            HRS_Context.HeartRatemeasurementCharHdle,
                                            0, /* charValOffset */
                                            hrm_char_length, /* charValueLen */
                                            (uint8_t *) &ahrm_value[0]);

  return return_value;
 8009d98:	7d3b      	ldrb	r3, [r7, #20]
}/* end Update_Char_Measurement() */
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000050 	.word	0x20000050

08009da8 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8009dae:	2300      	movs	r3, #0
 8009db0:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 8009db2:	482e      	ldr	r0, [pc, #184]	; (8009e6c <HRS_Init+0xc4>)
 8009db4:	f000 fc5c 	bl	800a670 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 8009db8:	f641 030d 	movw	r3, #6157	; 0x180d
 8009dbc:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8009dbe:	1d39      	adds	r1, r7, #4
 8009dc0:	4b2b      	ldr	r3, [pc, #172]	; (8009e70 <HRS_Init+0xc8>)
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	2001      	movs	r0, #1
 8009dca:	f7fe febe 	bl	8008b4a <aci_gatt_add_service>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 8009dd2:	f642 2337 	movw	r3, #10807	; 0x2a37
 8009dd6:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8009dd8:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <HRS_Init+0xc8>)
 8009dda:	8818      	ldrh	r0, [r3, #0]
 8009ddc:	1d3a      	adds	r2, r7, #4
 8009dde:	4b25      	ldr	r3, [pc, #148]	; (8009e74 <HRS_Init+0xcc>)
 8009de0:	9305      	str	r3, [sp, #20]
 8009de2:	2301      	movs	r3, #1
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	230a      	movs	r3, #10
 8009de8:	9303      	str	r3, [sp, #12]
 8009dea:	2300      	movs	r3, #0
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	2300      	movs	r3, #0
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	2310      	movs	r3, #16
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	2307      	movs	r3, #7
 8009df8:	2101      	movs	r1, #1
 8009dfa:	f7fe ff7c 	bl	8008cf6 <aci_gatt_add_char>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 8009e02:	f642 2338 	movw	r3, #10808	; 0x2a38
 8009e06:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8009e08:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <HRS_Init+0xc8>)
 8009e0a:	8818      	ldrh	r0, [r3, #0]
 8009e0c:	1d3a      	adds	r2, r7, #4
 8009e0e:	4b1a      	ldr	r3, [pc, #104]	; (8009e78 <HRS_Init+0xd0>)
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	230a      	movs	r3, #10
 8009e18:	9303      	str	r3, [sp, #12]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9302      	str	r3, [sp, #8]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	2302      	movs	r3, #2
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	2301      	movs	r3, #1
 8009e28:	2101      	movs	r1, #1
 8009e2a:	f7fe ff64 	bl	8008cf6 <aci_gatt_add_char>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 8009e32:	f642 2339 	movw	r3, #10809	; 0x2a39
 8009e36:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8009e38:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <HRS_Init+0xc8>)
 8009e3a:	8818      	ldrh	r0, [r3, #0]
 8009e3c:	1d3a      	adds	r2, r7, #4
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <HRS_Init+0xd4>)
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	2300      	movs	r3, #0
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	230a      	movs	r3, #10
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	2308      	movs	r3, #8
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	2301      	movs	r3, #1
 8009e58:	2101      	movs	r1, #1
 8009e5a:	f7fe ff4c 	bl	8008cf6 <aci_gatt_add_char>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 8009e62:	bf00      	nop
}
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	08009aed 	.word	0x08009aed
 8009e70:	20000050 	.word	0x20000050
 8009e74:	20000052 	.word	0x20000052
 8009e78:	20000054 	.word	0x20000054
 8009e7c:	20000056 	.word	0x20000056

08009e80 <HRS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HRS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	6039      	str	r1, [r7, #0]
 8009e8a:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009e90:	88fb      	ldrh	r3, [r7, #6]
 8009e92:	f642 2237 	movw	r2, #10807	; 0x2a37
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d009      	beq.n	8009eae <HRS_UpdateChar+0x2e>
 8009e9a:	f642 2238 	movw	r2, #10808	; 0x2a38
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d10b      	bne.n	8009eba <HRS_UpdateChar+0x3a>
  {
#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
    case SENSOR_LOCATION_UUID:
      return_value = Update_Char_BodySensorLocation((HRS_BodySensorLocation_t*)pPayload);
 8009ea2:	6838      	ldr	r0, [r7, #0]
 8009ea4:	f7ff feae 	bl	8009c04 <Update_Char_BodySensorLocation>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009eac:	e006      	b.n	8009ebc <HRS_UpdateChar+0x3c>
#endif
    case HEART_RATE_MEASURMENT_UUID:
      return_value = Update_Char_Measurement((HRS_MeasVal_t*)pPayload);
 8009eae:	6838      	ldr	r0, [r7, #0]
 8009eb0:	f7ff fec2 	bl	8009c38 <Update_Char_Measurement>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb8:	e000      	b.n	8009ebc <HRS_UpdateChar+0x3c>

    default:
      break;
 8009eba:	bf00      	nop
  }

  return return_value;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}/* end HRS_UpdateChar() */
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f001 f95a 	bl	800b190 <memcpy>
 8009edc:	4603      	mov	r3, r0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	68b9      	ldr	r1, [r7, #8]
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f001 f958 	bl	800b1ac <memset>
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <OTP_Read+0x48>)
 8009f14:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f16:	e002      	b.n	8009f1e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3b08      	subs	r3, #8
 8009f1c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3307      	adds	r3, #7
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	79fa      	ldrb	r2, [r7, #7]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d003      	beq.n	8009f32 <OTP_Read+0x2a>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <OTP_Read+0x4c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d1f2      	bne.n	8009f18 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3307      	adds	r3, #7
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d001      	beq.n	8009f42 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009f42:	68fb      	ldr	r3, [r7, #12]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	1fff73f8 	.word	0x1fff73f8
 8009f54:	1fff7000 	.word	0x1fff7000

08009f58 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	212e      	movs	r1, #46	; 0x2e
 8009f70:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009f74:	f000 f94c 	bl	800a210 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	330b      	adds	r3, #11
 8009f7c:	78db      	ldrb	r3, [r3, #3]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3720      	adds	r7, #32
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b088      	sub	sp, #32
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009f8e:	f107 030c 	add.w	r3, r7, #12
 8009f92:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	210f      	movs	r1, #15
 8009f9e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009fa2:	f000 f935 	bl	800a210 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	330b      	adds	r3, #11
 8009faa:	78db      	ldrb	r3, [r3, #3]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3720      	adds	r7, #32
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009fbc:	f107 030c 	add.w	r3, r7, #12
 8009fc0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	2110      	movs	r1, #16
 8009fc8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009fcc:	f000 f920 	bl	800a210 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	330b      	adds	r3, #11
 8009fd4:	78db      	ldrb	r3, [r3, #3]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b08b      	sub	sp, #44	; 0x2c
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a008:	4b4a      	ldr	r3, [pc, #296]	; (800a134 <SHCI_GetWirelessFwInfo+0x154>)
 800a00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a010:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a01a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a44      	ldr	r2, [pc, #272]	; (800a138 <SHCI_GetWirelessFwInfo+0x158>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d10f      	bne.n	800a04c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	e01a      	b.n	800a082 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a054:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a058:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	0e1b      	lsrs	r3, r3, #24
 800a086:	b2da      	uxtb	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	0c1b      	lsrs	r3, r3, #16
 800a090:	b2da      	uxtb	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	0a1b      	lsrs	r3, r3, #8
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	091b      	lsrs	r3, r3, #4
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	0e1b      	lsrs	r3, r3, #24
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	0c1b      	lsrs	r3, r3, #16
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	0a1b      	lsrs	r3, r3, #8
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	0e1b      	lsrs	r3, r3, #24
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	0c1b      	lsrs	r3, r3, #16
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	0a1b      	lsrs	r3, r3, #8
 800a104:	b2da      	uxtb	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	0e1b      	lsrs	r3, r3, #24
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	0c1b      	lsrs	r3, r3, #16
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	b2da      	uxtb	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	372c      	adds	r7, #44	; 0x2c
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	58004000 	.word	0x58004000
 800a138:	a94656b9 	.word	0xa94656b9

0800a13c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	4a08      	ldr	r2, [pc, #32]	; (800a16c <shci_init+0x30>)
 800a14c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a14e:	4a08      	ldr	r2, [pc, #32]	; (800a170 <shci_init+0x34>)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a154:	4806      	ldr	r0, [pc, #24]	; (800a170 <shci_init+0x34>)
 800a156:	f000 f911 	bl	800a37c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f894 	bl	800a28c <TlInit>

  return;
 800a164:	bf00      	nop
}
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	2000061c 	.word	0x2000061c
 800a170:	200005fc 	.word	0x200005fc

0800a174 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a17a:	4822      	ldr	r0, [pc, #136]	; (800a204 <shci_user_evt_proc+0x90>)
 800a17c:	f000 f922 	bl	800a3c4 <LST_is_empty>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d12b      	bne.n	800a1de <shci_user_evt_proc+0x6a>
 800a186:	4b20      	ldr	r3, [pc, #128]	; (800a208 <shci_user_evt_proc+0x94>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d027      	beq.n	800a1de <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a18e:	f107 030c 	add.w	r3, r7, #12
 800a192:	4619      	mov	r1, r3
 800a194:	481b      	ldr	r0, [pc, #108]	; (800a204 <shci_user_evt_proc+0x90>)
 800a196:	f000 f9a4 	bl	800a4e2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a19a:	4b1c      	ldr	r3, [pc, #112]	; (800a20c <shci_user_evt_proc+0x98>)
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00c      	beq.n	800a1bc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a1aa:	4b18      	ldr	r3, [pc, #96]	; (800a20c <shci_user_evt_proc+0x98>)
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	1d3a      	adds	r2, r7, #4
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a1b4:	793a      	ldrb	r2, [r7, #4]
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <shci_user_evt_proc+0x94>)
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a1bc:	4b12      	ldr	r3, [pc, #72]	; (800a208 <shci_user_evt_proc+0x94>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <shci_user_evt_proc+0x94>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d004      	beq.n	800a1d4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fc41 	bl	800aa54 <TL_MM_EvtDone>
 800a1d2:	e004      	b.n	800a1de <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	480a      	ldr	r0, [pc, #40]	; (800a204 <shci_user_evt_proc+0x90>)
 800a1da:	f000 f915 	bl	800a408 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a1de:	4809      	ldr	r0, [pc, #36]	; (800a204 <shci_user_evt_proc+0x90>)
 800a1e0:	f000 f8f0 	bl	800a3c4 <LST_is_empty>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d107      	bne.n	800a1fa <shci_user_evt_proc+0x86>
 800a1ea:	4b07      	ldr	r3, [pc, #28]	; (800a208 <shci_user_evt_proc+0x94>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a1f2:	4804      	ldr	r0, [pc, #16]	; (800a204 <shci_user_evt_proc+0x90>)
 800a1f4:	f7f6 fb4c 	bl	8000890 <shci_notify_asynch_evt>
  }


  return;
 800a1f8:	bf00      	nop
 800a1fa:	bf00      	nop
}
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	2000007c 	.word	0x2000007c
 800a208:	2000008c 	.word	0x2000008c
 800a20c:	200005fc 	.word	0x200005fc

0800a210 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60ba      	str	r2, [r7, #8]
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	4603      	mov	r3, r0
 800a21c:	81fb      	strh	r3, [r7, #14]
 800a21e:	460b      	mov	r3, r1
 800a220:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a222:	2000      	movs	r0, #0
 800a224:	f000 f864 	bl	800a2f0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a228:	4b16      	ldr	r3, [pc, #88]	; (800a284 <shci_send+0x74>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	89fa      	ldrh	r2, [r7, #14]
 800a22e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a232:	4b14      	ldr	r3, [pc, #80]	; (800a284 <shci_send+0x74>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	7b7a      	ldrb	r2, [r7, #13]
 800a238:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a23a:	4b12      	ldr	r3, [pc, #72]	; (800a284 <shci_send+0x74>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	330c      	adds	r3, #12
 800a240:	7b7a      	ldrb	r2, [r7, #13]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 ffa3 	bl	800b190 <memcpy>

  shciContext.io.Send(0,0);
 800a24a:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <shci_send+0x78>)
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2100      	movs	r1, #0
 800a250:	2000      	movs	r0, #0
 800a252:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a254:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a258:	f7f6 fb31 	bl	80008be <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f103 0008 	add.w	r0, r3, #8
 800a262:	4b08      	ldr	r3, [pc, #32]	; (800a284 <shci_send+0x74>)
 800a264:	6819      	ldr	r1, [r3, #0]
 800a266:	4b07      	ldr	r3, [pc, #28]	; (800a284 <shci_send+0x74>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	789b      	ldrb	r3, [r3, #2]
 800a26c:	3303      	adds	r3, #3
 800a26e:	461a      	mov	r2, r3
 800a270:	f000 ff8e 	bl	800b190 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a274:	2001      	movs	r0, #1
 800a276:	f000 f83b 	bl	800a2f0 <Cmd_SetStatus>

  return;
 800a27a:	bf00      	nop
}
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000088 	.word	0x20000088
 800a288:	200005fc 	.word	0x200005fc

0800a28c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a294:	4a10      	ldr	r2, [pc, #64]	; (800a2d8 <TlInit+0x4c>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a29a:	4810      	ldr	r0, [pc, #64]	; (800a2dc <TlInit+0x50>)
 800a29c:	f000 f882 	bl	800a3a4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	f000 f825 	bl	800a2f0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a2a6:	4b0e      	ldr	r3, [pc, #56]	; (800a2e0 <TlInit+0x54>)
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <TlInit+0x58>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00c      	beq.n	800a2ce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a2b8:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <TlInit+0x5c>)
 800a2ba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <TlInit+0x60>)
 800a2be:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a2c0:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <TlInit+0x58>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f107 020c 	add.w	r2, r7, #12
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	4798      	blx	r3
  }

  return;
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
}
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000088 	.word	0x20000088
 800a2dc:	2000007c 	.word	0x2000007c
 800a2e0:	2000008c 	.word	0x2000008c
 800a2e4:	200005fc 	.word	0x200005fc
 800a2e8:	0800a341 	.word	0x0800a341
 800a2ec:	0800a359 	.word	0x0800a359

0800a2f0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <Cmd_SetStatus+0x48>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a308:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <Cmd_SetStatus+0x48>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2000      	movs	r0, #0
 800a30e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a310:	4b0a      	ldr	r3, [pc, #40]	; (800a33c <Cmd_SetStatus+0x4c>)
 800a312:	2200      	movs	r2, #0
 800a314:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a316:	e00b      	b.n	800a330 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a318:	4b08      	ldr	r3, [pc, #32]	; (800a33c <Cmd_SetStatus+0x4c>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a31e:	4b06      	ldr	r3, [pc, #24]	; (800a338 <Cmd_SetStatus+0x48>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a326:	4b04      	ldr	r3, [pc, #16]	; (800a338 <Cmd_SetStatus+0x48>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2001      	movs	r0, #1
 800a32c:	4798      	blx	r3
  return;
 800a32e:	bf00      	nop
 800a330:	bf00      	nop
}
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	2000061c 	.word	0x2000061c
 800a33c:	20000084 	.word	0x20000084

0800a340 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a348:	2000      	movs	r0, #0
 800a34a:	f7f6 faad 	bl	80008a8 <shci_cmd_resp_release>

  return;
 800a34e:	bf00      	nop
}
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	4805      	ldr	r0, [pc, #20]	; (800a378 <TlUserEvtReceived+0x20>)
 800a364:	f000 f876 	bl	800a454 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a368:	4803      	ldr	r0, [pc, #12]	; (800a378 <TlUserEvtReceived+0x20>)
 800a36a:	f7f6 fa91 	bl	8000890 <shci_notify_asynch_evt>

  return;
 800a36e:	bf00      	nop
}
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	2000007c 	.word	0x2000007c

0800a37c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a05      	ldr	r2, [pc, #20]	; (800a39c <shci_register_io_bus+0x20>)
 800a388:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a04      	ldr	r2, [pc, #16]	; (800a3a0 <shci_register_io_bus+0x24>)
 800a38e:	611a      	str	r2, [r3, #16]

  return;
 800a390:	bf00      	nop
}
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	0800a8e1 	.word	0x0800a8e1
 800a3a0:	0800a935 	.word	0x0800a935

0800a3a4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	605a      	str	r2, [r3, #4]
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3d6:	b672      	cpsid	i
}
 800a3d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d102      	bne.n	800a3ea <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	75fb      	strb	r3, [r7, #23]
 800a3e8:	e001      	b.n	800a3ee <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f383 8810 	msr	PRIMASK, r3
}
 800a3f8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	371c      	adds	r7, #28
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a412:	f3ef 8310 	mrs	r3, PRIMASK
 800a416:	60fb      	str	r3, [r7, #12]
  return(result);
 800a418:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a41a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a41c:	b672      	cpsid	i
}
 800a41e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	605a      	str	r2, [r3, #4]
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f383 8810 	msr	PRIMASK, r3
}
 800a446:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a448:	bf00      	nop
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a45e:	f3ef 8310 	mrs	r3, PRIMASK
 800a462:	60fb      	str	r3, [r7, #12]
  return(result);
 800a464:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a468:	b672      	cpsid	i
}
 800a46a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f383 8810 	msr	PRIMASK, r3
}
 800a492:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a494:	bf00      	nop
 800a496:	371c      	adds	r7, #28
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4b2:	b672      	cpsid	i
}
 800a4b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6852      	ldr	r2, [r2, #4]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f383 8810 	msr	PRIMASK, r3
}
 800a4d4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a4d6:	bf00      	nop
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a4f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4f6:	b672      	cpsid	i
}
 800a4f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff ffca 	bl	800a4a0 <LST_remove_node>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f383 8810 	msr	PRIMASK, r3
}
 800a516:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a518:	bf00      	nop
 800a51a:	3718      	adds	r7, #24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
  return;
 800a524:	bf00      	nop
}
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a52e:	b480      	push	{r7}
 800a530:	af00      	add	r7, sp, #0
  return;
 800a532:	bf00      	nop
}
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
  return;
 800a540:	bf00      	nop
}
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800a54a:	b480      	push	{r7}
 800a54c:	af00      	add	r7, sp, #0
  return;
 800a54e:	bf00      	nop
}
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a558:	b480      	push	{r7}
 800a55a:	af00      	add	r7, sp, #0
  return;
 800a55c:	bf00      	nop
}
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 800a566:	b480      	push	{r7}
 800a568:	af00      	add	r7, sp, #0
  return;
 800a56a:	bf00      	nop
}
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  return;
 800a578:	bf00      	nop
}
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a582:	b480      	push	{r7}
 800a584:	af00      	add	r7, sp, #0
  return;
 800a586:	bf00      	nop
}
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
  return;
 800a594:	bf00      	nop
}
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a59e:	b480      	push	{r7}
 800a5a0:	af00      	add	r7, sp, #0
  return;
 800a5a2:	bf00      	nop
}
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
  return;
 800a5b0:	bf00      	nop
}
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0
  return;
 800a5be:	bf00      	nop
}
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
  return;
 800a5cc:	bf00      	nop
}
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	af00      	add	r7, sp, #0
  return;
 800a5da:	bf00      	nop
}
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0
  return;
 800a5e8:	bf00      	nop
}
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	af00      	add	r7, sp, #0
  return;
 800a5f6:	bf00      	nop
}
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a604:	4b04      	ldr	r3, [pc, #16]	; (800a618 <SVCCTL_Init+0x18>)
 800a606:	2200      	movs	r2, #0
 800a608:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a60a:	4b04      	ldr	r3, [pc, #16]	; (800a61c <SVCCTL_Init+0x1c>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a610:	f000 f806 	bl	800a620 <SVCCTL_SvcInit>

  return;
 800a614:	bf00      	nop
}
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000058 	.word	0x20000058
 800a61c:	20000078 	.word	0x20000078

0800a620 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  BAS_Init();
 800a624:	f7ff ff7c 	bl	800a520 <BAS_Init>

  BLS_Init();
 800a628:	f7ff ff81 	bl	800a52e <BLS_Init>

  CRS_STM_Init();
 800a62c:	f7ff ff86 	bl	800a53c <CRS_STM_Init>

  DIS_Init();
 800a630:	f7ff f86a 	bl	8009708 <DIS_Init>

  EDS_STM_Init();
 800a634:	f7ff ff89 	bl	800a54a <EDS_STM_Init>

  HIDS_Init();
 800a638:	f7ff ff8e 	bl	800a558 <HIDS_Init>

  HRS_Init();
 800a63c:	f7ff fbb4 	bl	8009da8 <HRS_Init>

  HTS_Init();
 800a640:	f7ff ff91 	bl	800a566 <HTS_Init>

  IAS_Init();
 800a644:	f7ff ff96 	bl	800a574 <IAS_Init>

  LLS_Init();
 800a648:	f7ff ff9b 	bl	800a582 <LLS_Init>

  TPS_Init();
 800a64c:	f7ff ffa0 	bl	800a590 <TPS_Init>

  MOTENV_STM_Init();
 800a650:	f7ff ffa5 	bl	800a59e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a654:	f7ff ffaa 	bl	800a5ac <P2PS_STM_Init>

  ZDD_STM_Init();
 800a658:	f7ff ffaf 	bl	800a5ba <ZDD_STM_Init>

  OTAS_STM_Init();
 800a65c:	f7ff ffb4 	bl	800a5c8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a660:	f7ff ffc0 	bl	800a5e4 <BVOPUS_STM_Init>

  MESH_Init();
 800a664:	f7ff ffb7 	bl	800a5d6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a668:	f7ff ffc3 	bl	800a5f2 <SVCCTL_InitCustomSvc>
  
  return;
 800a66c:	bf00      	nop
}
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a678:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a67a:	7f1b      	ldrb	r3, [r3, #28]
 800a67c:	4619      	mov	r1, r3
 800a67e:	4a08      	ldr	r2, [pc, #32]	; (800a6a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a686:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a688:	7f1b      	ldrb	r3, [r3, #28]
 800a68a:	3301      	adds	r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a690:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a692:	bf00      	nop
}
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	20000058 	.word	0x20000058

0800a6a4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2bff      	cmp	r3, #255	; 0xff
 800a6bc:	d125      	bne.n	800a70a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a6ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6d2:	d118      	bne.n	800a706 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	757b      	strb	r3, [r7, #21]
 800a6d8:	e00d      	b.n	800a6f6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a6da:	7d7b      	ldrb	r3, [r7, #21]
 800a6dc:	4a1a      	ldr	r2, [pc, #104]	; (800a748 <SVCCTL_UserEvtRx+0xa4>)
 800a6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d108      	bne.n	800a702 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a6f0:	7d7b      	ldrb	r3, [r7, #21]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	757b      	strb	r3, [r7, #21]
 800a6f6:	4b14      	ldr	r3, [pc, #80]	; (800a748 <SVCCTL_UserEvtRx+0xa4>)
 800a6f8:	7f1b      	ldrb	r3, [r3, #28]
 800a6fa:	7d7a      	ldrb	r2, [r7, #21]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3ec      	bcc.n	800a6da <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a700:	e002      	b.n	800a708 <SVCCTL_UserEvtRx+0x64>
              break;
 800a702:	bf00      	nop
          break;
 800a704:	e000      	b.n	800a708 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a706:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a708:	e000      	b.n	800a70c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a70a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d00f      	beq.n	800a732 <SVCCTL_UserEvtRx+0x8e>
 800a712:	2b02      	cmp	r3, #2
 800a714:	dc10      	bgt.n	800a738 <SVCCTL_UserEvtRx+0x94>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <SVCCTL_UserEvtRx+0x7c>
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d006      	beq.n	800a72c <SVCCTL_UserEvtRx+0x88>
 800a71e:	e00b      	b.n	800a738 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7f7 fe65 	bl	80023f0 <SVCCTL_App_Notification>
 800a726:	4603      	mov	r3, r0
 800a728:	75bb      	strb	r3, [r7, #22]
      break;
 800a72a:	e008      	b.n	800a73e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a72c:	2301      	movs	r3, #1
 800a72e:	75bb      	strb	r3, [r7, #22]
      break;
 800a730:	e005      	b.n	800a73e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a732:	2300      	movs	r3, #0
 800a734:	75bb      	strb	r3, [r7, #22]
      break;
 800a736:	e002      	b.n	800a73e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a738:	2301      	movs	r3, #1
 800a73a:	75bb      	strb	r3, [r7, #22]
      break;
 800a73c:	bf00      	nop
  }

  return (return_status);
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	20000058 	.word	0x20000058

0800a74c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a750:	f7f8 fbe6 	bl	8002f20 <HW_IPCC_Enable>

  return;
 800a754:	bf00      	nop
}
 800a756:	bd80      	pop	{r7, pc}

0800a758 <TL_Init>:


void TL_Init( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a75c:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <TL_Init+0x48>)
 800a75e:	4a11      	ldr	r2, [pc, #68]	; (800a7a4 <TL_Init+0x4c>)
 800a760:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <TL_Init+0x48>)
 800a764:	4a10      	ldr	r2, [pc, #64]	; (800a7a8 <TL_Init+0x50>)
 800a766:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <TL_Init+0x48>)
 800a76a:	4a10      	ldr	r2, [pc, #64]	; (800a7ac <TL_Init+0x54>)
 800a76c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a76e:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <TL_Init+0x48>)
 800a770:	4a0f      	ldr	r2, [pc, #60]	; (800a7b0 <TL_Init+0x58>)
 800a772:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a774:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <TL_Init+0x48>)
 800a776:	4a0f      	ldr	r2, [pc, #60]	; (800a7b4 <TL_Init+0x5c>)
 800a778:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <TL_Init+0x48>)
 800a77c:	4a0e      	ldr	r2, [pc, #56]	; (800a7b8 <TL_Init+0x60>)
 800a77e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <TL_Init+0x48>)
 800a782:	4a0e      	ldr	r2, [pc, #56]	; (800a7bc <TL_Init+0x64>)
 800a784:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a786:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <TL_Init+0x48>)
 800a788:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <TL_Init+0x68>)
 800a78a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a78c:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <TL_Init+0x48>)
 800a78e:	4a0d      	ldr	r2, [pc, #52]	; (800a7c4 <TL_Init+0x6c>)
 800a790:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a792:	4b03      	ldr	r3, [pc, #12]	; (800a7a0 <TL_Init+0x48>)
 800a794:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <TL_Init+0x70>)
 800a796:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a798:	f7f8 fbd6 	bl	8002f48 <HW_IPCC_Init>

  return;
 800a79c:	bf00      	nop
}
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20030000 	.word	0x20030000
 800a7a4:	20030134 	.word	0x20030134
 800a7a8:	20030154 	.word	0x20030154
 800a7ac:	20030164 	.word	0x20030164
 800a7b0:	20030174 	.word	0x20030174
 800a7b4:	2003017c 	.word	0x2003017c
 800a7b8:	20030184 	.word	0x20030184
 800a7bc:	2003018c 	.word	0x2003018c
 800a7c0:	200301a8 	.word	0x200301a8
 800a7c4:	200301ac 	.word	0x200301ac
 800a7c8:	200301b8 	.word	0x200301b8

0800a7cc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a7d8:	4811      	ldr	r0, [pc, #68]	; (800a820 <TL_BLE_Init+0x54>)
 800a7da:	f7ff fde3 	bl	800a3a4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a7de:	4b11      	ldr	r3, [pc, #68]	; (800a824 <TL_BLE_Init+0x58>)
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	; (800a828 <TL_BLE_Init+0x5c>)
 800a7f8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	4a08      	ldr	r2, [pc, #32]	; (800a820 <TL_BLE_Init+0x54>)
 800a7fe:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a800:	f7f8 fbb8 	bl	8002f74 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a08      	ldr	r2, [pc, #32]	; (800a82c <TL_BLE_Init+0x60>)
 800a80a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	4a07      	ldr	r2, [pc, #28]	; (800a830 <TL_BLE_Init+0x64>)
 800a812:	6013      	str	r3, [r2, #0]

  return 0;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	200301d4 	.word	0x200301d4
 800a824:	20030000 	.word	0x20030000
 800a828:	20030a58 	.word	0x20030a58
 800a82c:	20000628 	.word	0x20000628
 800a830:	2000062c 	.word	0x2000062c

0800a834 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a840:	4b09      	ldr	r3, [pc, #36]	; (800a868 <TL_BLE_SendCmd+0x34>)
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2201      	movs	r2, #1
 800a848:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <TL_BLE_SendCmd+0x34>)
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4619      	mov	r1, r3
 800a852:	2001      	movs	r0, #1
 800a854:	f000 f96c 	bl	800ab30 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a858:	f7f8 fb96 	bl	8002f88 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20030000 	.word	0x20030000

0800a86c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a872:	e01c      	b.n	800a8ae <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a874:	1d3b      	adds	r3, r7, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4812      	ldr	r0, [pc, #72]	; (800a8c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a87a:	f7ff fe32 	bl	800a4e2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7a5b      	ldrb	r3, [r3, #9]
 800a882:	2b0f      	cmp	r3, #15
 800a884:	d003      	beq.n	800a88e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7a5b      	ldrb	r3, [r3, #9]
 800a88a:	2b0e      	cmp	r3, #14
 800a88c:	d105      	bne.n	800a89a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4619      	mov	r1, r3
 800a892:	2002      	movs	r0, #2
 800a894:	f000 f94c 	bl	800ab30 <OutputDbgTrace>
 800a898:	e004      	b.n	800a8a4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4619      	mov	r1, r3
 800a89e:	2003      	movs	r0, #3
 800a8a0:	f000 f946 	bl	800ab30 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a8a4:	4b08      	ldr	r3, [pc, #32]	; (800a8c8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a8ae:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a8b0:	f7ff fd88 	bl	800a3c4 <LST_is_empty>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0dc      	beq.n	800a874 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a8ba:	bf00      	nop
}
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200301d4 	.word	0x200301d4
 800a8c8:	20000628 	.word	0x20000628

0800a8cc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4798      	blx	r3

  return;
 800a8d6:	bf00      	nop
}
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	2000062c 	.word	0x2000062c

0800a8e0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a8ec:	480d      	ldr	r0, [pc, #52]	; (800a924 <TL_SYS_Init+0x44>)
 800a8ee:	f7ff fd59 	bl	800a3a4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	; (800a928 <TL_SYS_Init+0x48>)
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	689a      	ldr	r2, [r3, #8]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	4a08      	ldr	r2, [pc, #32]	; (800a924 <TL_SYS_Init+0x44>)
 800a904:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a906:	f7f8 fb61 	bl	8002fcc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a07      	ldr	r2, [pc, #28]	; (800a92c <TL_SYS_Init+0x4c>)
 800a910:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	4a06      	ldr	r2, [pc, #24]	; (800a930 <TL_SYS_Init+0x50>)
 800a918:	6013      	str	r3, [r2, #0]

  return 0;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	200301dc 	.word	0x200301dc
 800a928:	20030000 	.word	0x20030000
 800a92c:	20000630 	.word	0x20000630
 800a930:	20000634 	.word	0x20000634

0800a934 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a940:	4b09      	ldr	r3, [pc, #36]	; (800a968 <TL_SYS_SendCmd+0x34>)
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2210      	movs	r2, #16
 800a948:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <TL_SYS_SendCmd+0x34>)
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4619      	mov	r1, r3
 800a952:	2004      	movs	r0, #4
 800a954:	f000 f8ec 	bl	800ab30 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a958:	f7f8 fb42 	bl	8002fe0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20030000 	.word	0x20030000

0800a96c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4619      	mov	r1, r3
 800a978:	2005      	movs	r0, #5
 800a97a:	f000 f8d9 	bl	800ab30 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a03      	ldr	r2, [pc, #12]	; (800a990 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a984:	68d2      	ldr	r2, [r2, #12]
 800a986:	6812      	ldr	r2, [r2, #0]
 800a988:	4610      	mov	r0, r2
 800a98a:	4798      	blx	r3

  return;
 800a98c:	bf00      	nop
}
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	20030000 	.word	0x20030000
 800a994:	20000630 	.word	0x20000630

0800a998 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a99e:	e00e      	b.n	800a9be <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a9a0:	1d3b      	adds	r3, r7, #4
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	480b      	ldr	r0, [pc, #44]	; (800a9d4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a9a6:	f7ff fd9c 	bl	800a4e2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	2006      	movs	r0, #6
 800a9b0:	f000 f8be 	bl	800ab30 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a9b4:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <HW_IPCC_SYS_EvtNot+0x40>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a9be:	4805      	ldr	r0, [pc, #20]	; (800a9d4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a9c0:	f7ff fd00 	bl	800a3c4 <LST_is_empty>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0ea      	beq.n	800a9a0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a9ca:	bf00      	nop
}
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	200301dc 	.word	0x200301dc
 800a9d8:	20000634 	.word	0x20000634

0800a9dc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a9e4:	4817      	ldr	r0, [pc, #92]	; (800aa44 <TL_MM_Init+0x68>)
 800a9e6:	f7ff fcdd 	bl	800a3a4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a9ea:	4817      	ldr	r0, [pc, #92]	; (800aa48 <TL_MM_Init+0x6c>)
 800a9ec:	f7ff fcda 	bl	800a3a4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a9f0:	4b16      	ldr	r3, [pc, #88]	; (800aa4c <TL_MM_Init+0x70>)
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <TL_MM_Init+0x74>)
 800a9f6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <TL_MM_Init+0x74>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	6892      	ldr	r2, [r2, #8]
 800aa00:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aa02:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <TL_MM_Init+0x74>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	68d2      	ldr	r2, [r2, #12]
 800aa0a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800aa0c:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <TL_MM_Init+0x74>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <TL_MM_Init+0x68>)
 800aa12:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800aa14:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <TL_MM_Init+0x74>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	6812      	ldr	r2, [r2, #0]
 800aa1c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <TL_MM_Init+0x74>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	6852      	ldr	r2, [r2, #4]
 800aa26:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <TL_MM_Init+0x74>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6912      	ldr	r2, [r2, #16]
 800aa30:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800aa32:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <TL_MM_Init+0x74>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6952      	ldr	r2, [r2, #20]
 800aa3a:	619a      	str	r2, [r3, #24]

  return;
 800aa3c:	bf00      	nop
}
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	200301c4 	.word	0x200301c4
 800aa48:	20000620 	.word	0x20000620
 800aa4c:	20030000 	.word	0x20030000
 800aa50:	20000638 	.word	0x20000638

0800aa54 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	4807      	ldr	r0, [pc, #28]	; (800aa7c <TL_MM_EvtDone+0x28>)
 800aa60:	f7ff fcf8 	bl	800a454 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	2000      	movs	r0, #0
 800aa68:	f000 f862 	bl	800ab30 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800aa6c:	4804      	ldr	r0, [pc, #16]	; (800aa80 <TL_MM_EvtDone+0x2c>)
 800aa6e:	f7f8 fadd 	bl	800302c <HW_IPCC_MM_SendFreeBuf>

  return;
 800aa72:	bf00      	nop
}
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000620 	.word	0x20000620
 800aa80:	0800aa85 	.word	0x0800aa85

0800aa84 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aa8a:	e00c      	b.n	800aaa6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800aa8c:	1d3b      	adds	r3, r7, #4
 800aa8e:	4619      	mov	r1, r3
 800aa90:	480a      	ldr	r0, [pc, #40]	; (800aabc <SendFreeBuf+0x38>)
 800aa92:	f7ff fd26 	bl	800a4e2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800aa96:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <SendFreeBuf+0x3c>)
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff fcd7 	bl	800a454 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aaa6:	4805      	ldr	r0, [pc, #20]	; (800aabc <SendFreeBuf+0x38>)
 800aaa8:	f7ff fc8c 	bl	800a3c4 <LST_is_empty>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0ec      	beq.n	800aa8c <SendFreeBuf+0x8>
  }

  return;
 800aab2:	bf00      	nop
}
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000620 	.word	0x20000620
 800aac0:	20030000 	.word	0x20030000

0800aac4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800aac8:	4805      	ldr	r0, [pc, #20]	; (800aae0 <TL_TRACES_Init+0x1c>)
 800aaca:	f7ff fc6b 	bl	800a3a4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <TL_TRACES_Init+0x20>)
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	4a03      	ldr	r2, [pc, #12]	; (800aae0 <TL_TRACES_Init+0x1c>)
 800aad4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800aad6:	f7f8 fadf 	bl	8003098 <HW_IPCC_TRACES_Init>

  return;
 800aada:	bf00      	nop
}
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	200301cc 	.word	0x200301cc
 800aae4:	20030000 	.word	0x20030000

0800aae8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800aaee:	e008      	b.n	800ab02 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800aaf0:	1d3b      	adds	r3, r7, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4808      	ldr	r0, [pc, #32]	; (800ab18 <HW_IPCC_TRACES_EvtNot+0x30>)
 800aaf6:	f7ff fcf4 	bl	800a4e2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 f80d 	bl	800ab1c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ab02:	4805      	ldr	r0, [pc, #20]	; (800ab18 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ab04:	f7ff fc5e 	bl	800a3c4 <LST_is_empty>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f0      	beq.n	800aaf0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ab0e:	bf00      	nop
}
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	200301cc 	.word	0x200301cc

0800ab1c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	2b06      	cmp	r3, #6
 800ab40:	d845      	bhi.n	800abce <OutputDbgTrace+0x9e>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <OutputDbgTrace+0x18>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab65 	.word	0x0800ab65
 800ab4c:	0800ab89 	.word	0x0800ab89
 800ab50:	0800ab8f 	.word	0x0800ab8f
 800ab54:	0800aba3 	.word	0x0800aba3
 800ab58:	0800abaf 	.word	0x0800abaf
 800ab5c:	0800abb5 	.word	0x0800abb5
 800ab60:	0800abc3 	.word	0x0800abc3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	7a5b      	ldrb	r3, [r3, #9]
 800ab6c:	2bff      	cmp	r3, #255	; 0xff
 800ab6e:	d005      	beq.n	800ab7c <OutputDbgTrace+0x4c>
 800ab70:	2bff      	cmp	r3, #255	; 0xff
 800ab72:	dc05      	bgt.n	800ab80 <OutputDbgTrace+0x50>
 800ab74:	2b0e      	cmp	r3, #14
 800ab76:	d005      	beq.n	800ab84 <OutputDbgTrace+0x54>
 800ab78:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ab7a:	e001      	b.n	800ab80 <OutputDbgTrace+0x50>
          break;
 800ab7c:	bf00      	nop
 800ab7e:	e027      	b.n	800abd0 <OutputDbgTrace+0xa0>
          break;
 800ab80:	bf00      	nop
 800ab82:	e025      	b.n	800abd0 <OutputDbgTrace+0xa0>
          break;
 800ab84:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ab86:	e023      	b.n	800abd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ab8c:	e020      	b.n	800abd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	7a5b      	ldrb	r3, [r3, #9]
 800ab96:	2b0e      	cmp	r3, #14
 800ab98:	d001      	beq.n	800ab9e <OutputDbgTrace+0x6e>
 800ab9a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ab9c:	e000      	b.n	800aba0 <OutputDbgTrace+0x70>
          break;
 800ab9e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aba0:	e016      	b.n	800abd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	7a5b      	ldrb	r3, [r3, #9]
 800abaa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800abac:	e010      	b.n	800abd0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800abb2:	e00d      	b.n	800abd0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	7a5b      	ldrb	r3, [r3, #9]
 800abbc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800abbe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800abc0:	e006      	b.n	800abd0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	7a5b      	ldrb	r3, [r3, #9]
 800abca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800abcc:	e000      	b.n	800abd0 <OutputDbgTrace+0xa0>

    default:
      break;
 800abce:	bf00      	nop
  }

  return;
 800abd0:	bf00      	nop
}
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800abdc:	b480      	push	{r7}
 800abde:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <UTIL_LPM_Init+0x1c>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <UTIL_LPM_Init+0x20>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800abec:	bf00      	nop
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	2000063c 	.word	0x2000063c
 800abfc:	20000640 	.word	0x20000640

0800ac00 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ac10:	613b      	str	r3, [r7, #16]
  return(result);
 800ac12:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ac14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac16:	b672      	cpsid	i
}
 800ac18:	bf00      	nop
  
  switch(state)
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d008      	beq.n	800ac32 <UTIL_LPM_SetOffMode+0x32>
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d10e      	bne.n	800ac42 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ac24:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <UTIL_LPM_SetOffMode+0x5c>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <UTIL_LPM_SetOffMode+0x5c>)
 800ac2e:	6013      	str	r3, [r2, #0]
      break;
 800ac30:	e008      	b.n	800ac44 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	43da      	mvns	r2, r3
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <UTIL_LPM_SetOffMode+0x5c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	4a07      	ldr	r2, [pc, #28]	; (800ac5c <UTIL_LPM_SetOffMode+0x5c>)
 800ac3e:	6013      	str	r3, [r2, #0]
      break;
 800ac40:	e000      	b.n	800ac44 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ac42:	bf00      	nop
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f383 8810 	msr	PRIMASK, r3
}
 800ac4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ac50:	bf00      	nop
 800ac52:	371c      	adds	r7, #28
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	20000640 	.word	0x20000640

0800ac60 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac66:	f3ef 8310 	mrs	r3, PRIMASK
 800ac6a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800ac6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac70:	b672      	cpsid	i
}
 800ac72:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800ac74:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <UTIL_LPM_EnterLowPower+0x60>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800ac7c:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <UTIL_LPM_EnterLowPower+0x64>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800ac82:	4b10      	ldr	r3, [pc, #64]	; (800acc4 <UTIL_LPM_EnterLowPower+0x64>)
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	4798      	blx	r3
 800ac88:	e010      	b.n	800acac <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800ac8a:	4b0f      	ldr	r3, [pc, #60]	; (800acc8 <UTIL_LPM_EnterLowPower+0x68>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800ac92:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <UTIL_LPM_EnterLowPower+0x64>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800ac98:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <UTIL_LPM_EnterLowPower+0x64>)
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	4798      	blx	r3
 800ac9e:	e005      	b.n	800acac <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <UTIL_LPM_EnterLowPower+0x64>)
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800aca6:	4b07      	ldr	r3, [pc, #28]	; (800acc4 <UTIL_LPM_EnterLowPower+0x64>)
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	4798      	blx	r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f383 8810 	msr	PRIMASK, r3
}
 800acb6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	2000063c 	.word	0x2000063c
 800acc4:	0800b39c 	.word	0x0800b39c
 800acc8:	20000640 	.word	0x20000640

0800accc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b090      	sub	sp, #64	; 0x40
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800acd4:	4b73      	ldr	r3, [pc, #460]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800acda:	4b72      	ldr	r3, [pc, #456]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4013      	ands	r3, r2
 800ace2:	4a70      	ldr	r2, [pc, #448]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800ace4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ace6:	4b70      	ldr	r3, [pc, #448]	; (800aea8 <UTIL_SEQ_Run+0x1dc>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800acec:	4b6f      	ldr	r3, [pc, #444]	; (800aeac <UTIL_SEQ_Run+0x1e0>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800acf2:	4b6f      	ldr	r3, [pc, #444]	; (800aeb0 <UTIL_SEQ_Run+0x1e4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800acf8:	4b6e      	ldr	r3, [pc, #440]	; (800aeb4 <UTIL_SEQ_Run+0x1e8>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800acfe:	e08d      	b.n	800ae1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ad04:	e002      	b.n	800ad0c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ad06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad08:	3301      	adds	r3, #1
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ad0c:	4a6a      	ldr	r2, [pc, #424]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	401a      	ands	r2, r3
 800ad18:	4b62      	ldr	r3, [pc, #392]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f1      	beq.n	800ad06 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ad22:	4a65      	ldr	r2, [pc, #404]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2c:	401a      	ands	r2, r3
 800ad2e:	4b5d      	ldr	r3, [pc, #372]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4013      	ands	r3, r2
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ad36:	4a60      	ldr	r2, [pc, #384]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	4413      	add	r3, r2
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	4013      	ands	r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ad48:	4a5b      	ldr	r2, [pc, #364]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	4413      	add	r3, r2
 800ad50:	f04f 32ff 	mov.w	r2, #4294967295
 800ad54:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ad56:	4a58      	ldr	r2, [pc, #352]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	4413      	add	r3, r2
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	4013      	ands	r3, r2
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f9b3 	bl	800b0d0 <SEQ_BitPosition>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4b53      	ldr	r3, [pc, #332]	; (800aebc <UTIL_SEQ_Run+0x1f0>)
 800ad70:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ad72:	4a51      	ldr	r2, [pc, #324]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	4413      	add	r3, r2
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4b4f      	ldr	r3, [pc, #316]	; (800aebc <UTIL_SEQ_Run+0x1f0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2101      	movs	r1, #1
 800ad82:	fa01 f303 	lsl.w	r3, r1, r3
 800ad86:	43db      	mvns	r3, r3
 800ad88:	401a      	ands	r2, r3
 800ad8a:	494b      	ldr	r1, [pc, #300]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800ad8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	440b      	add	r3, r1
 800ad92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad94:	f3ef 8310 	mrs	r3, PRIMASK
 800ad98:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad9a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ad9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad9e:	b672      	cpsid	i
}
 800ada0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ada2:	4b46      	ldr	r3, [pc, #280]	; (800aebc <UTIL_SEQ_Run+0x1f0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2201      	movs	r2, #1
 800ada8:	fa02 f303 	lsl.w	r3, r2, r3
 800adac:	43da      	mvns	r2, r3
 800adae:	4b3e      	ldr	r3, [pc, #248]	; (800aea8 <UTIL_SEQ_Run+0x1dc>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4013      	ands	r3, r2
 800adb4:	4a3c      	ldr	r2, [pc, #240]	; (800aea8 <UTIL_SEQ_Run+0x1dc>)
 800adb6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800adb8:	2302      	movs	r3, #2
 800adba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adbc:	e013      	b.n	800ade6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	3b01      	subs	r3, #1
 800adc2:	4a3d      	ldr	r2, [pc, #244]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800adc4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800adc8:	4b3c      	ldr	r3, [pc, #240]	; (800aebc <UTIL_SEQ_Run+0x1f0>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2201      	movs	r2, #1
 800adce:	fa02 f303 	lsl.w	r3, r2, r3
 800add2:	43da      	mvns	r2, r3
 800add4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add6:	3b01      	subs	r3, #1
 800add8:	400a      	ands	r2, r1
 800adda:	4937      	ldr	r1, [pc, #220]	; (800aeb8 <UTIL_SEQ_Run+0x1ec>)
 800addc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ade0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade2:	3b01      	subs	r3, #1
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ade6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e8      	bne.n	800adbe <UTIL_SEQ_Run+0xf2>
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f383 8810 	msr	PRIMASK, r3
}
 800adf6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800adf8:	4b30      	ldr	r3, [pc, #192]	; (800aebc <UTIL_SEQ_Run+0x1f0>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a30      	ldr	r2, [pc, #192]	; (800aec0 <UTIL_SEQ_Run+0x1f4>)
 800adfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae02:	4798      	blx	r3

    local_taskset = TaskSet;
 800ae04:	4b28      	ldr	r3, [pc, #160]	; (800aea8 <UTIL_SEQ_Run+0x1dc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800ae0a:	4b28      	ldr	r3, [pc, #160]	; (800aeac <UTIL_SEQ_Run+0x1e0>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800ae10:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <UTIL_SEQ_Run+0x1e4>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <UTIL_SEQ_Run+0x1e8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ae1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	401a      	ands	r2, r3
 800ae22:	4b20      	ldr	r3, [pc, #128]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4013      	ands	r3, r2
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <UTIL_SEQ_Run+0x16c>
 800ae2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	4013      	ands	r3, r2
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f43f af64 	beq.w	800ad00 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ae38:	4b20      	ldr	r3, [pc, #128]	; (800aebc <UTIL_SEQ_Run+0x1f0>)
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ae40:	f000 f938 	bl	800b0b4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae44:	f3ef 8310 	mrs	r3, PRIMASK
 800ae48:	613b      	str	r3, [r7, #16]
  return(result);
 800ae4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ae4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae4e:	b672      	cpsid	i
}
 800ae50:	bf00      	nop
  local_taskset = TaskSet;
 800ae52:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <UTIL_SEQ_Run+0x1dc>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ae58:	4b14      	ldr	r3, [pc, #80]	; (800aeac <UTIL_SEQ_Run+0x1e0>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <UTIL_SEQ_Run+0x1e4>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ae64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	401a      	ands	r2, r3
 800ae6a:	4b0e      	ldr	r3, [pc, #56]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4013      	ands	r3, r2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d107      	bne.n	800ae84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ae74:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <UTIL_SEQ_Run+0x1e8>)
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ae80:	f7f5 fcf3 	bl	800086a <UTIL_SEQ_Idle>
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f383 8810 	msr	PRIMASK, r3
}
 800ae8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ae90:	f000 f917 	bl	800b0c2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ae94:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <UTIL_SEQ_Run+0x1d8>)
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	6013      	str	r3, [r2, #0]

  return;
 800ae9a:	bf00      	nop
}
 800ae9c:	3740      	adds	r7, #64	; 0x40
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000034 	.word	0x20000034
 800aea8:	20000644 	.word	0x20000644
 800aeac:	20000648 	.word	0x20000648
 800aeb0:	20000030 	.word	0x20000030
 800aeb4:	2000064c 	.word	0x2000064c
 800aeb8:	200006d4 	.word	0x200006d4
 800aebc:	20000650 	.word	0x20000650
 800aec0:	20000654 	.word	0x20000654

0800aec4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aed0:	f3ef 8310 	mrs	r3, PRIMASK
 800aed4:	617b      	str	r3, [r7, #20]
  return(result);
 800aed6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800aed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeda:	b672      	cpsid	i
}
 800aedc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f8f6 	bl	800b0d0 <SEQ_BitPosition>
 800aee4:	4603      	mov	r3, r0
 800aee6:	4619      	mov	r1, r3
 800aee8:	4a06      	ldr	r2, [pc, #24]	; (800af04 <UTIL_SEQ_RegTask+0x40>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	f383 8810 	msr	PRIMASK, r3
}
 800aefa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800aefc:	bf00      	nop
}
 800aefe:	3720      	adds	r7, #32
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20000654 	.word	0x20000654

0800af08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af12:	f3ef 8310 	mrs	r3, PRIMASK
 800af16:	60fb      	str	r3, [r7, #12]
  return(result);
 800af18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800af1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af1c:	b672      	cpsid	i
}
 800af1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800af20:	4b0d      	ldr	r3, [pc, #52]	; (800af58 <UTIL_SEQ_SetTask+0x50>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4313      	orrs	r3, r2
 800af28:	4a0b      	ldr	r2, [pc, #44]	; (800af58 <UTIL_SEQ_SetTask+0x50>)
 800af2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800af2c:	4a0b      	ldr	r2, [pc, #44]	; (800af5c <UTIL_SEQ_SetTask+0x54>)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	431a      	orrs	r2, r3
 800af38:	4908      	ldr	r1, [pc, #32]	; (800af5c <UTIL_SEQ_SetTask+0x54>)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f383 8810 	msr	PRIMASK, r3
}
 800af4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800af4c:	bf00      	nop
}
 800af4e:	371c      	adds	r7, #28
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	20000644 	.word	0x20000644
 800af5c:	200006d4 	.word	0x200006d4

0800af60 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af68:	f3ef 8310 	mrs	r3, PRIMASK
 800af6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800af70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af72:	b672      	cpsid	i
}
 800af74:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	43da      	mvns	r2, r3
 800af7a:	4b08      	ldr	r3, [pc, #32]	; (800af9c <UTIL_SEQ_PauseTask+0x3c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4013      	ands	r3, r2
 800af80:	4a06      	ldr	r2, [pc, #24]	; (800af9c <UTIL_SEQ_PauseTask+0x3c>)
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f383 8810 	msr	PRIMASK, r3
}
 800af8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800af90:	bf00      	nop
}
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20000030 	.word	0x20000030

0800afa0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8310 	mrs	r3, PRIMASK
 800afac:	60fb      	str	r3, [r7, #12]
  return(result);
 800afae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800afb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb2:	b672      	cpsid	i
}
 800afb4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800afb6:	4b09      	ldr	r3, [pc, #36]	; (800afdc <UTIL_SEQ_ResumeTask+0x3c>)
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	4a07      	ldr	r2, [pc, #28]	; (800afdc <UTIL_SEQ_ResumeTask+0x3c>)
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f383 8810 	msr	PRIMASK, r3
}
 800afcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800afce:	bf00      	nop
}
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20000030 	.word	0x20000030

0800afe0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afe8:	f3ef 8310 	mrs	r3, PRIMASK
 800afec:	60fb      	str	r3, [r7, #12]
  return(result);
 800afee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aff0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aff2:	b672      	cpsid	i
}
 800aff4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <UTIL_SEQ_SetEvt+0x3c>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4313      	orrs	r3, r2
 800affe:	4a07      	ldr	r2, [pc, #28]	; (800b01c <UTIL_SEQ_SetEvt+0x3c>)
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f383 8810 	msr	PRIMASK, r3
}
 800b00c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b00e:	bf00      	nop
}
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	20000648 	.word	0x20000648

0800b020 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b028:	4b1f      	ldr	r3, [pc, #124]	; (800b0a8 <UTIL_SEQ_WaitEvt+0x88>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b02e:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <UTIL_SEQ_WaitEvt+0x88>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d102      	bne.n	800b03e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b038:	2300      	movs	r3, #0
 800b03a:	61fb      	str	r3, [r7, #28]
 800b03c:	e005      	b.n	800b04a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b03e:	4b1a      	ldr	r3, [pc, #104]	; (800b0a8 <UTIL_SEQ_WaitEvt+0x88>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2201      	movs	r2, #1
 800b044:	fa02 f303 	lsl.w	r3, r2, r3
 800b048:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b04a:	4b18      	ldr	r3, [pc, #96]	; (800b0ac <UTIL_SEQ_WaitEvt+0x8c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b050:	4a16      	ldr	r2, [pc, #88]	; (800b0ac <UTIL_SEQ_WaitEvt+0x8c>)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b056:	e003      	b.n	800b060 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	69f8      	ldr	r0, [r7, #28]
 800b05c:	f7f5 fc0b 	bl	8000876 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b060:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <UTIL_SEQ_WaitEvt+0x90>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4013      	ands	r3, r2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d0f5      	beq.n	800b058 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b06c:	4a0e      	ldr	r2, [pc, #56]	; (800b0a8 <UTIL_SEQ_WaitEvt+0x88>)
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b072:	f3ef 8310 	mrs	r3, PRIMASK
 800b076:	60bb      	str	r3, [r7, #8]
  return(result);
 800b078:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b07a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b07c:	b672      	cpsid	i
}
 800b07e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	43da      	mvns	r2, r3
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <UTIL_SEQ_WaitEvt+0x90>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4013      	ands	r3, r2
 800b08a:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <UTIL_SEQ_WaitEvt+0x90>)
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f383 8810 	msr	PRIMASK, r3
}
 800b098:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b09a:	4a04      	ldr	r2, [pc, #16]	; (800b0ac <UTIL_SEQ_WaitEvt+0x8c>)
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	6013      	str	r3, [r2, #0]
  return;
 800b0a0:	bf00      	nop
}
 800b0a2:	3720      	adds	r7, #32
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20000650 	.word	0x20000650
 800b0ac:	2000064c 	.word	0x2000064c
 800b0b0:	20000648 	.word	0x20000648

0800b0b4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b0b8:	bf00      	nop
}
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b0c6:	bf00      	nop
}
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	0c1b      	lsrs	r3, r3, #16
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d104      	bne.n	800b0f4 <SEQ_BitPosition+0x24>
 800b0ea:	2310      	movs	r3, #16
 800b0ec:	73fb      	strb	r3, [r7, #15]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d105      	bne.n	800b10a <SEQ_BitPosition+0x3a>
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	3308      	adds	r3, #8
 800b102:	73fb      	strb	r3, [r7, #15]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d105      	bne.n	800b120 <SEQ_BitPosition+0x50>
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	3304      	adds	r3, #4
 800b118:	73fb      	strb	r3, [r7, #15]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	011b      	lsls	r3, r3, #4
 800b11e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	0f1b      	lsrs	r3, r3, #28
 800b124:	4a07      	ldr	r2, [pc, #28]	; (800b144 <SEQ_BitPosition+0x74>)
 800b126:	5cd2      	ldrb	r2, [r2, r3]
 800b128:	7bfb      	ldrb	r3, [r7, #15]
 800b12a:	4413      	add	r3, r2
 800b12c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	f1c3 031f 	rsb	r3, r3, #31
 800b134:	b2db      	uxtb	r3, r3
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	0800b46c 	.word	0x0800b46c

0800b148 <__libc_init_array>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	4d0d      	ldr	r5, [pc, #52]	; (800b180 <__libc_init_array+0x38>)
 800b14c:	4c0d      	ldr	r4, [pc, #52]	; (800b184 <__libc_init_array+0x3c>)
 800b14e:	1b64      	subs	r4, r4, r5
 800b150:	10a4      	asrs	r4, r4, #2
 800b152:	2600      	movs	r6, #0
 800b154:	42a6      	cmp	r6, r4
 800b156:	d109      	bne.n	800b16c <__libc_init_array+0x24>
 800b158:	4d0b      	ldr	r5, [pc, #44]	; (800b188 <__libc_init_array+0x40>)
 800b15a:	4c0c      	ldr	r4, [pc, #48]	; (800b18c <__libc_init_array+0x44>)
 800b15c:	f000 f82e 	bl	800b1bc <_init>
 800b160:	1b64      	subs	r4, r4, r5
 800b162:	10a4      	asrs	r4, r4, #2
 800b164:	2600      	movs	r6, #0
 800b166:	42a6      	cmp	r6, r4
 800b168:	d105      	bne.n	800b176 <__libc_init_array+0x2e>
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
 800b16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b170:	4798      	blx	r3
 800b172:	3601      	adds	r6, #1
 800b174:	e7ee      	b.n	800b154 <__libc_init_array+0xc>
 800b176:	f855 3b04 	ldr.w	r3, [r5], #4
 800b17a:	4798      	blx	r3
 800b17c:	3601      	adds	r6, #1
 800b17e:	e7f2      	b.n	800b166 <__libc_init_array+0x1e>
 800b180:	0800b47c 	.word	0x0800b47c
 800b184:	0800b47c 	.word	0x0800b47c
 800b188:	0800b47c 	.word	0x0800b47c
 800b18c:	0800b480 	.word	0x0800b480

0800b190 <memcpy>:
 800b190:	440a      	add	r2, r1
 800b192:	4291      	cmp	r1, r2
 800b194:	f100 33ff 	add.w	r3, r0, #4294967295
 800b198:	d100      	bne.n	800b19c <memcpy+0xc>
 800b19a:	4770      	bx	lr
 800b19c:	b510      	push	{r4, lr}
 800b19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1a6:	4291      	cmp	r1, r2
 800b1a8:	d1f9      	bne.n	800b19e <memcpy+0xe>
 800b1aa:	bd10      	pop	{r4, pc}

0800b1ac <memset>:
 800b1ac:	4402      	add	r2, r0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d100      	bne.n	800b1b6 <memset+0xa>
 800b1b4:	4770      	bx	lr
 800b1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ba:	e7f9      	b.n	800b1b0 <memset+0x4>

0800b1bc <_init>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_fini>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr
