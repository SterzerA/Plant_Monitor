
BLE_HeartRate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a198  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000008  0800a58c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000041  20000038  0800a5bc  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000007c  0800a5fd  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000005f0  20000090  0800a60e  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00001400  20000680  0800a60e  00020680  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .debug_info   00030c6d  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000064de  00000000  00000000  00050d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a8  00000000  00000000  00057208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000026e8  00000000  00000000  00059bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dac7  00000000  00000000  0005c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031d30  00000000  00000000  00089d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9d20  00000000  00000000  000bba8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b57af  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab88  00000000  00000000  001b5800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000090 	.word	0x20000090
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a2bc 	.word	0x0800a2bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000094 	.word	0x20000094
 8000178:	0800a2bc 	.word	0x0800a2bc

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80001aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001ae:	4905      	ldr	r1, [pc, #20]	; (80001c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4313      	orrs	r3, r2
 80001b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001b8:	bf00      	nop
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c2:	4770      	bx	lr
 80001c4:	58000800 	.word	0x58000800

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4313      	orrs	r3, r2
 80001de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4013      	ands	r3, r2
 80001ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ec:	68fb      	ldr	r3, [r7, #12]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr

080001fa <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001fa:	b480      	push	{r7}
 80001fc:	b085      	sub	sp, #20
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000224:	68fb      	ldr	r3, [r7, #12]
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000232:	b580      	push	{r7, lr}
 8000234:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000236:	f003 f84b 	bl	80032d0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800023a:	f003 f84f 	bl	80032dc <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800023e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000242:	f7ff ffad 	bl	80001a0 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000246:	f000 f821 	bl	800028c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800024a:	f000 f8c3 	bl	80003d4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800024e:	bf00      	nop
}
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <APPD_EnableCPU2+0x34>)
 800025c:	1d3c      	adds	r4, r7, #4
 800025e:	461d      	mov	r5, r3
 8000260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000268:	c403      	stmia	r4!, {r0, r1}
 800026a:	8022      	strh	r2, [r4, #0]
 800026c:	3402      	adds	r4, #2
 800026e:	0c13      	lsrs	r3, r2, #16
 8000270:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000272:	f009 fca7 	bl	8009bc4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f008 ff04 	bl	8009086 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800027e:	bf00      	nop
}
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bdb0      	pop	{r4, r5, r7, pc}
 8000286:	bf00      	nop
 8000288:	0800a2d4 	.word	0x0800a2d4

0800028c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]
 80002b0:	e038      	b.n	8000324 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80002b2:	7ffb      	ldrb	r3, [r7, #31]
 80002b4:	4a44      	ldr	r2, [pc, #272]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4413      	add	r3, r2
 80002ba:	799b      	ldrb	r3, [r3, #6]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d02b      	beq.n	8000318 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002c0:	7ffb      	ldrb	r3, [r7, #31]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002c8:	4a40      	ldr	r2, [pc, #256]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d01b      	beq.n	8000306 <APPD_SetCPU2GpioConfig+0x7a>
 80002ce:	4a3f      	ldr	r2, [pc, #252]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d823      	bhi.n	800031c <APPD_SetCPU2GpioConfig+0x90>
 80002d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002d8:	d003      	beq.n	80002e2 <APPD_SetCPU2GpioConfig+0x56>
 80002da:	4a3d      	ldr	r2, [pc, #244]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d009      	beq.n	80002f4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002e0:	e01c      	b.n	800031c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002e2:	7ffb      	ldrb	r3, [r7, #31]
 80002e4:	4a38      	ldr	r2, [pc, #224]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4413      	add	r3, r2
 80002ea:	889a      	ldrh	r2, [r3, #4]
 80002ec:	8bbb      	ldrh	r3, [r7, #28]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	83bb      	strh	r3, [r7, #28]
          break;
 80002f2:	e014      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002f4:	7ffb      	ldrb	r3, [r7, #31]
 80002f6:	4a34      	ldr	r2, [pc, #208]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	4413      	add	r3, r2
 80002fc:	889a      	ldrh	r2, [r3, #4]
 80002fe:	8b7b      	ldrh	r3, [r7, #26]
 8000300:	4313      	orrs	r3, r2
 8000302:	837b      	strh	r3, [r7, #26]
          break;
 8000304:	e00b      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <APPD_SetCPU2GpioConfig+0x13c>)
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	4413      	add	r3, r2
 800030e:	889a      	ldrh	r2, [r3, #4]
 8000310:	8b3b      	ldrh	r3, [r7, #24]
 8000312:	4313      	orrs	r3, r2
 8000314:	833b      	strh	r3, [r7, #24]
          break;
 8000316:	e002      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000318:	bf00      	nop
 800031a:	e000      	b.n	800031e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800031c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800031e:	7ffb      	ldrb	r3, [r7, #31]
 8000320:	3301      	adds	r3, #1
 8000322:	77fb      	strb	r3, [r7, #31]
 8000324:	7ffb      	ldrb	r3, [r7, #31]
 8000326:	2b25      	cmp	r3, #37	; 0x25
 8000328:	d9c3      	bls.n	80002b2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000336:	8bbb      	ldrh	r3, [r7, #28]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d014      	beq.n	8000366 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800033c:	8bbb      	ldrh	r3, [r7, #28]
 800033e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ff41 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff57 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f003 faf0 	bl	8003938 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000358:	8bbb      	ldrh	r3, [r7, #28]
 800035a:	2200      	movs	r2, #0
 800035c:	4619      	mov	r1, r3
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f003 fc59 	bl	8003c18 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000366:	8b7b      	ldrh	r3, [r7, #26]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d012      	beq.n	8000392 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800036c:	8b7b      	ldrh	r3, [r7, #26]
 800036e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	2002      	movs	r0, #2
 8000372:	f7ff ff29 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000376:	2002      	movs	r0, #2
 8000378:	f7ff ff3f 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 8000382:	f003 fad9 	bl	8003938 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000386:	8b7b      	ldrh	r3, [r7, #26]
 8000388:	2200      	movs	r2, #0
 800038a:	4619      	mov	r1, r3
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <APPD_SetCPU2GpioConfig+0x144>)
 800038e:	f003 fc43 	bl	8003c18 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000392:	8b3b      	ldrh	r3, [r7, #24]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d013      	beq.n	80003c0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000398:	8b3b      	ldrh	r3, [r7, #24]
 800039a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	2004      	movs	r0, #4
 800039e:	f7ff ff13 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003a2:	2004      	movs	r0, #4
 80003a4:	f7ff ff29 	bl	80001fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ae:	f003 fac3 	bl	8003938 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ba:	f003 fc2d 	bl	8003c18 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
}
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	0800a370 	.word	0x0800a370
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400

080003d4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003d8:	bf00      	nop
}
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <LL_C2_PWR_SetPowerMode+0x28>)
 80003ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f2:	f023 0207 	bic.w	r2, r3, #7
 80003f6:	4905      	ldr	r1, [pc, #20]	; (800040c <LL_C2_PWR_SetPowerMode+0x28>)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	58000400 	.word	0x58000400

08000410 <LL_EXTI_EnableIT_32_63>:
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <LL_EXTI_EnableIT_32_63+0x24>)
 800041a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800041e:	4905      	ldr	r1, [pc, #20]	; (8000434 <LL_EXTI_EnableIT_32_63+0x24>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4313      	orrs	r3, r2
 8000424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	58000800 	.word	0x58000800

08000438 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000446:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800044a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000452:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800045e:	4313      	orrs	r3, r2
 8000460:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	cafecafe 	.word	0xcafecafe

08000474 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	608b      	str	r3, [r1, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <LL_DBGMCU_GetDeviceID+0x18>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e0042000 	.word	0xe0042000

080004b8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <LL_DBGMCU_GetRevisionID+0x18>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	0c1b      	lsrs	r3, r3, #16
 80004c2:	b29b      	uxth	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e0042000 	.word	0xe0042000

080004d4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LL_LPM_EnableSleep+0x1c>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <LL_LPM_EnableSleep+0x1c>)
 80004de:	f023 0304 	bic.w	r3, r3, #4
 80004e2:	6113      	str	r3, [r2, #16]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	22ff      	movs	r2, #255	; 0xff
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	22ca      	movs	r2, #202	; 0xca
 800051a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2253      	movs	r2, #83	; 0x53
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f023 0207 	bic.w	r2, r3, #7
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	609a      	str	r2, [r3, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <MX_APPE_Config+0x18>)
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000560:	f000 f830 	bl	80005c4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000564:	f000 f835 	bl	80005d2 <Config_HSE>

  return;
 8000568:	bf00      	nop
}
 800056a:	bd80      	pop	{r7, pc}
 800056c:	58004000 	.word	0x58004000

08000570 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000574:	f000 f841 	bl	80005fa <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000578:	f000 f85a 	bl	8000630 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800057c:	4909      	ldr	r1, [pc, #36]	; (80005a4 <MX_APPE_Init+0x34>)
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fe56 	bl	8001230 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000584:	f7ff fe55 	bl	8000232 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000588:	2101      	movs	r1, #1
 800058a:	2001      	movs	r0, #1
 800058c:	f009 fbb8 	bl	8009d00 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000590:	f000 f927 	bl	80007e2 <Led_Init>

  Button_Init();
 8000594:	f000 f92c 	bl	80007f0 <Button_Init>
  
  RxUART_Init();
 8000598:	f000 f9ba 	bl	8000910 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800059c:	f000 f856 	bl	800064c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80005a0:	bf00      	nop
}
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200004a0 	.word	0x200004a0

080005a8 <Init_Smps>:

void Init_Smps(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005ac:	bf00      	nop
}
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <Init_Exti>:

void Init_Exti(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80005ba:	2050      	movs	r0, #80	; 0x50
 80005bc:	f7ff ff28 	bl	8000410 <LL_EXTI_EnableIT_32_63>

  return;
 80005c0:	bf00      	nop
}
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80005c8:	bf00      	nop
}
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f008 fd15 	bl	8009008 <OTP_Read>
 80005de:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	799b      	ldrb	r3, [r3, #6]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff24 	bl	8000438 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
}
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <System_Init>:

static void System_Init(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  Init_Smps();
 80005fe:	f7ff ffd3 	bl	80005a8 <Init_Smps>

  Init_Exti();
 8000602:	f7ff ffd8 	bl	80005b6 <Init_Exti>

  Init_Rtc();
 8000606:	f000 f803 	bl	8000610 <Init_Rtc>

  return;
 800060a:	bf00      	nop
}
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <Init_Rtc+0x1c>)
 8000616:	f7ff ff7a 	bl	800050e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800061a:	2100      	movs	r1, #0
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <Init_Rtc+0x1c>)
 800061e:	f7ff ff86 	bl	800052e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000622:	4802      	ldr	r0, [pc, #8]	; (800062c <Init_Rtc+0x1c>)
 8000624:	f7ff ff66 	bl	80004f4 <LL_RTC_EnableWriteProtection>

  return;
 8000628:	bf00      	nop
}
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40002800 	.word	0x40002800

08000630 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000634:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000638:	f7ff ff1c 	bl	8000474 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800063c:	f009 fb4e 	bl	8009cdc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000640:	2004      	movs	r0, #4
 8000642:	f7ff fecf 	bl	80003e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000646:	bf00      	nop
}
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000652:	f009 f901 	bl	8009858 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <appe_Tl_Init+0x50>)
 8000658:	2100      	movs	r1, #0
 800065a:	2040      	movs	r0, #64	; 0x40
 800065c:	f009 fcb2 	bl	8009fc4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <appe_Tl_Init+0x54>)
 8000662:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <appe_Tl_Init+0x58>)
 8000666:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	480e      	ldr	r0, [pc, #56]	; (80006a8 <appe_Tl_Init+0x5c>)
 800066e:	f008 fde5 	bl	800923c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <appe_Tl_Init+0x60>)
 8000674:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <appe_Tl_Init+0x64>)
 8000678:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <appe_Tl_Init+0x68>)
 800067c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800067e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000682:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4618      	mov	r0, r3
 800068a:	f009 fa27 	bl	8009adc <TL_MM_Init>

  TL_Enable();
 800068e:	f009 f8dd 	bl	800984c <TL_Enable>

  return;
 8000692:	bf00      	nop
}
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08009275 	.word	0x08009275
 80006a0:	20030734 	.word	0x20030734
 80006a4:	080006b9 	.word	0x080006b9
 80006a8:	080006d1 	.word	0x080006d1
 80006ac:	2003094c 	.word	0x2003094c
 80006b0:	20030840 	.word	0x20030840
 80006b4:	200301f8 	.word	0x200301f8

080006b8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80006c2:	bf00      	nop
}
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	330b      	adds	r3, #11
 80006de:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d81f      	bhi.n	800072e <APPE_SysUserEvtRx+0x5e>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <APPE_SysUserEvtRx+0x24>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000715 	.word	0x08000715
 80006f8:	08000727 	.word	0x08000727
 80006fc:	0800072f 	.word	0x0800072f
 8000700:	0800072f 	.word	0x0800072f
 8000704:	0800072f 	.word	0x0800072f
 8000708:	0800072f 	.word	0x0800072f
 800070c:	0800072f 	.word	0x0800072f
 8000710:	0800072f 	.word	0x0800072f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4618      	mov	r0, r3
 800071a:	f008 fce1 	bl	80090e0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f81b 	bl	800075a <APPE_SysEvtReadyProcessing>
    break;
 8000724:	e004      	b.n	8000730 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f806 	bl	8000738 <APPE_SysEvtError>
    break;
 800072c:	e000      	b.n	8000730 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800072e:	bf00      	nop
  }

  return;
 8000730:	bf00      	nop
}
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	330b      	adds	r3, #11
 8000746:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3302      	adds	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800074e:	bf00      	nop
}
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b08a      	sub	sp, #40	; 0x28
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	330b      	adds	r3, #11
 800077e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	3302      	adds	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d11d      	bne.n	80007ca <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800078e:	f7ff fd61 	bl	8000254 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000792:	230f      	movs	r3, #15
 8000794:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000796:	237f      	movs	r3, #127	; 0x7f
 8000798:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800079a:	f7ff fe8d 	bl	80004b8 <LL_DBGMCU_GetRevisionID>
 800079e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80007a6:	f7ff fe79 	bl	800049c <LL_DBGMCU_GetDeviceID>
 80007aa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 fc7c 	bl	80090b4 <SHCI_C2_Config>

    APP_BLE_Init();
 80007bc:	f001 fccc 	bl	8002158 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2001      	movs	r0, #1
 80007c4:	f009 fa9c 	bl	8009d00 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80007c8:	e007      	b.n	80007da <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d103      	bne.n	80007da <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  return;
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
}
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 80007e6:	bf00      	nop
}
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <Button_Init>:

static void Button_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 fbd2 	bl	8002fa0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2001      	movs	r0, #1
 8000800:	f002 fbce 	bl	8002fa0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000804:	2101      	movs	r1, #1
 8000806:	2002      	movs	r0, #2
 8000808:	f002 fbca 	bl	8002fa0 <BSP_PB_Init>
#endif

  return;
 800080c:	bf00      	nop
}
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f002 fd16 	bl	8003248 <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d00a      	beq.n	8000840 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800082a:	f002 fd25 	bl	8003278 <HAL_GetTickFreq>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000838:	e002      	b.n	8000840 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800083a:	f7ff fe4b 	bl	80004d4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800083e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000840:	f002 fd02 	bl	8003248 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f4      	bhi.n	800083a <HAL_Delay+0x2a>
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
 8000862:	f009 fab3 	bl	8009dcc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800086e:	f009 fa77 	bl	8009d60 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000872:	bf00      	nop
}
 8000874:	bd80      	pop	{r7, pc}

08000876 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f009 faa2 	bl	8009dcc <UTIL_SEQ_Run>

  return;
 8000888:	bf00      	nop
}
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000898:	2100      	movs	r1, #0
 800089a:	2040      	movs	r0, #64	; 0x40
 800089c:	f009 fbb4 	bl	800a008 <UTIL_SEQ_SetTask>
  return;
 80008a0:	bf00      	nop
}
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f009 fc15 	bl	800a0e0 <UTIL_SEQ_SetEvt>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f009 fc2a 	bl	800a120 <UTIL_SEQ_WaitEvt>
  return;
 80008cc:	bf00      	nop
}
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	2b10      	cmp	r3, #16
 80008e2:	d006      	beq.n	80008f2 <HAL_GPIO_EXTI_Callback+0x1e>
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	dc0d      	bgt.n	8000904 <HAL_GPIO_EXTI_Callback+0x30>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0x24>
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d006      	beq.n	80008fe <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80008f0:	e008      	b.n	8000904 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80008f2:	f001 fd5f 	bl	80023b4 <APP_BLE_Key_Button1_Action>
      break; 
 80008f6:	e006      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80008f8:	f001 fd6a 	bl	80023d0 <APP_BLE_Key_Button2_Action>
      break; 
 80008fc:	e003      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80008fe:	f001 fd79 	bl	80023f4 <APP_BLE_Key_Button3_Action>
      break;
 8000902:	e000      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000904:	bf00      	nop

  }
  return;
 8000906:	bf00      	nop
}
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <RxUART_Init>:

static void RxUART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <RxUART_Init+0x14>)
 8000916:	2201      	movs	r2, #1
 8000918:	4903      	ldr	r1, [pc, #12]	; (8000928 <RxUART_Init+0x18>)
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fef4 	bl	8001708 <HW_UART_Receive_IT>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800092d 	.word	0x0800092d
 8000928:	200000b4 	.word	0x200000b4

0800092c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <RxCpltCallback+0x54>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d81a      	bhi.n	800096e <RxCpltCallback+0x42>
  {
    if (aRxBuffer[0] == '\r')
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <RxCpltCallback+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b0d      	cmp	r3, #13
 800093e:	d10b      	bne.n	8000958 <RxCpltCallback+0x2c>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      UartCmdExecute();
 8000940:	f000 f826 	bl	8000990 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <RxCpltCallback+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <RxCpltCallback+0x5c>)
 8000952:	f009 fcab 	bl	800a2ac <memset>
 8000956:	e00a      	b.n	800096e <RxCpltCallback+0x42>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <RxCpltCallback+0x54>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	b291      	uxth	r1, r2
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <RxCpltCallback+0x54>)
 8000962:	8011      	strh	r1, [r2, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <RxCpltCallback+0x58>)
 8000968:	7819      	ldrb	r1, [r3, #0]
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <RxCpltCallback+0x5c>)
 800096c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <RxCpltCallback+0x60>)
 8000970:	2201      	movs	r2, #1
 8000972:	4904      	ldr	r1, [pc, #16]	; (8000984 <RxCpltCallback+0x58>)
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fec7 	bl	8001708 <HW_UART_Receive_IT>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001bc 	.word	0x200001bc
 8000984:	200000b4 	.word	0x200000b4
 8000988:	200000bc 	.word	0x200000bc
 800098c:	0800092d 	.word	0x0800092d

08000990 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8000994:	4915      	ldr	r1, [pc, #84]	; (80009ec <UartCmdExecute+0x5c>)
 8000996:	4816      	ldr	r0, [pc, #88]	; (80009f0 <UartCmdExecute+0x60>)
 8000998:	f7ff fbf0 	bl	800017c <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d106      	bne.n	80009b0 <UartCmdExecute+0x20>
  {
    APP_DBG_MSG("SW1 OK\n");
    exti_handle.Line = EXTI_LINE_4;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <UartCmdExecute+0x64>)
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <UartCmdExecute+0x68>)
 80009a6:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <UartCmdExecute+0x64>)
 80009aa:	f002 ffa3 	bl	80038f4 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80009ae:	e01b      	b.n	80009e8 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80009b0:	4912      	ldr	r1, [pc, #72]	; (80009fc <UartCmdExecute+0x6c>)
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <UartCmdExecute+0x60>)
 80009b4:	f7ff fbe2 	bl	800017c <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d107      	bne.n	80009ce <UartCmdExecute+0x3e>
    exti_handle.Line = EXTI_LINE_0;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <UartCmdExecute+0x64>)
 80009c0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80009c4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <UartCmdExecute+0x64>)
 80009c8:	f002 ff94 	bl	80038f4 <HAL_EXTI_GenerateSWI>
}
 80009cc:	e00c      	b.n	80009e8 <UartCmdExecute+0x58>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80009ce:	490c      	ldr	r1, [pc, #48]	; (8000a00 <UartCmdExecute+0x70>)
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <UartCmdExecute+0x60>)
 80009d2:	f7ff fbd3 	bl	800017c <strcmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <UartCmdExecute+0x58>
    exti_handle.Line = EXTI_LINE_1;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <UartCmdExecute+0x64>)
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <UartCmdExecute+0x74>)
 80009e0:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <UartCmdExecute+0x64>)
 80009e4:	f002 ff86 	bl	80038f4 <HAL_EXTI_GenerateSWI>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800a2f0 	.word	0x0800a2f0
 80009f0:	200000bc 	.word	0x200000bc
 80009f4:	200000ac 	.word	0x200000ac
 80009f8:	16000004 	.word	0x16000004
 80009fc:	0800a2f4 	.word	0x0800a2f4
 8000a00:	0800a2f8 	.word	0x0800a2f8
 8000a04:	16000001 	.word	0x16000001

08000a08 <LL_EXTI_EnableIT_0_31>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a16:	4905      	ldr	r1, [pc, #20]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58000800 	.word	0x58000800

08000a30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]

}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000800 	.word	0x58000800

08000a54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a6a:	e005      	b.n	8000a78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d1f5      	bne.n	8000a6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a80:	683b      	ldr	r3, [r7, #0]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40002800 	.word	0x40002800

08000a94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3315      	adds	r3, #21
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d009      	beq.n	8000ad2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	4916      	ldr	r1, [pc, #88]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	7bfa      	ldrb	r2, [r7, #15]
 8000ae4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	3314      	adds	r3, #20
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <LinkTimerAfter+0x88>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	440b      	add	r3, r1
 8000b08:	3315      	adds	r3, #21
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	701a      	strb	r2, [r3, #0]

  return;
 8000b0e:	bf00      	nop
}
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200001c0 	.word	0x200001c0

08000b20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <LinkTimerBefore+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d032      	beq.n	8000ba2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4927      	ldr	r1, [pc, #156]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	4922      	ldr	r1, [pc, #136]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3315      	adds	r3, #21
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3315      	adds	r3, #21
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	4918      	ldr	r1, [pc, #96]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	3314      	adds	r3, #20
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ba0:	e014      	b.n	8000bcc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	3315      	adds	r3, #21
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	701a      	strb	r2, [r3, #0]
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000250 	.word	0x20000250
 8000bdc:	200001c0 	.word	0x200001c0

08000be0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <linkTimer+0x144>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d118      	bne.n	8000c26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <linkTimer+0x148>)
 8000bfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <linkTimer+0x144>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	4949      	ldr	r1, [pc, #292]	; (8000d2c <linkTimer+0x14c>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	2206      	movs	r2, #6
 8000c16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <linkTimer+0x150>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	e078      	b.n	8000d18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c26:	f000 f909 	bl	8000e3c <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	493e      	ldr	r1, [pc, #248]	; (8000d2c <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	4419      	add	r1, r3
 8000c46:	4839      	ldr	r0, [pc, #228]	; (8000d2c <linkTimer+0x14c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4403      	add	r3, r0
 8000c52:	3308      	adds	r3, #8
 8000c54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4934      	ldr	r1, [pc, #208]	; (8000d2c <linkTimer+0x14c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <linkTimer+0x144>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <linkTimer+0x14c>)
 8000c74:	460b      	mov	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3308      	adds	r3, #8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d337      	bcc.n	8000cf8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <linkTimer+0x144>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca2:	e013      	b.n	8000ccc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ca4:	7b7a      	ldrb	r2, [r7, #13]
 8000ca6:	4921      	ldr	r1, [pc, #132]	; (8000d2c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3315      	adds	r3, #21
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cb8:	7b7a      	ldrb	r2, [r7, #13]
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <linkTimer+0x14c>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3315      	adds	r3, #21
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d00b      	beq.n	8000cea <linkTimer+0x10a>
 8000cd2:	7b3a      	ldrb	r2, [r7, #12]
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <linkTimer+0x14c>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d2dc      	bcs.n	8000ca4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cea:	7b7a      	ldrb	r2, [r7, #13]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fecf 	bl	8000a94 <LinkTimerAfter>
 8000cf6:	e00f      	b.n	8000d18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <linkTimer+0x144>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff0c 	bl	8000b20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <linkTimer+0x144>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <linkTimer+0x148>)
 8000d10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <linkTimer+0x144>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000250 	.word	0x20000250
 8000d28:	20000251 	.word	0x20000251
 8000d2c:	200001c0 	.word	0x200001c0
 8000d30:	20000254 	.word	0x20000254

08000d34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d111      	bne.n	8000d74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <UnlinkTimer+0xfc>)
 8000d58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <UnlinkTimer+0x100>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3315      	adds	r3, #21
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e03e      	b.n	8000df2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	492f      	ldr	r1, [pc, #188]	; (8000e34 <UnlinkTimer+0x100>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3314      	adds	r3, #20
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	492a      	ldr	r1, [pc, #168]	; (8000e34 <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <UnlinkTimer+0x100>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3315      	adds	r3, #21
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <UnlinkTimer+0x100>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3315      	adds	r3, #21
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d013      	beq.n	8000df2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <UnlinkTimer+0x100>)
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3314      	adds	r3, #20
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <UnlinkTimer+0x100>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3314      	adds	r3, #20
 8000dee:	4602      	mov	r2, r0
 8000df0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	490f      	ldr	r1, [pc, #60]	; (8000e34 <UnlinkTimer+0x100>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	330c      	adds	r3, #12
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <UnlinkTimer+0xf8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b06      	cmp	r3, #6
 8000e0e:	d107      	bne.n	8000e20 <UnlinkTimer+0xec>
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <UnlinkTimer+0x104>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
}
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000250 	.word	0x20000250
 8000e30:	20000251 	.word	0x20000251
 8000e34:	200001c0 	.word	0x200001c0
 8000e38:	20000254 	.word	0x20000254

08000e3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d026      	beq.n	8000e9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e4c:	f7ff fe02 	bl	8000a54 <ReadRtcSsrValue>
 8000e50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d805      	bhi.n	8000e68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	e00a      	b.n	8000e7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ReturnTimeElapsed+0x74>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <ReturnTimeElapsed+0x78>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <ReturnTimeElapsed+0x7c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	40d3      	lsrs	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	b29b      	uxth	r3, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000254 	.word	0x20000254
 8000eb0:	2000025c 	.word	0x2000025c
 8000eb4:	2000025a 	.word	0x2000025a
 8000eb8:	20000259 	.word	0x20000259

08000ebc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d108      	bne.n	8000ede <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ecc:	f7ff fdc2 	bl	8000a54 <ReadRtcSsrValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <RestartWakeupCounter+0x9c>)
 8000ed4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f002 fb83 	bl	80035e2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000edc:	e039      	b.n	8000f52 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d803      	bhi.n	8000eec <RestartWakeupCounter+0x30>
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <RestartWakeupCounter+0xa0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d002      	beq.n	8000ef2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000ef2:	bf00      	nop
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f8      	beq.n	8000ef4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f12:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000f16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f1a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f002 fb6e 	bl	80035fe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	0c1b      	lsrs	r3, r3, #16
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	88fa      	ldrh	r2, [r7, #6]
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f32:	f7ff fd8f 	bl	8000a54 <ReadRtcSsrValue>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <RestartWakeupCounter+0x9c>)
 8000f3a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <RestartWakeupCounter+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f4c:	f3af 8000 	nop.w
  return ;
 8000f50:	bf00      	nop
}
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000254 	.word	0x20000254
 8000f5c:	20000259 	.word	0x20000259
 8000f60:	200004a0 	.word	0x200004a0
 8000f64:	58000800 	.word	0x58000800
 8000f68:	40002800 	.word	0x40002800

08000f6c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <RescheduleTimerList+0x11c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d107      	bne.n	8000f90 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f80:	bf00      	nop
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <RescheduleTimerList+0x120>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f8      	bne.n	8000f82 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f90:	4b3e      	ldr	r3, [pc, #248]	; (800108c <RescheduleTimerList+0x120>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <RescheduleTimerList+0x120>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f9e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <RescheduleTimerList+0x124>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	493a      	ldr	r1, [pc, #232]	; (8001094 <RescheduleTimerList+0x128>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fba:	f7ff ff3f 	bl	8000e3c <ReturnTimeElapsed>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d205      	bcs.n	8000fd6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <RescheduleTimerList+0x12c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e04d      	b.n	8001072 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <RescheduleTimerList+0x130>)
 8000fda:	8812      	ldrh	r2, [r2, #0]
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d906      	bls.n	8000ff6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <RescheduleTimerList+0x130>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <RescheduleTimerList+0x12c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e03d      	b.n	8001072 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <RescheduleTimerList+0x12c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001006:	e034      	b.n	8001072 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	4922      	ldr	r1, [pc, #136]	; (8001094 <RescheduleTimerList+0x128>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3308      	adds	r3, #8
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	429a      	cmp	r2, r3
 800101e:	d20a      	bcs.n	8001036 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	491c      	ldr	r1, [pc, #112]	; (8001094 <RescheduleTimerList+0x128>)
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e013      	b.n	800105e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4916      	ldr	r1, [pc, #88]	; (8001094 <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3308      	adds	r3, #8
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	1ac9      	subs	r1, r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <RescheduleTimerList+0x128>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4403      	add	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <RescheduleTimerList+0x128>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3315      	adds	r3, #21
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b06      	cmp	r3, #6
 8001076:	d1c7      	bne.n	8001008 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001078:	89bb      	ldrh	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff1e 	bl	8000ebc <RestartWakeupCounter>

  return ;
 8001080:	bf00      	nop
}
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40002800 	.word	0x40002800
 800108c:	200004a0 	.word	0x200004a0
 8001090:	20000250 	.word	0x20000250
 8001094:	200001c0 	.word	0x200001c0
 8001098:	20000258 	.word	0x20000258
 800109c:	2000025e 	.word	0x2000025e

080010a0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010a6:	f3ef 8310 	mrs	r3, PRIMASK
 80010aa:	617b      	str	r3, [r7, #20]
  return(result);
 80010ac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	22ca      	movs	r2, #202	; 0xca
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2253      	movs	r2, #83	; 0x53
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	4b54      	ldr	r3, [pc, #336]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010d4:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010e0:	4950      	ldr	r1, [pc, #320]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	330c      	adds	r3, #12
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d16e      	bne.n	80011d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fa:	494a      	ldr	r1, [pc, #296]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800110a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800110e:	4945      	ldr	r1, [pc, #276]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	3310      	adds	r3, #16
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d04c      	beq.n	80011c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800112a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800112e:	493d      	ldr	r1, [pc, #244]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	330d      	adds	r3, #13
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d124      	bne.n	800118e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdf2 	bl	8000d34 <UnlinkTimer>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f383 8810 	msr	PRIMASK, r3
}
 800115a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800115c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001160:	4930      	ldr	r1, [pc, #192]	; (8001224 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	3304      	adds	r3, #4
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fa32 	bl	80015e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	; 0xca
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	; 0x53
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
 800118c:	e012      	b.n	80011b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f383 8810 	msr	PRIMASK, r3
}
 8001198:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800119a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f99a 	bl	80014d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	22ca      	movs	r2, #202	; 0xca
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2253      	movs	r2, #83	; 0x53
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	4619      	mov	r1, r3
 80011bc:	69b8      	ldr	r0, [r7, #24]
 80011be:	f000 fa95 	bl	80016ec <HW_TS_RTC_Int_AppNot>
 80011c2:	e022      	b.n	800120a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80011c4:	f7ff fed2 	bl	8000f6c <RescheduleTimerList>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f383 8810 	msr	PRIMASK, r3
}
 80011d2:	e01a      	b.n	800120a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011d4:	bf00      	nop
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f8      	beq.n	80011d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f383 8810 	msr	PRIMASK, r3
}
 8001208:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001212:	bf00      	nop
}
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200004a0 	.word	0x200004a0
 8001220:	20000250 	.word	0x20000250
 8001224:	200001c0 	.word	0x200001c0
 8001228:	20000258 	.word	0x20000258
 800122c:	58000800 	.word	0x58000800

08001230 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	22ca      	movs	r2, #202	; 0xca
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
 8001244:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HW_TS_Init+0x188>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2253      	movs	r2, #83	; 0x53
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HW_TS_Init+0x18c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <HW_TS_Init+0x18c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HW_TS_Init+0x18c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f1c3 0304 	rsb	r3, r3, #4
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HW_TS_Init+0x190>)
 800126c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HW_TS_Init+0x18c>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001276:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800127a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	2a00      	cmp	r2, #0
 800128c:	d101      	bne.n	8001292 <HW_TS_Init+0x62>
  {
    return 32U;
 800128e:	2220      	movs	r2, #32
 8001290:	e003      	b.n	800129a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	fab2 f282 	clz	r2, r2
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	40d3      	lsrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HW_TS_Init+0x194>)
 80012a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <HW_TS_Init+0x18c>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HW_TS_Init+0x198>)
 80012b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HW_TS_Init+0x198>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <HW_TS_Init+0x194>)
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HW_TS_Init+0x190>)
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	40d3      	lsrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012da:	4293      	cmp	r3, r2
 80012dc:	d904      	bls.n	80012e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HW_TS_Init+0x19c>)
 80012e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e003      	b.n	80012f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HW_TS_Init+0x19c>)
 80012ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012f4:	f7ff fb9c 	bl	8000a30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012fc:	f7ff fb84 	bl	8000a08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13d      	bne.n	8001382 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Init+0x1a0>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HW_TS_Init+0x1a4>)
 800130e:	f04f 32ff 	mov.w	r2, #4294967295
 8001312:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e00c      	b.n	8001334 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800131a:	7ffa      	ldrb	r2, [r7, #31]
 800131c:	492e      	ldr	r1, [pc, #184]	; (80013d8 <HW_TS_Init+0x1a8>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	330c      	adds	r3, #12
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	3301      	adds	r3, #1
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b05      	cmp	r3, #5
 8001338:	d9ef      	bls.n	800131a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HW_TS_Init+0x1ac>)
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HW_TS_Init+0x188>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HW_TS_Init+0x188>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HW_TS_Init+0x188>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HW_TS_Init+0x188>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001360:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HW_TS_Init+0x1b0>)
 8001364:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001368:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800136a:	2003      	movs	r0, #3
 800136c:	f002 f947 	bl	80035fe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HW_TS_Init+0x188>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HW_TS_Init+0x188>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e009      	b.n	8001396 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HW_TS_Init+0x188>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001390:	2003      	movs	r0, #3
 8001392:	f002 f926 	bl	80035e2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HW_TS_Init+0x188>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800139e:	2200      	movs	r2, #0
 80013a0:	2103      	movs	r1, #3
 80013a2:	2003      	movs	r0, #3
 80013a4:	f002 f8db 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f002 f8f2 	bl	8003592 <HAL_NVIC_EnableIRQ>

  return;
 80013ae:	bf00      	nop
}
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200004a0 	.word	0x200004a0
 80013bc:	40002800 	.word	0x40002800
 80013c0:	20000259 	.word	0x20000259
 80013c4:	2000025a 	.word	0x2000025a
 80013c8:	2000025c 	.word	0x2000025c
 80013cc:	2000025e 	.word	0x2000025e
 80013d0:	20000258 	.word	0x20000258
 80013d4:	20000254 	.word	0x20000254
 80013d8:	200001c0 	.word	0x200001c0
 80013dc:	20000250 	.word	0x20000250
 80013e0:	58000800 	.word	0x58000800

080013e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fa:	f3ef 8310 	mrs	r3, PRIMASK
 80013fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8001400:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001408:	e004      	b.n	8001414 <HW_TS_Create+0x30>
  {
    loop++;
 800140a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140e:	3301      	adds	r3, #1
 8001410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001418:	2b05      	cmp	r3, #5
 800141a:	d80c      	bhi.n	8001436 <HW_TS_Create+0x52>
 800141c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001420:	492c      	ldr	r1, [pc, #176]	; (80014d4 <HW_TS_Create+0xf0>)
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	330c      	adds	r3, #12
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e9      	bne.n	800140a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800143a:	2b06      	cmp	r3, #6
 800143c:	d038      	beq.n	80014b0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800143e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001442:	4924      	ldr	r1, [pc, #144]	; (80014d4 <HW_TS_Create+0xf0>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	330c      	adds	r3, #12
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f383 8810 	msr	PRIMASK, r3
}
 800145e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001464:	491b      	ldr	r1, [pc, #108]	; (80014d4 <HW_TS_Create+0xf0>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3310      	adds	r3, #16
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001476:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800147a:	4916      	ldr	r1, [pc, #88]	; (80014d4 <HW_TS_Create+0xf0>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	330d      	adds	r3, #13
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800148c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001490:	4910      	ldr	r1, [pc, #64]	; (80014d4 <HW_TS_Create+0xf0>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014a6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ae:	e008      	b.n	80014c2 <HW_TS_Create+0xde>
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f383 8810 	msr	PRIMASK, r3
}
 80014ba:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200001c0 	.word	0x200001c0

080014d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014e2:	f3ef 8310 	mrs	r3, PRIMASK
 80014e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80014e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014f0:	2003      	movs	r0, #3
 80014f2:	f002 f85c 	bl	80035ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HW_TS_Stop+0xf0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22ca      	movs	r2, #202	; 0xca
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2253      	movs	r2, #83	; 0x53
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	4930      	ldr	r1, [pc, #192]	; (80015cc <HW_TS_Stop+0xf4>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	330c      	adds	r3, #12
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d142      	bne.n	80015a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc06 	bl	8000d34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HW_TS_Stop+0xf8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	2b06      	cmp	r3, #6
 8001532:	d12f      	bne.n	8001594 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HW_TS_Stop+0xfc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001540:	d107      	bne.n	8001552 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001542:	bf00      	nop
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f8      	bne.n	8001544 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HW_TS_Stop+0xf0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001560:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001562:	bf00      	nop
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f8      	beq.n	8001564 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HW_TS_Stop+0xf0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HW_TS_Stop+0xf0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001582:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HW_TS_Stop+0x100>)
 8001586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800158a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800158c:	2003      	movs	r0, #3
 800158e:	f002 f836 	bl	80035fe <HAL_NVIC_ClearPendingIRQ>
 8001592:	e007      	b.n	80015a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HW_TS_Stop+0x104>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	7cfa      	ldrb	r2, [r7, #19]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80015a0:	f7ff fce4 	bl	8000f6c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HW_TS_Stop+0xf0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	22ff      	movs	r2, #255	; 0xff
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015ac:	2003      	movs	r0, #3
 80015ae:	f001 fff0 	bl	8003592 <HAL_NVIC_EnableIRQ>
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f383 8810 	msr	PRIMASK, r3
}
 80015bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015be:	bf00      	nop
}
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200004a0 	.word	0x200004a0
 80015cc:	200001c0 	.word	0x200001c0
 80015d0:	20000250 	.word	0x20000250
 80015d4:	40002800 	.word	0x40002800
 80015d8:	58000800 	.word	0x58000800
 80015dc:	20000251 	.word	0x20000251

080015e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	493b      	ldr	r1, [pc, #236]	; (80016dc <HW_TS_Start+0xfc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	330c      	adds	r3, #12
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d103      	bne.n	800160c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff66 	bl	80014d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800160c:	f3ef 8310 	mrs	r3, PRIMASK
 8001610:	60fb      	str	r3, [r7, #12]
  return(result);
 8001612:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800161a:	2003      	movs	r0, #3
 800161c:	f001 ffc7 	bl	80035ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HW_TS_Start+0x100>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22ca      	movs	r2, #202	; 0xca
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HW_TS_Start+0x100>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2253      	movs	r2, #83	; 0x53
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	492a      	ldr	r1, [pc, #168]	; (80016dc <HW_TS_Start+0xfc>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	330c      	adds	r3, #12
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	4925      	ldr	r1, [pc, #148]	; (80016dc <HW_TS_Start+0xfc>)
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3308      	adds	r3, #8
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	4920      	ldr	r1, [pc, #128]	; (80016dc <HW_TS_Start+0xfc>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3304      	adds	r3, #4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fab6 	bl	8000be0 <linkTimer>
 8001674:	4603      	mov	r3, r0
 8001676:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HW_TS_Start+0x104>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HW_TS_Start+0x108>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	7c7a      	ldrb	r2, [r7, #17]
 8001686:	429a      	cmp	r2, r3
 8001688:	d002      	beq.n	8001690 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800168a:	f7ff fc6f 	bl	8000f6c <RescheduleTimerList>
 800168e:	e013      	b.n	80016b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4912      	ldr	r1, [pc, #72]	; (80016dc <HW_TS_Start+0xfc>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3308      	adds	r3, #8
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	1ac9      	subs	r1, r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <HW_TS_Start+0xfc>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4403      	add	r3, r0
 80016b4:	3308      	adds	r3, #8
 80016b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HW_TS_Start+0x100>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c0:	2003      	movs	r0, #3
 80016c2:	f001 ff66 	bl	8003592 <HAL_NVIC_EnableIRQ>
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f383 8810 	msr	PRIMASK, r3
}
 80016d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d2:	bf00      	nop
}
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001c0 	.word	0x200001c0
 80016e0:	200004a0 	.word	0x200004a0
 80016e4:	20000250 	.word	0x20000250
 80016e8:	20000251 	.word	0x20000251

080016ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4798      	blx	r3

  return;
 80016fe:	bf00      	nop
}
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	4613      	mov	r3, r2
 8001718:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10c      	bne.n	800173a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HW_UART_Receive_IT+0x3c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HW_UART_Receive_IT+0x40>)
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HW_UART_Receive_IT+0x44>)
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	89bb      	ldrh	r3, [r7, #12]
 800172e:	461a      	mov	r2, r3
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HW_UART_Receive_IT+0x40>)
 8001734:	f004 fac4 	bl	8005cc0 <HAL_UART_Receive_IT>
            break;
 8001738:	e000      	b.n	800173c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800173a:	bf00      	nop
    }

    return;
 800173c:	bf00      	nop
}
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000260 	.word	0x20000260
 8001748:	20000338 	.word	0x20000338
 800174c:	40013800 	.word	0x40013800

08001750 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_UART_RxCpltCallback+0x34>)
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_UART_RxCpltCallback+0x38>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_UART_RxCpltCallback+0x38>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4798      	blx	r3
            }
            break;
 8001772:	e001      	b.n	8001778 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001778:	bf00      	nop
    }

    return;
 800177a:	bf00      	nop
}
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40013800 	.word	0x40013800
 8001788:	20000260 	.word	0x20000260

0800178c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_UART_TxCpltCallback+0x34>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_UART_TxCpltCallback+0x38>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_UART_TxCpltCallback+0x38>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4798      	blx	r3
            }
            break;
 80017ae:	e001      	b.n	80017b4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80017b4:	bf00      	nop
    }

    return;
 80017b6:	bf00      	nop
}
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40013800 	.word	0x40013800
 80017c4:	20000264 	.word	0x20000264

080017c8 <LL_RCC_LSE_SetDriveCapability>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	f023 0218 	bic.w	r2, r3, #24
 80017dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_AHB2_GRP1_EnableClock>:
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f001 fc86 	bl	800316c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001860:	f7fe fe78 	bl	8000554 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f814 	bl	8001890 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001868:	f000 f870 	bl	800194c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800186c:	f000 f88e 	bl	800198c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 f90f 	bl	8001a92 <MX_GPIO_Init>
  MX_DMA_Init();
 8001874:	f000 f8f0 	bl	8001a58 <MX_DMA_Init>
  MX_RTC_Init();
 8001878:	f000 f8ba 	bl	80019f0 <MX_RTC_Init>
  MX_RNG_Init();
 800187c:	f000 f8a2 	bl	80019c4 <MX_RNG_Init>
  MX_RF_Init();
 8001880:	f000 f898 	bl	80019b4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001884:	f7fe fe74 	bl	8000570 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001888:	f7fe ffe7 	bl	800085a <MX_APPE_Process>
 800188c:	e7fc      	b.n	8001888 <main+0x30>
	...

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b09a      	sub	sp, #104	; 0x68
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2248      	movs	r2, #72	; 0x48
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f008 fd04 	bl	800a2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018b6:	f002 fa89 	bl	8003dcc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff ff84 	bl	80017c8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <SystemClock_Config+0xb8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c8:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <SystemClock_Config+0xb8>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <SystemClock_Config+0xb8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80018dc:	2347      	movs	r3, #71	; 0x47
 80018de:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018e6:	2301      	movs	r3, #1
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018f0:	2301      	movs	r3, #1
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fddf 	bl	80044c4 <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800190c:	f000 f8ce 	bl	8001aac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001910:	236f      	movs	r3, #111	; 0x6f
 8001912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001914:	2302      	movs	r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f003 f93b 	bl	8004bac <HAL_RCC_ClockConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800193c:	f000 f8b6 	bl	8001aac <Error_Handler>
  }
}
 8001940:	bf00      	nop
 8001942:	3768      	adds	r7, #104	; 0x68
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58000400 	.word	0x58000400

0800194c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b094      	sub	sp, #80	; 0x50
 8001950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	2250      	movs	r2, #80	; 0x50
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f008 fca7 	bl	800a2ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800195e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001962:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800196a:	2302      	movs	r3, #2
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800196e:	2310      	movs	r3, #16
 8001970:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fd2a 	bl	80053ce <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001980:	f000 f894 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001984:	bf00      	nop
 8001986:	3750      	adds	r7, #80	; 0x50
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_IPCC_Init+0x20>)
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <MX_IPCC_Init+0x24>)
 8001994:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_IPCC_Init+0x20>)
 8001998:	f002 f992 	bl	8003cc0 <HAL_IPCC_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80019a2:	f000 f883 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000268 	.word	0x20000268
 80019b0:	58000c00 	.word	0x58000c00

080019b4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_RNG_Init+0x24>)
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <MX_RNG_Init+0x28>)
 80019cc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_RNG_Init+0x24>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_RNG_Init+0x24>)
 80019d6:	f003 ff81 	bl	80058dc <HAL_RNG_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80019e0:	f000 f864 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000048c 	.word	0x2000048c
 80019ec:	58001000 	.word	0x58001000

080019f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_RTC_Init+0x60>)
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <MX_RTC_Init+0x64>)
 80019f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_RTC_Init+0x60>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a02:	220f      	movs	r2, #15
 8001a04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a28:	f003 ff8e 	bl	8005948 <HAL_RTC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f83b 	bl	8001aac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a3c:	f004 f884 	bl	8005b48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a46:	f000 f831 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200004a0 	.word	0x200004a0
 8001a54:	40002800 	.word	0x40002800

08001a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a5c:	2004      	movs	r0, #4
 8001a5e:	f7ff fec9 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff fec6 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f7ff fec3 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	210f      	movs	r1, #15
 8001a72:	200e      	movs	r0, #14
 8001a74:	f001 fd73 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a78:	200e      	movs	r0, #14
 8001a7a:	f001 fd8a 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	210f      	movs	r1, #15
 8001a82:	203a      	movs	r0, #58	; 0x3a
 8001a84:	f001 fd6b 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001a88:	203a      	movs	r0, #58	; 0x3a
 8001a8a:	f001 fd82 	bl	8003592 <HAL_NVIC_EnableIRQ>

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2004      	movs	r0, #4
 8001a98:	f7ff fec5 	bl	8001826 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fec2 	bl	8001826 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7ff febf 	bl	8001826 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <LL_PWR_SetPowerMode>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <LL_PWR_SetPowerMode+0x24>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 0207 	bic.w	r2, r3, #7
 8001acc:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <LL_PWR_SetPowerMode+0x24>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	58000400 	.word	0x58000400

08001ae4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <LL_PWR_ClearFlag_WU+0x14>)
 8001aea:	221f      	movs	r2, #31
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	58000400 	.word	0x58000400

08001afc <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0e:	d101      	bne.n	8001b14 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	58000400 	.word	0x58000400

08001b24 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b36:	d101      	bne.n	8001b3c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	58000400 	.word	0x58000400

08001b4c <LL_RCC_HSE_Enable>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_HSE_IsReady>:
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b7c:	d101      	bne.n	8001b82 <LL_RCC_HSE_IsReady+0x18>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_RCC_HSE_IsReady+0x1a>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_HSI_Enable>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_RCC_HSI_IsReady>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d101      	bne.n	8001bc4 <LL_RCC_HSI_IsReady+0x18>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_RCC_HSI_IsReady+0x1a>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_SetSysClkSource>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_RCC_GetSysClkSource>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_LPM_EnableSleep>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <LL_LPM_EnableSleep+0x1c>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <LL_LPM_EnableSleep+0x1c>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	6113      	str	r3, [r2, #16]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <LL_LPM_EnableDeepSleep+0x1c>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <LL_LPM_EnableDeepSleep+0x1c>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6113      	str	r3, [r2, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	3220      	adds	r2, #32
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <LL_HSEM_1StepLock+0x2c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d001      	beq.n	8001c96 <LL_HSEM_1StepLock+0x1e>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_HSEM_1StepLock+0x20>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	80000400 	.word	0x80000400

08001ca8 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001cd2:	f001 fadd 	bl	8003290 <HAL_SuspendTick>

  EnterLowPower();
 8001cd6:	f000 f835 	bl	8001d44 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001cda:	f7ff ff03 	bl	8001ae4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f7ff feec 	bl	8001abc <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ce4:	f7ff ffb8 	bl	8001c58 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001ce8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001cea:	bf00      	nop
}
 8001cec:	bd80      	pop	{r7, pc}

08001cee <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8001cf2:	f001 fadd 	bl	80032b0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001cf6:	bf00      	nop
}
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001cfe:	f001 fac7 	bl	8003290 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001d02:	f000 f81f 	bl	8001d44 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8001d06:	2002      	movs	r0, #2
 8001d08:	f7ff fed8 	bl	8001abc <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001d0c:	f7ff ffa4 	bl	8001c58 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001d10:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001d12:	bf00      	nop
}
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001d1a:	f000 f84f 	bl	8001dbc <ExitLowPower>

  HAL_ResumeTick();
 8001d1e:	f001 fac7 	bl	80032b0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001d22:	bf00      	nop
}
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001d2a:	f001 fab1 	bl	8003290 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001d2e:	f7ff ff83 	bl	8001c38 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001d32:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001d34:	bf00      	nop
}
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001d3c:	f001 fab8 	bl	80032b0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001d40:	bf00      	nop
}
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001d48:	bf00      	nop
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	4819      	ldr	r0, [pc, #100]	; (8001db4 <EnterLowPower+0x70>)
 8001d4e:	f7ff ff93 	bl	8001c78 <LL_HSEM_1StepLock>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f8      	bne.n	8001d4a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4816      	ldr	r0, [pc, #88]	; (8001db4 <EnterLowPower+0x70>)
 8001d5c:	f7ff ff8c 	bl	8001c78 <LL_HSEM_1StepLock>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d117      	bne.n	8001d96 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001d66:	f7ff fedd 	bl	8001b24 <LL_PWR_IsActiveFlag_C2DS>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d104      	bne.n	8001d7a <EnterLowPower+0x36>
 8001d70:	f7ff fec4 	bl	8001afc <LL_PWR_IsActiveFlag_C2SB>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d015      	beq.n	8001da6 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <EnterLowPower+0x70>)
 8001d80:	f7ff ff92 	bl	8001ca8 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001d84:	f000 f852 	bl	8001e2c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <EnterLowPower+0x74>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <EnterLowPower+0x74>)
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e007      	b.n	8001da6 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001d96:	f000 f849 	bl	8001e2c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <EnterLowPower+0x74>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <EnterLowPower+0x74>)
 8001da0:	f023 0307 	bic.w	r3, r3, #7
 8001da4:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2103      	movs	r1, #3
 8001daa:	4802      	ldr	r0, [pc, #8]	; (8001db4 <EnterLowPower+0x70>)
 8001dac:	f7ff ff7c 	bl	8001ca8 <LL_HSEM_ReleaseLock>

  return;
 8001db0:	bf00      	nop
}
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	58001400 	.word	0x58001400
 8001db8:	58004000 	.word	0x58004000

08001dbc <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4817      	ldr	r0, [pc, #92]	; (8001e24 <ExitLowPower+0x68>)
 8001dc6:	f7ff ff6f 	bl	8001ca8 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001dca:	bf00      	nop
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4815      	ldr	r0, [pc, #84]	; (8001e24 <ExitLowPower+0x68>)
 8001dd0:	f7ff ff52 	bl	8001c78 <LL_HSEM_1StepLock>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f8      	bne.n	8001dcc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001dda:	f7ff ff0d 	bl	8001bf8 <LL_RCC_GetSysClkSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d118      	bne.n	8001e16 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8001de4:	f7ff feb2 	bl	8001b4c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <ExitLowPower+0x6c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0307 	bic.w	r3, r3, #7
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <ExitLowPower+0x6c>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8001df8:	bf00      	nop
 8001dfa:	f7ff feb6 	bl	8001b6a <LL_RCC_HSE_IsReady>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0fa      	beq.n	8001dfa <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001e04:	2002      	movs	r0, #2
 8001e06:	f7ff fee3 	bl	8001bd0 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001e0a:	bf00      	nop
 8001e0c:	f7ff fef4 	bl	8001bf8 <LL_RCC_GetSysClkSource>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d1fa      	bne.n	8001e0c <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2103      	movs	r1, #3
 8001e1a:	4802      	ldr	r0, [pc, #8]	; (8001e24 <ExitLowPower+0x68>)
 8001e1c:	f7ff ff44 	bl	8001ca8 <LL_HSEM_ReleaseLock>

  return;
 8001e20:	bf00      	nop
}
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	58001400 	.word	0x58001400
 8001e28:	58004000 	.word	0x58004000

08001e2c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001e30:	f7ff fead 	bl	8001b8e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001e34:	bf00      	nop
 8001e36:	f7ff feb9 	bl	8001bac <LL_RCC_HSI_IsReady>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0fa      	beq.n	8001e36 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff fec5 	bl	8001bd0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fee2 	bl	8001c10 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001e4c:	bf00      	nop
 8001e4e:	f7ff fed3 	bl	8001bf8 <LL_RCC_GetSysClkSource>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d1fa      	bne.n	8001e4e <Switch_On_HSI+0x22>
  return;
 8001e58:	bf00      	nop
}
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_AHB3_GRP1_EnableClock>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_APB1_GRP1_EnableClock>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001ee6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001eea:	f7ff ffc8 	bl	8001e7e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	202e      	movs	r0, #46	; 0x2e
 8001ef4:	f001 fb33 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ef8:	202e      	movs	r0, #46	; 0x2e
 8001efa:	f001 fb4a 	bl	8003592 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_IPCC_MspInit+0x44>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d113      	bne.n	8001f3e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f1a:	f7ff ffb0 	bl	8001e7e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	202c      	movs	r0, #44	; 0x2c
 8001f24:	f001 fb1b 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f28:	202c      	movs	r0, #44	; 0x2c
 8001f2a:	f001 fb32 	bl	8003592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	202d      	movs	r0, #45	; 0x2d
 8001f34:	f001 fb13 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f38:	202d      	movs	r0, #45	; 0x2d
 8001f3a:	f001 fb2a 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	58000c00 	.word	0x58000c00

08001f4c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	; 0x58
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	2250      	movs	r2, #80	; 0x50
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f008 f9a5 	bl	800a2ac <memset>
  if(hrng->Instance==RNG)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_RNG_MspInit+0x50>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d113      	bne.n	8001f94 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f76:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fa26 	bl	80053ce <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001f88:	f7ff fd90 	bl	8001aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f8c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001f90:	f7ff ff75 	bl	8001e7e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3758      	adds	r7, #88	; 0x58
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	58001000 	.word	0x58001000

08001fa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b096      	sub	sp, #88	; 0x58
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa8:	f107 0308 	add.w	r3, r7, #8
 8001fac:	2250      	movs	r2, #80	; 0x50
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f008 f97b 	bl	800a2ac <memset>
  if(hrtc->Instance==RTC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_RTC_MspInit+0x64>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d11d      	bne.n	8001ffc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 f9fc 	bl	80053ce <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001fdc:	f7ff fd66 	bl	8001aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fe0:	f7ff ff3c 	bl	8001e5c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001fe4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fe8:	f7ff ff62 	bl	8001eb0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f001 fab4 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f001 facb 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3758      	adds	r7, #88	; 0x58
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40002800 	.word	0x40002800

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler+0x4>

08002022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler+0x4>

0800202e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f001 f8e0 	bl	8003220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002068:	f7ff f81a 	bl	80010a0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <DMA1_Channel4_IRQHandler+0x10>)
 8002076:	f001 fb8e 	bl	8003796 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200003cc 	.word	0x200003cc

08002084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <USART1_IRQHandler+0x10>)
 800208a:	f003 fe65 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000338 	.word	0x20000338

08002098 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <LPUART1_IRQHandler+0x10>)
 800209e:	f003 fe5b 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200002a4 	.word	0x200002a4

080020ac <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80020b0:	f000 fde2 	bl	8002c78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80020bc:	f000 fe14 	bl	8002ce8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80020c8:	f001 fdd6 	bl	8003c78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA2_Channel4_IRQHandler+0x10>)
 80020d6:	f001 fb5e 	bl	8003796 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000042c 	.word	0x2000042c

080020e4 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80020e8:	2010      	movs	r0, #16
 80020ea:	f001 fdad 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f001 fda6 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002104:	2002      	movs	r0, #2
 8002106:	f001 fd9f 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <LL_FLASH_GetUDN+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	1fff7580 	.word	0x1fff7580

08002128 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <LL_FLASH_GetDeviceID+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	1fff7584 	.word	0x1fff7584

08002140 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <LL_FLASH_GetSTCompanyID+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0a1b      	lsrs	r3, r3, #8
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	1fff7584 	.word	0x1fff7584

08002158 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b090      	sub	sp, #64	; 0x40
 800215c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <APP_BLE_Init+0xb4>)
 8002160:	1d3c      	adds	r4, r7, #4
 8002162:	461d      	mov	r5, r3
 8002164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002174:	c403      	stmia	r4!, {r0, r1}
 8002176:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002178:	f000 f972 	bl	8002460 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800217c:	2101      	movs	r1, #1
 800217e:	2002      	movs	r0, #2
 8002180:	f007 fdbe 	bl	8009d00 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <APP_BLE_Init+0xb8>)
 8002186:	2100      	movs	r1, #0
 8002188:	2004      	movs	r0, #4
 800218a:	f007 ff1b 	bl	8009fc4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4618      	mov	r0, r3
 8002192:	f006 ff61 	bl	8009058 <SHCI_C2_BLE_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 800219c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <APP_BLE_Init+0x50>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80021a4:	f7ff fc82 	bl	8001aac <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80021a8:	f000 f970 	bl	800248c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80021ac:	f007 faa8 	bl	8009700 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <APP_BLE_Init+0xbc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <APP_BLE_Init+0xbc>)
 80021ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021be:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <APP_BLE_Init+0xc0>)
 80021c2:	2100      	movs	r1, #0
 80021c4:	2001      	movs	r0, #1
 80021c6:	f007 fefd 	bl	8009fc4 <UTIL_SEQ_RegTask>
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 80021ca:	f000 fb75 	bl	80028b8 <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 80021ce:	f000 fbb7 	bl	8002940 <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <APP_BLE_Init+0xc4>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	4912      	ldr	r1, [pc, #72]	; (8002220 <APP_BLE_Init+0xc8>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff f903 	bl	80013e4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <APP_BLE_Init+0xbc>)
 80021e0:	2202      	movs	r2, #2
 80021e2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <APP_BLE_Init+0xbc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 80021ea:	f641 000d 	movw	r0, #6157	; 0x180d
 80021ee:	f000 facf 	bl	8002790 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <APP_BLE_Init+0xcc>)
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <APP_BLE_Init+0xd0>)
 80021fa:	22a0      	movs	r2, #160	; 0xa0
 80021fc:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 fa12 	bl	8002628 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8002204:	bf00      	nop
}
 8002206:	3740      	adds	r7, #64	; 0x40
 8002208:	46bd      	mov	sp, r7
 800220a:	bdb0      	pop	{r4, r5, r7, pc}
 800220c:	0800a2fc 	.word	0x0800a2fc
 8002210:	080088f9 	.word	0x080088f9
 8002214:	200004cc 	.word	0x200004cc
 8002218:	080027f9 	.word	0x080027f9
 800221c:	080027e9 	.word	0x080027e9
 8002220:	2000054d 	.word	0x2000054d
 8002224:	20000550 	.word	0x20000550
 8002228:	20000552 	.word	0x20000552

0800222c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8002234:	2392      	movs	r3, #146	; 0x92
 8002236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2bff      	cmp	r3, #255	; 0xff
 8002246:	d062      	beq.n	800230e <SVCCTL_App_Notification+0xe2>
 8002248:	2bff      	cmp	r3, #255	; 0xff
 800224a:	f300 80a6 	bgt.w	800239a <SVCCTL_App_Notification+0x16e>
 800224e:	2b05      	cmp	r3, #5
 8002250:	d002      	beq.n	8002258 <SVCCTL_App_Notification+0x2c>
 8002252:	2b3e      	cmp	r3, #62	; 0x3e
 8002254:	d016      	beq.n	8002284 <SVCCTL_App_Notification+0x58>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8002256:	e0a0      	b.n	800239a <SVCCTL_App_Notification+0x16e>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	3302      	adds	r3, #2
 800225c:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002264:	b29a      	uxth	r2, r3
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <SVCCTL_App_Notification+0x180>)
 8002268:	8adb      	ldrh	r3, [r3, #22]
 800226a:	429a      	cmp	r2, r3
 800226c:	d106      	bne.n	800227c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800226e:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <SVCCTL_App_Notification+0x180>)
 8002270:	2200      	movs	r2, #0
 8002272:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002274:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <SVCCTL_App_Notification+0x180>)
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800227c:	2001      	movs	r0, #1
 800227e:	f000 f9d3 	bl	8002628 <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002282:	e08d      	b.n	80023a0 <SVCCTL_App_Notification+0x174>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	3302      	adds	r3, #2
 8002288:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d005      	beq.n	800229e <SVCCTL_App_Notification+0x72>
 8002292:	2b0c      	cmp	r3, #12
 8002294:	dc37      	bgt.n	8002306 <SVCCTL_App_Notification+0xda>
 8002296:	2b01      	cmp	r3, #1
 8002298:	d017      	beq.n	80022ca <SVCCTL_App_Notification+0x9e>
 800229a:	2b03      	cmp	r3, #3
          break;
 800229c:	e033      	b.n	8002306 <SVCCTL_App_Notification+0xda>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <SVCCTL_App_Notification+0x180>)
 80022a6:	8adb      	ldrh	r3, [r3, #22]
 80022a8:	f107 020e 	add.w	r2, r7, #14
 80022ac:	f107 010f 	add.w	r1, r7, #15
 80022b0:	4618      	mov	r0, r3
 80022b2:	f006 f90e 	bl	80084d2 <hci_le_read_phy>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80022bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d122      	bne.n	800230a <SVCCTL_App_Notification+0xde>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b02      	cmp	r3, #2
          break;
 80022c8:	e01f      	b.n	800230a <SVCCTL_App_Notification+0xde>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <SVCCTL_App_Notification+0x180>)
 80022d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f8fe 	bl	80014d8 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <SVCCTL_App_Notification+0x180>)
 80022de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d104      	bne.n	80022f0 <SVCCTL_App_Notification+0xc4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <SVCCTL_App_Notification+0x180>)
 80022e8:	2206      	movs	r2, #6
 80022ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80022ee:	e003      	b.n	80022f8 <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <SVCCTL_App_Notification+0x180>)
 80022f2:	2205      	movs	r2, #5
 80022f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <SVCCTL_App_Notification+0x180>)
 8002302:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002304:	e002      	b.n	800230c <SVCCTL_App_Notification+0xe0>
          break;
 8002306:	bf00      	nop
 8002308:	e04a      	b.n	80023a0 <SVCCTL_App_Notification+0x174>
          break;
 800230a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800230c:	e048      	b.n	80023a0 <SVCCTL_App_Notification+0x174>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	3302      	adds	r3, #2
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d83d      	bhi.n	800239e <SVCCTL_App_Notification+0x172>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <SVCCTL_App_Notification+0xfc>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002397 	.word	0x08002397
 800232c:	0800238f 	.word	0x0800238f
 8002330:	08002355 	.word	0x08002355
 8002334:	08002397 	.word	0x08002397
 8002338:	08002397 	.word	0x08002397
 800233c:	08002369 	.word	0x08002369
 8002340:	0800239f 	.word	0x0800239f
 8002344:	08002397 	.word	0x08002397
 8002348:	08002397 	.word	0x08002397
 800234c:	0800237b 	.word	0x0800237b
 8002350:	08002397 	.word	0x08002397
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <SVCCTL_App_Notification+0x180>)
 8002356:	8adb      	ldrh	r3, [r3, #22]
 8002358:	4915      	ldr	r1, [pc, #84]	; (80023b0 <SVCCTL_App_Notification+0x184>)
 800235a:	4618      	mov	r0, r3
 800235c:	f005 f970 	bl	8007640 <aci_gap_pass_key_resp>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8002366:	e017      	b.n	8002398 <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <SVCCTL_App_Notification+0x180>)
 800236a:	8adb      	ldrh	r3, [r3, #22]
 800236c:	4618      	mov	r0, r3
 800236e:	f005 fb8c 	bl	8007a8a <aci_gap_allow_rebond>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002378:	e00e      	b.n	8002398 <SVCCTL_App_Notification+0x16c>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <SVCCTL_App_Notification+0x180>)
 800237c:	8adb      	ldrh	r3, [r3, #22]
 800237e:	2101      	movs	r1, #1
 8002380:	4618      	mov	r0, r3
 8002382:	f005 fbd6 	bl	8007b32 <aci_gap_numeric_comparison_value_confirm_yesno>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 800238c:	e004      	b.n	8002398 <SVCCTL_App_Notification+0x16c>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	3302      	adds	r3, #2
 8002392:	623b      	str	r3, [r7, #32]
          break;    
 8002394:	e000      	b.n	8002398 <SVCCTL_App_Notification+0x16c>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8002396:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002398:	e001      	b.n	800239e <SVCCTL_App_Notification+0x172>
      break;
 800239a:	bf00      	nop
 800239c:	e000      	b.n	80023a0 <SVCCTL_App_Notification+0x174>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800239e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200004cc 	.word	0x200004cc
 80023b0:	0001e240 	.word	0x0001e240

080023b4 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80023ba:	2392      	movs	r3, #146	; 0x92
 80023bc:	71fb      	strb	r3, [r7, #7]

  ret = aci_gap_clear_security_db();
 80023be:	f005 fb40 	bl	8007a42 <aci_gap_clear_security_db>
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
  }
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80023d6:	2392      	movs	r3, #146	; 0x92
 80023d8:	71fb      	strb	r3, [r7, #7]
  
  ret = aci_gap_slave_security_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle); 
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <APP_BLE_Key_Button2_Action+0x20>)
 80023dc:	8adb      	ldrh	r3, [r3, #22]
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fa42 	bl	8007868 <aci_gap_slave_security_req>
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  }
  else
  {
    APP_DBG_MSG("===>> aci_gap_slave_security_req - Success\n");
  }
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200004cc 	.word	0x200004cc

080023f4 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80023fa:	2392      	movs	r3, #146	; 0x92
 80023fc:	71fb      	strb	r3, [r7, #7]

  ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <APP_BLE_Key_Button3_Action+0x68>)
 8002400:	8adb      	ldrh	r3, [r3, #22]
 8002402:	1d7a      	adds	r2, r7, #5
 8002404:	1db9      	adds	r1, r7, #6
 8002406:	4618      	mov	r0, r3
 8002408:	f006 f863 	bl	80084d2 <hci_le_read_phy>
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11d      	bne.n	8002452 <APP_BLE_Key_Button3_Action+0x5e>
  }
  else
  {
    APP_DBG_MSG("==>> hci_le_read_phy - Success\n");
    APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
    if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d10f      	bne.n	800243c <APP_BLE_Key_Button3_Action+0x48>
 800241c:	797b      	ldrb	r3, [r7, #5]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d10c      	bne.n	800243c <APP_BLE_Key_Button3_Action+0x48>
    {
      APP_DBG_MSG("==>> hci_le_set_phy PHY Param  TX= %d, RX= %d - ", TX_1M, RX_1M);
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_1M,RX_1M,0);
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <APP_BLE_Key_Button3_Action+0x68>)
 8002424:	8ad8      	ldrh	r0, [r3, #22]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2301      	movs	r3, #1
 800242c:	2201      	movs	r2, #1
 800242e:	2100      	movs	r1, #0
 8002430:	f006 f94a 	bl	80086c8 <hci_le_set_phy>
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
      if (ret != BLE_STATUS_SUCCESS)
 8002438:	bf00      	nop
      {
        APP_DBG_MSG("Success\n\r");
      }
    } 
  }
}
 800243a:	e00a      	b.n	8002452 <APP_BLE_Key_Button3_Action+0x5e>
      ret = hci_le_set_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED,0);
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <APP_BLE_Key_Button3_Action+0x68>)
 800243e:	8ad8      	ldrh	r0, [r3, #22]
 8002440:	2300      	movs	r3, #0
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2302      	movs	r3, #2
 8002446:	2202      	movs	r2, #2
 8002448:	2100      	movs	r1, #0
 800244a:	f006 f93d 	bl	80086c8 <hci_le_set_phy>
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200004cc 	.word	0x200004cc

08002460 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <Ble_Tl_Init+0x20>)
 8002468:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <Ble_Tl_Init+0x24>)
 800246c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <Ble_Tl_Init+0x28>)
 8002474:	f006 fa24 	bl	80088c0 <hci_init>

  return;
 8002478:	bf00      	nop
}
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20030028 	.word	0x20030028
 8002484:	08002883 	.word	0x08002883
 8002488:	0800284b 	.word	0x0800284b

0800248c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248e:	b08d      	sub	sp, #52	; 0x34
 8002490:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8002492:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002496:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002498:	2392      	movs	r3, #146	; 0x92
 800249a:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800249c:	f005 fff5 	bl	800848a <hci_reset>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80024a4:	f000 f930 	bl	8002708 <BleGetBdAddress>
 80024a8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	2106      	movs	r1, #6
 80024ae:	2000      	movs	r0, #0
 80024b0:	f005 feff 	bl	80082b2 <aci_hal_write_config_data>
 80024b4:	4603      	mov	r3, r0
 80024b6:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	795a      	ldrb	r2, [r3, #5]
 80024bc:	4b54      	ldr	r3, [pc, #336]	; (8002610 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80024be:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	791a      	ldrb	r2, [r3, #4]
 80024c4:	4b52      	ldr	r3, [pc, #328]	; (8002610 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80024c6:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	78da      	ldrb	r2, [r3, #3]
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80024ce:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	789a      	ldrb	r2, [r3, #2]
 80024d4:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80024d6:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	785a      	ldrb	r2, [r3, #1]
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80024de:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <Ble_Hci_Gap_Gatt_Init+0x184>)
 80024e6:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80024e8:	4a4a      	ldr	r2, [pc, #296]	; (8002614 <Ble_Hci_Gap_Gatt_Init+0x188>)
 80024ea:	2110      	movs	r1, #16
 80024ec:	2018      	movs	r0, #24
 80024ee:	f005 fee0 	bl	80082b2 <aci_hal_write_config_data>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80024f6:	4a48      	ldr	r2, [pc, #288]	; (8002618 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80024f8:	2110      	movs	r1, #16
 80024fa:	2008      	movs	r0, #8
 80024fc:	f005 fed9 	bl	80082b2 <aci_hal_write_config_data>
 8002500:	4603      	mov	r3, r0
 8002502:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002504:	2118      	movs	r1, #24
 8002506:	2001      	movs	r0, #1
 8002508:	f005 ff58 	bl	80083bc <aci_hal_set_tx_power_level>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8002510:	f005 fb76 	bl	8007c00 <aci_gatt_init>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01f      	beq.n	800256a <Ble_Hci_Gap_Gatt_Init+0xde>
  {
    const char *name = "HRSTM";
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <Ble_Hci_Gap_Gatt_Init+0x190>)
 800252c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800252e:	1dba      	adds	r2, r7, #6
 8002530:	7bf8      	ldrb	r0, [r7, #15]
 8002532:	1cbb      	adds	r3, r7, #2
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4613      	mov	r3, r2
 800253c:	2207      	movs	r2, #7
 800253e:	2100      	movs	r1, #0
 8002540:	f005 f8e5 	bl	800770e <aci_gap_init>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8002548:	88fc      	ldrh	r4, [r7, #6]
 800254a:	88bd      	ldrh	r5, [r7, #4]
 800254c:	68b8      	ldr	r0, [r7, #8]
 800254e:	f7fd fe1f 	bl	8000190 <strlen>
 8002552:	4603      	mov	r3, r0
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	4629      	mov	r1, r5
 8002560:	4620      	mov	r0, r4
 8002562:	f005 fd50 	bl	8008006 <aci_gatt_update_char_value>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800256a:	88f8      	ldrh	r0, [r7, #6]
 800256c:	8879      	ldrh	r1, [r7, #2]
 800256e:	463b      	mov	r3, r7
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2302      	movs	r3, #2
 8002574:	2200      	movs	r2, #0
 8002576:	f005 fd46 	bl	8008006 <aci_gatt_update_char_value>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800257e:	2202      	movs	r2, #2
 8002580:	2102      	movs	r1, #2
 8002582:	2000      	movs	r0, #0
 8002584:	f006 f823 	bl	80085ce <hci_le_set_default_phy>
 8002588:	4603      	mov	r3, r0
 800258a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f004 ff3a 	bl	8007410 <aci_gap_set_io_capability>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025a8:	2208      	movs	r2, #8
 80025aa:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025ae:	2210      	movs	r2, #16
 80025b0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80025bc:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025c6:	789c      	ldrb	r4, [r3, #2]
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025ca:	785d      	ldrb	r5, [r3, #1]
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025ce:	791b      	ldrb	r3, [r3, #4]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025d2:	7952      	ldrb	r2, [r2, #5]
 80025d4:	4912      	ldr	r1, [pc, #72]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025d6:	78c9      	ldrb	r1, [r1, #3]
 80025d8:	4811      	ldr	r0, [pc, #68]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025da:	6880      	ldr	r0, [r0, #8]
 80025dc:	2600      	movs	r6, #0
 80025de:	9604      	str	r6, [sp, #16]
 80025e0:	9003      	str	r0, [sp, #12]
 80025e2:	9102      	str	r1, [sp, #8]
 80025e4:	9201      	str	r2, [sp, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	2201      	movs	r2, #1
 80025ec:	4629      	mov	r1, r5
 80025ee:	4620      	mov	r0, r4
 80025f0:	f004 ff62 	bl	80074b8 <aci_gap_set_authentication_requirement>
 80025f4:	4603      	mov	r3, r0
 80025f6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80025fa:	789b      	ldrb	r3, [r3, #2]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <Ble_Hci_Gap_Gatt_Init+0x17c>
  {
    ret = aci_gap_configure_whitelist();
 8002600:	f005 f9fb 	bl	80079fa <aci_gap_configure_whitelist>
 8002604:	4603      	mov	r3, r0
 8002606:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002610:	20000008 	.word	0x20000008
 8002614:	0800a4c0 	.word	0x0800a4c0
 8002618:	0800a4d0 	.word	0x0800a4d0
 800261c:	0800a338 	.word	0x0800a338
 8002620:	200004cc 	.word	0x200004cc
 8002624:	0001b207 	.word	0x0001b207

08002628 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af08      	add	r7, sp, #32
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002632:	2392      	movs	r3, #146	; 0x92
 8002634:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <Adv_Request+0xc4>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002642:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <Adv_Request+0xc8>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	81bb      	strh	r3, [r7, #12]
 8002648:	e005      	b.n	8002656 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800264a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800264e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002650:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002654:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <Adv_Request+0xcc>)
 8002658:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe ff3b 	bl	80014d8 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d10d      	bne.n	8002684 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <Adv_Request+0xcc>)
 800266a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800266e:	2b01      	cmp	r3, #1
 8002670:	d004      	beq.n	800267c <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <Adv_Request+0xcc>)
 8002674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002678:	2b02      	cmp	r3, #2
 800267a:	d103      	bne.n	8002684 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800267c:	f004 fdaa 	bl	80071d4 <aci_gap_set_non_discoverable>
 8002680:	4603      	mov	r3, r0
 8002682:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <Adv_Request+0xcc>)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <Adv_Request+0xcc>)
 800268e:	7e1b      	ldrb	r3, [r3, #24]
 8002690:	89ba      	ldrh	r2, [r7, #12]
 8002692:	89f9      	ldrh	r1, [r7, #14]
 8002694:	2000      	movs	r0, #0
 8002696:	9006      	str	r0, [sp, #24]
 8002698:	2000      	movs	r0, #0
 800269a:	9005      	str	r0, [sp, #20]
 800269c:	4816      	ldr	r0, [pc, #88]	; (80026f8 <Adv_Request+0xd0>)
 800269e:	9004      	str	r0, [sp, #16]
 80026a0:	9303      	str	r3, [sp, #12]
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <Adv_Request+0xd4>)
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	2306      	movs	r3, #6
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	2000      	movs	r0, #0
 80026b2:	f004 fdb3 	bl	800721c <aci_gap_set_discoverable>
 80026b6:	4603      	mov	r3, r0
 80026b8:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 80026ba:	4911      	ldr	r1, [pc, #68]	; (8002700 <Adv_Request+0xd8>)
 80026bc:	200e      	movs	r0, #14
 80026be:	f005 f92a 	bl	8007916 <aci_gap_update_adv_data>
 80026c2:	4603      	mov	r3, r0
 80026c4:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <Adv_Request+0xcc>)
 80026d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80026d8:	490a      	ldr	r1, [pc, #40]	; (8002704 <Adv_Request+0xdc>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe ff80 	bl	80015e0 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
}
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000550 	.word	0x20000550
 80026f0:	20000552 	.word	0x20000552
 80026f4:	200004cc 	.word	0x200004cc
 80026f8:	200004e5 	.word	0x200004e5
 80026fc:	0800a4e0 	.word	0x0800a4e0
 8002700:	20000008 	.word	0x20000008
 8002704:	0001e046 	.word	0x0001e046

08002708 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800270e:	f7ff fcff 	bl	8002110 <LL_FLASH_GetUDN>
 8002712:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d023      	beq.n	8002764 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800271c:	f7ff fd10 	bl	8002140 <LL_FLASH_GetSTCompanyID>
 8002720:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002722:	f7ff fd01 	bl	8002128 <LL_FLASH_GetDeviceID>
 8002726:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <BleGetBdAddress+0x80>)
 800272e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <BleGetBdAddress+0x80>)
 8002738:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <BleGetBdAddress+0x80>)
 8002740:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <BleGetBdAddress+0x80>)
 8002748:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <BleGetBdAddress+0x80>)
 8002752:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <BleGetBdAddress+0x80>)
 800275c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <BleGetBdAddress+0x80>)
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e00b      	b.n	800277c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8002764:	2000      	movs	r0, #0
 8002766:	f006 fc4f 	bl	8009008 <OTP_Read>
 800276a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e001      	b.n	800277c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <BleGetBdAddress+0x84>)
 800277a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800277c:	697b      	ldr	r3, [r7, #20]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200004c4 	.word	0x200004c4
 800278c:	0800a4b8 	.word	0x0800a4b8

08002790 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 800279c:	7e1b      	ldrb	r3, [r3, #24]
 800279e:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027a6:	440b      	add	r3, r1
 80027a8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027ac:	7e1b      	ldrb	r3, [r3, #24]
 80027ae:	3301      	adds	r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027b4:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027be:	7e1b      	ldrb	r3, [r3, #24]
 80027c0:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 80027c2:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027c6:	440b      	add	r3, r1
 80027c8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027cc:	7e1b      	ldrb	r3, [r3, #24]
 80027ce:	3301      	adds	r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <Add_Advertisment_Service_UUID+0x54>)
 80027d4:	761a      	strb	r2, [r3, #24]

  return;
 80027d6:	bf00      	nop
}
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	200004cc 	.word	0x200004cc

080027e8 <Adv_Mgr>:

static void Adv_Mgr(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 80027ec:	2100      	movs	r1, #0
 80027ee:	2001      	movs	r0, #1
 80027f0:	f007 fc0a 	bl	800a008 <UTIL_SEQ_SetTask>

  return;
 80027f4:	bf00      	nop
}
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <Adv_Update>:

static void Adv_Update(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7ff ff13 	bl	8002628 <Adv_Request>

  return;
 8002802:	bf00      	nop
}
 8002804:	bd80      	pop	{r7, pc}

08002806 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800280e:	2100      	movs	r1, #0
 8002810:	2004      	movs	r0, #4
 8002812:	f007 fbf9 	bl	800a008 <UTIL_SEQ_SetTask>

  return;
 8002816:	bf00      	nop
}
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002826:	2001      	movs	r0, #1
 8002828:	f007 fc5a 	bl	800a0e0 <UTIL_SEQ_SetEvt>

  return;
 800282c:	bf00      	nop
}
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800283c:	2001      	movs	r0, #1
 800283e:	f007 fc6f 	bl	800a120 <UTIL_SEQ_WaitEvt>

  return;
 8002842:	bf00      	nop
}
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	3308      	adds	r3, #8
 800285c:	4618      	mov	r0, r3
 800285e:	f006 ffa1 	bl	80097a4 <SVCCTL_UserEvtRx>
 8002862:	4603      	mov	r3, r0
 8002864:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002866:	7afb      	ldrb	r3, [r7, #11]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002872:	e003      	b.n	800287c <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
  return;
 800287a:	bf00      	nop
}
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <BLE_StatusNot+0x16>
 8002892:	2b01      	cmp	r3, #1
 8002894:	d006      	beq.n	80028a4 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8002896:	e00b      	b.n	80028b0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002898:	233f      	movs	r3, #63	; 0x3f
 800289a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f007 fbdf 	bl	800a060 <UTIL_SEQ_PauseTask>
      break;
 80028a2:	e005      	b.n	80028b0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80028a4:	233f      	movs	r3, #63	; 0x3f
 80028a6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f007 fbf9 	bl	800a0a0 <UTIL_SEQ_ResumeTask>
      break;
 80028ae:	bf00      	nop
  }

  return;
 80028b0:	bf00      	nop
}
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
   *
   * @param UUID
   * @param pPData
   * @return
   */
  dis_information_data.pPayload = (uint8_t*)DISAPP_MANUFACTURER_NAME;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <DISAPP_Init+0x24>)
 80028c0:	603b      	str	r3, [r7, #0]
  dis_information_data.Length = sizeof(DISAPP_MANUFACTURER_NAME);
 80028c2:	2304      	movs	r3, #4
 80028c4:	713b      	strb	r3, [r7, #4]
  DIS_UpdateChar(MANUFACTURER_NAME_UUID, &dis_information_data);
 80028c6:	463b      	mov	r3, r7
 80028c8:	4619      	mov	r1, r3
 80028ca:	f642 2029 	movw	r0, #10793	; 0x2a29
 80028ce:	f005 ffd1 	bl	8008874 <DIS_UpdateChar>
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	0800a340 	.word	0x0800a340

080028e0 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d01a      	beq.n	8002926 <HRS_Notification+0x46>
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	dc1e      	bgt.n	8002932 <HRS_Notification+0x52>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HRS_Notification+0x1e>
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d007      	beq.n	800290c <HRS_Notification+0x2c>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 80028fc:	e019      	b.n	8002932 <HRS_Notification+0x52>
      HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 0;
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HRS_Notification+0x5c>)
 8002900:	2200      	movs	r2, #0
 8002902:	809a      	strh	r2, [r3, #4]
      HRSAPP_Context.ResetEnergyExpended = 1;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HRS_Notification+0x5c>)
 8002906:	2201      	movs	r2, #1
 8002908:	731a      	strb	r2, [r3, #12]
      break;
 800290a:	e013      	b.n	8002934 <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HRS_Notification+0x5c>)
 800290e:	7b5b      	ldrb	r3, [r3, #13]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fde1 	bl	80014d8 <HW_TS_Stop>
      HW_TS_Start(HRSAPP_Context.TimerMeasurement_Id, HRSAPP_MEASUREMENT_INTERVAL);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HRS_Notification+0x5c>)
 8002918:	7b5b      	ldrb	r3, [r3, #13]
 800291a:	f640 0101 	movw	r1, #2049	; 0x801
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fe5e 	bl	80015e0 <HW_TS_Start>
      break;
 8002924:	e006      	b.n	8002934 <HRS_Notification+0x54>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HRS_Notification+0x5c>)
 8002928:	7b5b      	ldrb	r3, [r3, #13]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fdd4 	bl	80014d8 <HW_TS_Stop>
      break;
 8002930:	e000      	b.n	8002934 <HRS_Notification+0x54>
      break;
 8002932:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 8002934:	bf00      	nop
}
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000554 	.word	0x20000554

08002940 <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HRSAPP_Measurement );
 8002946:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HRSAPP_Init+0x84>)
 8002948:	2100      	movs	r1, #0
 800294a:	2002      	movs	r0, #2
 800294c:	f007 fb3a 	bl	8009fc4 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN HRSAPP_Init */
  /**
   * Set Body Sensor Location
   */
  HRSAPP_Context.ResetEnergyExpended = 0;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HRSAPP_Init+0x88>)
 8002952:	2200      	movs	r2, #0
 8002954:	731a      	strb	r2, [r3, #12]
  HRSAPP_Context.BodySensorLocationChar = HRS_BODY_SENSOR_LOCATION_HAND;
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HRSAPP_Init+0x88>)
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
  HRS_UpdateChar(SENSOR_LOCATION_UUID, (uint8_t *)&HRSAPP_Context.BodySensorLocationChar);
 800295c:	491a      	ldr	r1, [pc, #104]	; (80029c8 <HRSAPP_Init+0x88>)
 800295e:	f642 2038 	movw	r0, #10808	; 0x2a38
 8002962:	f006 fb0d 	bl	8008f80 <HRS_UpdateChar>

  /**
   * Set Flags for measurement value
   */

  HRSAPP_Context.MeasurementvalueChar.Flags = ( HRS_HRM_VALUE_FORMAT_UINT16      | 
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HRSAPP_Init+0x88>)
 8002968:	221f      	movs	r2, #31
 800296a:	72da      	strb	r2, [r3, #11]
                                                  HRS_HRM_SENSOR_CONTACTS_SUPPORTED |
                                                  HRS_HRM_ENERGY_EXPENDED_PRESENT  |
                                                  HRS_HRM_RR_INTERVAL_PRESENT );

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HRSAPP_Init+0x88>)
 800296e:	7adb      	ldrb	r3, [r3, #11]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HRSAPP_Init+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 10;
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HRSAPP_Init+0x88>)
 800297a:	220a      	movs	r2, #10
 800297c:	809a      	strh	r2, [r3, #4]
#endif
  
#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_RR_INTERVAL_PRESENT)
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HRSAPP_Init+0x88>)
 8002980:	7adb      	ldrb	r3, [r3, #11]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HRSAPP_Init+0x70>
  {
    uint8_t i;
    
    HRSAPP_Context.MeasurementvalueChar.NbreOfValidRRIntervalValues = BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG;
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HRSAPP_Init+0x88>)
 800298c:	2201      	movs	r2, #1
 800298e:	729a      	strb	r2, [r3, #10]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	e009      	b.n	80029aa <HRSAPP_Init+0x6a>
      HRSAPP_Context.MeasurementvalueChar.aRRIntervalValues[i] = 1024;
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HRSAPP_Init+0x88>)
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a2:	80da      	strh	r2, [r3, #6]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	3301      	adds	r3, #1
 80029a8:	71fb      	strb	r3, [r7, #7]
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f2      	beq.n	8002996 <HRSAPP_Init+0x56>
#endif
  
  /**
   * Create timer for Heart Rate Measurement
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HRSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HrMeas);
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HRSAPP_Init+0x8c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	4906      	ldr	r1, [pc, #24]	; (80029d0 <HRSAPP_Init+0x90>)
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fd14 	bl	80013e4 <HW_TS_Create>

/* USER CODE END HRSAPP_Init */
  return;
 80029bc:	bf00      	nop
}
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	20000554 	.word	0x20000554
 80029cc:	08002a3d 	.word	0x08002a3d
 80029d0:	20000561 	.word	0x20000561

080029d4 <HRSAPP_Measurement>:

static void HRSAPP_Measurement(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */
  uint32_t measurement;

  measurement = ((HRSAPP_Read_RTC_SSR_SS()) & 0x07) + 65;
 80029da:	f000 f837 	bl	8002a4c <HRSAPP_Read_RTC_SSR_SS>
 80029de:	4603      	mov	r3, r0
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	3341      	adds	r3, #65	; 0x41
 80029e6:	607b      	str	r3, [r7, #4]

  HRSAPP_Context.MeasurementvalueChar.MeasurementValue = measurement;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HRSAPP_Measurement+0x60>)
 80029ee:	805a      	strh	r2, [r3, #2]
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HRSAPP_Measurement+0x60>)
 80029f2:	7adb      	ldrb	r3, [r3, #11]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HRSAPP_Measurement+0x3e>
     (HRSAPP_Context.ResetEnergyExpended == 0))
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HRSAPP_Measurement+0x60>)
 80029fe:	7b1b      	ldrb	r3, [r3, #12]
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <HRSAPP_Measurement+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended += 5;
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HRSAPP_Measurement+0x60>)
 8002a06:	889b      	ldrh	r3, [r3, #4]
 8002a08:	3305      	adds	r3, #5
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HRSAPP_Measurement+0x60>)
 8002a0e:	809a      	strh	r2, [r3, #4]
 8002a10:	e006      	b.n	8002a20 <HRSAPP_Measurement+0x4c>
  else if(HRSAPP_Context.ResetEnergyExpended == 1)
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HRSAPP_Measurement+0x60>)
 8002a14:	7b1b      	ldrb	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HRSAPP_Measurement+0x4c>
    HRSAPP_Context.ResetEnergyExpended = 0;
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HRSAPP_Measurement+0x60>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	731a      	strb	r2, [r3, #12]
#endif

  HRS_UpdateChar(HEART_RATE_MEASURMENT_UUID, (uint8_t *)&HRSAPP_Context.MeasurementvalueChar);
 8002a20:	4905      	ldr	r1, [pc, #20]	; (8002a38 <HRSAPP_Measurement+0x64>)
 8002a22:	f642 2037 	movw	r0, #10807	; 0x2a37
 8002a26:	f006 faab 	bl	8008f80 <HRS_UpdateChar>

/* USER CODE END HRSAPP_Measurement */
  return;
 8002a2a:	bf00      	nop
}
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000554 	.word	0x20000554
 8002a38:	20000556 	.word	0x20000556

08002a3c <HrMeas>:

static void HrMeas( void )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8002a40:	2100      	movs	r1, #0
 8002a42:	2002      	movs	r0, #2
 8002a44:	f007 fae0 	bl	800a008 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 8002a48:	bf00      	nop
}
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HRSAPP_Read_RTC_SSR_SS>:

static uint32_t HRSAPP_Read_RTC_SSR_SS ( void )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HRSAPP_Read_RTC_SSR_SS+0x14>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	b29b      	uxth	r3, r3
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40002800 	.word	0x40002800

08002a64 <LL_PWR_EnableBootC2>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <LL_PWR_EnableBootC2+0x1c>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <LL_PWR_EnableBootC2+0x1c>)
 8002a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	58000400 	.word	0x58000400

08002a84 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002a8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002a92:	4905      	ldr	r1, [pc, #20]	; (8002aa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	58000800 	.word	0x58000800

08002aac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	620b      	str	r3, [r1, #32]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	58000800 	.word	0x58000800

08002ad0 <LL_AHB3_GRP1_EnableClock>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	605a      	str	r2, [r3, #4]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4013      	ands	r3, r2
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d101      	bne.n	8002c3e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d101      	bne.n	8002c68 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4819      	ldr	r0, [pc, #100]	; (8002ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8002c80:	f7ff ffe4 	bl	8002c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HW_IPCC_Rx_Handler+0x26>
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002c98:	f000 f8da 	bl	8002e50 <HW_IPCC_SYS_EvtHandler>
 8002c9c:	e01f      	b.n	8002cde <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4810      	ldr	r0, [pc, #64]	; (8002ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8002ca2:	f7ff ffd3 	bl	8002c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HW_IPCC_Rx_Handler+0x46>
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8002cb8:	f000 f88e 	bl	8002dd8 <HW_IPCC_BLE_EvtHandler>
 8002cbc:	e00f      	b.n	8002cde <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8002cc2:	f7ff ffc3 	bl	8002c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <HW_IPCC_Rx_Handler+0x68>
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HW_IPCC_Rx_Handler+0x6c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8002cda:	f000 f905 	bl	8002ee8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
}
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	58000c00 	.word	0x58000c00

08002ce8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002cec:	2102      	movs	r1, #2
 8002cee:	481a      	ldr	r0, [pc, #104]	; (8002d58 <HW_IPCC_Tx_Handler+0x70>)
 8002cf0:	f7ff ff97 	bl	8002c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HW_IPCC_Tx_Handler+0x26>
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <HW_IPCC_Tx_Handler+0x70>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002d08:	f000 f896 	bl	8002e38 <HW_IPCC_SYS_CmdEvtHandler>
 8002d0c:	e020      	b.n	8002d50 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002d0e:	2108      	movs	r1, #8
 8002d10:	4811      	ldr	r0, [pc, #68]	; (8002d58 <HW_IPCC_Tx_Handler+0x70>)
 8002d12:	f7ff ff86 	bl	8002c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HW_IPCC_Tx_Handler+0x48>
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HW_IPCC_Tx_Handler+0x70>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002d2a:	f000 f8bf 	bl	8002eac <HW_IPCC_MM_FreeBufHandler>
 8002d2e:	e00f      	b.n	8002d50 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002d30:	2120      	movs	r1, #32
 8002d32:	4809      	ldr	r0, [pc, #36]	; (8002d58 <HW_IPCC_Tx_Handler+0x70>)
 8002d34:	f7ff ff75 	bl	8002c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HW_IPCC_Tx_Handler+0x6a>
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HW_IPCC_Tx_Handler+0x70>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002d4c:	f000 f850 	bl	8002df0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
}
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	58000c00 	.word	0x58000c00

08002d5c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002d60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d64:	f7ff fecd 	bl	8002b02 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8002d68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d6c:	f7ff fe9e 	bl	8002aac <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8002d70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d74:	f7ff fe86 	bl	8002a84 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8002d78:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8002d7a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8002d7c:	f7ff fe72 	bl	8002a64 <LL_PWR_EnableBootC2>

  return;
 8002d80:	bf00      	nop
}
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8002d88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d8c:	f7ff fea0 	bl	8002ad0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8002d90:	4806      	ldr	r0, [pc, #24]	; (8002dac <HW_IPCC_Init+0x28>)
 8002d92:	f7ff fee2 	bl	8002b5a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8002d96:	4805      	ldr	r0, [pc, #20]	; (8002dac <HW_IPCC_Init+0x28>)
 8002d98:	f7ff fecf 	bl	8002b3a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002d9c:	202c      	movs	r0, #44	; 0x2c
 8002d9e:	f000 fbf8 	bl	8003592 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002da2:	202d      	movs	r0, #45	; 0x2d
 8002da4:	f000 fbf5 	bl	8003592 <HAL_NVIC_EnableIRQ>

  return;
 8002da8:	bf00      	nop
}
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	58000c00 	.word	0x58000c00

08002db0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002db4:	2101      	movs	r1, #1
 8002db6:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <HW_IPCC_BLE_Init+0x10>)
 8002db8:	f7ff ff04 	bl	8002bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002dbc:	bf00      	nop
}
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58000c00 	.word	0x58000c00

08002dc4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <HW_IPCC_BLE_SendCmd+0x10>)
 8002dcc:	f7ff ff1a 	bl	8002c04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002dd0:	bf00      	nop
}
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	58000c00 	.word	0x58000c00

08002dd8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8002ddc:	f006 fdc6 	bl	800996c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002de0:	2101      	movs	r1, #1
 8002de2:	4802      	ldr	r0, [pc, #8]	; (8002dec <HW_IPCC_BLE_EvtHandler+0x14>)
 8002de4:	f7ff ff00 	bl	8002be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002de8:	bf00      	nop
}
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58000c00 	.word	0x58000c00

08002df0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002df4:	2120      	movs	r1, #32
 8002df6:	4803      	ldr	r0, [pc, #12]	; (8002e04 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002df8:	f7ff fed2 	bl	8002ba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002dfc:	f006 fde6 	bl	80099cc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8002e00:	bf00      	nop
}
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58000c00 	.word	0x58000c00

08002e08 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <HW_IPCC_SYS_Init+0x10>)
 8002e10:	f7ff fed8 	bl	8002bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002e14:	bf00      	nop
}
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	58000c00 	.word	0x58000c00

08002e1c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002e20:	2102      	movs	r1, #2
 8002e22:	4804      	ldr	r0, [pc, #16]	; (8002e34 <HW_IPCC_SYS_SendCmd+0x18>)
 8002e24:	f7ff feee 	bl	8002c04 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4802      	ldr	r0, [pc, #8]	; (8002e34 <HW_IPCC_SYS_SendCmd+0x18>)
 8002e2c:	f7ff fea5 	bl	8002b7a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8002e30:	bf00      	nop
}
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	58000c00 	.word	0x58000c00

08002e38 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4803      	ldr	r0, [pc, #12]	; (8002e4c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8002e40:	f7ff feae 	bl	8002ba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002e44:	f006 fe12 	bl	8009a6c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002e48:	bf00      	nop
}
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58000c00 	.word	0x58000c00

08002e50 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002e54:	f006 fe20 	bl	8009a98 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002e58:	2102      	movs	r1, #2
 8002e5a:	4802      	ldr	r0, [pc, #8]	; (8002e64 <HW_IPCC_SYS_EvtHandler+0x14>)
 8002e5c:	f7ff fec4 	bl	8002be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002e60:	bf00      	nop
}
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58000c00 	.word	0x58000c00

08002e68 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002e70:	2108      	movs	r1, #8
 8002e72:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002e74:	f7ff fed5 	bl	8002c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002e84:	2108      	movs	r1, #8
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002e88:	f7ff fe77 	bl	8002b7a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002e8c:	e006      	b.n	8002e9c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002e92:	2108      	movs	r1, #8
 8002e94:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002e96:	f7ff feb5 	bl	8002c04 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8002e9a:	bf00      	nop
}
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	58000c00 	.word	0x58000c00
 8002ea8:	20000564 	.word	0x20000564

08002eac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002eb4:	f7ff fe74 	bl	8002ba0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002ebe:	2108      	movs	r1, #8
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002ec2:	f7ff fe9f 	bl	8002c04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002ec6:	bf00      	nop
}
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	58000c00 	.word	0x58000c00
 8002ed0:	20000564 	.word	0x20000564

08002ed4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002ed8:	2108      	movs	r1, #8
 8002eda:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <HW_IPCC_TRACES_Init+0x10>)
 8002edc:	f7ff fe72 	bl	8002bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002ee0:	bf00      	nop
}
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58000c00 	.word	0x58000c00

08002ee8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002eec:	f006 fe7c 	bl	8009be8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002ef0:	2108      	movs	r1, #8
 8002ef2:	4802      	ldr	r0, [pc, #8]	; (8002efc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8002ef4:	f7ff fe78 	bl	8002be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002ef8:	bf00      	nop
}
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	58000c00 	.word	0x58000c00

08002f00 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002f00:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f02:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f04:	3304      	adds	r3, #4

08002f06 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f06:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f08:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002f0a:	d3f9      	bcc.n	8002f00 <CopyDataInit>
  bx lr
 8002f0c:	4770      	bx	lr

08002f0e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002f0e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002f10:	3004      	adds	r0, #4

08002f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002f12:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002f14:	d3fb      	bcc.n	8002f0e <FillZerobss>
  bx lr
 8002f16:	4770      	bx	lr

08002f18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002f1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f1c:	f000 f8b0 	bl	8003080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002f20:	480b      	ldr	r0, [pc, #44]	; (8002f50 <LoopForever+0x8>)
 8002f22:	490c      	ldr	r1, [pc, #48]	; (8002f54 <LoopForever+0xc>)
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <LoopForever+0x10>)
 8002f26:	2300      	movs	r3, #0
 8002f28:	f7ff ffed 	bl	8002f06 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002f2c:	480b      	ldr	r0, [pc, #44]	; (8002f5c <LoopForever+0x14>)
 8002f2e:	490c      	ldr	r1, [pc, #48]	; (8002f60 <LoopForever+0x18>)
 8002f30:	2300      	movs	r3, #0
 8002f32:	f7ff ffee 	bl	8002f12 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f36:	480b      	ldr	r0, [pc, #44]	; (8002f64 <LoopForever+0x1c>)
 8002f38:	490b      	ldr	r1, [pc, #44]	; (8002f68 <LoopForever+0x20>)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f7ff ffe9 	bl	8002f12 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f40:	f007 f982 	bl	800a248 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002f44:	f7fe fc88 	bl	8001858 <main>

08002f48 <LoopForever>:

LoopForever:
  b LoopForever
 8002f48:	e7fe      	b.n	8002f48 <LoopForever>
 8002f4a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002f4c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002f50:	20000008 	.word	0x20000008
 8002f54:	20000038 	.word	0x20000038
 8002f58:	0800a58c 	.word	0x0800a58c
  INIT_BSS _sbss, _ebss
 8002f5c:	20000090 	.word	0x20000090
 8002f60:	20000680 	.word	0x20000680
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f64:	200301e4 	.word	0x200301e4
 8002f68:	20030a67 	.word	0x20030a67

08002f6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC1_IRQHandler>

08002f6e <LL_AHB2_GRP1_EnableClock>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460a      	mov	r2, r1
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	4613      	mov	r3, r2
 8002fae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <BSP_PB_Init+0x2e>
 8002fc6:	2004      	movs	r0, #4
 8002fc8:	f7ff ffd1 	bl	8002f6e <LL_AHB2_GRP1_EnableClock>
 8002fcc:	e00c      	b.n	8002fe8 <BSP_PB_Init+0x48>
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d103      	bne.n	8002fdc <BSP_PB_Init+0x3c>
 8002fd4:	2008      	movs	r0, #8
 8002fd6:	f7ff ffca 	bl	8002f6e <LL_AHB2_GRP1_EnableClock>
 8002fda:	e005      	b.n	8002fe8 <BSP_PB_Init+0x48>
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d102      	bne.n	8002fe8 <BSP_PB_Init+0x48>
 8002fe2:	2008      	movs	r0, #8
 8002fe4:	f7ff ffc3 	bl	8002f6e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002fe8:	79bb      	ldrb	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d117      	bne.n	800301e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <BSP_PB_Init+0xd4>)
 8002ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ff6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003000:	2302      	movs	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <BSP_PB_Init+0xd8>)
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	f107 020c 	add.w	r2, r7, #12
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fc90 	bl	8003938 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003018:	2001      	movs	r0, #1
 800301a:	f7fd fbf9 	bl	8000810 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800301e:	79bb      	ldrb	r3, [r7, #6]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d123      	bne.n	800306c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <BSP_PB_Init+0xd4>)
 8003028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003032:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003036:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <BSP_PB_Init+0xd8>)
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	f107 020c 	add.w	r2, r7, #12
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc76 	bl	8003938 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <BSP_PB_Init+0xdc>)
 8003050:	5cd3      	ldrb	r3, [r2, r3]
 8003052:	b25b      	sxtb	r3, r3
 8003054:	2200      	movs	r2, #0
 8003056:	210f      	movs	r1, #15
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fa80 	bl	800355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <BSP_PB_Init+0xdc>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	b25b      	sxtb	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fa93 	bl	8003592 <HAL_NVIC_EnableIRQ>
  }
}
 800306c:	bf00      	nop
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	0800a4e8 	.word	0x0800a4e8
 8003078:	20000018 	.word	0x20000018
 800307c:	0800a4f0 	.word	0x0800a4f0

08003080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <SystemInit+0xa0>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <SystemInit+0xa0>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <SystemInit+0xa0>)
 8003092:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003096:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80030b2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <SystemInit+0xa4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d0:	f023 0305 	bic.w	r3, r3, #5
 80030d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <SystemInit+0xa8>)
 80030f2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <SystemInit+0xa8>)
 80030fa:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00
 8003124:	faf6fefb 	.word	0xfaf6fefb
 8003128:	22041000 	.word	0x22041000

0800312c <LL_DBGMCU_EnableDBGSleepMode>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6053      	str	r3, [r2, #4]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e0042000 	.word	0xe0042000

0800314c <LL_DBGMCU_EnableDBGStopMode>:
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	6053      	str	r3, [r2, #4]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e0042000 	.word	0xe0042000

0800316c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_Init+0x3c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <HAL_Init+0x3c>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003182:	2003      	movs	r0, #3
 8003184:	f000 f9e0 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003188:	2000      	movs	r0, #0
 800318a:	f000 f80f 	bl	80031ac <HAL_InitTick>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	71fb      	strb	r3, [r7, #7]
 8003198:	e001      	b.n	800319e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800319a:	f7fe fea2 	bl	8001ee2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800319e:	79fb      	ldrb	r3, [r7, #7]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	58004000 	.word	0x58004000

080031ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031b8:	4b17      	ldr	r3, [pc, #92]	; (8003218 <HAL_InitTick+0x6c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d024      	beq.n	800320a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031c0:	f001 fea0 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_InitTick+0x6c>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f9f6 	bl	80035ca <HAL_SYSTICK_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	d809      	bhi.n	80031fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ea:	2200      	movs	r2, #0
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	f04f 30ff 	mov.w	r0, #4294967295
 80031f2:	f000 f9b4 	bl	800355e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_InitTick+0x70>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e007      	b.n	800320e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e004      	b.n	800320e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e001      	b.n	800320e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	2000002c 	.word	0x2000002c
 800321c:	20000028 	.word	0x20000028

08003220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_IncTick+0x20>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_IncTick+0x24>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4413      	add	r3, r2
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_IncTick+0x24>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	2000002c 	.word	0x2000002c
 8003244:	20000568 	.word	0x20000568

08003248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_GetTick+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000568 	.word	0x20000568

08003260 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_GetTickPrio+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000028 	.word	0x20000028

08003278 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_GetTickFreq+0x14>)
 800327e:	781b      	ldrb	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000002c 	.word	0x2000002c

08003290 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_SuspendTick+0x1c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_SuspendTick+0x1c>)
 800329a:	f023 0302 	bic.w	r3, r3, #2
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_ResumeTick+0x1c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_ResumeTick+0x1c>)
 80032ba:	f043 0302 	orr.w	r3, r3, #2
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80032d4:	f7ff ff2a 	bl	800312c <LL_DBGMCU_EnableDBGSleepMode>
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80032e0:	f7ff ff34 	bl	800314c <LL_DBGMCU_EnableDBGStopMode>
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	; (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db12      	blt.n	80033c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	490a      	ldr	r1, [pc, #40]	; (80033cc <__NVIC_DisableIRQ+0x44>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	3320      	adds	r3, #32
 80033b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80033b4:	f3bf 8f4f 	dsb	sy
}
 80033b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033ba:	f3bf 8f6f 	isb	sy
}
 80033be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	db0c      	blt.n	80033fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <__NVIC_SetPendingIRQ+0x38>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2001      	movs	r0, #1
 80033f2:	fa00 f202 	lsl.w	r2, r0, r2
 80033f6:	3340      	adds	r3, #64	; 0x40
 80033f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000e100 	.word	0xe000e100

0800340c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	2b00      	cmp	r3, #0
 800341c:	db0c      	blt.n	8003438 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	4907      	ldr	r1, [pc, #28]	; (8003444 <__NVIC_ClearPendingIRQ+0x38>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	2001      	movs	r0, #1
 800342e:	fa00 f202 	lsl.w	r2, r0, r2
 8003432:	3360      	adds	r3, #96	; 0x60
 8003434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff8e 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fec9 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff fee0 	bl	8003330 <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff90 	bl	800349c <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5f 	bl	8003448 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fed3 	bl	800334c <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fee3 	bl	8003388 <__NVIC_DisableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff96 	bl	8003504 <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff feed 	bl	80033d0 <__NVIC_SetPendingIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fefd 	bl	800340c <__NVIC_ClearPendingIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e04f      	b.n	80036cc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e040      	b.n	80036cc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f003 021c 	and.w	r2, r3, #28
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003696:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d005      	beq.n	80036fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2204      	movs	r2, #4
 80036f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
 80036fa:	e047      	b.n	800378c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 020e 	bic.w	r2, r2, #14
 800370a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f003 021c 	and.w	r2, r3, #28
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f202 	lsl.w	r2, r1, r2
 800373e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003748:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800376a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
    }
  }
  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 031c 	and.w	r3, r3, #28
 80037b6:	2204      	movs	r2, #4
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d026      	beq.n	8003810 <HAL_DMA_IRQHandler+0x7a>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0204 	bic.w	r2, r2, #4
 80037e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f003 021c 	and.w	r2, r3, #28
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2104      	movs	r1, #4
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d071      	beq.n	80038ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800380e:	e06c      	b.n	80038ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f003 031c 	and.w	r3, r3, #28
 8003818:	2202      	movs	r2, #2
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02e      	beq.n	8003882 <HAL_DMA_IRQHandler+0xec>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d029      	beq.n	8003882 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020a 	bic.w	r2, r2, #10
 800384a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f003 021c 	and.w	r2, r3, #28
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	2102      	movs	r1, #2
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d038      	beq.n	80038ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003880:	e033      	b.n	80038ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 031c 	and.w	r3, r3, #28
 800388a:	2208      	movs	r2, #8
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02a      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d025      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 021c 	and.w	r2, r3, #28
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
}
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2201      	movs	r2, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	015b      	lsls	r3, r3, #5
 800391c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8003920:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003924:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	601a      	str	r2, [r3, #0]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003946:	e14c      	b.n	8003be2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 813e 	beq.w	8003bdc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d005      	beq.n	8003978 <HAL_GPIO_Init+0x40>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d130      	bne.n	80039da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ae:	2201      	movs	r2, #1
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0201 	and.w	r2, r3, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d017      	beq.n	8003a16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d123      	bne.n	8003a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	08da      	lsrs	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3208      	adds	r2, #8
 8003a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	220f      	movs	r2, #15
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	08da      	lsrs	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3208      	adds	r2, #8
 8003a64:	6939      	ldr	r1, [r7, #16]
 8003a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0203 	and.w	r2, r3, #3
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8098 	beq.w	8003bdc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_GPIO_Init+0x2c8>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ad6:	d019      	beq.n	8003b0c <HAL_GPIO_Init+0x1d4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <HAL_GPIO_Init+0x2cc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_GPIO_Init+0x1d0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00d      	beq.n	8003b04 <HAL_GPIO_Init+0x1cc>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a48      	ldr	r2, [pc, #288]	; (8003c0c <HAL_GPIO_Init+0x2d4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <HAL_GPIO_Init+0x1c8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a47      	ldr	r2, [pc, #284]	; (8003c10 <HAL_GPIO_Init+0x2d8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_GPIO_Init+0x1c4>
 8003af8:	2304      	movs	r3, #4
 8003afa:	e008      	b.n	8003b0e <HAL_GPIO_Init+0x1d6>
 8003afc:	2307      	movs	r3, #7
 8003afe:	e006      	b.n	8003b0e <HAL_GPIO_Init+0x1d6>
 8003b00:	2303      	movs	r3, #3
 8003b02:	e004      	b.n	8003b0e <HAL_GPIO_Init+0x1d6>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e002      	b.n	8003b0e <HAL_GPIO_Init+0x1d6>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_GPIO_Init+0x1d6>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	f002 0203 	and.w	r2, r2, #3
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	4093      	lsls	r3, r2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b1e:	4938      	ldr	r1, [pc, #224]	; (8003c00 <HAL_GPIO_Init+0x2c8>)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b50:	4a30      	ldr	r2, [pc, #192]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b7a:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f aeab 	bne.w	8003948 <HAL_GPIO_Init+0x10>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40010000 	.word	0x40010000
 8003c04:	48000400 	.word	0x48000400
 8003c08:	48000800 	.word	0x48000800
 8003c0c:	48000c00 	.word	0x48000c00
 8003c10:	48001000 	.word	0x48001000
 8003c14:	58000800 	.word	0x58000800

08003c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c28:	787b      	ldrb	r3, [r7, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c2e:	887a      	ldrh	r2, [r7, #2]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fc fe34 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	58000800 	.word	0x58000800

08003c78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_HSEM_IRQHandler+0x30>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <HAL_HSEM_IRQHandler+0x30>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <HAL_HSEM_IRQHandler+0x30>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <HAL_HSEM_IRQHandler+0x30>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f807 	bl	8003cac <HAL_HSEM_FreeCallback>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	58001500 	.word	0x58001500

08003cac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01e      	beq.n	8003d10 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_IPCC_Init+0x60>)
 8003cd4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe f90e 	bl	8001f04 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003ce8:	68b8      	ldr	r0, [r7, #8]
 8003cea:	f000 f85b 	bl	8003da4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f82c 	bl	8003d58 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003d0e:	e001      	b.n	8003d14 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	58000c00 	.word	0x58000c00

08003d24 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e00f      	b.n	8003d86 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <IPCC_SetDefaultCallbacks+0x44>)
 8003d70:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3306      	adds	r3, #6
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <IPCC_SetDefaultCallbacks+0x48>)
 8003d7e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d9ec      	bls.n	8003d66 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	08003d25 	.word	0x08003d25
 8003da0:	08003d3f 	.word	0x08003d3f

08003da4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003db8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	223f      	movs	r2, #63	; 0x3f
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	58000400 	.word	0x58000400

08003dec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	58000400 	.word	0x58000400

08003e08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1a:	d101      	bne.n	8003e20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_HSE_Enable>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_HSE_Disable>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_RCC_HSE_IsReady>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7a:	d101      	bne.n	8003e80 <LL_RCC_HSE_IsReady+0x18>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <LL_RCC_HSE_IsReady+0x1a>
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_RCC_HSI_Enable>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_HSI_Disable>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ebc:	6013      	str	r3, [r2, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_RCC_HSI_IsReady>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	d101      	bne.n	8003ee0 <LL_RCC_HSI_IsReady+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <LL_RCC_HSI_IsReady+0x1a>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_HSI_SetCalibTrimming>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_HSI48_Enable>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_HSI48_Disable>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_RCC_HSI48_IsReady>:
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d101      	bne.n	8003f72 <LL_RCC_HSI48_IsReady+0x18>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <LL_RCC_HSI48_IsReady+0x1a>
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_LSE_Enable>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_RCC_LSE_Disable>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fb8:	bf00      	nop
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <LL_RCC_LSE_EnableBypass>:
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_RCC_LSE_DisableBypass>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_LSE_IsReady>:
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d101      	bne.n	800401e <LL_RCC_LSE_IsReady+0x18>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <LL_RCC_LSE_IsReady+0x1a>
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_LSI1_Enable>:
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_RCC_LSI1_Disable>:
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_LSI1_IsReady>:
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d101      	bne.n	8004086 <LL_RCC_LSI1_IsReady+0x18>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_RCC_LSI1_IsReady+0x1a>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_LSI2_Enable>:
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_RCC_LSI2_Disable>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_LSI2_IsReady>:
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d101      	bne.n	80040ee <LL_RCC_LSI2_IsReady+0x18>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_RCC_LSI2_IsReady+0x1a>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_LSI2_SetTrimming>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_RCC_MSI_Enable>:
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6013      	str	r3, [r2, #0]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_RCC_MSI_Disable>:
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6013      	str	r3, [r2, #0]
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_RCC_MSI_IsReady>:
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d101      	bne.n	800417a <LL_RCC_MSI_IsReady+0x16>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_RCC_MSI_IsReady+0x18>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_MSI_SetRange>:
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_MSI_GetRange>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2bb0      	cmp	r3, #176	; 0xb0
 80041c4:	d901      	bls.n	80041ca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80041c6:	23b0      	movs	r3, #176	; 0xb0
 80041c8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80041ca:	687b      	ldr	r3, [r7, #4]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_SetSysClkSource>:
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 0203 	bic.w	r2, r3, #3
 8004214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_RCC_GetSysClkSource>:
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 030c 	and.w	r3, r3, #12
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_SetAHBPrescaler>:
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_C2_RCC_SetAHBPrescaler>:
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004276:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800427a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_RCC_SetAHB4Prescaler>:
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042a6:	f023 020f 	bic.w	r2, r3, #15
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_RCC_SetAPB1Prescaler>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4313      	orrs	r3, r2
 80042de:	608b      	str	r3, [r1, #8]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_SetAPB2Prescaler>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_RCC_GetAHBPrescaler>:
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004322:	4618      	mov	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_GetAHB4Prescaler>:
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004378:	6013      	str	r3, [r2, #0]
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004396:	d101      	bne.n	800439c <LL_RCC_PLL_IsReady+0x18>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <LL_RCC_PLL_IsReady+0x1a>
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0303 	and.w	r3, r3, #3
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800440a:	b480      	push	{r7}
 800440c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800440e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d101      	bne.n	8004422 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800442e:	b480      	push	{r7}
 8004430:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004442:	d101      	bne.n	8004448 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d101      	bne.n	800446e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800448c:	d101      	bne.n	8004492 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b0:	d101      	bne.n	80044b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b08d      	sub	sp, #52	; 0x34
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e363      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 808d 	beq.w	80045fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e4:	f7ff fea1 	bl	800422a <LL_RCC_GetSysClkSource>
 80044e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ea:	f7ff ff82 	bl	80043f2 <LL_RCC_PLL_GetMainSource>
 80044ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x3e>
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	d147      	bne.n	800458c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d144      	bne.n	800458c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e347      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004512:	f7ff fe4c 	bl	80041ae <LL_RCC_MSI_GetRange>
 8004516:	4603      	mov	r3, r0
 8004518:	429c      	cmp	r4, r3
 800451a:	d914      	bls.n	8004546 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fd03 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e336      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fe26 	bl	8004186 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fe4a 	bl	80041d8 <LL_RCC_MSI_SetCalibTrimming>
 8004544:	e013      	b.n	800456e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fe1b 	bl	8004186 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fe3f 	bl	80041d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fce4 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e317      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800456e:	f000 fcc9 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004572:	4603      	mov	r3, r0
 8004574:	4aa4      	ldr	r2, [pc, #656]	; (8004808 <HAL_RCC_OscConfig+0x344>)
 8004576:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004578:	4ba4      	ldr	r3, [pc, #656]	; (800480c <HAL_RCC_OscConfig+0x348>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fe15 	bl	80031ac <HAL_InitTick>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d039      	beq.n	80045fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e308      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01e      	beq.n	80045d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004594:	f7ff fdc8 	bl	8004128 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004598:	f7fe fe56 	bl	8003248 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045a0:	f7fe fe52 	bl	8003248 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e2f5      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045b2:	f7ff fdd7 	bl	8004164 <LL_RCC_MSI_IsReady>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f1      	beq.n	80045a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fde0 	bl	8004186 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fe04 	bl	80041d8 <LL_RCC_MSI_SetCalibTrimming>
 80045d0:	e015      	b.n	80045fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045d2:	f7ff fdb8 	bl	8004146 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045d6:	f7fe fe37 	bl	8003248 <HAL_GetTick>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045de:	f7fe fe33 	bl	8003248 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e2d6      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80045f0:	f7ff fdb8 	bl	8004164 <LL_RCC_MSI_IsReady>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f1      	bne.n	80045de <HAL_RCC_OscConfig+0x11a>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d047      	beq.n	800469a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	f7ff fe0e 	bl	800422a <LL_RCC_GetSysClkSource>
 800460e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004610:	f7ff feef 	bl	80043f2 <LL_RCC_PLL_GetMainSource>
 8004614:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d005      	beq.n	8004628 <HAL_RCC_OscConfig+0x164>
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d108      	bne.n	8004634 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d134      	bne.n	800469a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e2b4      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d102      	bne.n	8004644 <HAL_RCC_OscConfig+0x180>
 800463e:	f7ff fbf5 	bl	8003e2c <LL_RCC_HSE_Enable>
 8004642:	e001      	b.n	8004648 <HAL_RCC_OscConfig+0x184>
 8004644:	f7ff fc01 	bl	8003e4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe fdfa 	bl	8003248 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe fdf6 	bl	8003248 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e299      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800466a:	f7ff fbfd 	bl	8003e68 <LL_RCC_HSE_IsReady>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f1      	beq.n	8004658 <HAL_RCC_OscConfig+0x194>
 8004674:	e011      	b.n	800469a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fe fde7 	bl	8003248 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800467e:	f7fe fde3 	bl	8003248 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e286      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004690:	f7ff fbea 	bl	8003e68 <LL_RCC_HSE_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f1      	bne.n	800467e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d04c      	beq.n	8004740 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a6:	f7ff fdc0 	bl	800422a <LL_RCC_GetSysClkSource>
 80046aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ac:	f7ff fea1 	bl	80043f2 <LL_RCC_PLL_GetMainSource>
 80046b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_OscConfig+0x200>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b0c      	cmp	r3, #12
 80046bc:	d10e      	bne.n	80046dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d10b      	bne.n	80046dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e266      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fc09 	bl	8003eec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046da:	e031      	b.n	8004740 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d019      	beq.n	8004718 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	f7ff fbd2 	bl	8003e8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fe fdae 	bl	8003248 <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fe fdaa 	bl	8003248 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e24d      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004702:	f7ff fbe1 	bl	8003ec8 <LL_RCC_HSI_IsReady>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f1      	beq.n	80046f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fbeb 	bl	8003eec <LL_RCC_HSI_SetCalibTrimming>
 8004716:	e013      	b.n	8004740 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004718:	f7ff fbc7 	bl	8003eaa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe fd94 	bl	8003248 <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fe fd90 	bl	8003248 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e233      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004736:	f7ff fbc7 	bl	8003ec8 <LL_RCC_HSI_IsReady>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f1      	bne.n	8004724 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80a3 	beq.w	80048a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d076      	beq.n	8004850 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d046      	beq.n	80047fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800476e:	f7ff fc7e 	bl	800406e <LL_RCC_LSI1_IsReady>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d113      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004778:	f7ff fc57 	bl	800402a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800477c:	f7fe fd64 	bl	8003248 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004784:	f7fe fd60 	bl	8003248 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e203      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004796:	f7ff fc6a 	bl	800406e <LL_RCC_LSI1_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f1      	beq.n	8004784 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80047a0:	f7ff fc77 	bl	8004092 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fe fd50 	bl	8003248 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80047ac:	f7fe fd4c 	bl	8003248 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1ef      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80047be:	f7ff fc8a 	bl	80040d6 <LL_RCC_LSI2_IsReady>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f1      	beq.n	80047ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fc94 	bl	80040fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80047d2:	f7ff fc3b 	bl	800404c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fe fd37 	bl	8003248 <HAL_GetTick>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047de:	f7fe fd33 	bl	8003248 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1d6      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80047f0:	f7ff fc3d 	bl	800406e <LL_RCC_LSI1_IsReady>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f1      	bne.n	80047de <HAL_RCC_OscConfig+0x31a>
 80047fa:	e051      	b.n	80048a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80047fc:	f7ff fc15 	bl	800402a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fe fd22 	bl	8003248 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004806:	e00c      	b.n	8004822 <HAL_RCC_OscConfig+0x35e>
 8004808:	20000024 	.word	0x20000024
 800480c:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004810:	f7fe fd1a 	bl	8003248 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1bd      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004822:	f7ff fc24 	bl	800406e <LL_RCC_LSI1_IsReady>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f1      	beq.n	8004810 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800482c:	f7ff fc42 	bl	80040b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004832:	f7fe fd09 	bl	8003248 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1ac      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004844:	f7ff fc47 	bl	80040d6 <LL_RCC_LSI2_IsReady>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f1      	bne.n	8004832 <HAL_RCC_OscConfig+0x36e>
 800484e:	e027      	b.n	80048a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004850:	f7ff fc30 	bl	80040b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fe fcf8 	bl	8003248 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800485c:	f7fe fcf4 	bl	8003248 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b03      	cmp	r3, #3
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e197      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800486e:	f7ff fc32 	bl	80040d6 <LL_RCC_LSI2_IsReady>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f1      	bne.n	800485c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004878:	f7ff fbe8 	bl	800404c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fe fce4 	bl	8003248 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004884:	f7fe fce0 	bl	8003248 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e183      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004896:	f7ff fbea 	bl	800406e <LL_RCC_LSI1_IsReady>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f1      	bne.n	8004884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05b      	beq.n	8004964 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ac:	4ba7      	ldr	r3, [pc, #668]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d114      	bne.n	80048e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80048b8:	f7ff fa88 	bl	8003dcc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048bc:	f7fe fcc4 	bl	8003248 <HAL_GetTick>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c4:	f7fe fcc0 	bl	8003248 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e163      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d6:	4b9d      	ldr	r3, [pc, #628]	; (8004b4c <HAL_RCC_OscConfig+0x688>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <HAL_RCC_OscConfig+0x42c>
 80048ea:	f7ff fb48 	bl	8003f7e <LL_RCC_LSE_Enable>
 80048ee:	e00c      	b.n	800490a <HAL_RCC_OscConfig+0x446>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d104      	bne.n	8004902 <HAL_RCC_OscConfig+0x43e>
 80048f8:	f7ff fb63 	bl	8003fc2 <LL_RCC_LSE_EnableBypass>
 80048fc:	f7ff fb3f 	bl	8003f7e <LL_RCC_LSE_Enable>
 8004900:	e003      	b.n	800490a <HAL_RCC_OscConfig+0x446>
 8004902:	f7ff fb4d 	bl	8003fa0 <LL_RCC_LSE_Disable>
 8004906:	f7ff fb6d 	bl	8003fe4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d014      	beq.n	800493c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe fc99 	bl	8003248 <HAL_GetTick>
 8004916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe fc95 	bl	8003248 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e136      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004930:	f7ff fb69 	bl	8004006 <LL_RCC_LSE_IsReady>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ef      	beq.n	800491a <HAL_RCC_OscConfig+0x456>
 800493a:	e013      	b.n	8004964 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493c:	f7fe fc84 	bl	8003248 <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fe fc80 	bl	8003248 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e121      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800495a:	f7ff fb54 	bl	8004006 <LL_RCC_LSE_IsReady>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ef      	bne.n	8004944 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02c      	beq.n	80049ca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d014      	beq.n	80049a2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004978:	f7ff facd 	bl	8003f16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fe fc64 	bl	8003248 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004984:	f7fe fc60 	bl	8003248 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e103      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004996:	f7ff fae0 	bl	8003f5a <LL_RCC_HSI48_IsReady>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f1      	beq.n	8004984 <HAL_RCC_OscConfig+0x4c0>
 80049a0:	e013      	b.n	80049ca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049a2:	f7ff fac9 	bl	8003f38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fe fc4f 	bl	8003248 <HAL_GetTick>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ae:	f7fe fc4b 	bl	8003248 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e0ee      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80049c0:	f7ff facb 	bl	8003f5a <LL_RCC_HSI48_IsReady>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f1      	bne.n	80049ae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80e4 	beq.w	8004b9c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d4:	f7ff fc29 	bl	800422a <LL_RCC_GetSysClkSource>
 80049d8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	f040 80b4 	bne.w	8004b54 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0203 	and.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d123      	bne.n	8004a42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d11c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d114      	bne.n	8004a42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10d      	bne.n	8004a42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d05d      	beq.n	8004afe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d058      	beq.n	8004afa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0a1      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a5a:	f7ff fc84 	bl	8004366 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a5e:	f7fe fbf3 	bl	8003248 <HAL_GetTick>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fe fbef 	bl	8003248 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e092      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_OscConfig+0x68c>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a9e:	0212      	lsls	r2, r2, #8
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004abc:	f7ff fc44 	bl	8004348 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad0:	f7fe fbba 	bl	8003248 <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fe fbb6 	bl	8003248 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e059      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ef      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af8:	e050      	b.n	8004b9c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e04f      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d147      	bne.n	8004b9c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b0c:	f7ff fc1c 	bl	8004348 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b20:	f7fe fb92 	bl	8003248 <HAL_GetTick>
 8004b24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fe fb8e 	bl	8003248 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e031      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ef      	beq.n	8004b28 <HAL_RCC_OscConfig+0x664>
 8004b48:	e028      	b.n	8004b9c <HAL_RCC_OscConfig+0x6d8>
 8004b4a:	bf00      	nop
 8004b4c:	58000400 	.word	0x58000400
 8004b50:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d01e      	beq.n	8004b98 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	f7ff fc04 	bl	8004366 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fe fb73 	bl	8003248 <HAL_GetTick>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fe fb6f 	bl	8003248 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e012      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ef      	bne.n	8004b66 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_OscConfig+0x6e4>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	60cb      	str	r3, [r1, #12]
 8004b96:	e001      	b.n	8004b9c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3734      	adds	r7, #52	; 0x34
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd90      	pop	{r4, r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	eefefffc 	.word	0xeefefffc

08004bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e12d      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b98      	ldr	r3, [pc, #608]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d91b      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b95      	ldr	r3, [pc, #596]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 0207 	bic.w	r2, r3, #7
 8004bd6:	4993      	ldr	r1, [pc, #588]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bde:	f7fe fb33 	bl	8003248 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004be6:	f7fe fb2f 	bl	8003248 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e111      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf8:	4b8a      	ldr	r3, [pc, #552]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d1ef      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fb13 	bl	8004242 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c1c:	f7fe fb14 	bl	8003248 <HAL_GetTick>
 8004c20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c24:	f7fe fb10 	bl	8003248 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e0f2      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c36:	f7ff fbe8 	bl	800440a <LL_RCC_IsActiveFlag_HPRE>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f1      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d016      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fb0a 	bl	800426a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c56:	f7fe faf7 	bl	8003248 <HAL_GetTick>
 8004c5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c5e:	f7fe faf3 	bl	8003248 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e0d5      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c70:	f7ff fbdd 	bl	800442e <LL_RCC_IsActiveFlag_C2HPRE>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f1      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d016      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fb03 	bl	8004296 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c90:	f7fe fada 	bl	8003248 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c98:	f7fe fad6 	bl	8003248 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0b8      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004caa:	f7ff fbd3 	bl	8004454 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f1      	beq.n	8004c98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d016      	beq.n	8004cee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fafd 	bl	80042c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cca:	f7fe fabd 	bl	8003248 <HAL_GetTick>
 8004cce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cd2:	f7fe fab9 	bl	8003248 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e09b      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ce4:	f7ff fbc9 	bl	800447a <LL_RCC_IsActiveFlag_PPRE1>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f1      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d017      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff faf3 	bl	80042ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d06:	f7fe fa9f 	bl	8003248 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d0e:	f7fe fa9b 	bl	8003248 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e07d      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d20:	f7ff fbbd 	bl	800449e <LL_RCC_IsActiveFlag_PPRE2>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f1      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d043      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d3e:	f7ff f893 	bl	8003e68 <LL_RCC_HSE_IsReady>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d11e      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e067      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d106      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d54:	f7ff fb16 	bl	8004384 <LL_RCC_PLL_IsReady>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d113      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e05c      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004d6a:	f7ff f9fb 	bl	8004164 <LL_RCC_MSI_IsReady>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e051      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d78:	f7ff f8a6 	bl	8003ec8 <LL_RCC_HSI_IsReady>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e04a      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fa39 	bl	8004202 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d90:	f7fe fa5a 	bl	8003248 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d98:	f7fe fa56 	bl	8003248 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e036      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	f7ff fa3c 	bl	800422a <LL_RCC_GetSysClkSource>
 8004db2:	4602      	mov	r2, r0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d1ec      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d21b      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dcc:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 0207 	bic.w	r2, r3, #7
 8004dd4:	4913      	ldr	r1, [pc, #76]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ddc:	f7fe fa34 	bl	8003248 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004de4:	f7fe fa30 	bl	8003248 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e012      	b.n	8004e1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x278>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1ef      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e04:	f000 f87e 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a07      	ldr	r2, [pc, #28]	; (8004e28 <HAL_RCC_ClockConfig+0x27c>)
 8004e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e0e:	f7fe fa27 	bl	8003260 <HAL_GetTickPrio>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe f9c9 	bl	80031ac <HAL_InitTick>
 8004e1a:	4603      	mov	r3, r0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	58004000 	.word	0x58004000
 8004e28:	20000024 	.word	0x20000024

08004e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e32:	f7ff f9fa 	bl	800422a <LL_RCC_GetSysClkSource>
 8004e36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e3e:	f7ff f9b6 	bl	80041ae <LL_RCC_MSI_GetRange>
 8004e42:	4603      	mov	r3, r0
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e04b      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d102      	bne.n	8004e60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e5a:	4b28      	ldr	r3, [pc, #160]	; (8004efc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e045      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d10a      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e66:	f7fe ffcf 	bl	8003e08 <LL_RCC_HSE_IsEnabledDiv2>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004e70:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e03a      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004e76:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e037      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004e7c:	f7ff fab9 	bl	80043f2 <LL_RCC_PLL_GetMainSource>
 8004e80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d003      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x64>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0x6a>
 8004e8e:	e00d      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e92:	60bb      	str	r3, [r7, #8]
        break;
 8004e94:	e015      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e96:	f7fe ffb7 	bl	8003e08 <LL_RCC_HSE_IsEnabledDiv2>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ea2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ea4:	e00d      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ea6:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ea8:	60bb      	str	r3, [r7, #8]
        break;
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004eac:	f7ff f97f 	bl	80041ae <LL_RCC_MSI_GetRange>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	60bb      	str	r3, [r7, #8]
        break;
 8004ec0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004ec2:	f7ff fa71 	bl	80043a8 <LL_RCC_PLL_GetN>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	fb03 f402 	mul.w	r4, r3, r2
 8004ece:	f7ff fa84 	bl	80043da <LL_RCC_PLL_GetDivider>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004edc:	f7ff fa71 	bl	80043c2 <LL_RCC_PLL_GetR>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	0f5b      	lsrs	r3, r3, #29
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004eea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	0800a534 	.word	0x0800a534
 8004efc:	00f42400 	.word	0x00f42400
 8004f00:	01e84800 	.word	0x01e84800

08004f04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b598      	push	{r3, r4, r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f08:	f7ff ff90 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	f7ff fa01 	bl	8004314 <LL_RCC_GetAHBPrescaler>
 8004f12:	4603      	mov	r3, r0
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	4a03      	ldr	r2, [pc, #12]	; (8004f28 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd98      	pop	{r3, r4, r7, pc}
 8004f28:	0800a4f4 	.word	0x0800a4f4

08004f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2bb0      	cmp	r3, #176	; 0xb0
 8004f38:	d903      	bls.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e007      	b.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004f52:	f7ff f9eb 	bl	800432c <LL_RCC_GetAHB4Prescaler>
 8004f56:	4603      	mov	r3, r0
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	0c9c      	lsrs	r4, r3, #18
 8004f76:	f7fe ff39 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 f80c 	bl	8004f9c <RCC_SetFlashLatency>
 8004f84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd90      	pop	{r4, r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	0800a534 	.word	0x0800a534
 8004f94:	0800a4f4 	.word	0x0800a4f4
 8004f98:	431bde83 	.word	0x431bde83

08004f9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b093      	sub	sp, #76	; 0x4c
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004fa6:	4b37      	ldr	r3, [pc, #220]	; (8005084 <RCC_SetFlashLatency+0xe8>)
 8004fa8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004fb2:	4a35      	ldr	r2, [pc, #212]	; (8005088 <RCC_SetFlashLatency+0xec>)
 8004fb4:	f107 031c 	add.w	r3, r7, #28
 8004fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004fbe:	4b33      	ldr	r3, [pc, #204]	; (800508c <RCC_SetFlashLatency+0xf0>)
 8004fc0:	f107 040c 	add.w	r4, r7, #12
 8004fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004fca:	2300      	movs	r3, #0
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd4:	d11a      	bne.n	800500c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fda:	e013      	b.n	8005004 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	3348      	adds	r3, #72	; 0x48
 8004fe2:	443b      	add	r3, r7
 8004fe4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d807      	bhi.n	8004ffe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	3348      	adds	r3, #72	; 0x48
 8004ff4:	443b      	add	r3, r7
 8004ff6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ffa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ffc:	e020      	b.n	8005040 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	3301      	adds	r3, #1
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
 8005004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005006:	2b03      	cmp	r3, #3
 8005008:	d9e8      	bls.n	8004fdc <RCC_SetFlashLatency+0x40>
 800500a:	e019      	b.n	8005040 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800500c:	2300      	movs	r3, #0
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005010:	e013      	b.n	800503a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	3348      	adds	r3, #72	; 0x48
 8005018:	443b      	add	r3, r7
 800501a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d807      	bhi.n	8005034 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3348      	adds	r3, #72	; 0x48
 800502a:	443b      	add	r3, r7
 800502c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005030:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005032:	e005      	b.n	8005040 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	3301      	adds	r3, #1
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503c:	2b02      	cmp	r3, #2
 800503e:	d9e8      	bls.n	8005012 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <RCC_SetFlashLatency+0xf4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 0207 	bic.w	r2, r3, #7
 8005048:	4911      	ldr	r1, [pc, #68]	; (8005090 <RCC_SetFlashLatency+0xf4>)
 800504a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005050:	f7fe f8fa 	bl	8003248 <HAL_GetTick>
 8005054:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005056:	e008      	b.n	800506a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005058:	f7fe f8f6 	bl	8003248 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e007      	b.n	800507a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <RCC_SetFlashLatency+0xf4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005074:	429a      	cmp	r2, r3
 8005076:	d1ef      	bne.n	8005058 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	374c      	adds	r7, #76	; 0x4c
 800507e:	46bd      	mov	sp, r7
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	bf00      	nop
 8005084:	0800a344 	.word	0x0800a344
 8005088:	0800a354 	.word	0x0800a354
 800508c:	0800a360 	.word	0x0800a360
 8005090:	58004000 	.word	0x58004000

08005094 <LL_RCC_LSE_IsEnabled>:
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <LL_RCC_LSE_IsEnabled+0x18>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <LL_RCC_LSE_IsEnabled+0x1a>
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_RCC_LSE_IsReady>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d101      	bne.n	80050d0 <LL_RCC_LSE_IsReady+0x18>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <LL_RCC_LSE_IsReady+0x1a>
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <LL_RCC_SetRFWKPClockSource>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80050e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_RCC_SetSMPSClockSource>:
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4313      	orrs	r3, r2
 8005122:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_RCC_SetSMPSPrescaler>:
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4313      	orrs	r3, r2
 800514a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_SetUSARTClockSource>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f023 0203 	bic.w	r2, r3, #3
 800516c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_RCC_SetLPUARTClockSource>:
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <LL_RCC_SetI2CClockSource>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80051c8:	43db      	mvns	r3, r3
 80051ca:	401a      	ands	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80051d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_RCC_SetLPTIMClockSource>:
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_RCC_SetSAIClockSource>:
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_RCC_SetRNGClockSource>:
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800525e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <LL_RCC_SetCLK48ClockSource>:
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800528a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_RCC_SetUSBClockSource>:
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffe3 	bl	8005276 <LL_RCC_SetCLK48ClockSource>
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <LL_RCC_SetADCClockSource>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80052c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_SetRTCClockSource>:
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <LL_RCC_GetRTCClockSource>:
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <LL_RCC_ForceBackupDomainReset>:
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005342:	bf00      	nop
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_RCC_ReleaseBackupDomainReset>:
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800535c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_RCC_PLLSAI1_Enable>:
{
 800536e:	b480      	push	{r7}
 8005370:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800537c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005380:	6013      	str	r3, [r2, #0]
}
 8005382:	bf00      	nop
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_PLLSAI1_Disable>:
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_PLLSAI1_IsReady>:
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053bc:	d101      	bne.n	80053c2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80053d6:	2300      	movs	r3, #0
 80053d8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80053da:	2300      	movs	r3, #0
 80053dc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d034      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053f2:	d021      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80053f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053f8:	d81b      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053fe:	d01d      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005404:	d815      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800540a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540e:	d110      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005420:	e00d      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3304      	adds	r3, #4
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f947 	bl	80056ba <RCCEx_PLLSAI1_ConfigNP>
 800542c:	4603      	mov	r3, r0
 800542e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005430:	e005      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	77fb      	strb	r3, [r7, #31]
        break;
 8005436:	e002      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800543c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543e:	7ffb      	ldrb	r3, [r7, #31]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fee8 	bl	800521e <LL_RCC_SetSAIClockSource>
 800544e:	e001      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545c:	2b00      	cmp	r3, #0
 800545e:	d046      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005460:	f7ff ff56 	bl	8005310 <LL_RCC_GetRTCClockSource>
 8005464:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	d03c      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005470:	f7fe fcac 	bl	8003dcc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff ff30 	bl	80052e4 <LL_RCC_SetRTCClockSource>
 8005484:	e02e      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005490:	f7ff ff4b 	bl	800532a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005494:	f7ff ff5a 	bl	800534c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80054a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80054b0:	f7ff fdf0 	bl	8005094 <LL_RCC_LSE_IsEnabled>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d114      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ba:	f7fd fec5 	bl	8003248 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80054c0:	e00b      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c2:	f7fd fec1 	bl	8003248 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d902      	bls.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	77fb      	strb	r3, [r7, #31]
              break;
 80054d8:	e004      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80054da:	f7ff fded 	bl	80050b8 <LL_RCC_LSE_IsReady>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d1ee      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80054e4:	7ffb      	ldrb	r3, [r7, #31]
 80054e6:	77bb      	strb	r3, [r7, #30]
 80054e8:	e001      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	7ffb      	ldrb	r3, [r7, #31]
 80054ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d004      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fe2a 	bl	8005158 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fe35 	bl	8005184 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fe5d 	bl	80051ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fe52 	bl	80051ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fe2a 	bl	80051b0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fe1f 	bl	80051b0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d022      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fe8d 	bl	80052a2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005590:	d107      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055aa:	d10b      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f8dd 	bl	8005770 <RCCEx_PLLSAI1_ConfigNQ>
 80055b6:	4603      	mov	r3, r0
 80055b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d008      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e2:	d003      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fe2a 	bl	800524a <LL_RCC_SetRNGClockSource>
 80055f6:	e00a      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x240>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	2000      	movs	r0, #0
 8005604:	f7ff fe21 	bl	800524a <LL_RCC_SetRNGClockSource>
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff fe34 	bl	8005276 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005616:	d107      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005626:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d022      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fe3d 	bl	80052b8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005646:	d107      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005656:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005660:	d10b      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f8dd 	bl	8005826 <RCCEx_PLLSAI1_ConfigNR>
 800566c:	4603      	mov	r3, r0
 800566e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005670:	7ffb      	ldrb	r3, [r7, #31]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005676:	7ffb      	ldrb	r3, [r7, #31]
 8005678:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fd26 	bl	80050dc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fd45 	bl	8005130 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fd2c 	bl	8005108 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80056b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056c6:	f7ff fe61 	bl	800538c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056ca:	f7fd fdbd 	bl	8003248 <HAL_GetTick>
 80056ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056d0:	e009      	b.n	80056e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d2:	f7fd fdb9 	bl	8003248 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d902      	bls.n	80056e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e004      	b.n	80056f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056e6:	f7ff fe60 	bl	80053aa <LL_RCC_PLLSAI1_IsReady>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f0      	bne.n	80056d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d137      	bne.n	8005766 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800570a:	4313      	orrs	r3, r2
 800570c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005720:	4313      	orrs	r3, r2
 8005722:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005724:	f7ff fe23 	bl	800536e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fd fd8e 	bl	8003248 <HAL_GetTick>
 800572c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800572e:	e009      	b.n	8005744 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005730:	f7fd fd8a 	bl	8003248 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d902      	bls.n	8005744 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	73fb      	strb	r3, [r7, #15]
        break;
 8005742:	e004      	b.n	800574e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005744:	f7ff fe31 	bl	80053aa <LL_RCC_PLLSAI1_IsReady>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d1f0      	bne.n	8005730 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d108      	bne.n	8005766 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005762:	4313      	orrs	r3, r2
 8005764:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800577c:	f7ff fe06 	bl	800538c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005780:	f7fd fd62 	bl	8003248 <HAL_GetTick>
 8005784:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005786:	e009      	b.n	800579c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005788:	f7fd fd5e 	bl	8003248 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d902      	bls.n	800579c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	73fb      	strb	r3, [r7, #15]
      break;
 800579a:	e004      	b.n	80057a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800579c:	f7ff fe05 	bl	80053aa <LL_RCC_PLLSAI1_IsReady>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d137      	bne.n	800581c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c0:	4313      	orrs	r3, r2
 80057c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d6:	4313      	orrs	r3, r2
 80057d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057da:	f7ff fdc8 	bl	800536e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057de:	f7fd fd33 	bl	8003248 <HAL_GetTick>
 80057e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057e4:	e009      	b.n	80057fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057e6:	f7fd fd2f 	bl	8003248 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d902      	bls.n	80057fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	73fb      	strb	r3, [r7, #15]
        break;
 80057f8:	e004      	b.n	8005804 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057fa:	f7ff fdd6 	bl	80053aa <LL_RCC_PLLSAI1_IsReady>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d1f0      	bne.n	80057e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800580a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005832:	f7ff fdab 	bl	800538c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005836:	f7fd fd07 	bl	8003248 <HAL_GetTick>
 800583a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800583c:	e009      	b.n	8005852 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800583e:	f7fd fd03 	bl	8003248 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d902      	bls.n	8005852 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	e004      	b.n	800585c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005852:	f7ff fdaa 	bl	80053aa <LL_RCC_PLLSAI1_IsReady>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d137      	bne.n	80058d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005876:	4313      	orrs	r3, r2
 8005878:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800587a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800588c:	4313      	orrs	r3, r2
 800588e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005890:	f7ff fd6d 	bl	800536e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005894:	f7fd fcd8 	bl	8003248 <HAL_GetTick>
 8005898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800589a:	e009      	b.n	80058b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800589c:	f7fd fcd4 	bl	8003248 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d902      	bls.n	80058b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	73fb      	strb	r3, [r7, #15]
        break;
 80058ae:	e004      	b.n	80058ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058b0:	f7ff fd7b 	bl	80053aa <LL_RCC_PLLSAI1_IsReady>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d1f0      	bne.n	800589c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ce:	4313      	orrs	r3, r2
 80058d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e027      	b.n	800593e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7a5b      	ldrb	r3, [r3, #9]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc fb24 	bl	8001f4c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 0120 	bic.w	r1, r3, #32
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0204 	orr.w	r2, r2, #4
 800592e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e09f      	b.n	8005a9a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc fb16 	bl	8001fa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <HAL_RTC_Init+0x15c>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b10      	cmp	r3, #16
 8005986:	d07e      	beq.n	8005a86 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	22ca      	movs	r2, #202	; 0xca
 800598e:	625a      	str	r2, [r3, #36]	; 0x24
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2253      	movs	r2, #83	; 0x53
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8ab 	bl	8005af4 <RTC_EnterInitMode>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2204      	movs	r2, #4
 80059b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
 80059b8:	e067      	b.n	8005a8a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6899      	ldr	r1, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68d2      	ldr	r2, [r2, #12]
 80059f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6919      	ldr	r1, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	041a      	lsls	r2, r3, #16
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a18:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0203 	bic.w	r2, r2, #3
 8005a28:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d113      	bne.n	8005a78 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f829 	bl	8005aa8 <HAL_RTC_WaitForSynchro>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	22ff      	movs	r2, #255	; 0xff
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2204      	movs	r2, #4
 8005a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e010      	b.n	8005a9a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e001      	b.n	8005a8a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40002800 	.word	0x40002800

08005aa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005abe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ac0:	f7fd fbc2 	bl	8003248 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ac6:	e009      	b.n	8005adc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ac8:	f7fd fbbe 	bl	8003248 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad6:	d901      	bls.n	8005adc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e007      	b.n	8005aec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ee      	beq.n	8005ac8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d119      	bne.n	8005b3e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b14:	f7fd fb98 	bl	8003248 <HAL_GetTick>
 8005b18:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b1a:	e009      	b.n	8005b30 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b1c:	f7fd fb94 	bl	8003248 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b2a:	d901      	bls.n	8005b30 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e007      	b.n	8005b40 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ee      	beq.n	8005b1c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e0a8      	b.n	8005cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	22ca      	movs	r2, #202	; 0xca
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2253      	movs	r2, #83	; 0x53
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005b90:	f7fd fb5a 	bl	8003248 <HAL_GetTick>
 8005b94:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005b96:	e015      	b.n	8005bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b98:	f7fd fb56 	bl	8003248 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba6:	d90d      	bls.n	8005bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	22ff      	movs	r2, #255	; 0xff
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e077      	b.n	8005cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e2      	bne.n	8005b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005bf2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005bf4:	f7fd fb28 	bl	8003248 <HAL_GetTick>
 8005bf8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005bfa:	e015      	b.n	8005c28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bfc:	f7fd fb24 	bl	8003248 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c0a:	d90d      	bls.n	8005c28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	22ff      	movs	r2, #255	; 0xff
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2203      	movs	r2, #3
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e045      	b.n	8005cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0e2      	beq.n	8005bfc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0207 	bic.w	r2, r2, #7
 8005c4c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6899      	ldr	r1, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005c5e:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c64:	4a15      	ldr	r2, [pc, #84]	; (8005cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c78:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c88:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c98:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	22ff      	movs	r2, #255	; 0xff
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	58000800 	.word	0x58000800

08005cc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d137      	bne.n	8005d48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_UART_Receive_IT+0x24>
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e030      	b.n	8005d4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <HAL_UART_Receive_IT+0x94>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d01f      	beq.n	8005d38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	6a3a      	ldr	r2, [r7, #32]
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e6      	bne.n	8005d06 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fb44 	bl	80063cc <UART_Start_Receive_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3728      	adds	r7, #40	; 0x28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40008000 	.word	0x40008000

08005d58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b0ba      	sub	sp, #232	; 0xe8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d82:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d86:	4013      	ands	r3, r2
 8005d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11b      	bne.n	8005dcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d015      	beq.n	8005dcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 82e3 	beq.w	8006388 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
      }
      return;
 8005dca:	e2dd      	b.n	8006388 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8123 	beq.w	800601c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dda:	4b8d      	ldr	r3, [pc, #564]	; (8006010 <HAL_UART_IRQHandler+0x2b8>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005de6:	4b8b      	ldr	r3, [pc, #556]	; (8006014 <HAL_UART_IRQHandler+0x2bc>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8116 	beq.w	800601c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d011      	beq.n	8005e20 <HAL_UART_IRQHandler+0xc8>
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	f043 0201 	orr.w	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d011      	beq.n	8005e50 <HAL_UART_IRQHandler+0xf8>
 8005e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d011      	beq.n	8005e80 <HAL_UART_IRQHandler+0x128>
 8005e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	f043 0202 	orr.w	r2, r3, #2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d017      	beq.n	8005ebc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e9c:	4b5c      	ldr	r3, [pc, #368]	; (8006010 <HAL_UART_IRQHandler+0x2b8>)
 8005e9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	f043 0208 	orr.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d012      	beq.n	8005eee <HAL_UART_IRQHandler+0x196>
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00c      	beq.n	8005eee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8249 	beq.w	800638c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d005      	beq.n	8005f52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d054      	beq.n	8005ffc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fb5c 	bl	8006610 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d146      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d9      	bne.n	8005f66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc2:	4a15      	ldr	r2, [pc, #84]	; (8006018 <HAL_UART_IRQHandler+0x2c0>)
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fd fb83 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d019      	beq.n	800600c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fea:	e00f      	b.n	800600c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9d7 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff2:	e00b      	b.n	800600c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9d3 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffa:	e007      	b.n	800600c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f9cf 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800600a:	e1bf      	b.n	800638c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	bf00      	nop
    return;
 800600e:	e1bd      	b.n	800638c <HAL_UART_IRQHandler+0x634>
 8006010:	10000001 	.word	0x10000001
 8006014:	04000120 	.word	0x04000120
 8006018:	080066dd 	.word	0x080066dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 8153 	bne.w	80062cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 814c 	beq.w	80062cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8145 	beq.w	80062cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2210      	movs	r2, #16
 8006048:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	f040 80bb 	bne.w	80061d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 818f 	beq.w	8006390 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006078:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800607c:	429a      	cmp	r2, r3
 800607e:	f080 8187 	bcs.w	8006390 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006088:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 8087 	bne.w	80061ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1da      	bne.n	80060a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800610e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006112:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006116:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e1      	bne.n	80060ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800614a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800614c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e3      	bne.n	8006126 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	f023 0310 	bic.w	r3, r3, #16
 8006180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006190:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800619c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e4      	bne.n	800616c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fd fa36 	bl	800361a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8f3 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ce:	e0df      	b.n	8006390 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80d1 	beq.w	8006394 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80061f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80cc 	beq.w	8006394 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800621e:	647b      	str	r3, [r7, #68]	; 0x44
 8006220:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e4      	bne.n	80061fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3308      	adds	r3, #8
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	623b      	str	r3, [r7, #32]
   return(result);
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800625a:	633a      	str	r2, [r7, #48]	; 0x30
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e1      	bne.n	8006232 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0310 	bic.w	r3, r3, #16
 8006296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69b9      	ldr	r1, [r7, #24]
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	617b      	str	r3, [r7, #20]
   return(result);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e4      	bne.n	8006282 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f875 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062ca:	e063      	b.n	8006394 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00e      	beq.n	80062f6 <HAL_UART_IRQHandler+0x59e>
 80062d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 ff52 	bl	8007198 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062f4:	e051      	b.n	800639a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d014      	beq.n	800632c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d105      	bne.n	800631a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800630e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800631e:	2b00      	cmp	r3, #0
 8006320:	d03a      	beq.n	8006398 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
    }
    return;
 800632a:	e035      	b.n	8006398 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HAL_UART_IRQHandler+0x5f4>
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f9df 	bl	8006708 <UART_EndTransmit_IT>
    return;
 800634a:	e026      	b.n	800639a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x614>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 ff2b 	bl	80071c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800636a:	e016      	b.n	800639a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d010      	beq.n	800639a <HAL_UART_IRQHandler+0x642>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	2b00      	cmp	r3, #0
 800637e:	da0c      	bge.n	800639a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 ff13 	bl	80071ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006386:	e008      	b.n	800639a <HAL_UART_IRQHandler+0x642>
      return;
 8006388:	bf00      	nop
 800638a:	e006      	b.n	800639a <HAL_UART_IRQHandler+0x642>
    return;
 800638c:	bf00      	nop
 800638e:	e004      	b.n	800639a <HAL_UART_IRQHandler+0x642>
      return;
 8006390:	bf00      	nop
 8006392:	e002      	b.n	800639a <HAL_UART_IRQHandler+0x642>
      return;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <HAL_UART_IRQHandler+0x642>
    return;
 8006398:	bf00      	nop
  }
}
 800639a:	37e8      	adds	r7, #232	; 0xe8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b0a3      	sub	sp, #140	; 0x8c
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fe:	d10e      	bne.n	800641e <UART_Start_Receive_IT+0x52>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <UART_Start_Receive_IT+0x48>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800640e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006412:	e02d      	b.n	8006470 <UART_Start_Receive_IT+0xa4>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	22ff      	movs	r2, #255	; 0xff
 8006418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800641c:	e028      	b.n	8006470 <UART_Start_Receive_IT+0xa4>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10d      	bne.n	8006442 <UART_Start_Receive_IT+0x76>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <UART_Start_Receive_IT+0x6c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	22ff      	movs	r2, #255	; 0xff
 8006432:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006436:	e01b      	b.n	8006470 <UART_Start_Receive_IT+0xa4>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	227f      	movs	r2, #127	; 0x7f
 800643c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006440:	e016      	b.n	8006470 <UART_Start_Receive_IT+0xa4>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644a:	d10d      	bne.n	8006468 <UART_Start_Receive_IT+0x9c>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <UART_Start_Receive_IT+0x92>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	227f      	movs	r2, #127	; 0x7f
 8006458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800645c:	e008      	b.n	8006470 <UART_Start_Receive_IT+0xa4>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	223f      	movs	r2, #63	; 0x3f
 8006462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006466:	e003      	b.n	8006470 <UART_Start_Receive_IT+0xa4>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2222      	movs	r2, #34	; 0x22
 800647c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80064a4:	673a      	str	r2, [r7, #112]	; 0x70
 80064a6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80064aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80064b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e3      	bne.n	8006480 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c0:	d14f      	bne.n	8006562 <UART_Start_Receive_IT+0x196>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d349      	bcc.n	8006562 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d107      	bne.n	80064e8 <UART_Start_Receive_IT+0x11c>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a47      	ldr	r2, [pc, #284]	; (8006600 <UART_Start_Receive_IT+0x234>)
 80064e4:	675a      	str	r2, [r3, #116]	; 0x74
 80064e6:	e002      	b.n	80064ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <UART_Start_Receive_IT+0x238>)
 80064ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01a      	beq.n	800652c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800650a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800651e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e4      	bne.n	80064f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3308      	adds	r3, #8
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006542:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800654c:	64ba      	str	r2, [r7, #72]	; 0x48
 800654e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800655a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <UART_Start_Receive_IT+0x160>
 8006560:	e046      	b.n	80065f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	d107      	bne.n	800657c <UART_Start_Receive_IT+0x1b0>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a24      	ldr	r2, [pc, #144]	; (8006608 <UART_Start_Receive_IT+0x23c>)
 8006578:	675a      	str	r2, [r3, #116]	; 0x74
 800657a:	e002      	b.n	8006582 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4a23      	ldr	r2, [pc, #140]	; (800660c <UART_Start_Receive_IT+0x240>)
 8006580:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d019      	beq.n	80065be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800659e:	677b      	str	r3, [r7, #116]	; 0x74
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
 80065aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e6      	bne.n	800658a <UART_Start_Receive_IT+0x1be>
 80065bc:	e018      	b.n	80065f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	613b      	str	r3, [r7, #16]
   return(result);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f043 0320 	orr.w	r3, r3, #32
 80065d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	69f9      	ldr	r1, [r7, #28]
 80065e2:	6a3a      	ldr	r2, [r7, #32]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	378c      	adds	r7, #140	; 0x8c
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	08006e31 	.word	0x08006e31
 8006604:	08006ad1 	.word	0x08006ad1
 8006608:	08006919 	.word	0x08006919
 800660c:	08006761 	.word	0x08006761

08006610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b095      	sub	sp, #84	; 0x54
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	643b      	str	r3, [r7, #64]	; 0x40
 8006638:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800663c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	61fb      	str	r3, [r7, #28]
   return(result);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800666e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e3      	bne.n	800664a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d118      	bne.n	80066bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	60bb      	str	r3, [r7, #8]
   return(result);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 0310 	bic.w	r3, r3, #16
 800669e:	647b      	str	r3, [r7, #68]	; 0x44
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	613b      	str	r3, [r7, #16]
   return(result);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066d0:	bf00      	nop
 80066d2:	3754      	adds	r7, #84	; 0x54
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fe50 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fb f81b 	bl	800178c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006756:	bf00      	nop
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b09c      	sub	sp, #112	; 0x70
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800676e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006778:	2b22      	cmp	r3, #34	; 0x22
 800677a:	f040 80be 	bne.w	80068fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006788:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800678c:	b2d9      	uxtb	r1, r3
 800678e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006792:	b2da      	uxtb	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006798:	400a      	ands	r2, r1
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f040 80a1 	bne.w	800690a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e6      	bne.n	80067c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	667b      	str	r3, [r7, #100]	; 0x64
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800681a:	647a      	str	r2, [r7, #68]	; 0x44
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a33      	ldr	r2, [pc, #204]	; (8006914 <UART_RxISR_8BIT+0x1b4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d01f      	beq.n	800688c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d018      	beq.n	800688c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	623b      	str	r3, [r7, #32]
   return(result);
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800686e:	663b      	str	r3, [r7, #96]	; 0x60
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006878:	633b      	str	r3, [r7, #48]	; 0x30
 800687a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800687e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e6      	bne.n	800685a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d12e      	bne.n	80068f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0310 	bic.w	r3, r3, #16
 80068ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	617b      	str	r3, [r7, #20]
   return(result);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d103      	bne.n	80068e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2210      	movs	r2, #16
 80068e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd62 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068f0:	e00b      	b.n	800690a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fa ff2c 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 80068f8:	e007      	b.n	800690a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0208 	orr.w	r2, r2, #8
 8006908:	619a      	str	r2, [r3, #24]
}
 800690a:	bf00      	nop
 800690c:	3770      	adds	r7, #112	; 0x70
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40008000 	.word	0x40008000

08006918 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b09c      	sub	sp, #112	; 0x70
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006926:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006930:	2b22      	cmp	r3, #34	; 0x22
 8006932:	f040 80be 	bne.w	8006ab2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006944:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006946:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800694a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800694e:	4013      	ands	r3, r2
 8006950:	b29a      	uxth	r2, r3
 8006952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006954:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 80a1 	bne.w	8006ac2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800698e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006994:	667b      	str	r3, [r7, #100]	; 0x64
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699e:	657b      	str	r3, [r7, #84]	; 0x54
 80069a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e6      	bne.n	8006980 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	663b      	str	r3, [r7, #96]	; 0x60
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069d2:	643a      	str	r2, [r7, #64]	; 0x40
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e5      	bne.n	80069b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a33      	ldr	r2, [pc, #204]	; (8006acc <UART_RxISR_16BIT+0x1b4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d01f      	beq.n	8006a44 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d018      	beq.n	8006a44 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a32:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e6      	bne.n	8006a12 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d12e      	bne.n	8006aaa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6979      	ldr	r1, [r7, #20]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d103      	bne.n	8006a9a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2210      	movs	r2, #16
 8006a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fc86 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aa8:	e00b      	b.n	8006ac2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa fe50 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 8006ab0:	e007      	b.n	8006ac2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0208 	orr.w	r2, r2, #8
 8006ac0:	619a      	str	r2, [r3, #24]
}
 8006ac2:	bf00      	nop
 8006ac4:	3770      	adds	r7, #112	; 0x70
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40008000 	.word	0x40008000

08006ad0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b0ac      	sub	sp, #176	; 0xb0
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ade:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b06:	2b22      	cmp	r3, #34	; 0x22
 8006b08:	f040 8182 	bne.w	8006e10 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b12:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b16:	e125      	b.n	8006d64 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b22:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006b26:	b2d9      	uxtb	r1, r3
 8006b28:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	400a      	ands	r2, r1
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d053      	beq.n	8006c12 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d011      	beq.n	8006b9a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2201      	movs	r2, #1
 8006b88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b90:	f043 0201 	orr.w	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d011      	beq.n	8006bca <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f043 0204 	orr.w	r2, r3, #4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d011      	beq.n	8006bfa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2204      	movs	r2, #4
 8006be8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf0:	f043 0202 	orr.w	r2, r3, #2
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff fbcb 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 80a2 	bne.w	8006d64 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c44:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006c48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e4      	bne.n	8006c20 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c7e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006c80:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006c84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e1      	bne.n	8006c56 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a5f      	ldr	r2, [pc, #380]	; (8006e28 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d021      	beq.n	8006cf4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01a      	beq.n	8006cf4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ce2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ce6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e4      	bne.n	8006cbe <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d130      	bne.n	8006d5e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d24:	643b      	str	r3, [r7, #64]	; 0x40
 8006d26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e4      	bne.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b10      	cmp	r3, #16
 8006d44:	d103      	bne.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fb2c 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
 8006d5c:	e002      	b.n	8006d64 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fa fcf6 	bl	8001750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d64:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f aecf 	bne.w	8006b18 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d049      	beq.n	8006e20 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d92:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d242      	bcs.n	8006e20 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3308      	adds	r3, #8
 8006dba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e3      	bne.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006dd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f043 0320 	orr.w	r3, r3, #32
 8006dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6979      	ldr	r1, [r7, #20]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	613b      	str	r3, [r7, #16]
   return(result);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e4      	bne.n	8006dd8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e0e:	e007      	b.n	8006e20 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0208 	orr.w	r2, r2, #8
 8006e1e:	619a      	str	r2, [r3, #24]
}
 8006e20:	bf00      	nop
 8006e22:	37b0      	adds	r7, #176	; 0xb0
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40008000 	.word	0x40008000
 8006e2c:	08006761 	.word	0x08006761

08006e30 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b0ae      	sub	sp, #184	; 0xb8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e3e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e66:	2b22      	cmp	r3, #34	; 0x22
 8006e68:	f040 8186 	bne.w	8007178 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e72:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e76:	e129      	b.n	80070cc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006e8a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006e8e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006e92:	4013      	ands	r3, r2
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea0:	1c9a      	adds	r2, r3, #2
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d053      	beq.n	8006f76 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <UART_RxISR_16BIT_FIFOEN+0xce>
 8006eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2201      	movs	r2, #1
 8006eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef4:	f043 0201 	orr.w	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d011      	beq.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006f0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f043 0204 	orr.w	r2, r3, #4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d011      	beq.n	8006f5e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	f043 0202 	orr.w	r2, r3, #2
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fa19 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f040 80a4 	bne.w	80070cc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006faa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e2      	bne.n	8006f84 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fe8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e1      	bne.n	8006fbe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a5f      	ldr	r2, [pc, #380]	; (8007190 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d021      	beq.n	800705c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01a      	beq.n	800705c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800703a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007048:	65bb      	str	r3, [r7, #88]	; 0x58
 800704a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800704e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e4      	bne.n	8007026 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d130      	bne.n	80070c6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	f023 0310 	bic.w	r3, r3, #16
 800707e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
 800708e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e4      	bne.n	800706a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d103      	bne.n	80070b6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2210      	movs	r2, #16
 80070b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff f978 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
 80070c4:	e002      	b.n	80070cc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fa fb42 	bl	8001750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80070d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f47f aecb 	bne.w	8006e78 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d049      	beq.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x358>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80070fe:	429a      	cmp	r2, r3
 8007100:	d242      	bcs.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	623b      	str	r3, [r7, #32]
   return(result);
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3308      	adds	r3, #8
 8007122:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007126:	633a      	str	r2, [r7, #48]	; 0x30
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800712c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e3      	bne.n	8007102 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a15      	ldr	r2, [pc, #84]	; (8007194 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800713e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	60fb      	str	r3, [r7, #12]
   return(result);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f043 0320 	orr.w	r3, r3, #32
 8007154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	69b9      	ldr	r1, [r7, #24]
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	617b      	str	r3, [r7, #20]
   return(result);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e4      	bne.n	8007140 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007176:	e007      	b.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0208 	orr.w	r2, r2, #8
 8007186:	619a      	str	r2, [r3, #24]
}
 8007188:	bf00      	nop
 800718a:	37b8      	adds	r7, #184	; 0xb8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40008000 	.word	0x40008000
 8007194:	08006919 	.word	0x08006919

08007198 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	2218      	movs	r2, #24
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 fefd 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071ec:	233f      	movs	r3, #63	; 0x3f
 80071ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80071f0:	2381      	movs	r3, #129	; 0x81
 80071f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80071f4:	1dfb      	adds	r3, r7, #7
 80071f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80071f8:	2301      	movs	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fbc6 	bl	8008994 <hci_send_req>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	da01      	bge.n	8007212 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800720e:	23ff      	movs	r3, #255	; 0xff
 8007210:	e000      	b.n	8007214 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007212:	79fb      	ldrb	r3, [r7, #7]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800721c:	b5b0      	push	{r4, r5, r7, lr}
 800721e:	b0ce      	sub	sp, #312	; 0x138
 8007220:	af00      	add	r7, sp, #0
 8007222:	4605      	mov	r5, r0
 8007224:	460c      	mov	r4, r1
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800722e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007232:	462a      	mov	r2, r5
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800723a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800723e:	4622      	mov	r2, r4
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007246:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800724a:	4602      	mov	r2, r0
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007252:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007256:	460a      	mov	r2, r1
 8007258:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800725a:	f107 0310 	add.w	r3, r7, #16
 800725e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007262:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007266:	3308      	adds	r3, #8
 8007268:	f107 0210 	add.w	r2, r7, #16
 800726c:	4413      	add	r3, r2
 800726e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007272:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007276:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800727a:	4413      	add	r3, r2
 800727c:	3309      	adds	r3, #9
 800727e:	f107 0210 	add.w	r2, r7, #16
 8007282:	4413      	add	r3, r2
 8007284:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007288:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800728c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800729a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800729e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072a2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ae:	3301      	adds	r3, #1
 80072b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80072b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072bc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80072c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ca:	3302      	adds	r3, #2
 80072cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80072d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072d8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80072dc:	8812      	ldrh	r2, [r2, #0]
 80072de:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80072e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e6:	3302      	adds	r3, #2
 80072e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80072ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072f4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80072fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007300:	3301      	adds	r3, #1
 8007302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007306:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800730a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800730e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007310:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800731a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800731e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007322:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007328:	3301      	adds	r3, #1
 800732a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800732e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007332:	3308      	adds	r3, #8
 8007334:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007338:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fe42 	bl	8008fc6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007342:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007346:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800734a:	4413      	add	r3, r2
 800734c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007350:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007354:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007358:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800735a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800735e:	3301      	adds	r3, #1
 8007360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007364:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007368:	3301      	adds	r3, #1
 800736a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800736e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fe27 	bl	8008fc6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007378:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800737c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007380:	4413      	add	r3, r2
 8007382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800738e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007394:	3302      	adds	r3, #2
 8007396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800739a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80073a2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80073a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a8:	3302      	adds	r3, #2
 80073aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073b2:	2218      	movs	r2, #24
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 fe15 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073bc:	233f      	movs	r3, #63	; 0x3f
 80073be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80073c2:	2383      	movs	r3, #131	; 0x83
 80073c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073c8:	f107 0310 	add.w	r3, r7, #16
 80073cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073d8:	f107 030f 	add.w	r3, r7, #15
 80073dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fad1 	bl	8008994 <hci_send_req>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da01      	bge.n	80073fc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80073f8:	23ff      	movs	r3, #255	; 0xff
 80073fa:	e004      	b.n	8007406 <aci_gap_set_discoverable+0x1ea>
  return status;
 80073fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007400:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007404:	781b      	ldrb	r3, [r3, #0]
}
 8007406:	4618      	mov	r0, r3
 8007408:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800740c:	46bd      	mov	sp, r7
 800740e:	bdb0      	pop	{r4, r5, r7, pc}

08007410 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b0cc      	sub	sp, #304	; 0x130
 8007414:	af00      	add	r7, sp, #0
 8007416:	4602      	mov	r2, r0
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007420:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007422:	f107 0310 	add.w	r3, r7, #16
 8007426:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800743c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007440:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007444:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800744c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007450:	3301      	adds	r3, #1
 8007452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800745a:	2218      	movs	r2, #24
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fdc1 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007464:	233f      	movs	r3, #63	; 0x3f
 8007466:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800746a:	2385      	movs	r3, #133	; 0x85
 800746c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007470:	f107 0310 	add.w	r3, r7, #16
 8007474:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800747c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007480:	f107 030f 	add.w	r3, r7, #15
 8007484:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007488:	2301      	movs	r3, #1
 800748a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800748e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f001 fa7d 	bl	8008994 <hci_send_req>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	da01      	bge.n	80074a4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80074a0:	23ff      	movs	r3, #255	; 0xff
 80074a2:	e004      	b.n	80074ae <aci_gap_set_io_capability+0x9e>
  return status;
 80074a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074ac:	781b      	ldrb	r3, [r3, #0]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b0cc      	sub	sp, #304	; 0x130
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4605      	mov	r5, r0
 80074c0:	460c      	mov	r4, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074ce:	462a      	mov	r2, r5
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074da:	4622      	mov	r2, r4
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80074e6:	4602      	mov	r2, r0
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074f2:	460a      	mov	r2, r1
 80074f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80074f6:	f107 0310 	add.w	r3, r7, #16
 80074fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007502:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007518:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007524:	3301      	adds	r3, #1
 8007526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800752a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007532:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007536:	7812      	ldrb	r2, [r2, #0]
 8007538:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800753a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800753e:	3301      	adds	r3, #1
 8007540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007548:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800754c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007550:	7812      	ldrb	r2, [r2, #0]
 8007552:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007558:	3301      	adds	r3, #1
 800755a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800755e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007566:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800756a:	7812      	ldrb	r2, [r2, #0]
 800756c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800756e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007572:	3301      	adds	r3, #1
 8007574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007580:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007594:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800759a:	3301      	adds	r3, #1
 800759c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80075a8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80075aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ae:	3301      	adds	r3, #1
 80075b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80075bc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80075c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c4:	3304      	adds	r3, #4
 80075c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80075d2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80075d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d8:	3301      	adds	r3, #1
 80075da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075e2:	2218      	movs	r2, #24
 80075e4:	2100      	movs	r1, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 fcfd 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075ec:	233f      	movs	r3, #63	; 0x3f
 80075ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80075f2:	2386      	movs	r3, #134	; 0x86
 80075f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075f8:	f107 0310 	add.w	r3, r7, #16
 80075fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007604:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007608:	f107 030f 	add.w	r3, r7, #15
 800760c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007610:	2301      	movs	r3, #1
 8007612:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f9b9 	bl	8008994 <hci_send_req>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	da01      	bge.n	800762c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007628:	23ff      	movs	r3, #255	; 0xff
 800762a:	e004      	b.n	8007636 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800762c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007630:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007634:	781b      	ldrb	r3, [r3, #0]
}
 8007636:	4618      	mov	r0, r3
 8007638:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800763c:	46bd      	mov	sp, r7
 800763e:	bdb0      	pop	{r4, r5, r7, pc}

08007640 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b0cc      	sub	sp, #304	; 0x130
 8007644:	af00      	add	r7, sp, #0
 8007646:	4602      	mov	r2, r0
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	6019      	str	r1, [r3, #0]
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800765a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007668:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800767e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007682:	8812      	ldrh	r2, [r2, #0]
 8007684:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800768a:	3302      	adds	r3, #2
 800768c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007694:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007698:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80076a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076a6:	3304      	adds	r3, #4
 80076a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076b0:	2218      	movs	r2, #24
 80076b2:	2100      	movs	r1, #0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 fc96 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80076ba:	233f      	movs	r3, #63	; 0x3f
 80076bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80076c0:	2388      	movs	r3, #136	; 0x88
 80076c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076d6:	f107 030f 	add.w	r3, r7, #15
 80076da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f952 	bl	8008994 <hci_send_req>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da01      	bge.n	80076fa <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80076f6:	23ff      	movs	r3, #255	; 0xff
 80076f8:	e004      	b.n	8007704 <aci_gap_pass_key_resp+0xc4>
  return status;
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007702:	781b      	ldrb	r3, [r3, #0]
}
 8007704:	4618      	mov	r0, r3
 8007706:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800770e:	b590      	push	{r4, r7, lr}
 8007710:	b0cd      	sub	sp, #308	; 0x134
 8007712:	af00      	add	r7, sp, #0
 8007714:	4604      	mov	r4, r0
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800771e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007728:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800772c:	4622      	mov	r2, r4
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007738:	4602      	mov	r2, r0
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007740:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007744:	460a      	mov	r2, r1
 8007746:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007748:	f107 0310 	add.w	r3, r7, #16
 800774c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007750:	f107 0308 	add.w	r3, r7, #8
 8007754:	2207      	movs	r2, #7
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fc44 	bl	8008fe6 <Osal_MemSet>
  int index_input = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007768:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800776c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007778:	3301      	adds	r3, #1
 800777a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007786:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800778e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007792:	3301      	adds	r3, #1
 8007794:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077a0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80077a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ac:	3301      	adds	r3, #1
 80077ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077b6:	2218      	movs	r2, #24
 80077b8:	2100      	movs	r1, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fc13 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077c0:	233f      	movs	r3, #63	; 0x3f
 80077c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80077c6:	238a      	movs	r3, #138	; 0x8a
 80077c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077cc:	f107 0310 	add.w	r3, r7, #16
 80077d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80077e4:	2307      	movs	r3, #7
 80077e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f8cf 	bl	8008994 <hci_send_req>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da01      	bge.n	8007800 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80077fc:	23ff      	movs	r3, #255	; 0xff
 80077fe:	e02e      	b.n	800785e <aci_gap_init+0x150>
  if ( resp.Status )
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <aci_gap_init+0x10c>
    return resp.Status;
 800780e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007812:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	e021      	b.n	800785e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007822:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007826:	b29a      	uxth	r2, r3
 8007828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007838:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800783c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007840:	b29a      	uxth	r2, r3
 8007842:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007846:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007850:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007854:	b29a      	uxth	r2, r3
 8007856:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800785a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007864:	46bd      	mov	sp, r7
 8007866:	bd90      	pop	{r4, r7, pc}

08007868 <aci_gap_slave_security_req>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_slave_security_req( uint16_t Connection_Handle )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b0cc      	sub	sp, #304	; 0x130
 800786c:	af00      	add	r7, sp, #0
 800786e:	4602      	mov	r2, r0
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007878:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 800787a:	f107 0310 	add.w	r3, r7, #16
 800787e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007898:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800789c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80078a0:	8812      	ldrh	r2, [r2, #0]
 80078a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80078a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a8:	3302      	adds	r3, #2
 80078aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078b2:	2218      	movs	r2, #24
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fb95 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078bc:	233f      	movs	r3, #63	; 0x3f
 80078be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08d;
 80078c2:	238d      	movs	r3, #141	; 0x8d
 80078c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80078c8:	230f      	movs	r3, #15
 80078ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80078ce:	f107 0310 	add.w	r3, r7, #16
 80078d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078de:	f107 030f 	add.w	r3, r7, #15
 80078e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 f84e 	bl	8008994 <hci_send_req>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da01      	bge.n	8007902 <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 80078fe:	23ff      	movs	r3, #255	; 0xff
 8007900:	e004      	b.n	800790c <aci_gap_slave_security_req+0xa4>
  return status;
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800790a:	781b      	ldrb	r3, [r3, #0]
}
 800790c:	4618      	mov	r0, r3
 800790e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <aci_gap_update_adv_data>:

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b0cc      	sub	sp, #304	; 0x130
 800791a:	af00      	add	r7, sp, #0
 800791c:	4602      	mov	r2, r0
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007926:	6019      	str	r1, [r3, #0]
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007930:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007932:	f107 0310 	add.w	r3, r7, #16
 8007936:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800793a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800794c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007950:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007954:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007958:	7812      	ldrb	r2, [r2, #0]
 800795a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800795c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007960:	3301      	adds	r3, #1
 8007962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796a:	1c58      	adds	r0, r3, #1
 800796c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007970:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797e:	6819      	ldr	r1, [r3, #0]
 8007980:	f001 fb21 	bl	8008fc6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007992:	4413      	add	r3, r2
 8007994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800799c:	2218      	movs	r2, #24
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 fb20 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079a6:	233f      	movs	r3, #63	; 0x3f
 80079a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80079ac:	238e      	movs	r3, #142	; 0x8e
 80079ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079b2:	f107 0310 	add.w	r3, r7, #16
 80079b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079c2:	f107 030f 	add.w	r3, r7, #15
 80079c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 ffdc 	bl	8008994 <hci_send_req>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da01      	bge.n	80079e6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80079e2:	23ff      	movs	r3, #255	; 0xff
 80079e4:	e004      	b.n	80079f0 <aci_gap_update_adv_data+0xda>
  return status;
 80079e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079ee:	781b      	ldrb	r3, [r3, #0]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b088      	sub	sp, #32
 80079fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a04:	f107 0308 	add.w	r3, r7, #8
 8007a08:	2218      	movs	r2, #24
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 faea 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a12:	233f      	movs	r3, #63	; 0x3f
 8007a14:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007a16:	2392      	movs	r3, #146	; 0x92
 8007a18:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a1a:	1dfb      	adds	r3, r7, #7
 8007a1c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a22:	f107 0308 	add.w	r3, r7, #8
 8007a26:	2100      	movs	r1, #0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 ffb3 	bl	8008994 <hci_send_req>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da01      	bge.n	8007a38 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007a34:	23ff      	movs	r3, #255	; 0xff
 8007a36:	e000      	b.n	8007a3a <aci_gap_configure_whitelist+0x40>
  return status;
 8007a38:	79fb      	ldrb	r3, [r7, #7]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <aci_gap_clear_security_db>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_clear_security_db( void )
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b088      	sub	sp, #32
 8007a46:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a4c:	f107 0308 	add.w	r3, r7, #8
 8007a50:	2218      	movs	r2, #24
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fac6 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a5a:	233f      	movs	r3, #63	; 0x3f
 8007a5c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 8007a5e:	2394      	movs	r3, #148	; 0x94
 8007a60:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a62:	1dfb      	adds	r3, r7, #7
 8007a64:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a66:	2301      	movs	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a6a:	f107 0308 	add.w	r3, r7, #8
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 ff8f 	bl	8008994 <hci_send_req>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da01      	bge.n	8007a80 <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007a7c:	23ff      	movs	r3, #255	; 0xff
 8007a7e:	e000      	b.n	8007a82 <aci_gap_clear_security_db+0x40>
  return status;
 8007a80:	79fb      	ldrb	r3, [r7, #7]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <aci_gap_allow_rebond>:

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b0cc      	sub	sp, #304	; 0x130
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	4602      	mov	r2, r0
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a9a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8007a9c:	f107 0310 	add.w	r3, r7, #16
 8007aa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007abe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007ac2:	8812      	ldrh	r2, [r2, #0]
 8007ac4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aca:	3302      	adds	r3, #2
 8007acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ad4:	2218      	movs	r2, #24
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fa84 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ade:	233f      	movs	r3, #63	; 0x3f
 8007ae0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8007ae4:	2395      	movs	r3, #149	; 0x95
 8007ae6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007aea:	f107 0310 	add.w	r3, r7, #16
 8007aee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007af6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007afa:	f107 030f 	add.w	r3, r7, #15
 8007afe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 ff40 	bl	8008994 <hci_send_req>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da01      	bge.n	8007b1e <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8007b1a:	23ff      	movs	r3, #255	; 0xff
 8007b1c:	e004      	b.n	8007b28 <aci_gap_allow_rebond+0x9e>
  return status;
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b26:	781b      	ldrb	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b0cc      	sub	sp, #304	; 0x130
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007b4c:	460a      	mov	r2, r1
 8007b4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007b50:	f107 0310 	add.w	r3, r7, #16
 8007b54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b60:	2200      	movs	r2, #0
 8007b62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b76:	8812      	ldrh	r2, [r2, #0]
 8007b78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b7e:	3302      	adds	r3, #2
 8007b80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b8c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba2:	2218      	movs	r2, #24
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fa1d 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bac:	233f      	movs	r3, #63	; 0x3f
 8007bae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007bb2:	23a5      	movs	r3, #165	; 0xa5
 8007bb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007bb8:	f107 0310 	add.w	r3, r7, #16
 8007bbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007bc8:	f107 030f 	add.w	r3, r7, #15
 8007bcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fed9 	bl	8008994 <hci_send_req>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	da01      	bge.n	8007bec <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007be8:	23ff      	movs	r3, #255	; 0xff
 8007bea:	e004      	b.n	8007bf6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bf4:	781b      	ldrb	r3, [r3, #0]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	2218      	movs	r2, #24
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f9e7 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c18:	233f      	movs	r3, #63	; 0x3f
 8007c1a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007c1c:	f240 1301 	movw	r3, #257	; 0x101
 8007c20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007c22:	1dfb      	adds	r3, r7, #7
 8007c24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007c26:	2301      	movs	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c2a:	f107 0308 	add.w	r3, r7, #8
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 feaf 	bl	8008994 <hci_send_req>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	da01      	bge.n	8007c40 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007c3c:	23ff      	movs	r3, #255	; 0xff
 8007c3e:	e000      	b.n	8007c42 <aci_gatt_init+0x42>
  return status;
 8007c40:	79fb      	ldrb	r3, [r7, #7]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3720      	adds	r7, #32
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007c4a:	b590      	push	{r4, r7, lr}
 8007c4c:	b0cf      	sub	sp, #316	; 0x13c
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	4604      	mov	r4, r0
 8007c52:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007c56:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007c5a:	6001      	str	r1, [r0, #0]
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4619      	mov	r1, r3
 8007c60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c64:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007c68:	4622      	mov	r2, r4
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c70:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007c74:	4602      	mov	r2, r0
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c7c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007c80:	460a      	mov	r2, r1
 8007c82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007c8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c90:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d00a      	beq.n	8007cb0 <aci_gatt_add_service+0x66>
 8007c9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c9e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d101      	bne.n	8007cac <aci_gatt_add_service+0x62>
 8007ca8:	2311      	movs	r3, #17
 8007caa:	e002      	b.n	8007cb2 <aci_gatt_add_service+0x68>
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <aci_gatt_add_service+0x68>
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	f107 0210 	add.w	r2, r7, #16
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007cbc:	f107 030c 	add.w	r3, r7, #12
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 f98e 	bl	8008fe6 <Osal_MemSet>
  int index_input = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007cd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cd4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007cd8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007cea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007cee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d002      	beq.n	8007cfe <aci_gatt_add_service+0xb4>
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d004      	beq.n	8007d06 <aci_gatt_add_service+0xbc>
 8007cfc:	e007      	b.n	8007d0e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007d04:	e005      	b.n	8007d12 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007d06:	2310      	movs	r3, #16
 8007d08:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007d0c:	e001      	b.n	8007d12 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007d0e:	2397      	movs	r3, #151	; 0x97
 8007d10:	e06c      	b.n	8007dec <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007d12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d16:	1c58      	adds	r0, r3, #1
 8007d18:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007d1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d24:	6819      	ldr	r1, [r3, #0]
 8007d26:	f001 f94e 	bl	8008fc6 <Osal_MemCpy>
    index_input += size;
 8007d2a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007d2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d32:	4413      	add	r3, r2
 8007d34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007d40:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007d44:	7812      	ldrb	r2, [r2, #0]
 8007d46:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007d48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d56:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007d5a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d66:	3301      	adds	r3, #1
 8007d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d70:	2218      	movs	r2, #24
 8007d72:	2100      	movs	r1, #0
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f936 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d7a:	233f      	movs	r3, #63	; 0x3f
 8007d7c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007d80:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007d84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d88:	f107 0310 	add.w	r3, r7, #16
 8007d8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007d98:	f107 030c 	add.w	r3, r7, #12
 8007d9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007da0:	2303      	movs	r3, #3
 8007da2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fdf1 	bl	8008994 <hci_send_req>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	da01      	bge.n	8007dbc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007db8:	23ff      	movs	r3, #255	; 0xff
 8007dba:	e017      	b.n	8007dec <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007dbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	e00a      	b.n	8007dec <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007dd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007de8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd90      	pop	{r4, r7, pc}

08007df6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007df6:	b590      	push	{r4, r7, lr}
 8007df8:	b0d1      	sub	sp, #324	; 0x144
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	4608      	mov	r0, r1
 8007e00:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007e04:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007e08:	600a      	str	r2, [r1, #0]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e10:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007e14:	4622      	mov	r2, r4
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e1c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007e20:	4602      	mov	r2, r0
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e28:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007e2c:	460a      	mov	r2, r1
 8007e2e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007e30:	f107 0318 	add.w	r3, r7, #24
 8007e34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007e38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e3c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d00a      	beq.n	8007e5c <aci_gatt_add_char+0x66>
 8007e46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007e4a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d101      	bne.n	8007e58 <aci_gatt_add_char+0x62>
 8007e54:	2313      	movs	r3, #19
 8007e56:	e002      	b.n	8007e5e <aci_gatt_add_char+0x68>
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e000      	b.n	8007e5e <aci_gatt_add_char+0x68>
 8007e5c:	2305      	movs	r3, #5
 8007e5e:	f107 0218 	add.w	r2, r7, #24
 8007e62:	4413      	add	r3, r2
 8007e64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f8b8 	bl	8008fe6 <Osal_MemSet>
  int index_input = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007e7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e80:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007e84:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007e88:	8812      	ldrh	r2, [r2, #0]
 8007e8a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e90:	3302      	adds	r3, #2
 8007e92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007e96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007e9a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007e9e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007ea6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007eb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007eb4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d002      	beq.n	8007ec4 <aci_gatt_add_char+0xce>
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d004      	beq.n	8007ecc <aci_gatt_add_char+0xd6>
 8007ec2:	e007      	b.n	8007ed4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007eca:	e005      	b.n	8007ed8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007ed2:	e001      	b.n	8007ed8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007ed4:	2397      	movs	r3, #151	; 0x97
 8007ed6:	e091      	b.n	8007ffc <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007ed8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007edc:	1cd8      	adds	r0, r3, #3
 8007ede:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007ee2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007ee6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007eea:	6819      	ldr	r1, [r3, #0]
 8007eec:	f001 f86b 	bl	8008fc6 <Osal_MemCpy>
    index_input += size;
 8007ef0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007ef4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007ef8:	4413      	add	r3, r2
 8007efa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f02:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007f06:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007f0a:	8812      	ldrh	r2, [r2, #0]
 8007f0c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007f0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f12:	3302      	adds	r3, #2
 8007f14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f1c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007f20:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f26:	3301      	adds	r3, #1
 8007f28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f30:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007f34:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007f36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007f40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f44:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007f48:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007f54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f58:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007f5c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007f5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f62:	3301      	adds	r3, #1
 8007f64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007f68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f6c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007f70:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007f72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f76:	3301      	adds	r3, #1
 8007f78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f80:	2218      	movs	r2, #24
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 f82e 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f8a:	233f      	movs	r3, #63	; 0x3f
 8007f8c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007f90:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007f94:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007f98:	f107 0318 	add.w	r3, r7, #24
 8007f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007fa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007fa8:	f107 0314 	add.w	r3, r7, #20
 8007fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fce9 	bl	8008994 <hci_send_req>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da01      	bge.n	8007fcc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007fc8:	23ff      	movs	r3, #255	; 0xff
 8007fca:	e017      	b.n	8007ffc <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007fcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007fda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	e00a      	b.n	8007ffc <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007fe6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007fea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007ff8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008002:	46bd      	mov	sp, r7
 8008004:	bd90      	pop	{r4, r7, pc}

08008006 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008006:	b5b0      	push	{r4, r5, r7, lr}
 8008008:	b0cc      	sub	sp, #304	; 0x130
 800800a:	af00      	add	r7, sp, #0
 800800c:	4605      	mov	r5, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008018:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800801c:	462a      	mov	r2, r5
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008024:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008028:	4622      	mov	r2, r4
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008034:	4602      	mov	r2, r0
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008040:	460a      	mov	r2, r1
 8008042:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008044:	f107 0310 	add.w	r3, r7, #16
 8008048:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008062:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008066:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800806a:	8812      	ldrh	r2, [r2, #0]
 800806c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800806e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008072:	3302      	adds	r3, #2
 8008074:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800807c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008080:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008084:	8812      	ldrh	r2, [r2, #0]
 8008086:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800808c:	3302      	adds	r3, #2
 800808e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008096:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800809a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80080a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a6:	3301      	adds	r3, #1
 80080a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80080ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080b4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80080b8:	7812      	ldrb	r2, [r2, #0]
 80080ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80080bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080c0:	3301      	adds	r3, #1
 80080c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80080c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ca:	1d98      	adds	r0, r3, #6
 80080cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80080dc:	f000 ff73 	bl	8008fc6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080f8:	2218      	movs	r2, #24
 80080fa:	2100      	movs	r1, #0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 ff72 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008102:	233f      	movs	r3, #63	; 0x3f
 8008104:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008108:	f44f 7383 	mov.w	r3, #262	; 0x106
 800810c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008110:	f107 0310 	add.w	r3, r7, #16
 8008114:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800811c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008120:	f107 030f 	add.w	r3, r7, #15
 8008124:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008128:	2301      	movs	r3, #1
 800812a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800812e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fc2d 	bl	8008994 <hci_send_req>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	da01      	bge.n	8008144 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008140:	23ff      	movs	r3, #255	; 0xff
 8008142:	e004      	b.n	800814e <aci_gatt_update_char_value+0x148>
  return status;
 8008144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008148:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800814c:	781b      	ldrb	r3, [r3, #0]
}
 800814e:	4618      	mov	r0, r3
 8008150:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008154:	46bd      	mov	sp, r7
 8008156:	bdb0      	pop	{r4, r5, r7, pc}

08008158 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8008158:	b5b0      	push	{r4, r5, r7, lr}
 800815a:	b0cc      	sub	sp, #304	; 0x130
 800815c:	af00      	add	r7, sp, #0
 800815e:	4605      	mov	r5, r0
 8008160:	460c      	mov	r4, r1
 8008162:	4610      	mov	r0, r2
 8008164:	4619      	mov	r1, r3
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800816e:	462a      	mov	r2, r5
 8008170:	801a      	strh	r2, [r3, #0]
 8008172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800817a:	4622      	mov	r2, r4
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008186:	4602      	mov	r2, r0
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008192:	460a      	mov	r2, r1
 8008194:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8008196:	f107 0310 	add.w	r3, r7, #16
 800819a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800819e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80081b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081b8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80081bc:	8812      	ldrh	r2, [r2, #0]
 80081be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80081c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081c4:	3302      	adds	r3, #2
 80081c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 80081ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081d6:	8812      	ldrh	r2, [r2, #0]
 80081d8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80081da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081de:	3302      	adds	r3, #2
 80081e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 80081e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081ec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80081f0:	7812      	ldrb	r2, [r2, #0]
 80081f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80081f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081f8:	3301      	adds	r3, #1
 80081fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 80081fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008202:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008206:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800820e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008212:	3301      	adds	r3, #1
 8008214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008220:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008226:	3301      	adds	r3, #1
 8008228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800822c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008230:	3307      	adds	r3, #7
 8008232:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008236:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fec3 	bl	8008fc6 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008240:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8008244:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008248:	4413      	add	r3, r2
 800824a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800824e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008252:	2218      	movs	r2, #24
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fec5 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800825c:	233f      	movs	r3, #63	; 0x3f
 800825e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8008262:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008266:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800826a:	f107 0310 	add.w	r3, r7, #16
 800826e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800827a:	f107 030f 	add.w	r3, r7, #15
 800827e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008282:	2301      	movs	r3, #1
 8008284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008288:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800828c:	2100      	movs	r1, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fb80 	bl	8008994 <hci_send_req>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	da01      	bge.n	800829e <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800829a:	23ff      	movs	r3, #255	; 0xff
 800829c:	e004      	b.n	80082a8 <aci_gatt_write_resp+0x150>
  return status;
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80082a6:	781b      	ldrb	r3, [r3, #0]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bdb0      	pop	{r4, r5, r7, pc}

080082b2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b0cc      	sub	sp, #304	; 0x130
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80082ca:	4602      	mov	r2, r0
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80082d6:	460a      	mov	r2, r1
 80082d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80082e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082fc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008300:	7812      	ldrb	r2, [r2, #0]
 8008302:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008308:	3301      	adds	r3, #1
 800830a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800830e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008312:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008316:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800831a:	7812      	ldrb	r2, [r2, #0]
 800831c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800831e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008322:	3301      	adds	r3, #1
 8008324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832c:	1c98      	adds	r0, r3, #2
 800832e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008332:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008336:	781a      	ldrb	r2, [r3, #0]
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008340:	6819      	ldr	r1, [r3, #0]
 8008342:	f000 fe40 	bl	8008fc6 <Osal_MemCpy>
  index_input += Length;
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008354:	4413      	add	r3, r2
 8008356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800835a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800835e:	2218      	movs	r2, #24
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fe3f 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008368:	233f      	movs	r3, #63	; 0x3f
 800836a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800836e:	230c      	movs	r3, #12
 8008370:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800837c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008384:	f107 030f 	add.w	r3, r7, #15
 8008388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800838c:	2301      	movs	r3, #1
 800838e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fafb 	bl	8008994 <hci_send_req>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da01      	bge.n	80083a8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80083a4:	23ff      	movs	r3, #255	; 0xff
 80083a6:	e004      	b.n	80083b2 <aci_hal_write_config_data+0x100>
  return status;
 80083a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083b0:	781b      	ldrb	r3, [r3, #0]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b0cc      	sub	sp, #304	; 0x130
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4602      	mov	r2, r0
 80083c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083d6:	460a      	mov	r2, r1
 80083d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80083da:	f107 0310 	add.w	r3, r7, #16
 80083de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80083f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083fc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008400:	7812      	ldrb	r2, [r2, #0]
 8008402:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008408:	3301      	adds	r3, #1
 800840a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800840e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008412:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008416:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800841a:	7812      	ldrb	r2, [r2, #0]
 800841c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800841e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008422:	3301      	adds	r3, #1
 8008424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800842c:	2218      	movs	r2, #24
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fdd8 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008436:	233f      	movs	r3, #63	; 0x3f
 8008438:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800843c:	230f      	movs	r3, #15
 800843e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008442:	f107 0310 	add.w	r3, r7, #16
 8008446:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800844a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800844e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008452:	f107 030f 	add.w	r3, r7, #15
 8008456:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800845a:	2301      	movs	r3, #1
 800845c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008464:	2100      	movs	r1, #0
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fa94 	bl	8008994 <hci_send_req>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	da01      	bge.n	8008476 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008472:	23ff      	movs	r3, #255	; 0xff
 8008474:	e004      	b.n	8008480 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800847e:	781b      	ldrb	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b088      	sub	sp, #32
 800848e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	2218      	movs	r2, #24
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fda2 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x03;
 80084a2:	2303      	movs	r3, #3
 80084a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80084a6:	2303      	movs	r3, #3
 80084a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80084aa:	1dfb      	adds	r3, r7, #7
 80084ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80084ae:	2301      	movs	r3, #1
 80084b0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fa6b 	bl	8008994 <hci_send_req>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da01      	bge.n	80084c8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80084c4:	23ff      	movs	r3, #255	; 0xff
 80084c6:	e000      	b.n	80084ca <hci_reset+0x40>
  return status;
 80084c8:	79fb      	ldrb	r3, [r7, #7]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3720      	adds	r7, #32
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b0ce      	sub	sp, #312	; 0x138
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e0:	6019      	str	r1, [r3, #0]
 80084e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80084f4:	4602      	mov	r2, r0
 80084f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80084f8:	f107 0318 	add.w	r3, r7, #24
 80084fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008500:	f107 0310 	add.w	r3, r7, #16
 8008504:	2205      	movs	r2, #5
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fd6c 	bl	8008fe6 <Osal_MemSet>
  int index_input = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008514:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008518:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800851c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008520:	8812      	ldrh	r2, [r2, #0]
 8008522:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008528:	3302      	adds	r3, #2
 800852a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800852e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008532:	2218      	movs	r2, #24
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fd55 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x08;
 800853c:	2308      	movs	r3, #8
 800853e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8008542:	2330      	movs	r3, #48	; 0x30
 8008544:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008548:	f107 0318 	add.w	r3, r7, #24
 800854c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008550:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008558:	f107 0310 	add.w	r3, r7, #16
 800855c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008560:	2305      	movs	r3, #5
 8008562:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008566:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fa11 	bl	8008994 <hci_send_req>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	da01      	bge.n	800857c <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8008578:	23ff      	movs	r3, #255	; 0xff
 800857a:	e023      	b.n	80085c4 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800857c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008580:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <hci_le_read_phy+0xc4>
    return resp.Status;
 800858a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800858e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	e016      	b.n	80085c4 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8008596:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800859a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800859e:	78da      	ldrb	r2, [r3, #3]
 80085a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80085ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085b4:	791a      	ldrb	r2, [r3, #4]
 80085b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80085ce:	b590      	push	{r4, r7, lr}
 80085d0:	b0cd      	sub	sp, #308	; 0x134
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	4604      	mov	r4, r0
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80085e2:	4622      	mov	r2, r4
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80085ee:	4602      	mov	r2, r0
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80085fa:	460a      	mov	r2, r1
 80085fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80085fe:	f107 0310 	add.w	r3, r7, #16
 8008602:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800861c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008620:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008624:	7812      	ldrb	r2, [r2, #0]
 8008626:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800862c:	3301      	adds	r3, #1
 800862e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008636:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800863a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008646:	3301      	adds	r3, #1
 8008648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800864c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008650:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008654:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800865c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008660:	3301      	adds	r3, #1
 8008662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008666:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800866a:	2218      	movs	r2, #24
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fcb9 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x08;
 8008674:	2308      	movs	r3, #8
 8008676:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800867a:	2331      	movs	r3, #49	; 0x31
 800867c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008680:	f107 0310 	add.w	r3, r7, #16
 8008684:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800868c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008690:	f107 030f 	add.w	r3, r7, #15
 8008694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008698:	2301      	movs	r3, #1
 800869a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800869e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f975 	bl	8008994 <hci_send_req>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da01      	bge.n	80086b4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80086b0:	23ff      	movs	r3, #255	; 0xff
 80086b2:	e004      	b.n	80086be <hci_le_set_default_phy+0xf0>
  return status;
 80086b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086bc:	781b      	ldrb	r3, [r3, #0]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd90      	pop	{r4, r7, pc}

080086c8 <hci_le_set_phy>:
tBleStatus hci_le_set_phy( uint16_t Connection_Handle,
                           uint8_t ALL_PHYS,
                           uint8_t TX_PHYS,
                           uint8_t RX_PHYS,
                           uint16_t PHY_options )
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b0cc      	sub	sp, #304	; 0x130
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4605      	mov	r5, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80086de:	462a      	mov	r2, r5
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80086ea:	4622      	mov	r2, r4
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f6:	4602      	mov	r2, r0
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fe:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008702:	460a      	mov	r2, r1
 8008704:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_phy_cp0 *cp0 = (hci_le_set_phy_cp0*)(cmd_buffer);
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800870e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008712:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008728:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800872c:	8812      	ldrh	r2, [r2, #0]
 800872e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008734:	3302      	adds	r3, #2
 8008736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800873a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800873e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008742:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800874a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874e:	3301      	adds	r3, #1
 8008750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008758:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800875c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008764:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008768:	3301      	adds	r3, #1
 800876a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800876e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008772:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008776:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800877a:	7812      	ldrb	r2, [r2, #0]
 800877c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800877e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008782:	3301      	adds	r3, #1
 8008784:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PHY_options = PHY_options;
 8008788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008790:	f8a3 2005 	strh.w	r2, [r3, #5]
  index_input += 2;
 8008794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008798:	3302      	adds	r3, #2
 800879a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800879e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087a2:	2218      	movs	r2, #24
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fc1d 	bl	8008fe6 <Osal_MemSet>
  rq.ogf = 0x08;
 80087ac:	2308      	movs	r3, #8
 80087ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x032;
 80087b2:	2332      	movs	r3, #50	; 0x32
 80087b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80087b8:	230f      	movs	r3, #15
 80087ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80087be:	f107 0310 	add.w	r3, r7, #16
 80087c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087ce:	f107 030f 	add.w	r3, r7, #15
 80087d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f8d6 	bl	8008994 <hci_send_req>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da01      	bge.n	80087f2 <hci_le_set_phy+0x12a>
    return BLE_STATUS_TIMEOUT;
 80087ee:	23ff      	movs	r3, #255	; 0xff
 80087f0:	e004      	b.n	80087fc <hci_le_set_phy+0x134>
  return status;
 80087f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087fa:	781b      	ldrb	r3, [r3, #0]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008802:	46bd      	mov	sp, r7
 8008804:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008808 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800880e:	2204      	movs	r2, #4
 8008810:	2100      	movs	r1, #0
 8008812:	4816      	ldr	r0, [pc, #88]	; (800886c <DIS_Init+0x64>)
 8008814:	f001 fd4a 	bl	800a2ac <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8008818:	f641 030a 	movw	r3, #6154	; 0x180a
 800881c:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800881e:	1d39      	adds	r1, r7, #4
 8008820:	4b12      	ldr	r3, [pc, #72]	; (800886c <DIS_Init+0x64>)
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	2303      	movs	r3, #3
 8008826:	2201      	movs	r2, #1
 8008828:	2001      	movs	r0, #1
 800882a:	f7ff fa0e 	bl	8007c4a <aci_gatt_add_service>
 800882e:	4603      	mov	r3, r0
 8008830:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8008832:	f642 2329 	movw	r3, #10793	; 0x2a29
 8008836:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8008838:	4b0c      	ldr	r3, [pc, #48]	; (800886c <DIS_Init+0x64>)
 800883a:	8818      	ldrh	r0, [r3, #0]
 800883c:	1d3a      	adds	r2, r7, #4
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <DIS_Init+0x68>)
 8008840:	9305      	str	r3, [sp, #20]
 8008842:	2301      	movs	r3, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	230a      	movs	r3, #10
 8008848:	9303      	str	r3, [sp, #12]
 800884a:	2300      	movs	r3, #0
 800884c:	9302      	str	r3, [sp, #8]
 800884e:	2300      	movs	r3, #0
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	2302      	movs	r3, #2
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2320      	movs	r3, #32
 8008858:	2101      	movs	r1, #1
 800885a:	f7ff facc 	bl	8007df6 <aci_gatt_add_char>
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8008862:	bf00      	nop
}
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000038 	.word	0x20000038
 8008870:	2000003a 	.word	0x2000003a

08008874 <DIS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval None
 */
tBleStatus DIS_UpdateChar(uint16_t UUID, DIS_Data_t *pPData)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af02      	add	r7, sp, #8
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value;

  switch(UUID)
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	f642 2229 	movw	r2, #10793	; 0x2a29
 8008886:	4293      	cmp	r3, r2
 8008888:	d10f      	bne.n	80088aa <DIS_UpdateChar+0x36>
  {
#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
    case MANUFACTURER_NAME_UUID:
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800888a:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <DIS_UpdateChar+0x48>)
 800888c:	8818      	ldrh	r0, [r3, #0]
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <DIS_UpdateChar+0x48>)
 8008890:	8859      	ldrh	r1, [r3, #2]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	791a      	ldrb	r2, [r3, #4]
                                                DIS_Context.ManufacturerNameStringCharHdle,
                                                0,
                                                pPData->Length,
                                                (uint8_t *)pPData->pPayload);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	f7ff fbb1 	bl	8008006 <aci_gatt_update_char_value>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]
      break;
 80088a8:	e002      	b.n	80088b0 <DIS_UpdateChar+0x3c>
                                                (uint8_t *)pPData->pPayload);
      break;
#endif

    default:
      return_value = BLE_STATUS_ERROR;
 80088aa:	2397      	movs	r3, #151	; 0x97
 80088ac:	73fb      	strb	r3, [r7, #15]
      break;
 80088ae:	bf00      	nop
  }

  return return_value;
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
}/* end DIS_UpdateChar() */
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20000038 	.word	0x20000038

080088c0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	4a08      	ldr	r2, [pc, #32]	; (80088f0 <hci_init+0x30>)
 80088d0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80088d2:	4a08      	ldr	r2, [pc, #32]	; (80088f4 <hci_init+0x34>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80088d8:	4806      	ldr	r0, [pc, #24]	; (80088f4 <hci_init+0x34>)
 80088da:	f000 f973 	bl	8008bc4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f8d4 	bl	8008a90 <TlInit>

  return;
 80088e8:	bf00      	nop
}
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000594 	.word	0x20000594
 80088f4:	2000056c 	.word	0x2000056c

080088f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80088fe:	4822      	ldr	r0, [pc, #136]	; (8008988 <hci_user_evt_proc+0x90>)
 8008900:	f000 fde0 	bl	80094c4 <LST_is_empty>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d12b      	bne.n	8008962 <hci_user_evt_proc+0x6a>
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <hci_user_evt_proc+0x94>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d027      	beq.n	8008962 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008912:	f107 030c 	add.w	r3, r7, #12
 8008916:	4619      	mov	r1, r3
 8008918:	481b      	ldr	r0, [pc, #108]	; (8008988 <hci_user_evt_proc+0x90>)
 800891a:	f000 fe62 	bl	80095e2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <hci_user_evt_proc+0x98>)
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00c      	beq.n	8008940 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800892a:	2301      	movs	r3, #1
 800892c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800892e:	4b18      	ldr	r3, [pc, #96]	; (8008990 <hci_user_evt_proc+0x98>)
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	1d3a      	adds	r2, r7, #4
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008938:	793a      	ldrb	r2, [r7, #4]
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <hci_user_evt_proc+0x94>)
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e002      	b.n	8008946 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008940:	4b12      	ldr	r3, [pc, #72]	; (800898c <hci_user_evt_proc+0x94>)
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008946:	4b11      	ldr	r3, [pc, #68]	; (800898c <hci_user_evt_proc+0x94>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4618      	mov	r0, r3
 8008952:	f001 f8ff 	bl	8009b54 <TL_MM_EvtDone>
 8008956:	e004      	b.n	8008962 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4619      	mov	r1, r3
 800895c:	480a      	ldr	r0, [pc, #40]	; (8008988 <hci_user_evt_proc+0x90>)
 800895e:	f000 fdd3 	bl	8009508 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008962:	4809      	ldr	r0, [pc, #36]	; (8008988 <hci_user_evt_proc+0x90>)
 8008964:	f000 fdae 	bl	80094c4 <LST_is_empty>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d107      	bne.n	800897e <hci_user_evt_proc+0x86>
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <hci_user_evt_proc+0x94>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008976:	4804      	ldr	r0, [pc, #16]	; (8008988 <hci_user_evt_proc+0x90>)
 8008978:	f7f9 ff45 	bl	8002806 <hci_notify_asynch_evt>
  }


  return;
 800897c:	bf00      	nop
 800897e:	bf00      	nop
}
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000040 	.word	0x20000040
 800898c:	2000004c 	.word	0x2000004c
 8008990:	2000056c 	.word	0x2000056c

08008994 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80089a0:	2000      	movs	r0, #0
 80089a2:	f000 f8cb 	bl	8008b3c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80089a6:	2300      	movs	r3, #0
 80089a8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	b21b      	sxth	r3, r3
 80089b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b4:	b21a      	sxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	029b      	lsls	r3, r3, #10
 80089bc:	b21b      	sxth	r3, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	b21b      	sxth	r3, r3
 80089c2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	b2d9      	uxtb	r1, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	8bbb      	ldrh	r3, [r7, #28]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f88d 	bl	8008af0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80089d6:	e04e      	b.n	8008a76 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80089d8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80089dc:	f7f9 ff2a 	bl	8002834 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80089e0:	e043      	b.n	8008a6a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80089e2:	f107 030c 	add.w	r3, r7, #12
 80089e6:	4619      	mov	r1, r3
 80089e8:	4828      	ldr	r0, [pc, #160]	; (8008a8c <hci_send_req+0xf8>)
 80089ea:	f000 fdfa 	bl	80095e2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	7a5b      	ldrb	r3, [r3, #9]
 80089f2:	2b0f      	cmp	r3, #15
 80089f4:	d114      	bne.n	8008a20 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	330b      	adds	r3, #11
 80089fa:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	885b      	ldrh	r3, [r3, #2]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	8bba      	ldrh	r2, [r7, #28]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d104      	bne.n	8008a12 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d027      	beq.n	8008a6a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	77fb      	strb	r3, [r7, #31]
 8008a1e:	e024      	b.n	8008a6a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	330b      	adds	r3, #11
 8008a24:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	8bba      	ldrh	r2, [r7, #28]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d114      	bne.n	8008a5e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	7a9b      	ldrb	r3, [r3, #10]
 8008a38:	3b03      	subs	r3, #3
 8008a3a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	695a      	ldr	r2, [r3, #20]
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	bfa8      	it	ge
 8008a46:	461a      	movge	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6918      	ldr	r0, [r3, #16]
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	1cd9      	adds	r1, r3, #3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f001 fc19 	bl	800a290 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008a66:	2301      	movs	r3, #1
 8008a68:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008a6a:	4808      	ldr	r0, [pc, #32]	; (8008a8c <hci_send_req+0xf8>)
 8008a6c:	f000 fd2a 	bl	80094c4 <LST_is_empty>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0b5      	beq.n	80089e2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008a76:	7ffb      	ldrb	r3, [r7, #31]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0ad      	beq.n	80089d8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	f000 f85d 	bl	8008b3c <NotifyCmdStatus>

  return 0;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3720      	adds	r7, #32
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	2000058c 	.word	0x2000058c

08008a90 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008a98:	480f      	ldr	r0, [pc, #60]	; (8008ad8 <TlInit+0x48>)
 8008a9a:	f000 fd03 	bl	80094a4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008a9e:	4a0f      	ldr	r2, [pc, #60]	; (8008adc <TlInit+0x4c>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008aa4:	480e      	ldr	r0, [pc, #56]	; (8008ae0 <TlInit+0x50>)
 8008aa6:	f000 fcfd 	bl	80094a4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <TlInit+0x54>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008ab0:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <TlInit+0x58>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008abc:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <TlInit+0x5c>)
 8008abe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008ac0:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <TlInit+0x58>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f107 0208 	add.w	r2, r7, #8
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
  }

  return;
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
}
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000058c 	.word	0x2000058c
 8008adc:	20000048 	.word	0x20000048
 8008ae0:	20000040 	.word	0x20000040
 8008ae4:	2000004c 	.word	0x2000004c
 8008ae8:	2000056c 	.word	0x2000056c
 8008aec:	08008b7d 	.word	0x08008b7d

08008af0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	603a      	str	r2, [r7, #0]
 8008afa:	80fb      	strh	r3, [r7, #6]
 8008afc:	460b      	mov	r3, r1
 8008afe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008b00:	4b0c      	ldr	r3, [pc, #48]	; (8008b34 <SendCmd+0x44>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008b0a:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <SendCmd+0x44>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	797a      	ldrb	r2, [r7, #5]
 8008b10:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008b12:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <SendCmd+0x44>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	797a      	ldrb	r2, [r7, #5]
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f001 fbb7 	bl	800a290 <memcpy>

  hciContext.io.Send(0,0);
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <SendCmd+0x48>)
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2100      	movs	r1, #0
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4798      	blx	r3

  return;
 8008b2c:	bf00      	nop
}
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000048 	.word	0x20000048
 8008b38:	2000056c 	.word	0x2000056c

08008b3c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <NotifyCmdStatus+0x3c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008b54:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <NotifyCmdStatus+0x3c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2000      	movs	r0, #0
 8008b5a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008b5c:	e008      	b.n	8008b70 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <NotifyCmdStatus+0x3c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008b66:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <NotifyCmdStatus+0x3c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	4798      	blx	r3
  return;
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
}
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20000594 	.word	0x20000594

08008b7c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7a5b      	ldrb	r3, [r3, #9]
 8008b88:	2b0f      	cmp	r3, #15
 8008b8a:	d003      	beq.n	8008b94 <TlEvtReceived+0x18>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	7a5b      	ldrb	r3, [r3, #9]
 8008b90:	2b0e      	cmp	r3, #14
 8008b92:	d107      	bne.n	8008ba4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4809      	ldr	r0, [pc, #36]	; (8008bbc <TlEvtReceived+0x40>)
 8008b98:	f000 fcdc 	bl	8009554 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f7f9 fe3e 	bl	800281e <hci_cmd_resp_release>
 8008ba2:	e006      	b.n	8008bb2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4806      	ldr	r0, [pc, #24]	; (8008bc0 <TlEvtReceived+0x44>)
 8008ba8:	f000 fcd4 	bl	8009554 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008bac:	4804      	ldr	r0, [pc, #16]	; (8008bc0 <TlEvtReceived+0x44>)
 8008bae:	f7f9 fe2a 	bl	8002806 <hci_notify_asynch_evt>
  }

  return;
 8008bb2:	bf00      	nop
}
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000058c 	.word	0x2000058c
 8008bc0:	20000040 	.word	0x20000040

08008bc4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a05      	ldr	r2, [pc, #20]	; (8008be4 <hci_register_io_bus+0x20>)
 8008bd0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a04      	ldr	r2, [pc, #16]	; (8008be8 <hci_register_io_bus+0x24>)
 8008bd6:	611a      	str	r2, [r3, #16]

  return;
 8008bd8:	bf00      	nop
}
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	080098cd 	.word	0x080098cd
 8008be8:	08009935 	.word	0x08009935

08008bec <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08e      	sub	sp, #56	; 0x38
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2bff      	cmp	r3, #255	; 0xff
 8008c06:	d174      	bne.n	8008cf2 <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f640 4201 	movw	r2, #3073	; 0xc01
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d03f      	beq.n	8008c9c <HeartRate_Event_Handler+0xb0>
 8008c1c:	f640 4213 	movw	r2, #3091	; 0xc13
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d160      	bne.n	8008ce6 <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	3302      	adds	r3, #2
 8008c28:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	461a      	mov	r2, r3
 8008c32:	4b33      	ldr	r3, [pc, #204]	; (8008d00 <HeartRate_Event_Handler+0x114>)
 8008c34:	88db      	ldrh	r3, [r3, #6]
 8008c36:	3301      	adds	r3, #1
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d156      	bne.n	8008cea <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	795b      	ldrb	r3, [r3, #5]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d117      	bne.n	8008c7a <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b298      	uxth	r0, r3
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	b299      	uxth	r1, r3
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 8008c5a:	6a3a      	ldr	r2, [r7, #32]
 8008c5c:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008c5e:	9201      	str	r2, [sp, #4]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	2300      	movs	r3, #0
 8008c64:	2200      	movs	r2, #0
 8008c66:	f7ff fa77 	bl	8008158 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7f9 fe34 	bl	80028e0 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 8008c78:	e037      	b.n	8008cea <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b298      	uxth	r0, r3
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	885b      	ldrh	r3, [r3, #2]
 8008c84:	b299      	uxth	r1, r3
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 8008c8a:	6a3a      	ldr	r2, [r7, #32]
 8008c8c:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 8008c8e:	9201      	str	r2, [sp, #4]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	2201      	movs	r2, #1
 8008c96:	f7ff fa5f 	bl	8008158 <aci_gatt_write_resp>
        break;
 8008c9a:	e026      	b.n	8008cea <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <HeartRate_Event_Handler+0x114>)
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	3302      	adds	r3, #2
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d11c      	bne.n	8008cee <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	7a1b      	ldrb	r3, [r3, #8]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8008cca:	f107 030c 	add.w	r3, r7, #12
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f9 fe06 	bl	80028e0 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 8008cd4:	e00b      	b.n	8008cee <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 8008cda:	f107 030c 	add.w	r3, r7, #12
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 fdfe 	bl	80028e0 <HRS_Notification>
        break;
 8008ce4:	e003      	b.n	8008cee <HeartRate_Event_Handler+0x102>

        default:
          break;
 8008ce6:	bf00      	nop
 8008ce8:	e004      	b.n	8008cf4 <HeartRate_Event_Handler+0x108>
        break;
 8008cea:	bf00      	nop
 8008cec:	e002      	b.n	8008cf4 <HeartRate_Event_Handler+0x108>
        break;
 8008cee:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008cf0:	e000      	b.n	8008cf4 <HeartRate_Event_Handler+0x108>

    default:
      break;
 8008cf2:	bf00      	nop
  }

  return(return_value);
 8008cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3730      	adds	r7, #48	; 0x30
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20000050 	.word	0x20000050

08008d04 <Update_Char_BodySensorLocation>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_BodySensorLocation(HRS_BodySensorLocation_t *pBodySensorLocationValue)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	6078      	str	r0, [r7, #4]
  tBleStatus return_value = BLE_STATUS_SUCCESS;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8008d10:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <Update_Char_BodySensorLocation+0x30>)
 8008d12:	8818      	ldrh	r0, [r3, #0]
 8008d14:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <Update_Char_BodySensorLocation+0x30>)
 8008d16:	8899      	ldrh	r1, [r3, #4]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f7ff f971 	bl	8008006 <aci_gatt_update_char_value>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
                                            HRS_Context.BodySensorLocationCharHdle,
                                            0, /* charValOffset */
                                            1, /* charValueLen */
                                            (uint8_t *) pBodySensorLocationValue);
  return return_value;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_BodySensorLocation() */
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000050 	.word	0x20000050

08008d38 <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HRS_MeasVal_t *pMeasurement )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af02      	add	r7, sp, #8
 8008d3e:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 8008d40:	2300      	movs	r3, #0
 8008d42:	753b      	strb	r3, [r7, #20]
  uint8_t hrm_char_length;

  /**
   * Flags update
   */
  ahrm_value[0] = (uint8_t)pMeasurement->Flags;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7a5b      	ldrb	r3, [r3, #9]
 8008d48:	733b      	strb	r3, [r7, #12]
  hrm_char_length = 1;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	75fb      	strb	r3, [r7, #23]

  /**
   *  Heart Rate Measurement Value
   */
  if ( (pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16 )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7a5b      	ldrb	r3, [r3, #9]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d018      	beq.n	8008d8c <Update_Char_Measurement+0x54>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue & 0xFF);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	881a      	ldrh	r2, [r3, #0]
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	3318      	adds	r3, #24
 8008d64:	443b      	add	r3, r7
 8008d66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue >> 8);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	0a1b      	lsrs	r3, r3, #8
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	3318      	adds	r3, #24
 8008d7e:	443b      	add	r3, r7
 8008d80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	3301      	adds	r3, #1
 8008d88:	75fb      	strb	r3, [r7, #23]
 8008d8a:	e00a      	b.n	8008da2 <Update_Char_Measurement+0x6a>
  }
  else
  {
    ahrm_value[hrm_char_length] = (uint8_t)pMeasurement->MeasurementValue;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	881a      	ldrh	r2, [r3, #0]
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	3318      	adds	r3, #24
 8008d96:	443b      	add	r3, r7
 8008d98:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  /**
   *  Energy Expended
   */
  if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	7a5b      	ldrb	r3, [r3, #9]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d017      	beq.n	8008dde <Update_Char_Measurement+0xa6>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended & 0xFF);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	885a      	ldrh	r2, [r3, #2]
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	3318      	adds	r3, #24
 8008db8:	443b      	add	r3, r7
 8008dba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended >> 8);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	885b      	ldrh	r3, [r3, #2]
 8008dc8:	0a1b      	lsrs	r3, r3, #8
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	3318      	adds	r3, #24
 8008dd2:	443b      	add	r3, r7
 8008dd4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  /**
   *  RR Interval Values
   */
  if ((pMeasurement->Flags) &  HRS_HRM_RR_INTERVAL_PRESENT)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7a5b      	ldrb	r3, [r3, #9]
 8008de2:	f003 0310 	and.w	r3, r3, #16
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d048      	beq.n	8008e7c <Update_Char_Measurement+0x144>
  {
    uint8_t index;
    uint8_t rr_interval_number;

    if((pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	7a5b      	ldrb	r3, [r3, #9]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <Update_Char_Measurement+0xda>
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	7a5b      	ldrb	r3, [r3, #9]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <Update_Char_Measurement+0xd2>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-2);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7a1b      	ldrb	r3, [r3, #8]
 8008e06:	757b      	strb	r3, [r7, #21]
 8008e08:	e010      	b.n	8008e2c <Update_Char_Measurement+0xf4>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	7a1b      	ldrb	r3, [r3, #8]
 8008e0e:	757b      	strb	r3, [r7, #21]
 8008e10:	e00c      	b.n	8008e2c <Update_Char_Measurement+0xf4>
#endif
    }
    else
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7a5b      	ldrb	r3, [r3, #9]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <Update_Char_Measurement+0xee>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	7a1b      	ldrb	r3, [r3, #8]
 8008e22:	757b      	strb	r3, [r7, #21]
 8008e24:	e002      	b.n	8008e2c <Update_Char_Measurement+0xf4>
        }
      }
      else
      {
        rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	7a1b      	ldrb	r3, [r3, #8]
 8008e2a:	757b      	strb	r3, [r7, #21]
#else /**< (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0) */
      rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
#endif
    }

    for ( index = 0 ; index < rr_interval_number ; index++ )
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75bb      	strb	r3, [r7, #22]
 8008e30:	e020      	b.n	8008e74 <Update_Char_Measurement+0x13c>
    {
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] & 0xFF);
 8008e32:	7dbb      	ldrb	r3, [r7, #22]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	4413      	add	r3, r2
 8008e3a:	889a      	ldrh	r2, [r3, #4]
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	3318      	adds	r3, #24
 8008e42:	443b      	add	r3, r7
 8008e44:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	75fb      	strb	r3, [r7, #23]
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] >> 8);
 8008e4e:	7dbb      	ldrb	r3, [r7, #22]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	889b      	ldrh	r3, [r3, #4]
 8008e58:	0a1b      	lsrs	r3, r3, #8
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	3318      	adds	r3, #24
 8008e62:	443b      	add	r3, r7
 8008e64:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	75fb      	strb	r3, [r7, #23]
    for ( index = 0 ; index < rr_interval_number ; index++ )
 8008e6e:	7dbb      	ldrb	r3, [r7, #22]
 8008e70:	3301      	adds	r3, #1
 8008e72:	75bb      	strb	r3, [r7, #22]
 8008e74:	7dba      	ldrb	r2, [r7, #22]
 8008e76:	7d7b      	ldrb	r3, [r7, #21]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3da      	bcc.n	8008e32 <Update_Char_Measurement+0xfa>
    }
  }

#endif  /**< (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0) */

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <Update_Char_Measurement+0x16c>)
 8008e7e:	8818      	ldrh	r0, [r3, #0]
 8008e80:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <Update_Char_Measurement+0x16c>)
 8008e82:	8859      	ldrh	r1, [r3, #2]
 8008e84:	7dfa      	ldrb	r2, [r7, #23]
 8008e86:	f107 030c 	add.w	r3, r7, #12
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f7ff f8b9 	bl	8008006 <aci_gatt_update_char_value>
 8008e94:	4603      	mov	r3, r0
 8008e96:	753b      	strb	r3, [r7, #20]
                                            HRS_Context.HeartRatemeasurementCharHdle,
                                            0, /* charValOffset */
                                            hrm_char_length, /* charValueLen */
                                            (uint8_t *) &ahrm_value[0]);

  return return_value;
 8008e98:	7d3b      	ldrb	r3, [r7, #20]
}/* end Update_Char_Measurement() */
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000050 	.word	0x20000050

08008ea8 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 8008eb2:	482e      	ldr	r0, [pc, #184]	; (8008f6c <HRS_Init+0xc4>)
 8008eb4:	f000 fc5c 	bl	8009770 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 8008eb8:	f641 030d 	movw	r3, #6157	; 0x180d
 8008ebc:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8008ebe:	1d39      	adds	r1, r7, #4
 8008ec0:	4b2b      	ldr	r3, [pc, #172]	; (8008f70 <HRS_Init+0xc8>)
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	2308      	movs	r3, #8
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	2001      	movs	r0, #1
 8008eca:	f7fe febe 	bl	8007c4a <aci_gatt_add_service>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 8008ed2:	f642 2337 	movw	r3, #10807	; 0x2a37
 8008ed6:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8008ed8:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <HRS_Init+0xc8>)
 8008eda:	8818      	ldrh	r0, [r3, #0]
 8008edc:	1d3a      	adds	r2, r7, #4
 8008ede:	4b25      	ldr	r3, [pc, #148]	; (8008f74 <HRS_Init+0xcc>)
 8008ee0:	9305      	str	r3, [sp, #20]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	9303      	str	r3, [sp, #12]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9302      	str	r3, [sp, #8]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	2310      	movs	r3, #16
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2307      	movs	r3, #7
 8008ef8:	2101      	movs	r1, #1
 8008efa:	f7fe ff7c 	bl	8007df6 <aci_gatt_add_char>
 8008efe:	4603      	mov	r3, r0
 8008f00:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 8008f02:	f642 2338 	movw	r3, #10808	; 0x2a38
 8008f06:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8008f08:	4b19      	ldr	r3, [pc, #100]	; (8008f70 <HRS_Init+0xc8>)
 8008f0a:	8818      	ldrh	r0, [r3, #0]
 8008f0c:	1d3a      	adds	r2, r7, #4
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	; (8008f78 <HRS_Init+0xd0>)
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	2300      	movs	r3, #0
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	230a      	movs	r3, #10
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9302      	str	r3, [sp, #8]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	2302      	movs	r3, #2
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	2301      	movs	r3, #1
 8008f28:	2101      	movs	r1, #1
 8008f2a:	f7fe ff64 	bl	8007df6 <aci_gatt_add_char>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 8008f32:	f642 2339 	movw	r3, #10809	; 0x2a39
 8008f36:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <HRS_Init+0xc8>)
 8008f3a:	8818      	ldrh	r0, [r3, #0]
 8008f3c:	1d3a      	adds	r2, r7, #4
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <HRS_Init+0xd4>)
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	2300      	movs	r3, #0
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	230a      	movs	r3, #10
 8008f48:	9303      	str	r3, [sp, #12]
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	9302      	str	r3, [sp, #8]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	2308      	movs	r3, #8
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	2301      	movs	r3, #1
 8008f58:	2101      	movs	r1, #1
 8008f5a:	f7fe ff4c 	bl	8007df6 <aci_gatt_add_char>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 8008f62:	bf00      	nop
}
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	08008bed 	.word	0x08008bed
 8008f70:	20000050 	.word	0x20000050
 8008f74:	20000052 	.word	0x20000052
 8008f78:	20000054 	.word	0x20000054
 8008f7c:	20000056 	.word	0x20000056

08008f80 <HRS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HRS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	f642 2237 	movw	r2, #10807	; 0x2a37
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HRS_UpdateChar+0x2e>
 8008f9a:	f642 2238 	movw	r2, #10808	; 0x2a38
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d10b      	bne.n	8008fba <HRS_UpdateChar+0x3a>
  {
#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
    case SENSOR_LOCATION_UUID:
      return_value = Update_Char_BodySensorLocation((HRS_BodySensorLocation_t*)pPayload);
 8008fa2:	6838      	ldr	r0, [r7, #0]
 8008fa4:	f7ff feae 	bl	8008d04 <Update_Char_BodySensorLocation>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
      break;
 8008fac:	e006      	b.n	8008fbc <HRS_UpdateChar+0x3c>
#endif
    case HEART_RATE_MEASURMENT_UUID:
      return_value = Update_Char_Measurement((HRS_MeasVal_t*)pPayload);
 8008fae:	6838      	ldr	r0, [r7, #0]
 8008fb0:	f7ff fec2 	bl	8008d38 <Update_Char_Measurement>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb8:	e000      	b.n	8008fbc <HRS_UpdateChar+0x3c>

    default:
      break;
 8008fba:	bf00      	nop
  }

  return return_value;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}/* end HRS_UpdateChar() */
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f001 f95a 	bl	800a290 <memcpy>
 8008fdc:	4603      	mov	r3, r0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f001 f958 	bl	800a2ac <memset>
 8008ffc:	4603      	mov	r3, r0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009012:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <OTP_Read+0x48>)
 8009014:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009016:	e002      	b.n	800901e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3b08      	subs	r3, #8
 800901c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	79fa      	ldrb	r2, [r7, #7]
 8009026:	429a      	cmp	r2, r3
 8009028:	d003      	beq.n	8009032 <OTP_Read+0x2a>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4a09      	ldr	r2, [pc, #36]	; (8009054 <OTP_Read+0x4c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d1f2      	bne.n	8009018 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3307      	adds	r3, #7
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	79fa      	ldrb	r2, [r7, #7]
 800903a:	429a      	cmp	r2, r3
 800903c:	d001      	beq.n	8009042 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	1fff73f8 	.word	0x1fff73f8
 8009054:	1fff7000 	.word	0x1fff7000

08009058 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009060:	f107 030c 	add.w	r3, r7, #12
 8009064:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	212e      	movs	r1, #46	; 0x2e
 8009070:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009074:	f000 f94c 	bl	8009310 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	330b      	adds	r3, #11
 800907c:	78db      	ldrb	r3, [r3, #3]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b088      	sub	sp, #32
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800908e:	f107 030c 	add.w	r3, r7, #12
 8009092:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	210f      	movs	r1, #15
 800909e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80090a2:	f000 f935 	bl	8009310 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	330b      	adds	r3, #11
 80090aa:	78db      	ldrb	r3, [r3, #3]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80090bc:	f107 030c 	add.w	r3, r7, #12
 80090c0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	2110      	movs	r1, #16
 80090c8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80090cc:	f000 f920 	bl	8009310 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	330b      	adds	r3, #11
 80090d4:	78db      	ldrb	r3, [r3, #3]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80090e0:	b480      	push	{r7}
 80090e2:	b08b      	sub	sp, #44	; 0x2c
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009108:	4b4a      	ldr	r3, [pc, #296]	; (8009234 <SHCI_GetWirelessFwInfo+0x154>)
 800910a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009110:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800911a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a44      	ldr	r2, [pc, #272]	; (8009238 <SHCI_GetWirelessFwInfo+0x158>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d10f      	bne.n	800914c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	e01a      	b.n	8009182 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009154:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009158:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	0e1b      	lsrs	r3, r3, #24
 8009186:	b2da      	uxtb	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	0a1b      	lsrs	r3, r3, #8
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	091b      	lsrs	r3, r3, #4
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	0e1b      	lsrs	r3, r3, #24
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	0c1b      	lsrs	r3, r3, #16
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	0e1b      	lsrs	r3, r3, #24
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	0c1b      	lsrs	r3, r3, #16
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	b2da      	uxtb	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	0c1b      	lsrs	r3, r3, #16
 8009218:	b2da      	uxtb	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	b2da      	uxtb	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	372c      	adds	r7, #44	; 0x2c
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	58004000 	.word	0x58004000
 8009238:	a94656b9 	.word	0xa94656b9

0800923c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	4a08      	ldr	r2, [pc, #32]	; (800926c <shci_init+0x30>)
 800924c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800924e:	4a08      	ldr	r2, [pc, #32]	; (8009270 <shci_init+0x34>)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009254:	4806      	ldr	r0, [pc, #24]	; (8009270 <shci_init+0x34>)
 8009256:	f000 f911 	bl	800947c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f894 	bl	800938c <TlInit>

  return;
 8009264:	bf00      	nop
}
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	200005b8 	.word	0x200005b8
 8009270:	20000598 	.word	0x20000598

08009274 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800927a:	4822      	ldr	r0, [pc, #136]	; (8009304 <shci_user_evt_proc+0x90>)
 800927c:	f000 f922 	bl	80094c4 <LST_is_empty>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d12b      	bne.n	80092de <shci_user_evt_proc+0x6a>
 8009286:	4b20      	ldr	r3, [pc, #128]	; (8009308 <shci_user_evt_proc+0x94>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d027      	beq.n	80092de <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800928e:	f107 030c 	add.w	r3, r7, #12
 8009292:	4619      	mov	r1, r3
 8009294:	481b      	ldr	r0, [pc, #108]	; (8009304 <shci_user_evt_proc+0x90>)
 8009296:	f000 f9a4 	bl	80095e2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800929a:	4b1c      	ldr	r3, [pc, #112]	; (800930c <shci_user_evt_proc+0x98>)
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00c      	beq.n	80092bc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80092a6:	2301      	movs	r3, #1
 80092a8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80092aa:	4b18      	ldr	r3, [pc, #96]	; (800930c <shci_user_evt_proc+0x98>)
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	1d3a      	adds	r2, r7, #4
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80092b4:	793a      	ldrb	r2, [r7, #4]
 80092b6:	4b14      	ldr	r3, [pc, #80]	; (8009308 <shci_user_evt_proc+0x94>)
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e002      	b.n	80092c2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80092bc:	4b12      	ldr	r3, [pc, #72]	; (8009308 <shci_user_evt_proc+0x94>)
 80092be:	2201      	movs	r2, #1
 80092c0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80092c2:	4b11      	ldr	r3, [pc, #68]	; (8009308 <shci_user_evt_proc+0x94>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fc41 	bl	8009b54 <TL_MM_EvtDone>
 80092d2:	e004      	b.n	80092de <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4619      	mov	r1, r3
 80092d8:	480a      	ldr	r0, [pc, #40]	; (8009304 <shci_user_evt_proc+0x90>)
 80092da:	f000 f915 	bl	8009508 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80092de:	4809      	ldr	r0, [pc, #36]	; (8009304 <shci_user_evt_proc+0x90>)
 80092e0:	f000 f8f0 	bl	80094c4 <LST_is_empty>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <shci_user_evt_proc+0x86>
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <shci_user_evt_proc+0x94>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80092f2:	4804      	ldr	r0, [pc, #16]	; (8009304 <shci_user_evt_proc+0x90>)
 80092f4:	f7f7 facc 	bl	8000890 <shci_notify_asynch_evt>
  }


  return;
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
}
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	2000007c 	.word	0x2000007c
 8009308:	2000008c 	.word	0x2000008c
 800930c:	20000598 	.word	0x20000598

08009310 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60ba      	str	r2, [r7, #8]
 8009318:	607b      	str	r3, [r7, #4]
 800931a:	4603      	mov	r3, r0
 800931c:	81fb      	strh	r3, [r7, #14]
 800931e:	460b      	mov	r3, r1
 8009320:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009322:	2000      	movs	r0, #0
 8009324:	f000 f864 	bl	80093f0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009328:	4b16      	ldr	r3, [pc, #88]	; (8009384 <shci_send+0x74>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	89fa      	ldrh	r2, [r7, #14]
 800932e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009332:	4b14      	ldr	r3, [pc, #80]	; (8009384 <shci_send+0x74>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	7b7a      	ldrb	r2, [r7, #13]
 8009338:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800933a:	4b12      	ldr	r3, [pc, #72]	; (8009384 <shci_send+0x74>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	330c      	adds	r3, #12
 8009340:	7b7a      	ldrb	r2, [r7, #13]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	4618      	mov	r0, r3
 8009346:	f000 ffa3 	bl	800a290 <memcpy>

  shciContext.io.Send(0,0);
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <shci_send+0x78>)
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2100      	movs	r1, #0
 8009350:	2000      	movs	r0, #0
 8009352:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009354:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009358:	f7f7 fab1 	bl	80008be <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f103 0008 	add.w	r0, r3, #8
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <shci_send+0x74>)
 8009364:	6819      	ldr	r1, [r3, #0]
 8009366:	4b07      	ldr	r3, [pc, #28]	; (8009384 <shci_send+0x74>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	789b      	ldrb	r3, [r3, #2]
 800936c:	3303      	adds	r3, #3
 800936e:	461a      	mov	r2, r3
 8009370:	f000 ff8e 	bl	800a290 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009374:	2001      	movs	r0, #1
 8009376:	f000 f83b 	bl	80093f0 <Cmd_SetStatus>

  return;
 800937a:	bf00      	nop
}
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000088 	.word	0x20000088
 8009388:	20000598 	.word	0x20000598

0800938c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009394:	4a10      	ldr	r2, [pc, #64]	; (80093d8 <TlInit+0x4c>)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800939a:	4810      	ldr	r0, [pc, #64]	; (80093dc <TlInit+0x50>)
 800939c:	f000 f882 	bl	80094a4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80093a0:	2001      	movs	r0, #1
 80093a2:	f000 f825 	bl	80093f0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <TlInit+0x54>)
 80093a8:	2201      	movs	r2, #1
 80093aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80093ac:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <TlInit+0x58>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <TlInit+0x5c>)
 80093ba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80093bc:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <TlInit+0x60>)
 80093be:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <TlInit+0x58>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f107 020c 	add.w	r2, r7, #12
 80093c8:	4610      	mov	r0, r2
 80093ca:	4798      	blx	r3
  }

  return;
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
}
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000088 	.word	0x20000088
 80093dc:	2000007c 	.word	0x2000007c
 80093e0:	2000008c 	.word	0x2000008c
 80093e4:	20000598 	.word	0x20000598
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009459 	.word	0x08009459

080093f0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009400:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <Cmd_SetStatus+0x48>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009408:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <Cmd_SetStatus+0x48>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2000      	movs	r0, #0
 800940e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <Cmd_SetStatus+0x4c>)
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009416:	e00b      	b.n	8009430 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009418:	4b08      	ldr	r3, [pc, #32]	; (800943c <Cmd_SetStatus+0x4c>)
 800941a:	2201      	movs	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800941e:	4b06      	ldr	r3, [pc, #24]	; (8009438 <Cmd_SetStatus+0x48>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009426:	4b04      	ldr	r3, [pc, #16]	; (8009438 <Cmd_SetStatus+0x48>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2001      	movs	r0, #1
 800942c:	4798      	blx	r3
  return;
 800942e:	bf00      	nop
 8009430:	bf00      	nop
}
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	200005b8 	.word	0x200005b8
 800943c:	20000084 	.word	0x20000084

08009440 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009448:	2000      	movs	r0, #0
 800944a:	f7f7 fa2d 	bl	80008a8 <shci_cmd_resp_release>

  return;
 800944e:	bf00      	nop
}
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4805      	ldr	r0, [pc, #20]	; (8009478 <TlUserEvtReceived+0x20>)
 8009464:	f000 f876 	bl	8009554 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009468:	4803      	ldr	r0, [pc, #12]	; (8009478 <TlUserEvtReceived+0x20>)
 800946a:	f7f7 fa11 	bl	8000890 <shci_notify_asynch_evt>

  return;
 800946e:	bf00      	nop
}
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2000007c 	.word	0x2000007c

0800947c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a05      	ldr	r2, [pc, #20]	; (800949c <shci_register_io_bus+0x20>)
 8009488:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a04      	ldr	r2, [pc, #16]	; (80094a0 <shci_register_io_bus+0x24>)
 800948e:	611a      	str	r2, [r3, #16]

  return;
 8009490:	bf00      	nop
}
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	080099e1 	.word	0x080099e1
 80094a0:	08009a35 	.word	0x08009a35

080094a4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	605a      	str	r2, [r3, #4]
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094cc:	f3ef 8310 	mrs	r3, PRIMASK
 80094d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80094d6:	b672      	cpsid	i
}
 80094d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d102      	bne.n	80094ea <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	75fb      	strb	r3, [r7, #23]
 80094e8:	e001      	b.n	80094ee <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f383 8810 	msr	PRIMASK, r3
}
 80094f8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009512:	f3ef 8310 	mrs	r3, PRIMASK
 8009516:	60fb      	str	r3, [r7, #12]
  return(result);
 8009518:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800951a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800951c:	b672      	cpsid	i
}
 800951e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f383 8810 	msr	PRIMASK, r3
}
 8009546:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009548:	bf00      	nop
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800955e:	f3ef 8310 	mrs	r3, PRIMASK
 8009562:	60fb      	str	r3, [r7, #12]
  return(result);
 8009564:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009568:	b672      	cpsid	i
}
 800956a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f383 8810 	msr	PRIMASK, r3
}
 8009592:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009594:	bf00      	nop
 8009596:	371c      	adds	r7, #28
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a8:	f3ef 8310 	mrs	r3, PRIMASK
 80095ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80095ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095b2:	b672      	cpsid	i
}
 80095b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6852      	ldr	r2, [r2, #4]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f383 8810 	msr	PRIMASK, r3
}
 80095d4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80095d6:	bf00      	nop
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ec:	f3ef 8310 	mrs	r3, PRIMASK
 80095f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80095f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095f6:	b672      	cpsid	i
}
 80095f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff ffca 	bl	80095a0 <LST_remove_node>
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f383 8810 	msr	PRIMASK, r3
}
 8009616:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009618:	bf00      	nop
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
  return;
 8009624:	bf00      	nop
}
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800962e:	b480      	push	{r7}
 8009630:	af00      	add	r7, sp, #0
  return;
 8009632:	bf00      	nop
}
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  return;
 8009640:	bf00      	nop
}
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800964a:	b480      	push	{r7}
 800964c:	af00      	add	r7, sp, #0
  return;
 800964e:	bf00      	nop
}
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
  return;
 800965c:	bf00      	nop
}
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 8009666:	b480      	push	{r7}
 8009668:	af00      	add	r7, sp, #0
  return;
 800966a:	bf00      	nop
}
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  return;
 8009678:	bf00      	nop
}
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009682:	b480      	push	{r7}
 8009684:	af00      	add	r7, sp, #0
  return;
 8009686:	bf00      	nop
}
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  return;
 8009694:	bf00      	nop
}
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800969e:	b480      	push	{r7}
 80096a0:	af00      	add	r7, sp, #0
  return;
 80096a2:	bf00      	nop
}
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
  return;
 80096b0:	bf00      	nop
}
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80096ba:	b480      	push	{r7}
 80096bc:	af00      	add	r7, sp, #0
  return;
 80096be:	bf00      	nop
}
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  return;
 80096cc:	bf00      	nop
}
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80096d6:	b480      	push	{r7}
 80096d8:	af00      	add	r7, sp, #0
  return;
 80096da:	bf00      	nop
}
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  return;
 80096e8:	bf00      	nop
}
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80096f2:	b480      	push	{r7}
 80096f4:	af00      	add	r7, sp, #0
  return;
 80096f6:	bf00      	nop
}
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009704:	4b04      	ldr	r3, [pc, #16]	; (8009718 <SVCCTL_Init+0x18>)
 8009706:	2200      	movs	r2, #0
 8009708:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800970a:	4b04      	ldr	r3, [pc, #16]	; (800971c <SVCCTL_Init+0x1c>)
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009710:	f000 f806 	bl	8009720 <SVCCTL_SvcInit>

  return;
 8009714:	bf00      	nop
}
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000058 	.word	0x20000058
 800971c:	20000078 	.word	0x20000078

08009720 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  BAS_Init();
 8009724:	f7ff ff7c 	bl	8009620 <BAS_Init>

  BLS_Init();
 8009728:	f7ff ff81 	bl	800962e <BLS_Init>

  CRS_STM_Init();
 800972c:	f7ff ff86 	bl	800963c <CRS_STM_Init>

  DIS_Init();
 8009730:	f7ff f86a 	bl	8008808 <DIS_Init>

  EDS_STM_Init();
 8009734:	f7ff ff89 	bl	800964a <EDS_STM_Init>

  HIDS_Init();
 8009738:	f7ff ff8e 	bl	8009658 <HIDS_Init>

  HRS_Init();
 800973c:	f7ff fbb4 	bl	8008ea8 <HRS_Init>

  HTS_Init();
 8009740:	f7ff ff91 	bl	8009666 <HTS_Init>

  IAS_Init();
 8009744:	f7ff ff96 	bl	8009674 <IAS_Init>

  LLS_Init();
 8009748:	f7ff ff9b 	bl	8009682 <LLS_Init>

  TPS_Init();
 800974c:	f7ff ffa0 	bl	8009690 <TPS_Init>

  MOTENV_STM_Init();
 8009750:	f7ff ffa5 	bl	800969e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009754:	f7ff ffaa 	bl	80096ac <P2PS_STM_Init>

  ZDD_STM_Init();
 8009758:	f7ff ffaf 	bl	80096ba <ZDD_STM_Init>

  OTAS_STM_Init();
 800975c:	f7ff ffb4 	bl	80096c8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009760:	f7ff ffc0 	bl	80096e4 <BVOPUS_STM_Init>

  MESH_Init();
 8009764:	f7ff ffb7 	bl	80096d6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009768:	f7ff ffc3 	bl	80096f2 <SVCCTL_InitCustomSvc>
  
  return;
 800976c:	bf00      	nop
}
 800976e:	bd80      	pop	{r7, pc}

08009770 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009778:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800977a:	7f1b      	ldrb	r3, [r3, #28]
 800977c:	4619      	mov	r1, r3
 800977e:	4a08      	ldr	r2, [pc, #32]	; (80097a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009786:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8009788:	7f1b      	ldrb	r3, [r3, #28]
 800978a:	3301      	adds	r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8009790:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009792:	bf00      	nop
}
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000058 	.word	0x20000058

080097a4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	2bff      	cmp	r3, #255	; 0xff
 80097bc:	d125      	bne.n	800980a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	3302      	adds	r3, #2
 80097c2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097d2:	d118      	bne.n	8009806 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80097d4:	2300      	movs	r3, #0
 80097d6:	757b      	strb	r3, [r7, #21]
 80097d8:	e00d      	b.n	80097f6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80097da:	7d7b      	ldrb	r3, [r7, #21]
 80097dc:	4a1a      	ldr	r2, [pc, #104]	; (8009848 <SVCCTL_UserEvtRx+0xa4>)
 80097de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d108      	bne.n	8009802 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80097f0:	7d7b      	ldrb	r3, [r7, #21]
 80097f2:	3301      	adds	r3, #1
 80097f4:	757b      	strb	r3, [r7, #21]
 80097f6:	4b14      	ldr	r3, [pc, #80]	; (8009848 <SVCCTL_UserEvtRx+0xa4>)
 80097f8:	7f1b      	ldrb	r3, [r3, #28]
 80097fa:	7d7a      	ldrb	r2, [r7, #21]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d3ec      	bcc.n	80097da <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009800:	e002      	b.n	8009808 <SVCCTL_UserEvtRx+0x64>
              break;
 8009802:	bf00      	nop
          break;
 8009804:	e000      	b.n	8009808 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009806:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009808:	e000      	b.n	800980c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800980a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d00f      	beq.n	8009832 <SVCCTL_UserEvtRx+0x8e>
 8009812:	2b02      	cmp	r3, #2
 8009814:	dc10      	bgt.n	8009838 <SVCCTL_UserEvtRx+0x94>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <SVCCTL_UserEvtRx+0x7c>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d006      	beq.n	800982c <SVCCTL_UserEvtRx+0x88>
 800981e:	e00b      	b.n	8009838 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7f8 fd03 	bl	800222c <SVCCTL_App_Notification>
 8009826:	4603      	mov	r3, r0
 8009828:	75bb      	strb	r3, [r7, #22]
      break;
 800982a:	e008      	b.n	800983e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800982c:	2301      	movs	r3, #1
 800982e:	75bb      	strb	r3, [r7, #22]
      break;
 8009830:	e005      	b.n	800983e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009832:	2300      	movs	r3, #0
 8009834:	75bb      	strb	r3, [r7, #22]
      break;
 8009836:	e002      	b.n	800983e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009838:	2301      	movs	r3, #1
 800983a:	75bb      	strb	r3, [r7, #22]
      break;
 800983c:	bf00      	nop
  }

  return (return_status);
 800983e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000058 	.word	0x20000058

0800984c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009850:	f7f9 fa84 	bl	8002d5c <HW_IPCC_Enable>

  return;
 8009854:	bf00      	nop
}
 8009856:	bd80      	pop	{r7, pc}

08009858 <TL_Init>:


void TL_Init( void )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <TL_Init+0x48>)
 800985e:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <TL_Init+0x4c>)
 8009860:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009862:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <TL_Init+0x48>)
 8009864:	4a10      	ldr	r2, [pc, #64]	; (80098a8 <TL_Init+0x50>)
 8009866:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009868:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <TL_Init+0x48>)
 800986a:	4a10      	ldr	r2, [pc, #64]	; (80098ac <TL_Init+0x54>)
 800986c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <TL_Init+0x48>)
 8009870:	4a0f      	ldr	r2, [pc, #60]	; (80098b0 <TL_Init+0x58>)
 8009872:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <TL_Init+0x48>)
 8009876:	4a0f      	ldr	r2, [pc, #60]	; (80098b4 <TL_Init+0x5c>)
 8009878:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <TL_Init+0x48>)
 800987c:	4a0e      	ldr	r2, [pc, #56]	; (80098b8 <TL_Init+0x60>)
 800987e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <TL_Init+0x48>)
 8009882:	4a0e      	ldr	r2, [pc, #56]	; (80098bc <TL_Init+0x64>)
 8009884:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009886:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <TL_Init+0x48>)
 8009888:	4a0d      	ldr	r2, [pc, #52]	; (80098c0 <TL_Init+0x68>)
 800988a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <TL_Init+0x48>)
 800988e:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <TL_Init+0x6c>)
 8009890:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009892:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <TL_Init+0x48>)
 8009894:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <TL_Init+0x70>)
 8009896:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009898:	f7f9 fa74 	bl	8002d84 <HW_IPCC_Init>

  return;
 800989c:	bf00      	nop
}
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20030000 	.word	0x20030000
 80098a4:	20030134 	.word	0x20030134
 80098a8:	20030154 	.word	0x20030154
 80098ac:	20030164 	.word	0x20030164
 80098b0:	20030174 	.word	0x20030174
 80098b4:	2003017c 	.word	0x2003017c
 80098b8:	20030184 	.word	0x20030184
 80098bc:	2003018c 	.word	0x2003018c
 80098c0:	200301a8 	.word	0x200301a8
 80098c4:	200301ac 	.word	0x200301ac
 80098c8:	200301b8 	.word	0x200301b8

080098cc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80098d8:	4811      	ldr	r0, [pc, #68]	; (8009920 <TL_BLE_Init+0x54>)
 80098da:	f7ff fde3 	bl	80094a4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <TL_BLE_Init+0x58>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4a0c      	ldr	r2, [pc, #48]	; (8009928 <TL_BLE_Init+0x5c>)
 80098f8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	4a08      	ldr	r2, [pc, #32]	; (8009920 <TL_BLE_Init+0x54>)
 80098fe:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009900:	f7f9 fa56 	bl	8002db0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a08      	ldr	r2, [pc, #32]	; (800992c <TL_BLE_Init+0x60>)
 800990a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	4a07      	ldr	r2, [pc, #28]	; (8009930 <TL_BLE_Init+0x64>)
 8009912:	6013      	str	r3, [r2, #0]

  return 0;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200301d4 	.word	0x200301d4
 8009924:	20030000 	.word	0x20030000
 8009928:	20030a58 	.word	0x20030a58
 800992c:	200005c4 	.word	0x200005c4
 8009930:	200005c8 	.word	0x200005c8

08009934 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009940:	4b09      	ldr	r3, [pc, #36]	; (8009968 <TL_BLE_SendCmd+0x34>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2201      	movs	r2, #1
 8009948:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <TL_BLE_SendCmd+0x34>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4619      	mov	r1, r3
 8009952:	2001      	movs	r0, #1
 8009954:	f000 f96c 	bl	8009c30 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009958:	f7f9 fa34 	bl	8002dc4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20030000 	.word	0x20030000

0800996c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009972:	e01c      	b.n	80099ae <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009974:	1d3b      	adds	r3, r7, #4
 8009976:	4619      	mov	r1, r3
 8009978:	4812      	ldr	r0, [pc, #72]	; (80099c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800997a:	f7ff fe32 	bl	80095e2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7a5b      	ldrb	r3, [r3, #9]
 8009982:	2b0f      	cmp	r3, #15
 8009984:	d003      	beq.n	800998e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7a5b      	ldrb	r3, [r3, #9]
 800998a:	2b0e      	cmp	r3, #14
 800998c:	d105      	bne.n	800999a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4619      	mov	r1, r3
 8009992:	2002      	movs	r0, #2
 8009994:	f000 f94c 	bl	8009c30 <OutputDbgTrace>
 8009998:	e004      	b.n	80099a4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4619      	mov	r1, r3
 800999e:	2003      	movs	r0, #3
 80099a0:	f000 f946 	bl	8009c30 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80099a4:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	4610      	mov	r0, r2
 80099ac:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80099ae:	4805      	ldr	r0, [pc, #20]	; (80099c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80099b0:	f7ff fd88 	bl	80094c4 <LST_is_empty>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0dc      	beq.n	8009974 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80099ba:	bf00      	nop
}
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200301d4 	.word	0x200301d4
 80099c8:	200005c4 	.word	0x200005c4

080099cc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80099d0:	4b02      	ldr	r3, [pc, #8]	; (80099dc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4798      	blx	r3

  return;
 80099d6:	bf00      	nop
}
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	200005c8 	.word	0x200005c8

080099e0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80099ec:	480d      	ldr	r0, [pc, #52]	; (8009a24 <TL_SYS_Init+0x44>)
 80099ee:	f7ff fd59 	bl	80094a4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <TL_SYS_Init+0x48>)
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4a08      	ldr	r2, [pc, #32]	; (8009a24 <TL_SYS_Init+0x44>)
 8009a04:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009a06:	f7f9 f9ff 	bl	8002e08 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a07      	ldr	r2, [pc, #28]	; (8009a2c <TL_SYS_Init+0x4c>)
 8009a10:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	4a06      	ldr	r2, [pc, #24]	; (8009a30 <TL_SYS_Init+0x50>)
 8009a18:	6013      	str	r3, [r2, #0]

  return 0;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	200301dc 	.word	0x200301dc
 8009a28:	20030000 	.word	0x20030000
 8009a2c:	200005cc 	.word	0x200005cc
 8009a30:	200005d0 	.word	0x200005d0

08009a34 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <TL_SYS_SendCmd+0x34>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2210      	movs	r2, #16
 8009a48:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <TL_SYS_SendCmd+0x34>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4619      	mov	r1, r3
 8009a52:	2004      	movs	r0, #4
 8009a54:	f000 f8ec 	bl	8009c30 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009a58:	f7f9 f9e0 	bl	8002e1c <HW_IPCC_SYS_SendCmd>

  return 0;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20030000 	.word	0x20030000

08009a6c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	2005      	movs	r0, #5
 8009a7a:	f000 f8d9 	bl	8009c30 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009a7e:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a03      	ldr	r2, [pc, #12]	; (8009a90 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009a84:	68d2      	ldr	r2, [r2, #12]
 8009a86:	6812      	ldr	r2, [r2, #0]
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3

  return;
 8009a8c:	bf00      	nop
}
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20030000 	.word	0x20030000
 8009a94:	200005cc 	.word	0x200005cc

08009a98 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009a9e:	e00e      	b.n	8009abe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009aa0:	1d3b      	adds	r3, r7, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	480b      	ldr	r0, [pc, #44]	; (8009ad4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009aa6:	f7ff fd9c 	bl	80095e2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4619      	mov	r1, r3
 8009aae:	2006      	movs	r0, #6
 8009ab0:	f000 f8be 	bl	8009c30 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009ab4:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <HW_IPCC_SYS_EvtNot+0x40>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	4610      	mov	r0, r2
 8009abc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009ac0:	f7ff fd00 	bl	80094c4 <LST_is_empty>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0ea      	beq.n	8009aa0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009aca:	bf00      	nop
}
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200301dc 	.word	0x200301dc
 8009ad8:	200005d0 	.word	0x200005d0

08009adc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009ae4:	4817      	ldr	r0, [pc, #92]	; (8009b44 <TL_MM_Init+0x68>)
 8009ae6:	f7ff fcdd 	bl	80094a4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009aea:	4817      	ldr	r0, [pc, #92]	; (8009b48 <TL_MM_Init+0x6c>)
 8009aec:	f7ff fcda 	bl	80094a4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009af0:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <TL_MM_Init+0x70>)
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	4a16      	ldr	r2, [pc, #88]	; (8009b50 <TL_MM_Init+0x74>)
 8009af6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009af8:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <TL_MM_Init+0x74>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6892      	ldr	r2, [r2, #8]
 8009b00:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009b02:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <TL_MM_Init+0x74>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	68d2      	ldr	r2, [r2, #12]
 8009b0a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <TL_MM_Init+0x74>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <TL_MM_Init+0x68>)
 8009b12:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009b14:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <TL_MM_Init+0x74>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	6812      	ldr	r2, [r2, #0]
 8009b1c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <TL_MM_Init+0x74>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6852      	ldr	r2, [r2, #4]
 8009b26:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <TL_MM_Init+0x74>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	6912      	ldr	r2, [r2, #16]
 8009b30:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009b32:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <TL_MM_Init+0x74>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	6952      	ldr	r2, [r2, #20]
 8009b3a:	619a      	str	r2, [r3, #24]

  return;
 8009b3c:	bf00      	nop
}
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200301c4 	.word	0x200301c4
 8009b48:	200005bc 	.word	0x200005bc
 8009b4c:	20030000 	.word	0x20030000
 8009b50:	200005d4 	.word	0x200005d4

08009b54 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	4807      	ldr	r0, [pc, #28]	; (8009b7c <TL_MM_EvtDone+0x28>)
 8009b60:	f7ff fcf8 	bl	8009554 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	2000      	movs	r0, #0
 8009b68:	f000 f862 	bl	8009c30 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009b6c:	4804      	ldr	r0, [pc, #16]	; (8009b80 <TL_MM_EvtDone+0x2c>)
 8009b6e:	f7f9 f97b 	bl	8002e68 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009b72:	bf00      	nop
}
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	200005bc 	.word	0x200005bc
 8009b80:	08009b85 	.word	0x08009b85

08009b84 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009b8a:	e00c      	b.n	8009ba6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009b8c:	1d3b      	adds	r3, r7, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	480a      	ldr	r0, [pc, #40]	; (8009bbc <SendFreeBuf+0x38>)
 8009b92:	f7ff fd26 	bl	80095e2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009b96:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <SendFreeBuf+0x3c>)
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fcd7 	bl	8009554 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009ba6:	4805      	ldr	r0, [pc, #20]	; (8009bbc <SendFreeBuf+0x38>)
 8009ba8:	f7ff fc8c 	bl	80094c4 <LST_is_empty>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0ec      	beq.n	8009b8c <SendFreeBuf+0x8>
  }

  return;
 8009bb2:	bf00      	nop
}
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200005bc 	.word	0x200005bc
 8009bc0:	20030000 	.word	0x20030000

08009bc4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009bc8:	4805      	ldr	r0, [pc, #20]	; (8009be0 <TL_TRACES_Init+0x1c>)
 8009bca:	f7ff fc6b 	bl	80094a4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <TL_TRACES_Init+0x20>)
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	4a03      	ldr	r2, [pc, #12]	; (8009be0 <TL_TRACES_Init+0x1c>)
 8009bd4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009bd6:	f7f9 f97d 	bl	8002ed4 <HW_IPCC_TRACES_Init>

  return;
 8009bda:	bf00      	nop
}
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	200301cc 	.word	0x200301cc
 8009be4:	20030000 	.word	0x20030000

08009be8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009bee:	e008      	b.n	8009c02 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4808      	ldr	r0, [pc, #32]	; (8009c18 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009bf6:	f7ff fcf4 	bl	80095e2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f80d 	bl	8009c1c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009c02:	4805      	ldr	r0, [pc, #20]	; (8009c18 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009c04:	f7ff fc5e 	bl	80094c4 <LST_is_empty>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0f0      	beq.n	8009bf0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009c0e:	bf00      	nop
}
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200301cc 	.word	0x200301cc

08009c1c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	2b06      	cmp	r3, #6
 8009c40:	d845      	bhi.n	8009cce <OutputDbgTrace+0x9e>
 8009c42:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <OutputDbgTrace+0x18>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c65 	.word	0x08009c65
 8009c4c:	08009c89 	.word	0x08009c89
 8009c50:	08009c8f 	.word	0x08009c8f
 8009c54:	08009ca3 	.word	0x08009ca3
 8009c58:	08009caf 	.word	0x08009caf
 8009c5c:	08009cb5 	.word	0x08009cb5
 8009c60:	08009cc3 	.word	0x08009cc3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	7a5b      	ldrb	r3, [r3, #9]
 8009c6c:	2bff      	cmp	r3, #255	; 0xff
 8009c6e:	d005      	beq.n	8009c7c <OutputDbgTrace+0x4c>
 8009c70:	2bff      	cmp	r3, #255	; 0xff
 8009c72:	dc05      	bgt.n	8009c80 <OutputDbgTrace+0x50>
 8009c74:	2b0e      	cmp	r3, #14
 8009c76:	d005      	beq.n	8009c84 <OutputDbgTrace+0x54>
 8009c78:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009c7a:	e001      	b.n	8009c80 <OutputDbgTrace+0x50>
          break;
 8009c7c:	bf00      	nop
 8009c7e:	e027      	b.n	8009cd0 <OutputDbgTrace+0xa0>
          break;
 8009c80:	bf00      	nop
 8009c82:	e025      	b.n	8009cd0 <OutputDbgTrace+0xa0>
          break;
 8009c84:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009c86:	e023      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009c8c:	e020      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	7a5b      	ldrb	r3, [r3, #9]
 8009c96:	2b0e      	cmp	r3, #14
 8009c98:	d001      	beq.n	8009c9e <OutputDbgTrace+0x6e>
 8009c9a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009c9c:	e000      	b.n	8009ca0 <OutputDbgTrace+0x70>
          break;
 8009c9e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ca0:	e016      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	7a5b      	ldrb	r3, [r3, #9]
 8009caa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009cac:	e010      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009cb2:	e00d      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	7a5b      	ldrb	r3, [r3, #9]
 8009cbc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009cbe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009cc0:	e006      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	7a5b      	ldrb	r3, [r3, #9]
 8009cca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ccc:	e000      	b.n	8009cd0 <OutputDbgTrace+0xa0>

    default:
      break;
 8009cce:	bf00      	nop
  }

  return;
 8009cd0:	bf00      	nop
}
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <UTIL_LPM_Init+0x1c>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <UTIL_LPM_Init+0x20>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009cec:	bf00      	nop
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	200005d8 	.word	0x200005d8
 8009cfc:	200005dc 	.word	0x200005dc

08009d00 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d10:	613b      	str	r3, [r7, #16]
  return(result);
 8009d12:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d16:	b672      	cpsid	i
}
 8009d18:	bf00      	nop
  
  switch(state)
 8009d1a:	78fb      	ldrb	r3, [r7, #3]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d008      	beq.n	8009d32 <UTIL_LPM_SetOffMode+0x32>
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d10e      	bne.n	8009d42 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009d24:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <UTIL_LPM_SetOffMode+0x5c>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	4a0b      	ldr	r2, [pc, #44]	; (8009d5c <UTIL_LPM_SetOffMode+0x5c>)
 8009d2e:	6013      	str	r3, [r2, #0]
      break;
 8009d30:	e008      	b.n	8009d44 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	43da      	mvns	r2, r3
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <UTIL_LPM_SetOffMode+0x5c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	4a07      	ldr	r2, [pc, #28]	; (8009d5c <UTIL_LPM_SetOffMode+0x5c>)
 8009d3e:	6013      	str	r3, [r2, #0]
      break;
 8009d40:	e000      	b.n	8009d44 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009d42:	bf00      	nop
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f383 8810 	msr	PRIMASK, r3
}
 8009d4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	200005dc 	.word	0x200005dc

08009d60 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d66:	f3ef 8310 	mrs	r3, PRIMASK
 8009d6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009d6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d70:	b672      	cpsid	i
}
 8009d72:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009d74:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <UTIL_LPM_EnterLowPower+0x60>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d006      	beq.n	8009d8a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009d7c:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <UTIL_LPM_EnterLowPower+0x64>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009d82:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <UTIL_LPM_EnterLowPower+0x64>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	4798      	blx	r3
 8009d88:	e010      	b.n	8009dac <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <UTIL_LPM_EnterLowPower+0x68>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d006      	beq.n	8009da0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009d92:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <UTIL_LPM_EnterLowPower+0x64>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <UTIL_LPM_EnterLowPower+0x64>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	4798      	blx	r3
 8009d9e:	e005      	b.n	8009dac <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009da0:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <UTIL_LPM_EnterLowPower+0x64>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <UTIL_LPM_EnterLowPower+0x64>)
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	4798      	blx	r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f383 8810 	msr	PRIMASK, r3
}
 8009db6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200005d8 	.word	0x200005d8
 8009dc4:	0800a4a0 	.word	0x0800a4a0
 8009dc8:	200005dc 	.word	0x200005dc

08009dcc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b090      	sub	sp, #64	; 0x40
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009dd4:	4b73      	ldr	r3, [pc, #460]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009dda:	4b72      	ldr	r3, [pc, #456]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4013      	ands	r3, r2
 8009de2:	4a70      	ldr	r2, [pc, #448]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009de4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009de6:	4b70      	ldr	r3, [pc, #448]	; (8009fa8 <UTIL_SEQ_Run+0x1dc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009dec:	4b6f      	ldr	r3, [pc, #444]	; (8009fac <UTIL_SEQ_Run+0x1e0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009df2:	4b6f      	ldr	r3, [pc, #444]	; (8009fb0 <UTIL_SEQ_Run+0x1e4>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009df8:	4b6e      	ldr	r3, [pc, #440]	; (8009fb4 <UTIL_SEQ_Run+0x1e8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009dfe:	e08d      	b.n	8009f1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009e04:	e002      	b.n	8009e0c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e08:	3301      	adds	r3, #1
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009e0c:	4a6a      	ldr	r2, [pc, #424]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	401a      	ands	r2, r3
 8009e18:	4b62      	ldr	r3, [pc, #392]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0f1      	beq.n	8009e06 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009e22:	4a65      	ldr	r2, [pc, #404]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	401a      	ands	r2, r3
 8009e2e:	4b5d      	ldr	r3, [pc, #372]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4013      	ands	r3, r2
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009e36:	4a60      	ldr	r2, [pc, #384]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009e48:	4a5b      	ldr	r2, [pc, #364]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	4413      	add	r3, r2
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009e56:	4a58      	ldr	r2, [pc, #352]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	4013      	ands	r3, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f9b3 	bl	800a1d0 <SEQ_BitPosition>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b53      	ldr	r3, [pc, #332]	; (8009fbc <UTIL_SEQ_Run+0x1f0>)
 8009e70:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009e72:	4a51      	ldr	r2, [pc, #324]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e76:	00db      	lsls	r3, r3, #3
 8009e78:	4413      	add	r3, r2
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b4f      	ldr	r3, [pc, #316]	; (8009fbc <UTIL_SEQ_Run+0x1f0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2101      	movs	r1, #1
 8009e82:	fa01 f303 	lsl.w	r3, r1, r3
 8009e86:	43db      	mvns	r3, r3
 8009e88:	401a      	ands	r2, r3
 8009e8a:	494b      	ldr	r1, [pc, #300]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	440b      	add	r3, r1
 8009e92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e94:	f3ef 8310 	mrs	r3, PRIMASK
 8009e98:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e9a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009e9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e9e:	b672      	cpsid	i
}
 8009ea0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009ea2:	4b46      	ldr	r3, [pc, #280]	; (8009fbc <UTIL_SEQ_Run+0x1f0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	43da      	mvns	r2, r3
 8009eae:	4b3e      	ldr	r3, [pc, #248]	; (8009fa8 <UTIL_SEQ_Run+0x1dc>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	4a3c      	ldr	r2, [pc, #240]	; (8009fa8 <UTIL_SEQ_Run+0x1dc>)
 8009eb6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009eb8:	2302      	movs	r3, #2
 8009eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ebc:	e013      	b.n	8009ee6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	4a3d      	ldr	r2, [pc, #244]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009ec4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009ec8:	4b3c      	ldr	r3, [pc, #240]	; (8009fbc <UTIL_SEQ_Run+0x1f0>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed2:	43da      	mvns	r2, r3
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	400a      	ands	r2, r1
 8009eda:	4937      	ldr	r1, [pc, #220]	; (8009fb8 <UTIL_SEQ_Run+0x1ec>)
 8009edc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e8      	bne.n	8009ebe <UTIL_SEQ_Run+0xf2>
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f383 8810 	msr	PRIMASK, r3
}
 8009ef6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009ef8:	4b30      	ldr	r3, [pc, #192]	; (8009fbc <UTIL_SEQ_Run+0x1f0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a30      	ldr	r2, [pc, #192]	; (8009fc0 <UTIL_SEQ_Run+0x1f4>)
 8009efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f02:	4798      	blx	r3

    local_taskset = TaskSet;
 8009f04:	4b28      	ldr	r3, [pc, #160]	; (8009fa8 <UTIL_SEQ_Run+0x1dc>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009f0a:	4b28      	ldr	r3, [pc, #160]	; (8009fac <UTIL_SEQ_Run+0x1e0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009f10:	4b27      	ldr	r3, [pc, #156]	; (8009fb0 <UTIL_SEQ_Run+0x1e4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009f16:	4b27      	ldr	r3, [pc, #156]	; (8009fb4 <UTIL_SEQ_Run+0x1e8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	401a      	ands	r2, r3
 8009f22:	4b20      	ldr	r3, [pc, #128]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <UTIL_SEQ_Run+0x16c>
 8009f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	4013      	ands	r3, r2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f43f af64 	beq.w	8009e00 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009f38:	4b20      	ldr	r3, [pc, #128]	; (8009fbc <UTIL_SEQ_Run+0x1f0>)
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009f40:	f000 f938 	bl	800a1b4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f44:	f3ef 8310 	mrs	r3, PRIMASK
 8009f48:	613b      	str	r3, [r7, #16]
  return(result);
 8009f4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009f4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f4e:	b672      	cpsid	i
}
 8009f50:	bf00      	nop
  local_taskset = TaskSet;
 8009f52:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <UTIL_SEQ_Run+0x1dc>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009f58:	4b14      	ldr	r3, [pc, #80]	; (8009fac <UTIL_SEQ_Run+0x1e0>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009f5e:	4b14      	ldr	r3, [pc, #80]	; (8009fb0 <UTIL_SEQ_Run+0x1e4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	401a      	ands	r2, r3
 8009f6a:	4b0e      	ldr	r3, [pc, #56]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d107      	bne.n	8009f84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009f74:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <UTIL_SEQ_Run+0x1e8>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009f80:	f7f6 fc73 	bl	800086a <UTIL_SEQ_Idle>
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f383 8810 	msr	PRIMASK, r3
}
 8009f8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009f90:	f000 f917 	bl	800a1c2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009f94:	4a03      	ldr	r2, [pc, #12]	; (8009fa4 <UTIL_SEQ_Run+0x1d8>)
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	6013      	str	r3, [r2, #0]

  return;
 8009f9a:	bf00      	nop
}
 8009f9c:	3740      	adds	r7, #64	; 0x40
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000034 	.word	0x20000034
 8009fa8:	200005e0 	.word	0x200005e0
 8009fac:	200005e4 	.word	0x200005e4
 8009fb0:	20000030 	.word	0x20000030
 8009fb4:	200005e8 	.word	0x200005e8
 8009fb8:	20000670 	.word	0x20000670
 8009fbc:	200005ec 	.word	0x200005ec
 8009fc0:	200005f0 	.word	0x200005f0

08009fc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8009fd6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fda:	b672      	cpsid	i
}
 8009fdc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 f8f6 	bl	800a1d0 <SEQ_BitPosition>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4a06      	ldr	r2, [pc, #24]	; (800a004 <UTIL_SEQ_RegTask+0x40>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	f383 8810 	msr	PRIMASK, r3
}
 8009ffa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009ffc:	bf00      	nop
}
 8009ffe:	3720      	adds	r7, #32
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	200005f0 	.word	0x200005f0

0800a008 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a012:	f3ef 8310 	mrs	r3, PRIMASK
 800a016:	60fb      	str	r3, [r7, #12]
  return(result);
 800a018:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a01a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a01c:	b672      	cpsid	i
}
 800a01e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a020:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <UTIL_SEQ_SetTask+0x50>)
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4313      	orrs	r3, r2
 800a028:	4a0b      	ldr	r2, [pc, #44]	; (800a058 <UTIL_SEQ_SetTask+0x50>)
 800a02a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a02c:	4a0b      	ldr	r2, [pc, #44]	; (800a05c <UTIL_SEQ_SetTask+0x54>)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	431a      	orrs	r2, r3
 800a038:	4908      	ldr	r1, [pc, #32]	; (800a05c <UTIL_SEQ_SetTask+0x54>)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f383 8810 	msr	PRIMASK, r3
}
 800a04a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a04c:	bf00      	nop
}
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	200005e0 	.word	0x200005e0
 800a05c:	20000670 	.word	0x20000670

0800a060 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a068:	f3ef 8310 	mrs	r3, PRIMASK
 800a06c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a06e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a072:	b672      	cpsid	i
}
 800a074:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	43da      	mvns	r2, r3
 800a07a:	4b08      	ldr	r3, [pc, #32]	; (800a09c <UTIL_SEQ_PauseTask+0x3c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4013      	ands	r3, r2
 800a080:	4a06      	ldr	r2, [pc, #24]	; (800a09c <UTIL_SEQ_PauseTask+0x3c>)
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f383 8810 	msr	PRIMASK, r3
}
 800a08e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a090:	bf00      	nop
}
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	20000030 	.word	0x20000030

0800a0a0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a0b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b2:	b672      	cpsid	i
}
 800a0b4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a0b6:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <UTIL_SEQ_ResumeTask+0x3c>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	4a07      	ldr	r2, [pc, #28]	; (800a0dc <UTIL_SEQ_ResumeTask+0x3c>)
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f383 8810 	msr	PRIMASK, r3
}
 800a0cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a0ce:	bf00      	nop
}
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000030 	.word	0x20000030

0800a0e0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a0f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0f2:	b672      	cpsid	i
}
 800a0f4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a0f6:	4b09      	ldr	r3, [pc, #36]	; (800a11c <UTIL_SEQ_SetEvt+0x3c>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	4a07      	ldr	r2, [pc, #28]	; (800a11c <UTIL_SEQ_SetEvt+0x3c>)
 800a100:	6013      	str	r3, [r2, #0]
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f383 8810 	msr	PRIMASK, r3
}
 800a10c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a10e:	bf00      	nop
}
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	200005e4 	.word	0x200005e4

0800a120 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a128:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <UTIL_SEQ_WaitEvt+0x88>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a12e:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <UTIL_SEQ_WaitEvt+0x88>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d102      	bne.n	800a13e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a138:	2300      	movs	r3, #0
 800a13a:	61fb      	str	r3, [r7, #28]
 800a13c:	e005      	b.n	800a14a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a13e:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <UTIL_SEQ_WaitEvt+0x88>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2201      	movs	r2, #1
 800a144:	fa02 f303 	lsl.w	r3, r2, r3
 800a148:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a14a:	4b18      	ldr	r3, [pc, #96]	; (800a1ac <UTIL_SEQ_WaitEvt+0x8c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a150:	4a16      	ldr	r2, [pc, #88]	; (800a1ac <UTIL_SEQ_WaitEvt+0x8c>)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a156:	e003      	b.n	800a160 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	69f8      	ldr	r0, [r7, #28]
 800a15c:	f7f6 fb8b 	bl	8000876 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a160:	4b13      	ldr	r3, [pc, #76]	; (800a1b0 <UTIL_SEQ_WaitEvt+0x90>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4013      	ands	r3, r2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d0f5      	beq.n	800a158 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a16c:	4a0e      	ldr	r2, [pc, #56]	; (800a1a8 <UTIL_SEQ_WaitEvt+0x88>)
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a172:	f3ef 8310 	mrs	r3, PRIMASK
 800a176:	60bb      	str	r3, [r7, #8]
  return(result);
 800a178:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a17a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a17c:	b672      	cpsid	i
}
 800a17e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	43da      	mvns	r2, r3
 800a184:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <UTIL_SEQ_WaitEvt+0x90>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4013      	ands	r3, r2
 800a18a:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <UTIL_SEQ_WaitEvt+0x90>)
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f383 8810 	msr	PRIMASK, r3
}
 800a198:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a19a:	4a04      	ldr	r2, [pc, #16]	; (800a1ac <UTIL_SEQ_WaitEvt+0x8c>)
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	6013      	str	r3, [r2, #0]
  return;
 800a1a0:	bf00      	nop
}
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	200005ec 	.word	0x200005ec
 800a1ac:	200005e8 	.word	0x200005e8
 800a1b0:	200005e4 	.word	0x200005e4

0800a1b4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a1b8:	bf00      	nop
}
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a1c6:	bf00      	nop
}
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d104      	bne.n	800a1f4 <SEQ_BitPosition+0x24>
 800a1ea:	2310      	movs	r3, #16
 800a1ec:	73fb      	strb	r3, [r7, #15]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	041b      	lsls	r3, r3, #16
 800a1f2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d105      	bne.n	800a20a <SEQ_BitPosition+0x3a>
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	3308      	adds	r3, #8
 800a202:	73fb      	strb	r3, [r7, #15]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d105      	bne.n	800a220 <SEQ_BitPosition+0x50>
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	3304      	adds	r3, #4
 800a218:	73fb      	strb	r3, [r7, #15]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	011b      	lsls	r3, r3, #4
 800a21e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	0f1b      	lsrs	r3, r3, #28
 800a224:	4a07      	ldr	r2, [pc, #28]	; (800a244 <SEQ_BitPosition+0x74>)
 800a226:	5cd2      	ldrb	r2, [r2, r3]
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4413      	add	r3, r2
 800a22c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	f1c3 031f 	rsb	r3, r3, #31
 800a234:	b2db      	uxtb	r3, r3
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	0800a574 	.word	0x0800a574

0800a248 <__libc_init_array>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4d0d      	ldr	r5, [pc, #52]	; (800a280 <__libc_init_array+0x38>)
 800a24c:	4c0d      	ldr	r4, [pc, #52]	; (800a284 <__libc_init_array+0x3c>)
 800a24e:	1b64      	subs	r4, r4, r5
 800a250:	10a4      	asrs	r4, r4, #2
 800a252:	2600      	movs	r6, #0
 800a254:	42a6      	cmp	r6, r4
 800a256:	d109      	bne.n	800a26c <__libc_init_array+0x24>
 800a258:	4d0b      	ldr	r5, [pc, #44]	; (800a288 <__libc_init_array+0x40>)
 800a25a:	4c0c      	ldr	r4, [pc, #48]	; (800a28c <__libc_init_array+0x44>)
 800a25c:	f000 f82e 	bl	800a2bc <_init>
 800a260:	1b64      	subs	r4, r4, r5
 800a262:	10a4      	asrs	r4, r4, #2
 800a264:	2600      	movs	r6, #0
 800a266:	42a6      	cmp	r6, r4
 800a268:	d105      	bne.n	800a276 <__libc_init_array+0x2e>
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a270:	4798      	blx	r3
 800a272:	3601      	adds	r6, #1
 800a274:	e7ee      	b.n	800a254 <__libc_init_array+0xc>
 800a276:	f855 3b04 	ldr.w	r3, [r5], #4
 800a27a:	4798      	blx	r3
 800a27c:	3601      	adds	r6, #1
 800a27e:	e7f2      	b.n	800a266 <__libc_init_array+0x1e>
 800a280:	0800a584 	.word	0x0800a584
 800a284:	0800a584 	.word	0x0800a584
 800a288:	0800a584 	.word	0x0800a584
 800a28c:	0800a588 	.word	0x0800a588

0800a290 <memcpy>:
 800a290:	440a      	add	r2, r1
 800a292:	4291      	cmp	r1, r2
 800a294:	f100 33ff 	add.w	r3, r0, #4294967295
 800a298:	d100      	bne.n	800a29c <memcpy+0xc>
 800a29a:	4770      	bx	lr
 800a29c:	b510      	push	{r4, lr}
 800a29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2a6:	4291      	cmp	r1, r2
 800a2a8:	d1f9      	bne.n	800a29e <memcpy+0xe>
 800a2aa:	bd10      	pop	{r4, pc}

0800a2ac <memset>:
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d100      	bne.n	800a2b6 <memset+0xa>
 800a2b4:	4770      	bx	lr
 800a2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ba:	e7f9      	b.n	800a2b0 <memset+0x4>

0800a2bc <_init>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	bf00      	nop
 800a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c2:	bc08      	pop	{r3}
 800a2c4:	469e      	mov	lr, r3
 800a2c6:	4770      	bx	lr

0800a2c8 <_fini>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr
